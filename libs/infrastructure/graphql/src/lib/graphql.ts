import { gql } from 'apollo-angular';
import { Injectable } from '@angular/core';
import * as Apollo from 'apollo-angular';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  date: any;
  jsonb: any;
  numeric: any;
  timestamp: any;
  timestamptz: any;
  uuid: any;
};




/** Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'. */
export type Boolean_Comparison_Exp = {
  _eq?: Maybe<Scalars['Boolean']>;
  _gt?: Maybe<Scalars['Boolean']>;
  _gte?: Maybe<Scalars['Boolean']>;
  _in?: Maybe<Array<Scalars['Boolean']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['Boolean']>;
  _lte?: Maybe<Scalars['Boolean']>;
  _neq?: Maybe<Scalars['Boolean']>;
  _nin?: Maybe<Array<Scalars['Boolean']>>;
};

/** Boolean expression to compare columns of type "Float". All fields are combined with logical 'AND'. */
export type Float_Comparison_Exp = {
  _eq?: Maybe<Scalars['Float']>;
  _gt?: Maybe<Scalars['Float']>;
  _gte?: Maybe<Scalars['Float']>;
  _in?: Maybe<Array<Scalars['Float']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['Float']>;
  _lte?: Maybe<Scalars['Float']>;
  _neq?: Maybe<Scalars['Float']>;
  _nin?: Maybe<Array<Scalars['Float']>>;
};

export type InsertItemTranfserOutput = {
  __typename?: 'InsertItemTranfserOutput';
  date?: Maybe<Scalars['date']>;
  id: Scalars['uuid'];
  quantity?: Maybe<Scalars['Float']>;
  status?: Maybe<Scalars['String']>;
};

/** Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'. */
export type Int_Comparison_Exp = {
  _eq?: Maybe<Scalars['Int']>;
  _gt?: Maybe<Scalars['Int']>;
  _gte?: Maybe<Scalars['Int']>;
  _in?: Maybe<Array<Scalars['Int']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['Int']>;
  _lte?: Maybe<Scalars['Int']>;
  _neq?: Maybe<Scalars['Int']>;
  _nin?: Maybe<Array<Scalars['Int']>>;
};

export type LoginInput = {
  password: Scalars['String'];
  username: Scalars['String'];
};

export type LoginOutput = {
  __typename?: 'LoginOutput';
  accessToken: Scalars['String'];
};

export type SignUpOutput = {
  __typename?: 'SignUpOutput';
  CIN?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  email: Scalars['String'];
  firstname?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  lastname?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
};

/** Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'. */
export type String_Comparison_Exp = {
  _eq?: Maybe<Scalars['String']>;
  _gt?: Maybe<Scalars['String']>;
  _gte?: Maybe<Scalars['String']>;
  /** does the column match the given case-insensitive pattern */
  _ilike?: Maybe<Scalars['String']>;
  _in?: Maybe<Array<Scalars['String']>>;
  /** does the column match the given POSIX regular expression, case insensitive */
  _iregex?: Maybe<Scalars['String']>;
  _is_null?: Maybe<Scalars['Boolean']>;
  /** does the column match the given pattern */
  _like?: Maybe<Scalars['String']>;
  _lt?: Maybe<Scalars['String']>;
  _lte?: Maybe<Scalars['String']>;
  _neq?: Maybe<Scalars['String']>;
  /** does the column NOT match the given case-insensitive pattern */
  _nilike?: Maybe<Scalars['String']>;
  _nin?: Maybe<Array<Scalars['String']>>;
  /** does the column NOT match the given POSIX regular expression, case insensitive */
  _niregex?: Maybe<Scalars['String']>;
  /** does the column NOT match the given pattern */
  _nlike?: Maybe<Scalars['String']>;
  /** does the column NOT match the given POSIX regular expression, case sensitive */
  _nregex?: Maybe<Scalars['String']>;
  /** does the column NOT match the given SQL regular expression */
  _nsimilar?: Maybe<Scalars['String']>;
  /** does the column match the given POSIX regular expression, case sensitive */
  _regex?: Maybe<Scalars['String']>;
  /** does the column match the given SQL regular expression */
  _similar?: Maybe<Scalars['String']>;
};

/** columns and relationships of "cash_register.cash_box" */
export type Cash_Register_Cash_Box = {
  __typename?: 'cash_register_cash_box';
  balance: Scalars['numeric'];
  createdAt?: Maybe<Scalars['timestamptz']>;
  /** An array relationship */
  expenses: Array<Cash_Register_Expenses>;
  /** An aggregate relationship */
  expenses_aggregate: Cash_Register_Expenses_Aggregate;
  id: Scalars['Int'];
  name: Scalars['String'];
  /** An object relationship */
  salepoint: Management_SalesPoint;
  salepoint_id: Scalars['uuid'];
  updatedAt?: Maybe<Scalars['timestamptz']>;
};


/** columns and relationships of "cash_register.cash_box" */
export type Cash_Register_Cash_BoxExpensesArgs = {
  distinct_on?: Maybe<Array<Cash_Register_Expenses_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Cash_Register_Expenses_Order_By>>;
  where?: Maybe<Cash_Register_Expenses_Bool_Exp>;
};


/** columns and relationships of "cash_register.cash_box" */
export type Cash_Register_Cash_BoxExpenses_AggregateArgs = {
  distinct_on?: Maybe<Array<Cash_Register_Expenses_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Cash_Register_Expenses_Order_By>>;
  where?: Maybe<Cash_Register_Expenses_Bool_Exp>;
};

/** aggregated selection of "cash_register.cash_box" */
export type Cash_Register_Cash_Box_Aggregate = {
  __typename?: 'cash_register_cash_box_aggregate';
  aggregate?: Maybe<Cash_Register_Cash_Box_Aggregate_Fields>;
  nodes: Array<Cash_Register_Cash_Box>;
};

/** aggregate fields of "cash_register.cash_box" */
export type Cash_Register_Cash_Box_Aggregate_Fields = {
  __typename?: 'cash_register_cash_box_aggregate_fields';
  avg?: Maybe<Cash_Register_Cash_Box_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Cash_Register_Cash_Box_Max_Fields>;
  min?: Maybe<Cash_Register_Cash_Box_Min_Fields>;
  stddev?: Maybe<Cash_Register_Cash_Box_Stddev_Fields>;
  stddev_pop?: Maybe<Cash_Register_Cash_Box_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Cash_Register_Cash_Box_Stddev_Samp_Fields>;
  sum?: Maybe<Cash_Register_Cash_Box_Sum_Fields>;
  var_pop?: Maybe<Cash_Register_Cash_Box_Var_Pop_Fields>;
  var_samp?: Maybe<Cash_Register_Cash_Box_Var_Samp_Fields>;
  variance?: Maybe<Cash_Register_Cash_Box_Variance_Fields>;
};


/** aggregate fields of "cash_register.cash_box" */
export type Cash_Register_Cash_Box_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Cash_Register_Cash_Box_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "cash_register.cash_box" */
export type Cash_Register_Cash_Box_Aggregate_Order_By = {
  avg?: Maybe<Cash_Register_Cash_Box_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Cash_Register_Cash_Box_Max_Order_By>;
  min?: Maybe<Cash_Register_Cash_Box_Min_Order_By>;
  stddev?: Maybe<Cash_Register_Cash_Box_Stddev_Order_By>;
  stddev_pop?: Maybe<Cash_Register_Cash_Box_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Cash_Register_Cash_Box_Stddev_Samp_Order_By>;
  sum?: Maybe<Cash_Register_Cash_Box_Sum_Order_By>;
  var_pop?: Maybe<Cash_Register_Cash_Box_Var_Pop_Order_By>;
  var_samp?: Maybe<Cash_Register_Cash_Box_Var_Samp_Order_By>;
  variance?: Maybe<Cash_Register_Cash_Box_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "cash_register.cash_box" */
export type Cash_Register_Cash_Box_Arr_Rel_Insert_Input = {
  data: Array<Cash_Register_Cash_Box_Insert_Input>;
  /** on conflict condition */
  on_conflict?: Maybe<Cash_Register_Cash_Box_On_Conflict>;
};

/** aggregate avg on columns */
export type Cash_Register_Cash_Box_Avg_Fields = {
  __typename?: 'cash_register_cash_box_avg_fields';
  balance?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "cash_register.cash_box" */
export type Cash_Register_Cash_Box_Avg_Order_By = {
  balance?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "cash_register.cash_box". All fields are combined with a logical 'AND'. */
export type Cash_Register_Cash_Box_Bool_Exp = {
  _and?: Maybe<Array<Cash_Register_Cash_Box_Bool_Exp>>;
  _not?: Maybe<Cash_Register_Cash_Box_Bool_Exp>;
  _or?: Maybe<Array<Cash_Register_Cash_Box_Bool_Exp>>;
  balance?: Maybe<Numeric_Comparison_Exp>;
  createdAt?: Maybe<Timestamptz_Comparison_Exp>;
  expenses?: Maybe<Cash_Register_Expenses_Bool_Exp>;
  id?: Maybe<Int_Comparison_Exp>;
  name?: Maybe<String_Comparison_Exp>;
  salepoint?: Maybe<Management_SalesPoint_Bool_Exp>;
  salepoint_id?: Maybe<Uuid_Comparison_Exp>;
  updatedAt?: Maybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "cash_register.cash_box" */
export enum Cash_Register_Cash_Box_Constraint {
  /** unique or primary key constraint */
  CashBoxPkey = 'cash_box_pkey'
}

/** input type for incrementing numeric columns in table "cash_register.cash_box" */
export type Cash_Register_Cash_Box_Inc_Input = {
  balance?: Maybe<Scalars['numeric']>;
  id?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "cash_register.cash_box" */
export type Cash_Register_Cash_Box_Insert_Input = {
  balance?: Maybe<Scalars['numeric']>;
  createdAt?: Maybe<Scalars['timestamptz']>;
  expenses?: Maybe<Cash_Register_Expenses_Arr_Rel_Insert_Input>;
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  salepoint?: Maybe<Management_SalesPoint_Obj_Rel_Insert_Input>;
  salepoint_id?: Maybe<Scalars['uuid']>;
  updatedAt?: Maybe<Scalars['timestamptz']>;
};

/** aggregate max on columns */
export type Cash_Register_Cash_Box_Max_Fields = {
  __typename?: 'cash_register_cash_box_max_fields';
  balance?: Maybe<Scalars['numeric']>;
  createdAt?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  salepoint_id?: Maybe<Scalars['uuid']>;
  updatedAt?: Maybe<Scalars['timestamptz']>;
};

/** order by max() on columns of table "cash_register.cash_box" */
export type Cash_Register_Cash_Box_Max_Order_By = {
  balance?: Maybe<Order_By>;
  createdAt?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  salepoint_id?: Maybe<Order_By>;
  updatedAt?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Cash_Register_Cash_Box_Min_Fields = {
  __typename?: 'cash_register_cash_box_min_fields';
  balance?: Maybe<Scalars['numeric']>;
  createdAt?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  salepoint_id?: Maybe<Scalars['uuid']>;
  updatedAt?: Maybe<Scalars['timestamptz']>;
};

/** order by min() on columns of table "cash_register.cash_box" */
export type Cash_Register_Cash_Box_Min_Order_By = {
  balance?: Maybe<Order_By>;
  createdAt?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  salepoint_id?: Maybe<Order_By>;
  updatedAt?: Maybe<Order_By>;
};

/** response of any mutation on the table "cash_register.cash_box" */
export type Cash_Register_Cash_Box_Mutation_Response = {
  __typename?: 'cash_register_cash_box_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Cash_Register_Cash_Box>;
};

/** input type for inserting object relation for remote table "cash_register.cash_box" */
export type Cash_Register_Cash_Box_Obj_Rel_Insert_Input = {
  data: Cash_Register_Cash_Box_Insert_Input;
  /** on conflict condition */
  on_conflict?: Maybe<Cash_Register_Cash_Box_On_Conflict>;
};

/** on conflict condition type for table "cash_register.cash_box" */
export type Cash_Register_Cash_Box_On_Conflict = {
  constraint: Cash_Register_Cash_Box_Constraint;
  update_columns?: Array<Cash_Register_Cash_Box_Update_Column>;
  where?: Maybe<Cash_Register_Cash_Box_Bool_Exp>;
};

/** Ordering options when selecting data from "cash_register.cash_box". */
export type Cash_Register_Cash_Box_Order_By = {
  balance?: Maybe<Order_By>;
  createdAt?: Maybe<Order_By>;
  expenses_aggregate?: Maybe<Cash_Register_Expenses_Aggregate_Order_By>;
  id?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  salepoint?: Maybe<Management_SalesPoint_Order_By>;
  salepoint_id?: Maybe<Order_By>;
  updatedAt?: Maybe<Order_By>;
};

/** primary key columns input for table: cash_register_cash_box */
export type Cash_Register_Cash_Box_Pk_Columns_Input = {
  id: Scalars['Int'];
};

/** select columns of table "cash_register.cash_box" */
export enum Cash_Register_Cash_Box_Select_Column {
  /** column name */
  Balance = 'balance',
  /** column name */
  CreatedAt = 'createdAt',
  /** column name */
  Id = 'id',
  /** column name */
  Name = 'name',
  /** column name */
  SalepointId = 'salepoint_id',
  /** column name */
  UpdatedAt = 'updatedAt'
}

/** input type for updating data in table "cash_register.cash_box" */
export type Cash_Register_Cash_Box_Set_Input = {
  balance?: Maybe<Scalars['numeric']>;
  createdAt?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  salepoint_id?: Maybe<Scalars['uuid']>;
  updatedAt?: Maybe<Scalars['timestamptz']>;
};

/** aggregate stddev on columns */
export type Cash_Register_Cash_Box_Stddev_Fields = {
  __typename?: 'cash_register_cash_box_stddev_fields';
  balance?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "cash_register.cash_box" */
export type Cash_Register_Cash_Box_Stddev_Order_By = {
  balance?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Cash_Register_Cash_Box_Stddev_Pop_Fields = {
  __typename?: 'cash_register_cash_box_stddev_pop_fields';
  balance?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "cash_register.cash_box" */
export type Cash_Register_Cash_Box_Stddev_Pop_Order_By = {
  balance?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Cash_Register_Cash_Box_Stddev_Samp_Fields = {
  __typename?: 'cash_register_cash_box_stddev_samp_fields';
  balance?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "cash_register.cash_box" */
export type Cash_Register_Cash_Box_Stddev_Samp_Order_By = {
  balance?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Cash_Register_Cash_Box_Sum_Fields = {
  __typename?: 'cash_register_cash_box_sum_fields';
  balance?: Maybe<Scalars['numeric']>;
  id?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "cash_register.cash_box" */
export type Cash_Register_Cash_Box_Sum_Order_By = {
  balance?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
};

/** update columns of table "cash_register.cash_box" */
export enum Cash_Register_Cash_Box_Update_Column {
  /** column name */
  Balance = 'balance',
  /** column name */
  CreatedAt = 'createdAt',
  /** column name */
  Id = 'id',
  /** column name */
  Name = 'name',
  /** column name */
  SalepointId = 'salepoint_id',
  /** column name */
  UpdatedAt = 'updatedAt'
}

/** aggregate var_pop on columns */
export type Cash_Register_Cash_Box_Var_Pop_Fields = {
  __typename?: 'cash_register_cash_box_var_pop_fields';
  balance?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "cash_register.cash_box" */
export type Cash_Register_Cash_Box_Var_Pop_Order_By = {
  balance?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Cash_Register_Cash_Box_Var_Samp_Fields = {
  __typename?: 'cash_register_cash_box_var_samp_fields';
  balance?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "cash_register.cash_box" */
export type Cash_Register_Cash_Box_Var_Samp_Order_By = {
  balance?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Cash_Register_Cash_Box_Variance_Fields = {
  __typename?: 'cash_register_cash_box_variance_fields';
  balance?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "cash_register.cash_box" */
export type Cash_Register_Cash_Box_Variance_Order_By = {
  balance?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
};

/** columns and relationships of "cash_register.expense_category" */
export type Cash_Register_Expense_Category = {
  __typename?: 'cash_register_expense_category';
  /** An array relationship */
  expenses: Array<Cash_Register_Expenses>;
  /** An aggregate relationship */
  expenses_aggregate: Cash_Register_Expenses_Aggregate;
  key: Scalars['String'];
  value: Scalars['String'];
};


/** columns and relationships of "cash_register.expense_category" */
export type Cash_Register_Expense_CategoryExpensesArgs = {
  distinct_on?: Maybe<Array<Cash_Register_Expenses_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Cash_Register_Expenses_Order_By>>;
  where?: Maybe<Cash_Register_Expenses_Bool_Exp>;
};


/** columns and relationships of "cash_register.expense_category" */
export type Cash_Register_Expense_CategoryExpenses_AggregateArgs = {
  distinct_on?: Maybe<Array<Cash_Register_Expenses_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Cash_Register_Expenses_Order_By>>;
  where?: Maybe<Cash_Register_Expenses_Bool_Exp>;
};

/** aggregated selection of "cash_register.expense_category" */
export type Cash_Register_Expense_Category_Aggregate = {
  __typename?: 'cash_register_expense_category_aggregate';
  aggregate?: Maybe<Cash_Register_Expense_Category_Aggregate_Fields>;
  nodes: Array<Cash_Register_Expense_Category>;
};

/** aggregate fields of "cash_register.expense_category" */
export type Cash_Register_Expense_Category_Aggregate_Fields = {
  __typename?: 'cash_register_expense_category_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Cash_Register_Expense_Category_Max_Fields>;
  min?: Maybe<Cash_Register_Expense_Category_Min_Fields>;
};


/** aggregate fields of "cash_register.expense_category" */
export type Cash_Register_Expense_Category_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Cash_Register_Expense_Category_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** Boolean expression to filter rows from the table "cash_register.expense_category". All fields are combined with a logical 'AND'. */
export type Cash_Register_Expense_Category_Bool_Exp = {
  _and?: Maybe<Array<Cash_Register_Expense_Category_Bool_Exp>>;
  _not?: Maybe<Cash_Register_Expense_Category_Bool_Exp>;
  _or?: Maybe<Array<Cash_Register_Expense_Category_Bool_Exp>>;
  expenses?: Maybe<Cash_Register_Expenses_Bool_Exp>;
  key?: Maybe<String_Comparison_Exp>;
  value?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "cash_register.expense_category" */
export enum Cash_Register_Expense_Category_Constraint {
  /** unique or primary key constraint */
  ExpenseCategoryPkey = 'expense_category_pkey',
  /** unique or primary key constraint */
  ExpenseCategoryValueKey = 'expense_category_value_key'
}

/** input type for inserting data into table "cash_register.expense_category" */
export type Cash_Register_Expense_Category_Insert_Input = {
  expenses?: Maybe<Cash_Register_Expenses_Arr_Rel_Insert_Input>;
  key?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Cash_Register_Expense_Category_Max_Fields = {
  __typename?: 'cash_register_expense_category_max_fields';
  key?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type Cash_Register_Expense_Category_Min_Fields = {
  __typename?: 'cash_register_expense_category_min_fields';
  key?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/** response of any mutation on the table "cash_register.expense_category" */
export type Cash_Register_Expense_Category_Mutation_Response = {
  __typename?: 'cash_register_expense_category_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Cash_Register_Expense_Category>;
};

/** input type for inserting object relation for remote table "cash_register.expense_category" */
export type Cash_Register_Expense_Category_Obj_Rel_Insert_Input = {
  data: Cash_Register_Expense_Category_Insert_Input;
  /** on conflict condition */
  on_conflict?: Maybe<Cash_Register_Expense_Category_On_Conflict>;
};

/** on conflict condition type for table "cash_register.expense_category" */
export type Cash_Register_Expense_Category_On_Conflict = {
  constraint: Cash_Register_Expense_Category_Constraint;
  update_columns?: Array<Cash_Register_Expense_Category_Update_Column>;
  where?: Maybe<Cash_Register_Expense_Category_Bool_Exp>;
};

/** Ordering options when selecting data from "cash_register.expense_category". */
export type Cash_Register_Expense_Category_Order_By = {
  expenses_aggregate?: Maybe<Cash_Register_Expenses_Aggregate_Order_By>;
  key?: Maybe<Order_By>;
  value?: Maybe<Order_By>;
};

/** primary key columns input for table: cash_register_expense_category */
export type Cash_Register_Expense_Category_Pk_Columns_Input = {
  key: Scalars['String'];
};

/** select columns of table "cash_register.expense_category" */
export enum Cash_Register_Expense_Category_Select_Column {
  /** column name */
  Key = 'key',
  /** column name */
  Value = 'value'
}

/** input type for updating data in table "cash_register.expense_category" */
export type Cash_Register_Expense_Category_Set_Input = {
  key?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/** update columns of table "cash_register.expense_category" */
export enum Cash_Register_Expense_Category_Update_Column {
  /** column name */
  Key = 'key',
  /** column name */
  Value = 'value'
}

/** columns and relationships of "cash_register.expenses" */
export type Cash_Register_Expenses = {
  __typename?: 'cash_register_expenses';
  amountSpent: Scalars['numeric'];
  /** An object relationship */
  cash_box: Cash_Register_Cash_Box;
  cash_box_id: Scalars['Int'];
  category: Scalars['String'];
  createdAt?: Maybe<Scalars['timestamptz']>;
  date?: Maybe<Scalars['timestamptz']>;
  /** An object relationship */
  employee?: Maybe<Management_UserProfile>;
  employee_id?: Maybe<Scalars['String']>;
  /** An object relationship */
  expense_category: Cash_Register_Expense_Category;
  id: Scalars['Int'];
  name: Scalars['String'];
  note?: Maybe<Scalars['String']>;
  repeated: Scalars['Int'];
  updatedAt?: Maybe<Scalars['timestamptz']>;
};

/** aggregated selection of "cash_register.expenses" */
export type Cash_Register_Expenses_Aggregate = {
  __typename?: 'cash_register_expenses_aggregate';
  aggregate?: Maybe<Cash_Register_Expenses_Aggregate_Fields>;
  nodes: Array<Cash_Register_Expenses>;
};

/** aggregate fields of "cash_register.expenses" */
export type Cash_Register_Expenses_Aggregate_Fields = {
  __typename?: 'cash_register_expenses_aggregate_fields';
  avg?: Maybe<Cash_Register_Expenses_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Cash_Register_Expenses_Max_Fields>;
  min?: Maybe<Cash_Register_Expenses_Min_Fields>;
  stddev?: Maybe<Cash_Register_Expenses_Stddev_Fields>;
  stddev_pop?: Maybe<Cash_Register_Expenses_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Cash_Register_Expenses_Stddev_Samp_Fields>;
  sum?: Maybe<Cash_Register_Expenses_Sum_Fields>;
  var_pop?: Maybe<Cash_Register_Expenses_Var_Pop_Fields>;
  var_samp?: Maybe<Cash_Register_Expenses_Var_Samp_Fields>;
  variance?: Maybe<Cash_Register_Expenses_Variance_Fields>;
};


/** aggregate fields of "cash_register.expenses" */
export type Cash_Register_Expenses_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Cash_Register_Expenses_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "cash_register.expenses" */
export type Cash_Register_Expenses_Aggregate_Order_By = {
  avg?: Maybe<Cash_Register_Expenses_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Cash_Register_Expenses_Max_Order_By>;
  min?: Maybe<Cash_Register_Expenses_Min_Order_By>;
  stddev?: Maybe<Cash_Register_Expenses_Stddev_Order_By>;
  stddev_pop?: Maybe<Cash_Register_Expenses_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Cash_Register_Expenses_Stddev_Samp_Order_By>;
  sum?: Maybe<Cash_Register_Expenses_Sum_Order_By>;
  var_pop?: Maybe<Cash_Register_Expenses_Var_Pop_Order_By>;
  var_samp?: Maybe<Cash_Register_Expenses_Var_Samp_Order_By>;
  variance?: Maybe<Cash_Register_Expenses_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "cash_register.expenses" */
export type Cash_Register_Expenses_Arr_Rel_Insert_Input = {
  data: Array<Cash_Register_Expenses_Insert_Input>;
  /** on conflict condition */
  on_conflict?: Maybe<Cash_Register_Expenses_On_Conflict>;
};

/** aggregate avg on columns */
export type Cash_Register_Expenses_Avg_Fields = {
  __typename?: 'cash_register_expenses_avg_fields';
  amountSpent?: Maybe<Scalars['Float']>;
  cash_box_id?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  repeated?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "cash_register.expenses" */
export type Cash_Register_Expenses_Avg_Order_By = {
  amountSpent?: Maybe<Order_By>;
  cash_box_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  repeated?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "cash_register.expenses". All fields are combined with a logical 'AND'. */
export type Cash_Register_Expenses_Bool_Exp = {
  _and?: Maybe<Array<Cash_Register_Expenses_Bool_Exp>>;
  _not?: Maybe<Cash_Register_Expenses_Bool_Exp>;
  _or?: Maybe<Array<Cash_Register_Expenses_Bool_Exp>>;
  amountSpent?: Maybe<Numeric_Comparison_Exp>;
  cash_box?: Maybe<Cash_Register_Cash_Box_Bool_Exp>;
  cash_box_id?: Maybe<Int_Comparison_Exp>;
  category?: Maybe<String_Comparison_Exp>;
  createdAt?: Maybe<Timestamptz_Comparison_Exp>;
  date?: Maybe<Timestamptz_Comparison_Exp>;
  employee?: Maybe<Management_UserProfile_Bool_Exp>;
  employee_id?: Maybe<String_Comparison_Exp>;
  expense_category?: Maybe<Cash_Register_Expense_Category_Bool_Exp>;
  id?: Maybe<Int_Comparison_Exp>;
  name?: Maybe<String_Comparison_Exp>;
  note?: Maybe<String_Comparison_Exp>;
  repeated?: Maybe<Int_Comparison_Exp>;
  updatedAt?: Maybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "cash_register.expenses" */
export enum Cash_Register_Expenses_Constraint {
  /** unique or primary key constraint */
  ExpensesPkey = 'expenses_pkey'
}

/** input type for incrementing numeric columns in table "cash_register.expenses" */
export type Cash_Register_Expenses_Inc_Input = {
  amountSpent?: Maybe<Scalars['numeric']>;
  cash_box_id?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['Int']>;
  repeated?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "cash_register.expenses" */
export type Cash_Register_Expenses_Insert_Input = {
  amountSpent?: Maybe<Scalars['numeric']>;
  cash_box?: Maybe<Cash_Register_Cash_Box_Obj_Rel_Insert_Input>;
  cash_box_id?: Maybe<Scalars['Int']>;
  category?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['timestamptz']>;
  date?: Maybe<Scalars['timestamptz']>;
  employee?: Maybe<Management_UserProfile_Obj_Rel_Insert_Input>;
  employee_id?: Maybe<Scalars['String']>;
  expense_category?: Maybe<Cash_Register_Expense_Category_Obj_Rel_Insert_Input>;
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  note?: Maybe<Scalars['String']>;
  repeated?: Maybe<Scalars['Int']>;
  updatedAt?: Maybe<Scalars['timestamptz']>;
};

/** aggregate max on columns */
export type Cash_Register_Expenses_Max_Fields = {
  __typename?: 'cash_register_expenses_max_fields';
  amountSpent?: Maybe<Scalars['numeric']>;
  cash_box_id?: Maybe<Scalars['Int']>;
  category?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['timestamptz']>;
  date?: Maybe<Scalars['timestamptz']>;
  employee_id?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  note?: Maybe<Scalars['String']>;
  repeated?: Maybe<Scalars['Int']>;
  updatedAt?: Maybe<Scalars['timestamptz']>;
};

/** order by max() on columns of table "cash_register.expenses" */
export type Cash_Register_Expenses_Max_Order_By = {
  amountSpent?: Maybe<Order_By>;
  cash_box_id?: Maybe<Order_By>;
  category?: Maybe<Order_By>;
  createdAt?: Maybe<Order_By>;
  date?: Maybe<Order_By>;
  employee_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  note?: Maybe<Order_By>;
  repeated?: Maybe<Order_By>;
  updatedAt?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Cash_Register_Expenses_Min_Fields = {
  __typename?: 'cash_register_expenses_min_fields';
  amountSpent?: Maybe<Scalars['numeric']>;
  cash_box_id?: Maybe<Scalars['Int']>;
  category?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['timestamptz']>;
  date?: Maybe<Scalars['timestamptz']>;
  employee_id?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  note?: Maybe<Scalars['String']>;
  repeated?: Maybe<Scalars['Int']>;
  updatedAt?: Maybe<Scalars['timestamptz']>;
};

/** order by min() on columns of table "cash_register.expenses" */
export type Cash_Register_Expenses_Min_Order_By = {
  amountSpent?: Maybe<Order_By>;
  cash_box_id?: Maybe<Order_By>;
  category?: Maybe<Order_By>;
  createdAt?: Maybe<Order_By>;
  date?: Maybe<Order_By>;
  employee_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  note?: Maybe<Order_By>;
  repeated?: Maybe<Order_By>;
  updatedAt?: Maybe<Order_By>;
};

/** response of any mutation on the table "cash_register.expenses" */
export type Cash_Register_Expenses_Mutation_Response = {
  __typename?: 'cash_register_expenses_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Cash_Register_Expenses>;
};

/** on conflict condition type for table "cash_register.expenses" */
export type Cash_Register_Expenses_On_Conflict = {
  constraint: Cash_Register_Expenses_Constraint;
  update_columns?: Array<Cash_Register_Expenses_Update_Column>;
  where?: Maybe<Cash_Register_Expenses_Bool_Exp>;
};

/** Ordering options when selecting data from "cash_register.expenses". */
export type Cash_Register_Expenses_Order_By = {
  amountSpent?: Maybe<Order_By>;
  cash_box?: Maybe<Cash_Register_Cash_Box_Order_By>;
  cash_box_id?: Maybe<Order_By>;
  category?: Maybe<Order_By>;
  createdAt?: Maybe<Order_By>;
  date?: Maybe<Order_By>;
  employee?: Maybe<Management_UserProfile_Order_By>;
  employee_id?: Maybe<Order_By>;
  expense_category?: Maybe<Cash_Register_Expense_Category_Order_By>;
  id?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  note?: Maybe<Order_By>;
  repeated?: Maybe<Order_By>;
  updatedAt?: Maybe<Order_By>;
};

/** primary key columns input for table: cash_register_expenses */
export type Cash_Register_Expenses_Pk_Columns_Input = {
  id: Scalars['Int'];
};

/** select columns of table "cash_register.expenses" */
export enum Cash_Register_Expenses_Select_Column {
  /** column name */
  AmountSpent = 'amountSpent',
  /** column name */
  CashBoxId = 'cash_box_id',
  /** column name */
  Category = 'category',
  /** column name */
  CreatedAt = 'createdAt',
  /** column name */
  Date = 'date',
  /** column name */
  EmployeeId = 'employee_id',
  /** column name */
  Id = 'id',
  /** column name */
  Name = 'name',
  /** column name */
  Note = 'note',
  /** column name */
  Repeated = 'repeated',
  /** column name */
  UpdatedAt = 'updatedAt'
}

/** input type for updating data in table "cash_register.expenses" */
export type Cash_Register_Expenses_Set_Input = {
  amountSpent?: Maybe<Scalars['numeric']>;
  cash_box_id?: Maybe<Scalars['Int']>;
  category?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['timestamptz']>;
  date?: Maybe<Scalars['timestamptz']>;
  employee_id?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  note?: Maybe<Scalars['String']>;
  repeated?: Maybe<Scalars['Int']>;
  updatedAt?: Maybe<Scalars['timestamptz']>;
};

/** aggregate stddev on columns */
export type Cash_Register_Expenses_Stddev_Fields = {
  __typename?: 'cash_register_expenses_stddev_fields';
  amountSpent?: Maybe<Scalars['Float']>;
  cash_box_id?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  repeated?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "cash_register.expenses" */
export type Cash_Register_Expenses_Stddev_Order_By = {
  amountSpent?: Maybe<Order_By>;
  cash_box_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  repeated?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Cash_Register_Expenses_Stddev_Pop_Fields = {
  __typename?: 'cash_register_expenses_stddev_pop_fields';
  amountSpent?: Maybe<Scalars['Float']>;
  cash_box_id?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  repeated?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "cash_register.expenses" */
export type Cash_Register_Expenses_Stddev_Pop_Order_By = {
  amountSpent?: Maybe<Order_By>;
  cash_box_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  repeated?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Cash_Register_Expenses_Stddev_Samp_Fields = {
  __typename?: 'cash_register_expenses_stddev_samp_fields';
  amountSpent?: Maybe<Scalars['Float']>;
  cash_box_id?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  repeated?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "cash_register.expenses" */
export type Cash_Register_Expenses_Stddev_Samp_Order_By = {
  amountSpent?: Maybe<Order_By>;
  cash_box_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  repeated?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Cash_Register_Expenses_Sum_Fields = {
  __typename?: 'cash_register_expenses_sum_fields';
  amountSpent?: Maybe<Scalars['numeric']>;
  cash_box_id?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['Int']>;
  repeated?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "cash_register.expenses" */
export type Cash_Register_Expenses_Sum_Order_By = {
  amountSpent?: Maybe<Order_By>;
  cash_box_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  repeated?: Maybe<Order_By>;
};

/** update columns of table "cash_register.expenses" */
export enum Cash_Register_Expenses_Update_Column {
  /** column name */
  AmountSpent = 'amountSpent',
  /** column name */
  CashBoxId = 'cash_box_id',
  /** column name */
  Category = 'category',
  /** column name */
  CreatedAt = 'createdAt',
  /** column name */
  Date = 'date',
  /** column name */
  EmployeeId = 'employee_id',
  /** column name */
  Id = 'id',
  /** column name */
  Name = 'name',
  /** column name */
  Note = 'note',
  /** column name */
  Repeated = 'repeated',
  /** column name */
  UpdatedAt = 'updatedAt'
}

/** aggregate var_pop on columns */
export type Cash_Register_Expenses_Var_Pop_Fields = {
  __typename?: 'cash_register_expenses_var_pop_fields';
  amountSpent?: Maybe<Scalars['Float']>;
  cash_box_id?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  repeated?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "cash_register.expenses" */
export type Cash_Register_Expenses_Var_Pop_Order_By = {
  amountSpent?: Maybe<Order_By>;
  cash_box_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  repeated?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Cash_Register_Expenses_Var_Samp_Fields = {
  __typename?: 'cash_register_expenses_var_samp_fields';
  amountSpent?: Maybe<Scalars['Float']>;
  cash_box_id?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  repeated?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "cash_register.expenses" */
export type Cash_Register_Expenses_Var_Samp_Order_By = {
  amountSpent?: Maybe<Order_By>;
  cash_box_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  repeated?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Cash_Register_Expenses_Variance_Fields = {
  __typename?: 'cash_register_expenses_variance_fields';
  amountSpent?: Maybe<Scalars['Float']>;
  cash_box_id?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  repeated?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "cash_register.expenses" */
export type Cash_Register_Expenses_Variance_Order_By = {
  amountSpent?: Maybe<Order_By>;
  cash_box_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  repeated?: Maybe<Order_By>;
};

/** columns and relationships of "contact.address" */
export type Contact_Address = {
  __typename?: 'contact_address';
  address?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  /** An array relationship */
  contact_addresses: Array<Contact_Contact_Address>;
  /** An aggregate relationship */
  contact_addresses_aggregate: Contact_Contact_Address_Aggregate;
  /** An array relationship */
  customer_addresses: Array<Contact_Customer_Address>;
  /** An aggregate relationship */
  customer_addresses_aggregate: Contact_Customer_Address_Aggregate;
  id: Scalars['uuid'];
  /** An array relationship */
  provider_addresses: Array<Contact_Provider_Address>;
  /** An aggregate relationship */
  provider_addresses_aggregate: Contact_Provider_Address_Aggregate;
  zip?: Maybe<Scalars['String']>;
};


/** columns and relationships of "contact.address" */
export type Contact_AddressContact_AddressesArgs = {
  distinct_on?: Maybe<Array<Contact_Contact_Address_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Contact_Address_Order_By>>;
  where?: Maybe<Contact_Contact_Address_Bool_Exp>;
};


/** columns and relationships of "contact.address" */
export type Contact_AddressContact_Addresses_AggregateArgs = {
  distinct_on?: Maybe<Array<Contact_Contact_Address_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Contact_Address_Order_By>>;
  where?: Maybe<Contact_Contact_Address_Bool_Exp>;
};


/** columns and relationships of "contact.address" */
export type Contact_AddressCustomer_AddressesArgs = {
  distinct_on?: Maybe<Array<Contact_Customer_Address_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Customer_Address_Order_By>>;
  where?: Maybe<Contact_Customer_Address_Bool_Exp>;
};


/** columns and relationships of "contact.address" */
export type Contact_AddressCustomer_Addresses_AggregateArgs = {
  distinct_on?: Maybe<Array<Contact_Customer_Address_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Customer_Address_Order_By>>;
  where?: Maybe<Contact_Customer_Address_Bool_Exp>;
};


/** columns and relationships of "contact.address" */
export type Contact_AddressProvider_AddressesArgs = {
  distinct_on?: Maybe<Array<Contact_Provider_Address_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Provider_Address_Order_By>>;
  where?: Maybe<Contact_Provider_Address_Bool_Exp>;
};


/** columns and relationships of "contact.address" */
export type Contact_AddressProvider_Addresses_AggregateArgs = {
  distinct_on?: Maybe<Array<Contact_Provider_Address_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Provider_Address_Order_By>>;
  where?: Maybe<Contact_Provider_Address_Bool_Exp>;
};

/** aggregated selection of "contact.address" */
export type Contact_Address_Aggregate = {
  __typename?: 'contact_address_aggregate';
  aggregate?: Maybe<Contact_Address_Aggregate_Fields>;
  nodes: Array<Contact_Address>;
};

/** aggregate fields of "contact.address" */
export type Contact_Address_Aggregate_Fields = {
  __typename?: 'contact_address_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Contact_Address_Max_Fields>;
  min?: Maybe<Contact_Address_Min_Fields>;
};


/** aggregate fields of "contact.address" */
export type Contact_Address_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Contact_Address_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** Boolean expression to filter rows from the table "contact.address". All fields are combined with a logical 'AND'. */
export type Contact_Address_Bool_Exp = {
  _and?: Maybe<Array<Contact_Address_Bool_Exp>>;
  _not?: Maybe<Contact_Address_Bool_Exp>;
  _or?: Maybe<Array<Contact_Address_Bool_Exp>>;
  address?: Maybe<String_Comparison_Exp>;
  city?: Maybe<String_Comparison_Exp>;
  contact_addresses?: Maybe<Contact_Contact_Address_Bool_Exp>;
  customer_addresses?: Maybe<Contact_Customer_Address_Bool_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  provider_addresses?: Maybe<Contact_Provider_Address_Bool_Exp>;
  zip?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "contact.address" */
export enum Contact_Address_Constraint {
  /** unique or primary key constraint */
  AddressPkey = 'Address_pkey'
}

/** input type for inserting data into table "contact.address" */
export type Contact_Address_Insert_Input = {
  address?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  contact_addresses?: Maybe<Contact_Contact_Address_Arr_Rel_Insert_Input>;
  customer_addresses?: Maybe<Contact_Customer_Address_Arr_Rel_Insert_Input>;
  id?: Maybe<Scalars['uuid']>;
  provider_addresses?: Maybe<Contact_Provider_Address_Arr_Rel_Insert_Input>;
  zip?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Contact_Address_Max_Fields = {
  __typename?: 'contact_address_max_fields';
  address?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  zip?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type Contact_Address_Min_Fields = {
  __typename?: 'contact_address_min_fields';
  address?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  zip?: Maybe<Scalars['String']>;
};

/** response of any mutation on the table "contact.address" */
export type Contact_Address_Mutation_Response = {
  __typename?: 'contact_address_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Contact_Address>;
};

/** input type for inserting object relation for remote table "contact.address" */
export type Contact_Address_Obj_Rel_Insert_Input = {
  data: Contact_Address_Insert_Input;
  /** on conflict condition */
  on_conflict?: Maybe<Contact_Address_On_Conflict>;
};

/** on conflict condition type for table "contact.address" */
export type Contact_Address_On_Conflict = {
  constraint: Contact_Address_Constraint;
  update_columns?: Array<Contact_Address_Update_Column>;
  where?: Maybe<Contact_Address_Bool_Exp>;
};

/** Ordering options when selecting data from "contact.address". */
export type Contact_Address_Order_By = {
  address?: Maybe<Order_By>;
  city?: Maybe<Order_By>;
  contact_addresses_aggregate?: Maybe<Contact_Contact_Address_Aggregate_Order_By>;
  customer_addresses_aggregate?: Maybe<Contact_Customer_Address_Aggregate_Order_By>;
  id?: Maybe<Order_By>;
  provider_addresses_aggregate?: Maybe<Contact_Provider_Address_Aggregate_Order_By>;
  zip?: Maybe<Order_By>;
};

/** primary key columns input for table: contact_address */
export type Contact_Address_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "contact.address" */
export enum Contact_Address_Select_Column {
  /** column name */
  Address = 'address',
  /** column name */
  City = 'city',
  /** column name */
  Id = 'id',
  /** column name */
  Zip = 'zip'
}

/** input type for updating data in table "contact.address" */
export type Contact_Address_Set_Input = {
  address?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  zip?: Maybe<Scalars['String']>;
};

/** update columns of table "contact.address" */
export enum Contact_Address_Update_Column {
  /** column name */
  Address = 'address',
  /** column name */
  City = 'city',
  /** column name */
  Id = 'id',
  /** column name */
  Zip = 'zip'
}

/** columns and relationships of "contact.contact" */
export type Contact_Contact = {
  __typename?: 'contact_contact';
  /** An array relationship */
  addresses: Array<Contact_Contact_Addresses_View>;
  /** An aggregate relationship */
  addresses_aggregate: Contact_Contact_Addresses_View_Aggregate;
  code?: Maybe<Scalars['String']>;
  /** An array relationship */
  contact_addresses: Array<Contact_Contact_Address>;
  /** An aggregate relationship */
  contact_addresses_aggregate: Contact_Contact_Address_Aggregate;
  /** An array relationship */
  contact_customers: Array<Contact_Customer_Contact>;
  /** An aggregate relationship */
  contact_customers_aggregate: Contact_Customer_Contact_Aggregate;
  /** An array relationship */
  contact_providers: Array<Contact_Provider_Contact>;
  /** An aggregate relationship */
  contact_providers_aggregate: Contact_Provider_Contact_Aggregate;
  createdAt?: Maybe<Scalars['date']>;
  createdBy?: Maybe<Scalars['uuid']>;
  /** An array relationship */
  cutomers: Array<Contact_Contact_Customers_View>;
  /** An aggregate relationship */
  cutomers_aggregate: Contact_Contact_Customers_View_Aggregate;
  id: Scalars['uuid'];
  mail?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  note?: Maybe<Scalars['String']>;
  /** An array relationship */
  orders: Array<Sales_Order>;
  /** An aggregate relationship */
  orders_aggregate: Sales_Order_Aggregate;
  phone: Scalars['String'];
  /** An array relationship */
  providers: Array<Contact_Contact_Providers_View>;
  /** An aggregate relationship */
  providers_aggregate: Contact_Contact_Providers_View_Aggregate;
  updatedAt?: Maybe<Scalars['date']>;
  updatedBy?: Maybe<Scalars['uuid']>;
};


/** columns and relationships of "contact.contact" */
export type Contact_ContactAddressesArgs = {
  distinct_on?: Maybe<Array<Contact_Contact_Addresses_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Contact_Addresses_View_Order_By>>;
  where?: Maybe<Contact_Contact_Addresses_View_Bool_Exp>;
};


/** columns and relationships of "contact.contact" */
export type Contact_ContactAddresses_AggregateArgs = {
  distinct_on?: Maybe<Array<Contact_Contact_Addresses_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Contact_Addresses_View_Order_By>>;
  where?: Maybe<Contact_Contact_Addresses_View_Bool_Exp>;
};


/** columns and relationships of "contact.contact" */
export type Contact_ContactContact_AddressesArgs = {
  distinct_on?: Maybe<Array<Contact_Contact_Address_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Contact_Address_Order_By>>;
  where?: Maybe<Contact_Contact_Address_Bool_Exp>;
};


/** columns and relationships of "contact.contact" */
export type Contact_ContactContact_Addresses_AggregateArgs = {
  distinct_on?: Maybe<Array<Contact_Contact_Address_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Contact_Address_Order_By>>;
  where?: Maybe<Contact_Contact_Address_Bool_Exp>;
};


/** columns and relationships of "contact.contact" */
export type Contact_ContactContact_CustomersArgs = {
  distinct_on?: Maybe<Array<Contact_Customer_Contact_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Customer_Contact_Order_By>>;
  where?: Maybe<Contact_Customer_Contact_Bool_Exp>;
};


/** columns and relationships of "contact.contact" */
export type Contact_ContactContact_Customers_AggregateArgs = {
  distinct_on?: Maybe<Array<Contact_Customer_Contact_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Customer_Contact_Order_By>>;
  where?: Maybe<Contact_Customer_Contact_Bool_Exp>;
};


/** columns and relationships of "contact.contact" */
export type Contact_ContactContact_ProvidersArgs = {
  distinct_on?: Maybe<Array<Contact_Provider_Contact_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Provider_Contact_Order_By>>;
  where?: Maybe<Contact_Provider_Contact_Bool_Exp>;
};


/** columns and relationships of "contact.contact" */
export type Contact_ContactContact_Providers_AggregateArgs = {
  distinct_on?: Maybe<Array<Contact_Provider_Contact_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Provider_Contact_Order_By>>;
  where?: Maybe<Contact_Provider_Contact_Bool_Exp>;
};


/** columns and relationships of "contact.contact" */
export type Contact_ContactCutomersArgs = {
  distinct_on?: Maybe<Array<Contact_Contact_Customers_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Contact_Customers_View_Order_By>>;
  where?: Maybe<Contact_Contact_Customers_View_Bool_Exp>;
};


/** columns and relationships of "contact.contact" */
export type Contact_ContactCutomers_AggregateArgs = {
  distinct_on?: Maybe<Array<Contact_Contact_Customers_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Contact_Customers_View_Order_By>>;
  where?: Maybe<Contact_Contact_Customers_View_Bool_Exp>;
};


/** columns and relationships of "contact.contact" */
export type Contact_ContactOrdersArgs = {
  distinct_on?: Maybe<Array<Sales_Order_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Order_Order_By>>;
  where?: Maybe<Sales_Order_Bool_Exp>;
};


/** columns and relationships of "contact.contact" */
export type Contact_ContactOrders_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Order_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Order_Order_By>>;
  where?: Maybe<Sales_Order_Bool_Exp>;
};


/** columns and relationships of "contact.contact" */
export type Contact_ContactProvidersArgs = {
  distinct_on?: Maybe<Array<Contact_Contact_Providers_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Contact_Providers_View_Order_By>>;
  where?: Maybe<Contact_Contact_Providers_View_Bool_Exp>;
};


/** columns and relationships of "contact.contact" */
export type Contact_ContactProviders_AggregateArgs = {
  distinct_on?: Maybe<Array<Contact_Contact_Providers_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Contact_Providers_View_Order_By>>;
  where?: Maybe<Contact_Contact_Providers_View_Bool_Exp>;
};

/** columns and relationships of "contact.contact_address" */
export type Contact_Contact_Address = {
  __typename?: 'contact_contact_address';
  /** An object relationship */
  address: Contact_Address;
  addressid: Scalars['uuid'];
  /** An object relationship */
  contact: Contact_Contact;
  contactid: Scalars['uuid'];
};

/** aggregated selection of "contact.contact_address" */
export type Contact_Contact_Address_Aggregate = {
  __typename?: 'contact_contact_address_aggregate';
  aggregate?: Maybe<Contact_Contact_Address_Aggregate_Fields>;
  nodes: Array<Contact_Contact_Address>;
};

/** aggregate fields of "contact.contact_address" */
export type Contact_Contact_Address_Aggregate_Fields = {
  __typename?: 'contact_contact_address_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Contact_Contact_Address_Max_Fields>;
  min?: Maybe<Contact_Contact_Address_Min_Fields>;
};


/** aggregate fields of "contact.contact_address" */
export type Contact_Contact_Address_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Contact_Contact_Address_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "contact.contact_address" */
export type Contact_Contact_Address_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Contact_Contact_Address_Max_Order_By>;
  min?: Maybe<Contact_Contact_Address_Min_Order_By>;
};

/** input type for inserting array relation for remote table "contact.contact_address" */
export type Contact_Contact_Address_Arr_Rel_Insert_Input = {
  data: Array<Contact_Contact_Address_Insert_Input>;
  /** on conflict condition */
  on_conflict?: Maybe<Contact_Contact_Address_On_Conflict>;
};

/** Boolean expression to filter rows from the table "contact.contact_address". All fields are combined with a logical 'AND'. */
export type Contact_Contact_Address_Bool_Exp = {
  _and?: Maybe<Array<Contact_Contact_Address_Bool_Exp>>;
  _not?: Maybe<Contact_Contact_Address_Bool_Exp>;
  _or?: Maybe<Array<Contact_Contact_Address_Bool_Exp>>;
  address?: Maybe<Contact_Address_Bool_Exp>;
  addressid?: Maybe<Uuid_Comparison_Exp>;
  contact?: Maybe<Contact_Contact_Bool_Exp>;
  contactid?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "contact.contact_address" */
export enum Contact_Contact_Address_Constraint {
  /** unique or primary key constraint */
  ContactAddressPkey = 'contact_address_pkey'
}

/** input type for inserting data into table "contact.contact_address" */
export type Contact_Contact_Address_Insert_Input = {
  address?: Maybe<Contact_Address_Obj_Rel_Insert_Input>;
  addressid?: Maybe<Scalars['uuid']>;
  contact?: Maybe<Contact_Contact_Obj_Rel_Insert_Input>;
  contactid?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Contact_Contact_Address_Max_Fields = {
  __typename?: 'contact_contact_address_max_fields';
  addressid?: Maybe<Scalars['uuid']>;
  contactid?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "contact.contact_address" */
export type Contact_Contact_Address_Max_Order_By = {
  addressid?: Maybe<Order_By>;
  contactid?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Contact_Contact_Address_Min_Fields = {
  __typename?: 'contact_contact_address_min_fields';
  addressid?: Maybe<Scalars['uuid']>;
  contactid?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "contact.contact_address" */
export type Contact_Contact_Address_Min_Order_By = {
  addressid?: Maybe<Order_By>;
  contactid?: Maybe<Order_By>;
};

/** response of any mutation on the table "contact.contact_address" */
export type Contact_Contact_Address_Mutation_Response = {
  __typename?: 'contact_contact_address_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Contact_Contact_Address>;
};

/** on conflict condition type for table "contact.contact_address" */
export type Contact_Contact_Address_On_Conflict = {
  constraint: Contact_Contact_Address_Constraint;
  update_columns?: Array<Contact_Contact_Address_Update_Column>;
  where?: Maybe<Contact_Contact_Address_Bool_Exp>;
};

/** Ordering options when selecting data from "contact.contact_address". */
export type Contact_Contact_Address_Order_By = {
  address?: Maybe<Contact_Address_Order_By>;
  addressid?: Maybe<Order_By>;
  contact?: Maybe<Contact_Contact_Order_By>;
  contactid?: Maybe<Order_By>;
};

/** primary key columns input for table: contact_contact_address */
export type Contact_Contact_Address_Pk_Columns_Input = {
  addressid: Scalars['uuid'];
  contactid: Scalars['uuid'];
};

/** select columns of table "contact.contact_address" */
export enum Contact_Contact_Address_Select_Column {
  /** column name */
  Addressid = 'addressid',
  /** column name */
  Contactid = 'contactid'
}

/** input type for updating data in table "contact.contact_address" */
export type Contact_Contact_Address_Set_Input = {
  addressid?: Maybe<Scalars['uuid']>;
  contactid?: Maybe<Scalars['uuid']>;
};

/** update columns of table "contact.contact_address" */
export enum Contact_Contact_Address_Update_Column {
  /** column name */
  Addressid = 'addressid',
  /** column name */
  Contactid = 'contactid'
}

/** columns and relationships of "contact.contact_addresses_view" */
export type Contact_Contact_Addresses_View = {
  __typename?: 'contact_contact_addresses_view';
  address?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  contactid?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  zip?: Maybe<Scalars['String']>;
};

/** aggregated selection of "contact.contact_addresses_view" */
export type Contact_Contact_Addresses_View_Aggregate = {
  __typename?: 'contact_contact_addresses_view_aggregate';
  aggregate?: Maybe<Contact_Contact_Addresses_View_Aggregate_Fields>;
  nodes: Array<Contact_Contact_Addresses_View>;
};

/** aggregate fields of "contact.contact_addresses_view" */
export type Contact_Contact_Addresses_View_Aggregate_Fields = {
  __typename?: 'contact_contact_addresses_view_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Contact_Contact_Addresses_View_Max_Fields>;
  min?: Maybe<Contact_Contact_Addresses_View_Min_Fields>;
};


/** aggregate fields of "contact.contact_addresses_view" */
export type Contact_Contact_Addresses_View_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Contact_Contact_Addresses_View_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "contact.contact_addresses_view" */
export type Contact_Contact_Addresses_View_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Contact_Contact_Addresses_View_Max_Order_By>;
  min?: Maybe<Contact_Contact_Addresses_View_Min_Order_By>;
};

/** input type for inserting array relation for remote table "contact.contact_addresses_view" */
export type Contact_Contact_Addresses_View_Arr_Rel_Insert_Input = {
  data: Array<Contact_Contact_Addresses_View_Insert_Input>;
};

/** Boolean expression to filter rows from the table "contact.contact_addresses_view". All fields are combined with a logical 'AND'. */
export type Contact_Contact_Addresses_View_Bool_Exp = {
  _and?: Maybe<Array<Contact_Contact_Addresses_View_Bool_Exp>>;
  _not?: Maybe<Contact_Contact_Addresses_View_Bool_Exp>;
  _or?: Maybe<Array<Contact_Contact_Addresses_View_Bool_Exp>>;
  address?: Maybe<String_Comparison_Exp>;
  city?: Maybe<String_Comparison_Exp>;
  contactid?: Maybe<Uuid_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  zip?: Maybe<String_Comparison_Exp>;
};

/** input type for inserting data into table "contact.contact_addresses_view" */
export type Contact_Contact_Addresses_View_Insert_Input = {
  address?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  contactid?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  zip?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Contact_Contact_Addresses_View_Max_Fields = {
  __typename?: 'contact_contact_addresses_view_max_fields';
  address?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  contactid?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  zip?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "contact.contact_addresses_view" */
export type Contact_Contact_Addresses_View_Max_Order_By = {
  address?: Maybe<Order_By>;
  city?: Maybe<Order_By>;
  contactid?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  zip?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Contact_Contact_Addresses_View_Min_Fields = {
  __typename?: 'contact_contact_addresses_view_min_fields';
  address?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  contactid?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  zip?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "contact.contact_addresses_view" */
export type Contact_Contact_Addresses_View_Min_Order_By = {
  address?: Maybe<Order_By>;
  city?: Maybe<Order_By>;
  contactid?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  zip?: Maybe<Order_By>;
};

/** Ordering options when selecting data from "contact.contact_addresses_view". */
export type Contact_Contact_Addresses_View_Order_By = {
  address?: Maybe<Order_By>;
  city?: Maybe<Order_By>;
  contactid?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  zip?: Maybe<Order_By>;
};

/** select columns of table "contact.contact_addresses_view" */
export enum Contact_Contact_Addresses_View_Select_Column {
  /** column name */
  Address = 'address',
  /** column name */
  City = 'city',
  /** column name */
  Contactid = 'contactid',
  /** column name */
  Id = 'id',
  /** column name */
  Zip = 'zip'
}

/** aggregated selection of "contact.contact" */
export type Contact_Contact_Aggregate = {
  __typename?: 'contact_contact_aggregate';
  aggregate?: Maybe<Contact_Contact_Aggregate_Fields>;
  nodes: Array<Contact_Contact>;
};

/** aggregate fields of "contact.contact" */
export type Contact_Contact_Aggregate_Fields = {
  __typename?: 'contact_contact_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Contact_Contact_Max_Fields>;
  min?: Maybe<Contact_Contact_Min_Fields>;
};


/** aggregate fields of "contact.contact" */
export type Contact_Contact_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Contact_Contact_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** Boolean expression to filter rows from the table "contact.contact". All fields are combined with a logical 'AND'. */
export type Contact_Contact_Bool_Exp = {
  _and?: Maybe<Array<Contact_Contact_Bool_Exp>>;
  _not?: Maybe<Contact_Contact_Bool_Exp>;
  _or?: Maybe<Array<Contact_Contact_Bool_Exp>>;
  addresses?: Maybe<Contact_Contact_Addresses_View_Bool_Exp>;
  code?: Maybe<String_Comparison_Exp>;
  contact_addresses?: Maybe<Contact_Contact_Address_Bool_Exp>;
  contact_customers?: Maybe<Contact_Customer_Contact_Bool_Exp>;
  contact_providers?: Maybe<Contact_Provider_Contact_Bool_Exp>;
  createdAt?: Maybe<Date_Comparison_Exp>;
  createdBy?: Maybe<Uuid_Comparison_Exp>;
  cutomers?: Maybe<Contact_Contact_Customers_View_Bool_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  mail?: Maybe<String_Comparison_Exp>;
  name?: Maybe<String_Comparison_Exp>;
  note?: Maybe<String_Comparison_Exp>;
  orders?: Maybe<Sales_Order_Bool_Exp>;
  phone?: Maybe<String_Comparison_Exp>;
  providers?: Maybe<Contact_Contact_Providers_View_Bool_Exp>;
  updatedAt?: Maybe<Date_Comparison_Exp>;
  updatedBy?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "contact.contact" */
export enum Contact_Contact_Constraint {
  /** unique or primary key constraint */
  ContactCodeKey = 'Contact_code_key',
  /** unique or primary key constraint */
  ContactPhoneKey = 'Contact_phone_key',
  /** unique or primary key constraint */
  ContactPkey = 'Contact_pkey'
}

/** columns and relationships of "contact.contact_customers_view" */
export type Contact_Contact_Customers_View = {
  __typename?: 'contact_contact_customers_view';
  FAX?: Maybe<Scalars['String']>;
  ICE?: Maybe<Scalars['String']>;
  IF?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  contactid?: Maybe<Scalars['uuid']>;
  createdAt?: Maybe<Scalars['date']>;
  createdBy?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  mail?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  note?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['date']>;
  updatedBy?: Maybe<Scalars['uuid']>;
  website?: Maybe<Scalars['String']>;
};

/** aggregated selection of "contact.contact_customers_view" */
export type Contact_Contact_Customers_View_Aggregate = {
  __typename?: 'contact_contact_customers_view_aggregate';
  aggregate?: Maybe<Contact_Contact_Customers_View_Aggregate_Fields>;
  nodes: Array<Contact_Contact_Customers_View>;
};

/** aggregate fields of "contact.contact_customers_view" */
export type Contact_Contact_Customers_View_Aggregate_Fields = {
  __typename?: 'contact_contact_customers_view_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Contact_Contact_Customers_View_Max_Fields>;
  min?: Maybe<Contact_Contact_Customers_View_Min_Fields>;
};


/** aggregate fields of "contact.contact_customers_view" */
export type Contact_Contact_Customers_View_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Contact_Contact_Customers_View_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "contact.contact_customers_view" */
export type Contact_Contact_Customers_View_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Contact_Contact_Customers_View_Max_Order_By>;
  min?: Maybe<Contact_Contact_Customers_View_Min_Order_By>;
};

/** input type for inserting array relation for remote table "contact.contact_customers_view" */
export type Contact_Contact_Customers_View_Arr_Rel_Insert_Input = {
  data: Array<Contact_Contact_Customers_View_Insert_Input>;
};

/** Boolean expression to filter rows from the table "contact.contact_customers_view". All fields are combined with a logical 'AND'. */
export type Contact_Contact_Customers_View_Bool_Exp = {
  FAX?: Maybe<String_Comparison_Exp>;
  ICE?: Maybe<String_Comparison_Exp>;
  IF?: Maybe<String_Comparison_Exp>;
  _and?: Maybe<Array<Contact_Contact_Customers_View_Bool_Exp>>;
  _not?: Maybe<Contact_Contact_Customers_View_Bool_Exp>;
  _or?: Maybe<Array<Contact_Contact_Customers_View_Bool_Exp>>;
  code?: Maybe<String_Comparison_Exp>;
  contactid?: Maybe<Uuid_Comparison_Exp>;
  createdAt?: Maybe<Date_Comparison_Exp>;
  createdBy?: Maybe<Uuid_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  mail?: Maybe<String_Comparison_Exp>;
  name?: Maybe<String_Comparison_Exp>;
  note?: Maybe<String_Comparison_Exp>;
  phone?: Maybe<String_Comparison_Exp>;
  updatedAt?: Maybe<Date_Comparison_Exp>;
  updatedBy?: Maybe<Uuid_Comparison_Exp>;
  website?: Maybe<String_Comparison_Exp>;
};

/** input type for inserting data into table "contact.contact_customers_view" */
export type Contact_Contact_Customers_View_Insert_Input = {
  FAX?: Maybe<Scalars['String']>;
  ICE?: Maybe<Scalars['String']>;
  IF?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  contactid?: Maybe<Scalars['uuid']>;
  createdAt?: Maybe<Scalars['date']>;
  createdBy?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  mail?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  note?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['date']>;
  updatedBy?: Maybe<Scalars['uuid']>;
  website?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Contact_Contact_Customers_View_Max_Fields = {
  __typename?: 'contact_contact_customers_view_max_fields';
  FAX?: Maybe<Scalars['String']>;
  ICE?: Maybe<Scalars['String']>;
  IF?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  contactid?: Maybe<Scalars['uuid']>;
  createdAt?: Maybe<Scalars['date']>;
  createdBy?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  mail?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  note?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['date']>;
  updatedBy?: Maybe<Scalars['uuid']>;
  website?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "contact.contact_customers_view" */
export type Contact_Contact_Customers_View_Max_Order_By = {
  FAX?: Maybe<Order_By>;
  ICE?: Maybe<Order_By>;
  IF?: Maybe<Order_By>;
  code?: Maybe<Order_By>;
  contactid?: Maybe<Order_By>;
  createdAt?: Maybe<Order_By>;
  createdBy?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  mail?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  note?: Maybe<Order_By>;
  phone?: Maybe<Order_By>;
  updatedAt?: Maybe<Order_By>;
  updatedBy?: Maybe<Order_By>;
  website?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Contact_Contact_Customers_View_Min_Fields = {
  __typename?: 'contact_contact_customers_view_min_fields';
  FAX?: Maybe<Scalars['String']>;
  ICE?: Maybe<Scalars['String']>;
  IF?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  contactid?: Maybe<Scalars['uuid']>;
  createdAt?: Maybe<Scalars['date']>;
  createdBy?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  mail?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  note?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['date']>;
  updatedBy?: Maybe<Scalars['uuid']>;
  website?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "contact.contact_customers_view" */
export type Contact_Contact_Customers_View_Min_Order_By = {
  FAX?: Maybe<Order_By>;
  ICE?: Maybe<Order_By>;
  IF?: Maybe<Order_By>;
  code?: Maybe<Order_By>;
  contactid?: Maybe<Order_By>;
  createdAt?: Maybe<Order_By>;
  createdBy?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  mail?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  note?: Maybe<Order_By>;
  phone?: Maybe<Order_By>;
  updatedAt?: Maybe<Order_By>;
  updatedBy?: Maybe<Order_By>;
  website?: Maybe<Order_By>;
};

/** Ordering options when selecting data from "contact.contact_customers_view". */
export type Contact_Contact_Customers_View_Order_By = {
  FAX?: Maybe<Order_By>;
  ICE?: Maybe<Order_By>;
  IF?: Maybe<Order_By>;
  code?: Maybe<Order_By>;
  contactid?: Maybe<Order_By>;
  createdAt?: Maybe<Order_By>;
  createdBy?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  mail?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  note?: Maybe<Order_By>;
  phone?: Maybe<Order_By>;
  updatedAt?: Maybe<Order_By>;
  updatedBy?: Maybe<Order_By>;
  website?: Maybe<Order_By>;
};

/** select columns of table "contact.contact_customers_view" */
export enum Contact_Contact_Customers_View_Select_Column {
  /** column name */
  Fax = 'FAX',
  /** column name */
  Ice = 'ICE',
  /** column name */
  If = 'IF',
  /** column name */
  Code = 'code',
  /** column name */
  Contactid = 'contactid',
  /** column name */
  CreatedAt = 'createdAt',
  /** column name */
  CreatedBy = 'createdBy',
  /** column name */
  Id = 'id',
  /** column name */
  Mail = 'mail',
  /** column name */
  Name = 'name',
  /** column name */
  Note = 'note',
  /** column name */
  Phone = 'phone',
  /** column name */
  UpdatedAt = 'updatedAt',
  /** column name */
  UpdatedBy = 'updatedBy',
  /** column name */
  Website = 'website'
}

/** input type for inserting data into table "contact.contact" */
export type Contact_Contact_Insert_Input = {
  addresses?: Maybe<Contact_Contact_Addresses_View_Arr_Rel_Insert_Input>;
  code?: Maybe<Scalars['String']>;
  contact_addresses?: Maybe<Contact_Contact_Address_Arr_Rel_Insert_Input>;
  contact_customers?: Maybe<Contact_Customer_Contact_Arr_Rel_Insert_Input>;
  contact_providers?: Maybe<Contact_Provider_Contact_Arr_Rel_Insert_Input>;
  createdAt?: Maybe<Scalars['date']>;
  createdBy?: Maybe<Scalars['uuid']>;
  cutomers?: Maybe<Contact_Contact_Customers_View_Arr_Rel_Insert_Input>;
  id?: Maybe<Scalars['uuid']>;
  mail?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  note?: Maybe<Scalars['String']>;
  orders?: Maybe<Sales_Order_Arr_Rel_Insert_Input>;
  phone?: Maybe<Scalars['String']>;
  providers?: Maybe<Contact_Contact_Providers_View_Arr_Rel_Insert_Input>;
  updatedAt?: Maybe<Scalars['date']>;
  updatedBy?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Contact_Contact_Max_Fields = {
  __typename?: 'contact_contact_max_fields';
  code?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['date']>;
  createdBy?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  mail?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  note?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['date']>;
  updatedBy?: Maybe<Scalars['uuid']>;
};

/** aggregate min on columns */
export type Contact_Contact_Min_Fields = {
  __typename?: 'contact_contact_min_fields';
  code?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['date']>;
  createdBy?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  mail?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  note?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['date']>;
  updatedBy?: Maybe<Scalars['uuid']>;
};

/** response of any mutation on the table "contact.contact" */
export type Contact_Contact_Mutation_Response = {
  __typename?: 'contact_contact_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Contact_Contact>;
};

/** input type for inserting object relation for remote table "contact.contact" */
export type Contact_Contact_Obj_Rel_Insert_Input = {
  data: Contact_Contact_Insert_Input;
  /** on conflict condition */
  on_conflict?: Maybe<Contact_Contact_On_Conflict>;
};

/** on conflict condition type for table "contact.contact" */
export type Contact_Contact_On_Conflict = {
  constraint: Contact_Contact_Constraint;
  update_columns?: Array<Contact_Contact_Update_Column>;
  where?: Maybe<Contact_Contact_Bool_Exp>;
};

/** Ordering options when selecting data from "contact.contact". */
export type Contact_Contact_Order_By = {
  addresses_aggregate?: Maybe<Contact_Contact_Addresses_View_Aggregate_Order_By>;
  code?: Maybe<Order_By>;
  contact_addresses_aggregate?: Maybe<Contact_Contact_Address_Aggregate_Order_By>;
  contact_customers_aggregate?: Maybe<Contact_Customer_Contact_Aggregate_Order_By>;
  contact_providers_aggregate?: Maybe<Contact_Provider_Contact_Aggregate_Order_By>;
  createdAt?: Maybe<Order_By>;
  createdBy?: Maybe<Order_By>;
  cutomers_aggregate?: Maybe<Contact_Contact_Customers_View_Aggregate_Order_By>;
  id?: Maybe<Order_By>;
  mail?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  note?: Maybe<Order_By>;
  orders_aggregate?: Maybe<Sales_Order_Aggregate_Order_By>;
  phone?: Maybe<Order_By>;
  providers_aggregate?: Maybe<Contact_Contact_Providers_View_Aggregate_Order_By>;
  updatedAt?: Maybe<Order_By>;
  updatedBy?: Maybe<Order_By>;
};

/** primary key columns input for table: contact_contact */
export type Contact_Contact_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** columns and relationships of "contact.contact_providers_view" */
export type Contact_Contact_Providers_View = {
  __typename?: 'contact_contact_providers_view';
  code?: Maybe<Scalars['String']>;
  contactid?: Maybe<Scalars['uuid']>;
  createdAt?: Maybe<Scalars['date']>;
  createdBy?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  mail?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  note?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['date']>;
  updatedBy?: Maybe<Scalars['uuid']>;
};

/** aggregated selection of "contact.contact_providers_view" */
export type Contact_Contact_Providers_View_Aggregate = {
  __typename?: 'contact_contact_providers_view_aggregate';
  aggregate?: Maybe<Contact_Contact_Providers_View_Aggregate_Fields>;
  nodes: Array<Contact_Contact_Providers_View>;
};

/** aggregate fields of "contact.contact_providers_view" */
export type Contact_Contact_Providers_View_Aggregate_Fields = {
  __typename?: 'contact_contact_providers_view_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Contact_Contact_Providers_View_Max_Fields>;
  min?: Maybe<Contact_Contact_Providers_View_Min_Fields>;
};


/** aggregate fields of "contact.contact_providers_view" */
export type Contact_Contact_Providers_View_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Contact_Contact_Providers_View_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "contact.contact_providers_view" */
export type Contact_Contact_Providers_View_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Contact_Contact_Providers_View_Max_Order_By>;
  min?: Maybe<Contact_Contact_Providers_View_Min_Order_By>;
};

/** input type for inserting array relation for remote table "contact.contact_providers_view" */
export type Contact_Contact_Providers_View_Arr_Rel_Insert_Input = {
  data: Array<Contact_Contact_Providers_View_Insert_Input>;
};

/** Boolean expression to filter rows from the table "contact.contact_providers_view". All fields are combined with a logical 'AND'. */
export type Contact_Contact_Providers_View_Bool_Exp = {
  _and?: Maybe<Array<Contact_Contact_Providers_View_Bool_Exp>>;
  _not?: Maybe<Contact_Contact_Providers_View_Bool_Exp>;
  _or?: Maybe<Array<Contact_Contact_Providers_View_Bool_Exp>>;
  code?: Maybe<String_Comparison_Exp>;
  contactid?: Maybe<Uuid_Comparison_Exp>;
  createdAt?: Maybe<Date_Comparison_Exp>;
  createdBy?: Maybe<Uuid_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  mail?: Maybe<String_Comparison_Exp>;
  name?: Maybe<String_Comparison_Exp>;
  note?: Maybe<String_Comparison_Exp>;
  phone?: Maybe<String_Comparison_Exp>;
  updatedAt?: Maybe<Date_Comparison_Exp>;
  updatedBy?: Maybe<Uuid_Comparison_Exp>;
};

/** input type for inserting data into table "contact.contact_providers_view" */
export type Contact_Contact_Providers_View_Insert_Input = {
  code?: Maybe<Scalars['String']>;
  contactid?: Maybe<Scalars['uuid']>;
  createdAt?: Maybe<Scalars['date']>;
  createdBy?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  mail?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  note?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['date']>;
  updatedBy?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Contact_Contact_Providers_View_Max_Fields = {
  __typename?: 'contact_contact_providers_view_max_fields';
  code?: Maybe<Scalars['String']>;
  contactid?: Maybe<Scalars['uuid']>;
  createdAt?: Maybe<Scalars['date']>;
  createdBy?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  mail?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  note?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['date']>;
  updatedBy?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "contact.contact_providers_view" */
export type Contact_Contact_Providers_View_Max_Order_By = {
  code?: Maybe<Order_By>;
  contactid?: Maybe<Order_By>;
  createdAt?: Maybe<Order_By>;
  createdBy?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  mail?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  note?: Maybe<Order_By>;
  phone?: Maybe<Order_By>;
  updatedAt?: Maybe<Order_By>;
  updatedBy?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Contact_Contact_Providers_View_Min_Fields = {
  __typename?: 'contact_contact_providers_view_min_fields';
  code?: Maybe<Scalars['String']>;
  contactid?: Maybe<Scalars['uuid']>;
  createdAt?: Maybe<Scalars['date']>;
  createdBy?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  mail?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  note?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['date']>;
  updatedBy?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "contact.contact_providers_view" */
export type Contact_Contact_Providers_View_Min_Order_By = {
  code?: Maybe<Order_By>;
  contactid?: Maybe<Order_By>;
  createdAt?: Maybe<Order_By>;
  createdBy?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  mail?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  note?: Maybe<Order_By>;
  phone?: Maybe<Order_By>;
  updatedAt?: Maybe<Order_By>;
  updatedBy?: Maybe<Order_By>;
};

/** Ordering options when selecting data from "contact.contact_providers_view". */
export type Contact_Contact_Providers_View_Order_By = {
  code?: Maybe<Order_By>;
  contactid?: Maybe<Order_By>;
  createdAt?: Maybe<Order_By>;
  createdBy?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  mail?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  note?: Maybe<Order_By>;
  phone?: Maybe<Order_By>;
  updatedAt?: Maybe<Order_By>;
  updatedBy?: Maybe<Order_By>;
};

/** select columns of table "contact.contact_providers_view" */
export enum Contact_Contact_Providers_View_Select_Column {
  /** column name */
  Code = 'code',
  /** column name */
  Contactid = 'contactid',
  /** column name */
  CreatedAt = 'createdAt',
  /** column name */
  CreatedBy = 'createdBy',
  /** column name */
  Id = 'id',
  /** column name */
  Mail = 'mail',
  /** column name */
  Name = 'name',
  /** column name */
  Note = 'note',
  /** column name */
  Phone = 'phone',
  /** column name */
  UpdatedAt = 'updatedAt',
  /** column name */
  UpdatedBy = 'updatedBy'
}

/** select columns of table "contact.contact" */
export enum Contact_Contact_Select_Column {
  /** column name */
  Code = 'code',
  /** column name */
  CreatedAt = 'createdAt',
  /** column name */
  CreatedBy = 'createdBy',
  /** column name */
  Id = 'id',
  /** column name */
  Mail = 'mail',
  /** column name */
  Name = 'name',
  /** column name */
  Note = 'note',
  /** column name */
  Phone = 'phone',
  /** column name */
  UpdatedAt = 'updatedAt',
  /** column name */
  UpdatedBy = 'updatedBy'
}

/** input type for updating data in table "contact.contact" */
export type Contact_Contact_Set_Input = {
  code?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['date']>;
  createdBy?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  mail?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  note?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['date']>;
  updatedBy?: Maybe<Scalars['uuid']>;
};

/** update columns of table "contact.contact" */
export enum Contact_Contact_Update_Column {
  /** column name */
  Code = 'code',
  /** column name */
  CreatedAt = 'createdAt',
  /** column name */
  CreatedBy = 'createdBy',
  /** column name */
  Id = 'id',
  /** column name */
  Mail = 'mail',
  /** column name */
  Name = 'name',
  /** column name */
  Note = 'note',
  /** column name */
  Phone = 'phone',
  /** column name */
  UpdatedAt = 'updatedAt',
  /** column name */
  UpdatedBy = 'updatedBy'
}

/** columns and relationships of "contact.customer" */
export type Contact_Customer = {
  __typename?: 'contact_customer';
  FAX?: Maybe<Scalars['String']>;
  ICE?: Maybe<Scalars['String']>;
  IF?: Maybe<Scalars['String']>;
  /** An array relationship */
  addresses: Array<Contact_Customer_Addresses_View>;
  /** An aggregate relationship */
  addresses_aggregate: Contact_Customer_Addresses_View_Aggregate;
  code?: Maybe<Scalars['String']>;
  /** An array relationship */
  contacts: Array<Contact_Customer_Contacts_View>;
  /** An aggregate relationship */
  contacts_aggregate: Contact_Customer_Contacts_View_Aggregate;
  createdAt?: Maybe<Scalars['date']>;
  createdBy?: Maybe<Scalars['uuid']>;
  /** An array relationship */
  customer_addresses: Array<Contact_Customer_Address>;
  /** An aggregate relationship */
  customer_addresses_aggregate: Contact_Customer_Address_Aggregate;
  /** An array relationship */
  customer_contacts: Array<Contact_Customer_Contact>;
  /** An aggregate relationship */
  customer_contacts_aggregate: Contact_Customer_Contact_Aggregate;
  /** An array relationship */
  deliveries: Array<Sales_Delivery>;
  /** An aggregate relationship */
  deliveries_aggregate: Sales_Delivery_Aggregate;
  id: Scalars['uuid'];
  /** An array relationship */
  invoices: Array<Sales_Invoice>;
  /** An aggregate relationship */
  invoices_aggregate: Sales_Invoice_Aggregate;
  mail?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  note?: Maybe<Scalars['String']>;
  /** An array relationship */
  orders: Array<Sales_Order>;
  /** An aggregate relationship */
  orders_aggregate: Sales_Order_Aggregate;
  /** An array relationship */
  payments: Array<Sales_Payment>;
  /** An aggregate relationship */
  payments_aggregate: Sales_Payment_Aggregate;
  phone: Scalars['String'];
  /** An array relationship */
  quotations: Array<Sales_Quotation>;
  /** An aggregate relationship */
  quotations_aggregate: Sales_Quotation_Aggregate;
  type?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['date']>;
  updatedBy?: Maybe<Scalars['uuid']>;
  website?: Maybe<Scalars['String']>;
};


/** columns and relationships of "contact.customer" */
export type Contact_CustomerAddressesArgs = {
  distinct_on?: Maybe<Array<Contact_Customer_Addresses_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Customer_Addresses_View_Order_By>>;
  where?: Maybe<Contact_Customer_Addresses_View_Bool_Exp>;
};


/** columns and relationships of "contact.customer" */
export type Contact_CustomerAddresses_AggregateArgs = {
  distinct_on?: Maybe<Array<Contact_Customer_Addresses_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Customer_Addresses_View_Order_By>>;
  where?: Maybe<Contact_Customer_Addresses_View_Bool_Exp>;
};


/** columns and relationships of "contact.customer" */
export type Contact_CustomerContactsArgs = {
  distinct_on?: Maybe<Array<Contact_Customer_Contacts_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Customer_Contacts_View_Order_By>>;
  where?: Maybe<Contact_Customer_Contacts_View_Bool_Exp>;
};


/** columns and relationships of "contact.customer" */
export type Contact_CustomerContacts_AggregateArgs = {
  distinct_on?: Maybe<Array<Contact_Customer_Contacts_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Customer_Contacts_View_Order_By>>;
  where?: Maybe<Contact_Customer_Contacts_View_Bool_Exp>;
};


/** columns and relationships of "contact.customer" */
export type Contact_CustomerCustomer_AddressesArgs = {
  distinct_on?: Maybe<Array<Contact_Customer_Address_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Customer_Address_Order_By>>;
  where?: Maybe<Contact_Customer_Address_Bool_Exp>;
};


/** columns and relationships of "contact.customer" */
export type Contact_CustomerCustomer_Addresses_AggregateArgs = {
  distinct_on?: Maybe<Array<Contact_Customer_Address_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Customer_Address_Order_By>>;
  where?: Maybe<Contact_Customer_Address_Bool_Exp>;
};


/** columns and relationships of "contact.customer" */
export type Contact_CustomerCustomer_ContactsArgs = {
  distinct_on?: Maybe<Array<Contact_Customer_Contact_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Customer_Contact_Order_By>>;
  where?: Maybe<Contact_Customer_Contact_Bool_Exp>;
};


/** columns and relationships of "contact.customer" */
export type Contact_CustomerCustomer_Contacts_AggregateArgs = {
  distinct_on?: Maybe<Array<Contact_Customer_Contact_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Customer_Contact_Order_By>>;
  where?: Maybe<Contact_Customer_Contact_Bool_Exp>;
};


/** columns and relationships of "contact.customer" */
export type Contact_CustomerDeliveriesArgs = {
  distinct_on?: Maybe<Array<Sales_Delivery_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Delivery_Order_By>>;
  where?: Maybe<Sales_Delivery_Bool_Exp>;
};


/** columns and relationships of "contact.customer" */
export type Contact_CustomerDeliveries_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Delivery_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Delivery_Order_By>>;
  where?: Maybe<Sales_Delivery_Bool_Exp>;
};


/** columns and relationships of "contact.customer" */
export type Contact_CustomerInvoicesArgs = {
  distinct_on?: Maybe<Array<Sales_Invoice_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Invoice_Order_By>>;
  where?: Maybe<Sales_Invoice_Bool_Exp>;
};


/** columns and relationships of "contact.customer" */
export type Contact_CustomerInvoices_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Invoice_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Invoice_Order_By>>;
  where?: Maybe<Sales_Invoice_Bool_Exp>;
};


/** columns and relationships of "contact.customer" */
export type Contact_CustomerOrdersArgs = {
  distinct_on?: Maybe<Array<Sales_Order_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Order_Order_By>>;
  where?: Maybe<Sales_Order_Bool_Exp>;
};


/** columns and relationships of "contact.customer" */
export type Contact_CustomerOrders_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Order_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Order_Order_By>>;
  where?: Maybe<Sales_Order_Bool_Exp>;
};


/** columns and relationships of "contact.customer" */
export type Contact_CustomerPaymentsArgs = {
  distinct_on?: Maybe<Array<Sales_Payment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Payment_Order_By>>;
  where?: Maybe<Sales_Payment_Bool_Exp>;
};


/** columns and relationships of "contact.customer" */
export type Contact_CustomerPayments_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Payment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Payment_Order_By>>;
  where?: Maybe<Sales_Payment_Bool_Exp>;
};


/** columns and relationships of "contact.customer" */
export type Contact_CustomerQuotationsArgs = {
  distinct_on?: Maybe<Array<Sales_Quotation_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Quotation_Order_By>>;
  where?: Maybe<Sales_Quotation_Bool_Exp>;
};


/** columns and relationships of "contact.customer" */
export type Contact_CustomerQuotations_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Quotation_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Quotation_Order_By>>;
  where?: Maybe<Sales_Quotation_Bool_Exp>;
};

/** columns and relationships of "contact.customer_address" */
export type Contact_Customer_Address = {
  __typename?: 'contact_customer_address';
  /** An object relationship */
  address: Contact_Address;
  addressid: Scalars['uuid'];
  /** An object relationship */
  customer: Contact_Customer;
  customerid: Scalars['uuid'];
};

/** aggregated selection of "contact.customer_address" */
export type Contact_Customer_Address_Aggregate = {
  __typename?: 'contact_customer_address_aggregate';
  aggregate?: Maybe<Contact_Customer_Address_Aggregate_Fields>;
  nodes: Array<Contact_Customer_Address>;
};

/** aggregate fields of "contact.customer_address" */
export type Contact_Customer_Address_Aggregate_Fields = {
  __typename?: 'contact_customer_address_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Contact_Customer_Address_Max_Fields>;
  min?: Maybe<Contact_Customer_Address_Min_Fields>;
};


/** aggregate fields of "contact.customer_address" */
export type Contact_Customer_Address_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Contact_Customer_Address_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "contact.customer_address" */
export type Contact_Customer_Address_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Contact_Customer_Address_Max_Order_By>;
  min?: Maybe<Contact_Customer_Address_Min_Order_By>;
};

/** input type for inserting array relation for remote table "contact.customer_address" */
export type Contact_Customer_Address_Arr_Rel_Insert_Input = {
  data: Array<Contact_Customer_Address_Insert_Input>;
  /** on conflict condition */
  on_conflict?: Maybe<Contact_Customer_Address_On_Conflict>;
};

/** Boolean expression to filter rows from the table "contact.customer_address". All fields are combined with a logical 'AND'. */
export type Contact_Customer_Address_Bool_Exp = {
  _and?: Maybe<Array<Contact_Customer_Address_Bool_Exp>>;
  _not?: Maybe<Contact_Customer_Address_Bool_Exp>;
  _or?: Maybe<Array<Contact_Customer_Address_Bool_Exp>>;
  address?: Maybe<Contact_Address_Bool_Exp>;
  addressid?: Maybe<Uuid_Comparison_Exp>;
  customer?: Maybe<Contact_Customer_Bool_Exp>;
  customerid?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "contact.customer_address" */
export enum Contact_Customer_Address_Constraint {
  /** unique or primary key constraint */
  CustomerAddressPkey = 'customer_address_pkey'
}

/** input type for inserting data into table "contact.customer_address" */
export type Contact_Customer_Address_Insert_Input = {
  address?: Maybe<Contact_Address_Obj_Rel_Insert_Input>;
  addressid?: Maybe<Scalars['uuid']>;
  customer?: Maybe<Contact_Customer_Obj_Rel_Insert_Input>;
  customerid?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Contact_Customer_Address_Max_Fields = {
  __typename?: 'contact_customer_address_max_fields';
  addressid?: Maybe<Scalars['uuid']>;
  customerid?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "contact.customer_address" */
export type Contact_Customer_Address_Max_Order_By = {
  addressid?: Maybe<Order_By>;
  customerid?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Contact_Customer_Address_Min_Fields = {
  __typename?: 'contact_customer_address_min_fields';
  addressid?: Maybe<Scalars['uuid']>;
  customerid?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "contact.customer_address" */
export type Contact_Customer_Address_Min_Order_By = {
  addressid?: Maybe<Order_By>;
  customerid?: Maybe<Order_By>;
};

/** response of any mutation on the table "contact.customer_address" */
export type Contact_Customer_Address_Mutation_Response = {
  __typename?: 'contact_customer_address_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Contact_Customer_Address>;
};

/** on conflict condition type for table "contact.customer_address" */
export type Contact_Customer_Address_On_Conflict = {
  constraint: Contact_Customer_Address_Constraint;
  update_columns?: Array<Contact_Customer_Address_Update_Column>;
  where?: Maybe<Contact_Customer_Address_Bool_Exp>;
};

/** Ordering options when selecting data from "contact.customer_address". */
export type Contact_Customer_Address_Order_By = {
  address?: Maybe<Contact_Address_Order_By>;
  addressid?: Maybe<Order_By>;
  customer?: Maybe<Contact_Customer_Order_By>;
  customerid?: Maybe<Order_By>;
};

/** primary key columns input for table: contact_customer_address */
export type Contact_Customer_Address_Pk_Columns_Input = {
  addressid: Scalars['uuid'];
  customerid: Scalars['uuid'];
};

/** select columns of table "contact.customer_address" */
export enum Contact_Customer_Address_Select_Column {
  /** column name */
  Addressid = 'addressid',
  /** column name */
  Customerid = 'customerid'
}

/** input type for updating data in table "contact.customer_address" */
export type Contact_Customer_Address_Set_Input = {
  addressid?: Maybe<Scalars['uuid']>;
  customerid?: Maybe<Scalars['uuid']>;
};

/** update columns of table "contact.customer_address" */
export enum Contact_Customer_Address_Update_Column {
  /** column name */
  Addressid = 'addressid',
  /** column name */
  Customerid = 'customerid'
}

/** columns and relationships of "contact.customer_addresses_view" */
export type Contact_Customer_Addresses_View = {
  __typename?: 'contact_customer_addresses_view';
  address?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  customerid?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  zip?: Maybe<Scalars['String']>;
};

/** aggregated selection of "contact.customer_addresses_view" */
export type Contact_Customer_Addresses_View_Aggregate = {
  __typename?: 'contact_customer_addresses_view_aggregate';
  aggregate?: Maybe<Contact_Customer_Addresses_View_Aggregate_Fields>;
  nodes: Array<Contact_Customer_Addresses_View>;
};

/** aggregate fields of "contact.customer_addresses_view" */
export type Contact_Customer_Addresses_View_Aggregate_Fields = {
  __typename?: 'contact_customer_addresses_view_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Contact_Customer_Addresses_View_Max_Fields>;
  min?: Maybe<Contact_Customer_Addresses_View_Min_Fields>;
};


/** aggregate fields of "contact.customer_addresses_view" */
export type Contact_Customer_Addresses_View_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Contact_Customer_Addresses_View_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "contact.customer_addresses_view" */
export type Contact_Customer_Addresses_View_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Contact_Customer_Addresses_View_Max_Order_By>;
  min?: Maybe<Contact_Customer_Addresses_View_Min_Order_By>;
};

/** input type for inserting array relation for remote table "contact.customer_addresses_view" */
export type Contact_Customer_Addresses_View_Arr_Rel_Insert_Input = {
  data: Array<Contact_Customer_Addresses_View_Insert_Input>;
};

/** Boolean expression to filter rows from the table "contact.customer_addresses_view". All fields are combined with a logical 'AND'. */
export type Contact_Customer_Addresses_View_Bool_Exp = {
  _and?: Maybe<Array<Contact_Customer_Addresses_View_Bool_Exp>>;
  _not?: Maybe<Contact_Customer_Addresses_View_Bool_Exp>;
  _or?: Maybe<Array<Contact_Customer_Addresses_View_Bool_Exp>>;
  address?: Maybe<String_Comparison_Exp>;
  city?: Maybe<String_Comparison_Exp>;
  customerid?: Maybe<Uuid_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  zip?: Maybe<String_Comparison_Exp>;
};

/** input type for inserting data into table "contact.customer_addresses_view" */
export type Contact_Customer_Addresses_View_Insert_Input = {
  address?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  customerid?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  zip?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Contact_Customer_Addresses_View_Max_Fields = {
  __typename?: 'contact_customer_addresses_view_max_fields';
  address?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  customerid?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  zip?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "contact.customer_addresses_view" */
export type Contact_Customer_Addresses_View_Max_Order_By = {
  address?: Maybe<Order_By>;
  city?: Maybe<Order_By>;
  customerid?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  zip?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Contact_Customer_Addresses_View_Min_Fields = {
  __typename?: 'contact_customer_addresses_view_min_fields';
  address?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  customerid?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  zip?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "contact.customer_addresses_view" */
export type Contact_Customer_Addresses_View_Min_Order_By = {
  address?: Maybe<Order_By>;
  city?: Maybe<Order_By>;
  customerid?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  zip?: Maybe<Order_By>;
};

/** Ordering options when selecting data from "contact.customer_addresses_view". */
export type Contact_Customer_Addresses_View_Order_By = {
  address?: Maybe<Order_By>;
  city?: Maybe<Order_By>;
  customerid?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  zip?: Maybe<Order_By>;
};

/** select columns of table "contact.customer_addresses_view" */
export enum Contact_Customer_Addresses_View_Select_Column {
  /** column name */
  Address = 'address',
  /** column name */
  City = 'city',
  /** column name */
  Customerid = 'customerid',
  /** column name */
  Id = 'id',
  /** column name */
  Zip = 'zip'
}

/** aggregated selection of "contact.customer" */
export type Contact_Customer_Aggregate = {
  __typename?: 'contact_customer_aggregate';
  aggregate?: Maybe<Contact_Customer_Aggregate_Fields>;
  nodes: Array<Contact_Customer>;
};

/** aggregate fields of "contact.customer" */
export type Contact_Customer_Aggregate_Fields = {
  __typename?: 'contact_customer_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Contact_Customer_Max_Fields>;
  min?: Maybe<Contact_Customer_Min_Fields>;
};


/** aggregate fields of "contact.customer" */
export type Contact_Customer_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Contact_Customer_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** Boolean expression to filter rows from the table "contact.customer". All fields are combined with a logical 'AND'. */
export type Contact_Customer_Bool_Exp = {
  FAX?: Maybe<String_Comparison_Exp>;
  ICE?: Maybe<String_Comparison_Exp>;
  IF?: Maybe<String_Comparison_Exp>;
  _and?: Maybe<Array<Contact_Customer_Bool_Exp>>;
  _not?: Maybe<Contact_Customer_Bool_Exp>;
  _or?: Maybe<Array<Contact_Customer_Bool_Exp>>;
  addresses?: Maybe<Contact_Customer_Addresses_View_Bool_Exp>;
  code?: Maybe<String_Comparison_Exp>;
  contacts?: Maybe<Contact_Customer_Contacts_View_Bool_Exp>;
  createdAt?: Maybe<Date_Comparison_Exp>;
  createdBy?: Maybe<Uuid_Comparison_Exp>;
  customer_addresses?: Maybe<Contact_Customer_Address_Bool_Exp>;
  customer_contacts?: Maybe<Contact_Customer_Contact_Bool_Exp>;
  deliveries?: Maybe<Sales_Delivery_Bool_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  invoices?: Maybe<Sales_Invoice_Bool_Exp>;
  mail?: Maybe<String_Comparison_Exp>;
  name?: Maybe<String_Comparison_Exp>;
  note?: Maybe<String_Comparison_Exp>;
  orders?: Maybe<Sales_Order_Bool_Exp>;
  payments?: Maybe<Sales_Payment_Bool_Exp>;
  phone?: Maybe<String_Comparison_Exp>;
  quotations?: Maybe<Sales_Quotation_Bool_Exp>;
  type?: Maybe<String_Comparison_Exp>;
  updatedAt?: Maybe<Date_Comparison_Exp>;
  updatedBy?: Maybe<Uuid_Comparison_Exp>;
  website?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "contact.customer" */
export enum Contact_Customer_Constraint {
  /** unique or primary key constraint */
  CustomerCodeKey = 'Customer_code_key',
  /** unique or primary key constraint */
  CustomerNameKey = 'Customer_name_key',
  /** unique or primary key constraint */
  CustomerPhoneKey = 'Customer_phone_key',
  /** unique or primary key constraint */
  CustomerPkey = 'Customer_pkey'
}

/** columns and relationships of "contact.customer_contact" */
export type Contact_Customer_Contact = {
  __typename?: 'contact_customer_contact';
  /** An object relationship */
  contact: Contact_Contact;
  contactid: Scalars['uuid'];
  /** An object relationship */
  customer: Contact_Customer;
  customerid: Scalars['uuid'];
};

/** aggregated selection of "contact.customer_contact" */
export type Contact_Customer_Contact_Aggregate = {
  __typename?: 'contact_customer_contact_aggregate';
  aggregate?: Maybe<Contact_Customer_Contact_Aggregate_Fields>;
  nodes: Array<Contact_Customer_Contact>;
};

/** aggregate fields of "contact.customer_contact" */
export type Contact_Customer_Contact_Aggregate_Fields = {
  __typename?: 'contact_customer_contact_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Contact_Customer_Contact_Max_Fields>;
  min?: Maybe<Contact_Customer_Contact_Min_Fields>;
};


/** aggregate fields of "contact.customer_contact" */
export type Contact_Customer_Contact_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Contact_Customer_Contact_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "contact.customer_contact" */
export type Contact_Customer_Contact_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Contact_Customer_Contact_Max_Order_By>;
  min?: Maybe<Contact_Customer_Contact_Min_Order_By>;
};

/** input type for inserting array relation for remote table "contact.customer_contact" */
export type Contact_Customer_Contact_Arr_Rel_Insert_Input = {
  data: Array<Contact_Customer_Contact_Insert_Input>;
  /** on conflict condition */
  on_conflict?: Maybe<Contact_Customer_Contact_On_Conflict>;
};

/** Boolean expression to filter rows from the table "contact.customer_contact". All fields are combined with a logical 'AND'. */
export type Contact_Customer_Contact_Bool_Exp = {
  _and?: Maybe<Array<Contact_Customer_Contact_Bool_Exp>>;
  _not?: Maybe<Contact_Customer_Contact_Bool_Exp>;
  _or?: Maybe<Array<Contact_Customer_Contact_Bool_Exp>>;
  contact?: Maybe<Contact_Contact_Bool_Exp>;
  contactid?: Maybe<Uuid_Comparison_Exp>;
  customer?: Maybe<Contact_Customer_Bool_Exp>;
  customerid?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "contact.customer_contact" */
export enum Contact_Customer_Contact_Constraint {
  /** unique or primary key constraint */
  ContactCustomerPkey = 'contact_customer_pkey'
}

/** input type for inserting data into table "contact.customer_contact" */
export type Contact_Customer_Contact_Insert_Input = {
  contact?: Maybe<Contact_Contact_Obj_Rel_Insert_Input>;
  contactid?: Maybe<Scalars['uuid']>;
  customer?: Maybe<Contact_Customer_Obj_Rel_Insert_Input>;
  customerid?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Contact_Customer_Contact_Max_Fields = {
  __typename?: 'contact_customer_contact_max_fields';
  contactid?: Maybe<Scalars['uuid']>;
  customerid?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "contact.customer_contact" */
export type Contact_Customer_Contact_Max_Order_By = {
  contactid?: Maybe<Order_By>;
  customerid?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Contact_Customer_Contact_Min_Fields = {
  __typename?: 'contact_customer_contact_min_fields';
  contactid?: Maybe<Scalars['uuid']>;
  customerid?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "contact.customer_contact" */
export type Contact_Customer_Contact_Min_Order_By = {
  contactid?: Maybe<Order_By>;
  customerid?: Maybe<Order_By>;
};

/** response of any mutation on the table "contact.customer_contact" */
export type Contact_Customer_Contact_Mutation_Response = {
  __typename?: 'contact_customer_contact_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Contact_Customer_Contact>;
};

/** on conflict condition type for table "contact.customer_contact" */
export type Contact_Customer_Contact_On_Conflict = {
  constraint: Contact_Customer_Contact_Constraint;
  update_columns?: Array<Contact_Customer_Contact_Update_Column>;
  where?: Maybe<Contact_Customer_Contact_Bool_Exp>;
};

/** Ordering options when selecting data from "contact.customer_contact". */
export type Contact_Customer_Contact_Order_By = {
  contact?: Maybe<Contact_Contact_Order_By>;
  contactid?: Maybe<Order_By>;
  customer?: Maybe<Contact_Customer_Order_By>;
  customerid?: Maybe<Order_By>;
};

/** primary key columns input for table: contact_customer_contact */
export type Contact_Customer_Contact_Pk_Columns_Input = {
  contactid: Scalars['uuid'];
  customerid: Scalars['uuid'];
};

/** select columns of table "contact.customer_contact" */
export enum Contact_Customer_Contact_Select_Column {
  /** column name */
  Contactid = 'contactid',
  /** column name */
  Customerid = 'customerid'
}

/** input type for updating data in table "contact.customer_contact" */
export type Contact_Customer_Contact_Set_Input = {
  contactid?: Maybe<Scalars['uuid']>;
  customerid?: Maybe<Scalars['uuid']>;
};

/** update columns of table "contact.customer_contact" */
export enum Contact_Customer_Contact_Update_Column {
  /** column name */
  Contactid = 'contactid',
  /** column name */
  Customerid = 'customerid'
}

/** columns and relationships of "contact.customer_contacts_view" */
export type Contact_Customer_Contacts_View = {
  __typename?: 'contact_customer_contacts_view';
  code?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['date']>;
  createdBy?: Maybe<Scalars['uuid']>;
  customerid?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  mail?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  note?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['date']>;
  updatedBy?: Maybe<Scalars['uuid']>;
};

/** aggregated selection of "contact.customer_contacts_view" */
export type Contact_Customer_Contacts_View_Aggregate = {
  __typename?: 'contact_customer_contacts_view_aggregate';
  aggregate?: Maybe<Contact_Customer_Contacts_View_Aggregate_Fields>;
  nodes: Array<Contact_Customer_Contacts_View>;
};

/** aggregate fields of "contact.customer_contacts_view" */
export type Contact_Customer_Contacts_View_Aggregate_Fields = {
  __typename?: 'contact_customer_contacts_view_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Contact_Customer_Contacts_View_Max_Fields>;
  min?: Maybe<Contact_Customer_Contacts_View_Min_Fields>;
};


/** aggregate fields of "contact.customer_contacts_view" */
export type Contact_Customer_Contacts_View_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Contact_Customer_Contacts_View_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "contact.customer_contacts_view" */
export type Contact_Customer_Contacts_View_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Contact_Customer_Contacts_View_Max_Order_By>;
  min?: Maybe<Contact_Customer_Contacts_View_Min_Order_By>;
};

/** input type for inserting array relation for remote table "contact.customer_contacts_view" */
export type Contact_Customer_Contacts_View_Arr_Rel_Insert_Input = {
  data: Array<Contact_Customer_Contacts_View_Insert_Input>;
};

/** Boolean expression to filter rows from the table "contact.customer_contacts_view". All fields are combined with a logical 'AND'. */
export type Contact_Customer_Contacts_View_Bool_Exp = {
  _and?: Maybe<Array<Contact_Customer_Contacts_View_Bool_Exp>>;
  _not?: Maybe<Contact_Customer_Contacts_View_Bool_Exp>;
  _or?: Maybe<Array<Contact_Customer_Contacts_View_Bool_Exp>>;
  code?: Maybe<String_Comparison_Exp>;
  createdAt?: Maybe<Date_Comparison_Exp>;
  createdBy?: Maybe<Uuid_Comparison_Exp>;
  customerid?: Maybe<Uuid_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  mail?: Maybe<String_Comparison_Exp>;
  name?: Maybe<String_Comparison_Exp>;
  note?: Maybe<String_Comparison_Exp>;
  phone?: Maybe<String_Comparison_Exp>;
  updatedAt?: Maybe<Date_Comparison_Exp>;
  updatedBy?: Maybe<Uuid_Comparison_Exp>;
};

/** input type for inserting data into table "contact.customer_contacts_view" */
export type Contact_Customer_Contacts_View_Insert_Input = {
  code?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['date']>;
  createdBy?: Maybe<Scalars['uuid']>;
  customerid?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  mail?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  note?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['date']>;
  updatedBy?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Contact_Customer_Contacts_View_Max_Fields = {
  __typename?: 'contact_customer_contacts_view_max_fields';
  code?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['date']>;
  createdBy?: Maybe<Scalars['uuid']>;
  customerid?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  mail?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  note?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['date']>;
  updatedBy?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "contact.customer_contacts_view" */
export type Contact_Customer_Contacts_View_Max_Order_By = {
  code?: Maybe<Order_By>;
  createdAt?: Maybe<Order_By>;
  createdBy?: Maybe<Order_By>;
  customerid?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  mail?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  note?: Maybe<Order_By>;
  phone?: Maybe<Order_By>;
  updatedAt?: Maybe<Order_By>;
  updatedBy?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Contact_Customer_Contacts_View_Min_Fields = {
  __typename?: 'contact_customer_contacts_view_min_fields';
  code?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['date']>;
  createdBy?: Maybe<Scalars['uuid']>;
  customerid?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  mail?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  note?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['date']>;
  updatedBy?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "contact.customer_contacts_view" */
export type Contact_Customer_Contacts_View_Min_Order_By = {
  code?: Maybe<Order_By>;
  createdAt?: Maybe<Order_By>;
  createdBy?: Maybe<Order_By>;
  customerid?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  mail?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  note?: Maybe<Order_By>;
  phone?: Maybe<Order_By>;
  updatedAt?: Maybe<Order_By>;
  updatedBy?: Maybe<Order_By>;
};

/** Ordering options when selecting data from "contact.customer_contacts_view". */
export type Contact_Customer_Contacts_View_Order_By = {
  code?: Maybe<Order_By>;
  createdAt?: Maybe<Order_By>;
  createdBy?: Maybe<Order_By>;
  customerid?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  mail?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  note?: Maybe<Order_By>;
  phone?: Maybe<Order_By>;
  updatedAt?: Maybe<Order_By>;
  updatedBy?: Maybe<Order_By>;
};

/** select columns of table "contact.customer_contacts_view" */
export enum Contact_Customer_Contacts_View_Select_Column {
  /** column name */
  Code = 'code',
  /** column name */
  CreatedAt = 'createdAt',
  /** column name */
  CreatedBy = 'createdBy',
  /** column name */
  Customerid = 'customerid',
  /** column name */
  Id = 'id',
  /** column name */
  Mail = 'mail',
  /** column name */
  Name = 'name',
  /** column name */
  Note = 'note',
  /** column name */
  Phone = 'phone',
  /** column name */
  UpdatedAt = 'updatedAt',
  /** column name */
  UpdatedBy = 'updatedBy'
}

/** input type for inserting data into table "contact.customer" */
export type Contact_Customer_Insert_Input = {
  FAX?: Maybe<Scalars['String']>;
  ICE?: Maybe<Scalars['String']>;
  IF?: Maybe<Scalars['String']>;
  addresses?: Maybe<Contact_Customer_Addresses_View_Arr_Rel_Insert_Input>;
  code?: Maybe<Scalars['String']>;
  contacts?: Maybe<Contact_Customer_Contacts_View_Arr_Rel_Insert_Input>;
  createdAt?: Maybe<Scalars['date']>;
  createdBy?: Maybe<Scalars['uuid']>;
  customer_addresses?: Maybe<Contact_Customer_Address_Arr_Rel_Insert_Input>;
  customer_contacts?: Maybe<Contact_Customer_Contact_Arr_Rel_Insert_Input>;
  deliveries?: Maybe<Sales_Delivery_Arr_Rel_Insert_Input>;
  id?: Maybe<Scalars['uuid']>;
  invoices?: Maybe<Sales_Invoice_Arr_Rel_Insert_Input>;
  mail?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  note?: Maybe<Scalars['String']>;
  orders?: Maybe<Sales_Order_Arr_Rel_Insert_Input>;
  payments?: Maybe<Sales_Payment_Arr_Rel_Insert_Input>;
  phone?: Maybe<Scalars['String']>;
  quotations?: Maybe<Sales_Quotation_Arr_Rel_Insert_Input>;
  type?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['date']>;
  updatedBy?: Maybe<Scalars['uuid']>;
  website?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Contact_Customer_Max_Fields = {
  __typename?: 'contact_customer_max_fields';
  FAX?: Maybe<Scalars['String']>;
  ICE?: Maybe<Scalars['String']>;
  IF?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['date']>;
  createdBy?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  mail?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  note?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['date']>;
  updatedBy?: Maybe<Scalars['uuid']>;
  website?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type Contact_Customer_Min_Fields = {
  __typename?: 'contact_customer_min_fields';
  FAX?: Maybe<Scalars['String']>;
  ICE?: Maybe<Scalars['String']>;
  IF?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['date']>;
  createdBy?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  mail?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  note?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['date']>;
  updatedBy?: Maybe<Scalars['uuid']>;
  website?: Maybe<Scalars['String']>;
};

/** response of any mutation on the table "contact.customer" */
export type Contact_Customer_Mutation_Response = {
  __typename?: 'contact_customer_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Contact_Customer>;
};

/** input type for inserting object relation for remote table "contact.customer" */
export type Contact_Customer_Obj_Rel_Insert_Input = {
  data: Contact_Customer_Insert_Input;
  /** on conflict condition */
  on_conflict?: Maybe<Contact_Customer_On_Conflict>;
};

/** on conflict condition type for table "contact.customer" */
export type Contact_Customer_On_Conflict = {
  constraint: Contact_Customer_Constraint;
  update_columns?: Array<Contact_Customer_Update_Column>;
  where?: Maybe<Contact_Customer_Bool_Exp>;
};

/** Ordering options when selecting data from "contact.customer". */
export type Contact_Customer_Order_By = {
  FAX?: Maybe<Order_By>;
  ICE?: Maybe<Order_By>;
  IF?: Maybe<Order_By>;
  addresses_aggregate?: Maybe<Contact_Customer_Addresses_View_Aggregate_Order_By>;
  code?: Maybe<Order_By>;
  contacts_aggregate?: Maybe<Contact_Customer_Contacts_View_Aggregate_Order_By>;
  createdAt?: Maybe<Order_By>;
  createdBy?: Maybe<Order_By>;
  customer_addresses_aggregate?: Maybe<Contact_Customer_Address_Aggregate_Order_By>;
  customer_contacts_aggregate?: Maybe<Contact_Customer_Contact_Aggregate_Order_By>;
  deliveries_aggregate?: Maybe<Sales_Delivery_Aggregate_Order_By>;
  id?: Maybe<Order_By>;
  invoices_aggregate?: Maybe<Sales_Invoice_Aggregate_Order_By>;
  mail?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  note?: Maybe<Order_By>;
  orders_aggregate?: Maybe<Sales_Order_Aggregate_Order_By>;
  payments_aggregate?: Maybe<Sales_Payment_Aggregate_Order_By>;
  phone?: Maybe<Order_By>;
  quotations_aggregate?: Maybe<Sales_Quotation_Aggregate_Order_By>;
  type?: Maybe<Order_By>;
  updatedAt?: Maybe<Order_By>;
  updatedBy?: Maybe<Order_By>;
  website?: Maybe<Order_By>;
};

/** primary key columns input for table: contact_customer */
export type Contact_Customer_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "contact.customer" */
export enum Contact_Customer_Select_Column {
  /** column name */
  Fax = 'FAX',
  /** column name */
  Ice = 'ICE',
  /** column name */
  If = 'IF',
  /** column name */
  Code = 'code',
  /** column name */
  CreatedAt = 'createdAt',
  /** column name */
  CreatedBy = 'createdBy',
  /** column name */
  Id = 'id',
  /** column name */
  Mail = 'mail',
  /** column name */
  Name = 'name',
  /** column name */
  Note = 'note',
  /** column name */
  Phone = 'phone',
  /** column name */
  Type = 'type',
  /** column name */
  UpdatedAt = 'updatedAt',
  /** column name */
  UpdatedBy = 'updatedBy',
  /** column name */
  Website = 'website'
}

/** input type for updating data in table "contact.customer" */
export type Contact_Customer_Set_Input = {
  FAX?: Maybe<Scalars['String']>;
  ICE?: Maybe<Scalars['String']>;
  IF?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['date']>;
  createdBy?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  mail?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  note?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['date']>;
  updatedBy?: Maybe<Scalars['uuid']>;
  website?: Maybe<Scalars['String']>;
};

/** update columns of table "contact.customer" */
export enum Contact_Customer_Update_Column {
  /** column name */
  Fax = 'FAX',
  /** column name */
  Ice = 'ICE',
  /** column name */
  If = 'IF',
  /** column name */
  Code = 'code',
  /** column name */
  CreatedAt = 'createdAt',
  /** column name */
  CreatedBy = 'createdBy',
  /** column name */
  Id = 'id',
  /** column name */
  Mail = 'mail',
  /** column name */
  Name = 'name',
  /** column name */
  Note = 'note',
  /** column name */
  Phone = 'phone',
  /** column name */
  Type = 'type',
  /** column name */
  UpdatedAt = 'updatedAt',
  /** column name */
  UpdatedBy = 'updatedBy',
  /** column name */
  Website = 'website'
}

/** columns and relationships of "contact.provider" */
export type Contact_Provider = {
  __typename?: 'contact_provider';
  FAX?: Maybe<Scalars['String']>;
  /** An array relationship */
  addresses: Array<Contact_Provider_Addresses_View>;
  /** An aggregate relationship */
  addresses_aggregate: Contact_Provider_Addresses_View_Aggregate;
  code?: Maybe<Scalars['String']>;
  /** An array relationship */
  contacts: Array<Contact_Provider_Contacts_View>;
  /** An aggregate relationship */
  contacts_aggregate: Contact_Provider_Contacts_View_Aggregate;
  createdAt?: Maybe<Scalars['date']>;
  createdBy?: Maybe<Scalars['uuid']>;
  id: Scalars['uuid'];
  mail?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  note?: Maybe<Scalars['String']>;
  phone: Scalars['String'];
  /** An array relationship */
  provider_addresses: Array<Contact_Provider_Address>;
  /** An aggregate relationship */
  provider_addresses_aggregate: Contact_Provider_Address_Aggregate;
  /** An array relationship */
  provider_contacts: Array<Contact_Provider_Contact>;
  /** An aggregate relationship */
  provider_contacts_aggregate: Contact_Provider_Contact_Aggregate;
  /** An array relationship */
  provider_deliveries: Array<Purchase_Delivery>;
  /** An aggregate relationship */
  provider_deliveries_aggregate: Purchase_Delivery_Aggregate;
  /** An array relationship */
  substance_providers: Array<Product_Substance_Provider>;
  /** An aggregate relationship */
  substance_providers_aggregate: Product_Substance_Provider_Aggregate;
  updatedAt?: Maybe<Scalars['date']>;
  updatedBy?: Maybe<Scalars['uuid']>;
  website?: Maybe<Scalars['String']>;
};


/** columns and relationships of "contact.provider" */
export type Contact_ProviderAddressesArgs = {
  distinct_on?: Maybe<Array<Contact_Provider_Addresses_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Provider_Addresses_View_Order_By>>;
  where?: Maybe<Contact_Provider_Addresses_View_Bool_Exp>;
};


/** columns and relationships of "contact.provider" */
export type Contact_ProviderAddresses_AggregateArgs = {
  distinct_on?: Maybe<Array<Contact_Provider_Addresses_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Provider_Addresses_View_Order_By>>;
  where?: Maybe<Contact_Provider_Addresses_View_Bool_Exp>;
};


/** columns and relationships of "contact.provider" */
export type Contact_ProviderContactsArgs = {
  distinct_on?: Maybe<Array<Contact_Provider_Contacts_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Provider_Contacts_View_Order_By>>;
  where?: Maybe<Contact_Provider_Contacts_View_Bool_Exp>;
};


/** columns and relationships of "contact.provider" */
export type Contact_ProviderContacts_AggregateArgs = {
  distinct_on?: Maybe<Array<Contact_Provider_Contacts_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Provider_Contacts_View_Order_By>>;
  where?: Maybe<Contact_Provider_Contacts_View_Bool_Exp>;
};


/** columns and relationships of "contact.provider" */
export type Contact_ProviderProvider_AddressesArgs = {
  distinct_on?: Maybe<Array<Contact_Provider_Address_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Provider_Address_Order_By>>;
  where?: Maybe<Contact_Provider_Address_Bool_Exp>;
};


/** columns and relationships of "contact.provider" */
export type Contact_ProviderProvider_Addresses_AggregateArgs = {
  distinct_on?: Maybe<Array<Contact_Provider_Address_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Provider_Address_Order_By>>;
  where?: Maybe<Contact_Provider_Address_Bool_Exp>;
};


/** columns and relationships of "contact.provider" */
export type Contact_ProviderProvider_ContactsArgs = {
  distinct_on?: Maybe<Array<Contact_Provider_Contact_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Provider_Contact_Order_By>>;
  where?: Maybe<Contact_Provider_Contact_Bool_Exp>;
};


/** columns and relationships of "contact.provider" */
export type Contact_ProviderProvider_Contacts_AggregateArgs = {
  distinct_on?: Maybe<Array<Contact_Provider_Contact_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Provider_Contact_Order_By>>;
  where?: Maybe<Contact_Provider_Contact_Bool_Exp>;
};


/** columns and relationships of "contact.provider" */
export type Contact_ProviderProvider_DeliveriesArgs = {
  distinct_on?: Maybe<Array<Purchase_Delivery_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Purchase_Delivery_Order_By>>;
  where?: Maybe<Purchase_Delivery_Bool_Exp>;
};


/** columns and relationships of "contact.provider" */
export type Contact_ProviderProvider_Deliveries_AggregateArgs = {
  distinct_on?: Maybe<Array<Purchase_Delivery_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Purchase_Delivery_Order_By>>;
  where?: Maybe<Purchase_Delivery_Bool_Exp>;
};


/** columns and relationships of "contact.provider" */
export type Contact_ProviderSubstance_ProvidersArgs = {
  distinct_on?: Maybe<Array<Product_Substance_Provider_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Substance_Provider_Order_By>>;
  where?: Maybe<Product_Substance_Provider_Bool_Exp>;
};


/** columns and relationships of "contact.provider" */
export type Contact_ProviderSubstance_Providers_AggregateArgs = {
  distinct_on?: Maybe<Array<Product_Substance_Provider_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Substance_Provider_Order_By>>;
  where?: Maybe<Product_Substance_Provider_Bool_Exp>;
};

/** columns and relationships of "contact.provider_address" */
export type Contact_Provider_Address = {
  __typename?: 'contact_provider_address';
  /** An object relationship */
  address: Contact_Address;
  addressid: Scalars['uuid'];
  /** An object relationship */
  provider: Contact_Provider;
  providerid: Scalars['uuid'];
};

/** aggregated selection of "contact.provider_address" */
export type Contact_Provider_Address_Aggregate = {
  __typename?: 'contact_provider_address_aggregate';
  aggregate?: Maybe<Contact_Provider_Address_Aggregate_Fields>;
  nodes: Array<Contact_Provider_Address>;
};

/** aggregate fields of "contact.provider_address" */
export type Contact_Provider_Address_Aggregate_Fields = {
  __typename?: 'contact_provider_address_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Contact_Provider_Address_Max_Fields>;
  min?: Maybe<Contact_Provider_Address_Min_Fields>;
};


/** aggregate fields of "contact.provider_address" */
export type Contact_Provider_Address_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Contact_Provider_Address_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "contact.provider_address" */
export type Contact_Provider_Address_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Contact_Provider_Address_Max_Order_By>;
  min?: Maybe<Contact_Provider_Address_Min_Order_By>;
};

/** input type for inserting array relation for remote table "contact.provider_address" */
export type Contact_Provider_Address_Arr_Rel_Insert_Input = {
  data: Array<Contact_Provider_Address_Insert_Input>;
  /** on conflict condition */
  on_conflict?: Maybe<Contact_Provider_Address_On_Conflict>;
};

/** Boolean expression to filter rows from the table "contact.provider_address". All fields are combined with a logical 'AND'. */
export type Contact_Provider_Address_Bool_Exp = {
  _and?: Maybe<Array<Contact_Provider_Address_Bool_Exp>>;
  _not?: Maybe<Contact_Provider_Address_Bool_Exp>;
  _or?: Maybe<Array<Contact_Provider_Address_Bool_Exp>>;
  address?: Maybe<Contact_Address_Bool_Exp>;
  addressid?: Maybe<Uuid_Comparison_Exp>;
  provider?: Maybe<Contact_Provider_Bool_Exp>;
  providerid?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "contact.provider_address" */
export enum Contact_Provider_Address_Constraint {
  /** unique or primary key constraint */
  ProviderAddressPkey = 'provider_address_pkey'
}

/** input type for inserting data into table "contact.provider_address" */
export type Contact_Provider_Address_Insert_Input = {
  address?: Maybe<Contact_Address_Obj_Rel_Insert_Input>;
  addressid?: Maybe<Scalars['uuid']>;
  provider?: Maybe<Contact_Provider_Obj_Rel_Insert_Input>;
  providerid?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Contact_Provider_Address_Max_Fields = {
  __typename?: 'contact_provider_address_max_fields';
  addressid?: Maybe<Scalars['uuid']>;
  providerid?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "contact.provider_address" */
export type Contact_Provider_Address_Max_Order_By = {
  addressid?: Maybe<Order_By>;
  providerid?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Contact_Provider_Address_Min_Fields = {
  __typename?: 'contact_provider_address_min_fields';
  addressid?: Maybe<Scalars['uuid']>;
  providerid?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "contact.provider_address" */
export type Contact_Provider_Address_Min_Order_By = {
  addressid?: Maybe<Order_By>;
  providerid?: Maybe<Order_By>;
};

/** response of any mutation on the table "contact.provider_address" */
export type Contact_Provider_Address_Mutation_Response = {
  __typename?: 'contact_provider_address_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Contact_Provider_Address>;
};

/** on conflict condition type for table "contact.provider_address" */
export type Contact_Provider_Address_On_Conflict = {
  constraint: Contact_Provider_Address_Constraint;
  update_columns?: Array<Contact_Provider_Address_Update_Column>;
  where?: Maybe<Contact_Provider_Address_Bool_Exp>;
};

/** Ordering options when selecting data from "contact.provider_address". */
export type Contact_Provider_Address_Order_By = {
  address?: Maybe<Contact_Address_Order_By>;
  addressid?: Maybe<Order_By>;
  provider?: Maybe<Contact_Provider_Order_By>;
  providerid?: Maybe<Order_By>;
};

/** primary key columns input for table: contact_provider_address */
export type Contact_Provider_Address_Pk_Columns_Input = {
  addressid: Scalars['uuid'];
  providerid: Scalars['uuid'];
};

/** select columns of table "contact.provider_address" */
export enum Contact_Provider_Address_Select_Column {
  /** column name */
  Addressid = 'addressid',
  /** column name */
  Providerid = 'providerid'
}

/** input type for updating data in table "contact.provider_address" */
export type Contact_Provider_Address_Set_Input = {
  addressid?: Maybe<Scalars['uuid']>;
  providerid?: Maybe<Scalars['uuid']>;
};

/** update columns of table "contact.provider_address" */
export enum Contact_Provider_Address_Update_Column {
  /** column name */
  Addressid = 'addressid',
  /** column name */
  Providerid = 'providerid'
}

/** columns and relationships of "contact.provider_addresses_view" */
export type Contact_Provider_Addresses_View = {
  __typename?: 'contact_provider_addresses_view';
  address?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  providerid?: Maybe<Scalars['uuid']>;
  zip?: Maybe<Scalars['String']>;
};

/** aggregated selection of "contact.provider_addresses_view" */
export type Contact_Provider_Addresses_View_Aggregate = {
  __typename?: 'contact_provider_addresses_view_aggregate';
  aggregate?: Maybe<Contact_Provider_Addresses_View_Aggregate_Fields>;
  nodes: Array<Contact_Provider_Addresses_View>;
};

/** aggregate fields of "contact.provider_addresses_view" */
export type Contact_Provider_Addresses_View_Aggregate_Fields = {
  __typename?: 'contact_provider_addresses_view_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Contact_Provider_Addresses_View_Max_Fields>;
  min?: Maybe<Contact_Provider_Addresses_View_Min_Fields>;
};


/** aggregate fields of "contact.provider_addresses_view" */
export type Contact_Provider_Addresses_View_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Contact_Provider_Addresses_View_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "contact.provider_addresses_view" */
export type Contact_Provider_Addresses_View_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Contact_Provider_Addresses_View_Max_Order_By>;
  min?: Maybe<Contact_Provider_Addresses_View_Min_Order_By>;
};

/** input type for inserting array relation for remote table "contact.provider_addresses_view" */
export type Contact_Provider_Addresses_View_Arr_Rel_Insert_Input = {
  data: Array<Contact_Provider_Addresses_View_Insert_Input>;
};

/** Boolean expression to filter rows from the table "contact.provider_addresses_view". All fields are combined with a logical 'AND'. */
export type Contact_Provider_Addresses_View_Bool_Exp = {
  _and?: Maybe<Array<Contact_Provider_Addresses_View_Bool_Exp>>;
  _not?: Maybe<Contact_Provider_Addresses_View_Bool_Exp>;
  _or?: Maybe<Array<Contact_Provider_Addresses_View_Bool_Exp>>;
  address?: Maybe<String_Comparison_Exp>;
  city?: Maybe<String_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  providerid?: Maybe<Uuid_Comparison_Exp>;
  zip?: Maybe<String_Comparison_Exp>;
};

/** input type for inserting data into table "contact.provider_addresses_view" */
export type Contact_Provider_Addresses_View_Insert_Input = {
  address?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  providerid?: Maybe<Scalars['uuid']>;
  zip?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Contact_Provider_Addresses_View_Max_Fields = {
  __typename?: 'contact_provider_addresses_view_max_fields';
  address?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  providerid?: Maybe<Scalars['uuid']>;
  zip?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "contact.provider_addresses_view" */
export type Contact_Provider_Addresses_View_Max_Order_By = {
  address?: Maybe<Order_By>;
  city?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  providerid?: Maybe<Order_By>;
  zip?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Contact_Provider_Addresses_View_Min_Fields = {
  __typename?: 'contact_provider_addresses_view_min_fields';
  address?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  providerid?: Maybe<Scalars['uuid']>;
  zip?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "contact.provider_addresses_view" */
export type Contact_Provider_Addresses_View_Min_Order_By = {
  address?: Maybe<Order_By>;
  city?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  providerid?: Maybe<Order_By>;
  zip?: Maybe<Order_By>;
};

/** Ordering options when selecting data from "contact.provider_addresses_view". */
export type Contact_Provider_Addresses_View_Order_By = {
  address?: Maybe<Order_By>;
  city?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  providerid?: Maybe<Order_By>;
  zip?: Maybe<Order_By>;
};

/** select columns of table "contact.provider_addresses_view" */
export enum Contact_Provider_Addresses_View_Select_Column {
  /** column name */
  Address = 'address',
  /** column name */
  City = 'city',
  /** column name */
  Id = 'id',
  /** column name */
  Providerid = 'providerid',
  /** column name */
  Zip = 'zip'
}

/** aggregated selection of "contact.provider" */
export type Contact_Provider_Aggregate = {
  __typename?: 'contact_provider_aggregate';
  aggregate?: Maybe<Contact_Provider_Aggregate_Fields>;
  nodes: Array<Contact_Provider>;
};

/** aggregate fields of "contact.provider" */
export type Contact_Provider_Aggregate_Fields = {
  __typename?: 'contact_provider_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Contact_Provider_Max_Fields>;
  min?: Maybe<Contact_Provider_Min_Fields>;
};


/** aggregate fields of "contact.provider" */
export type Contact_Provider_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Contact_Provider_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** Boolean expression to filter rows from the table "contact.provider". All fields are combined with a logical 'AND'. */
export type Contact_Provider_Bool_Exp = {
  FAX?: Maybe<String_Comparison_Exp>;
  _and?: Maybe<Array<Contact_Provider_Bool_Exp>>;
  _not?: Maybe<Contact_Provider_Bool_Exp>;
  _or?: Maybe<Array<Contact_Provider_Bool_Exp>>;
  addresses?: Maybe<Contact_Provider_Addresses_View_Bool_Exp>;
  code?: Maybe<String_Comparison_Exp>;
  contacts?: Maybe<Contact_Provider_Contacts_View_Bool_Exp>;
  createdAt?: Maybe<Date_Comparison_Exp>;
  createdBy?: Maybe<Uuid_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  mail?: Maybe<String_Comparison_Exp>;
  name?: Maybe<String_Comparison_Exp>;
  note?: Maybe<String_Comparison_Exp>;
  phone?: Maybe<String_Comparison_Exp>;
  provider_addresses?: Maybe<Contact_Provider_Address_Bool_Exp>;
  provider_contacts?: Maybe<Contact_Provider_Contact_Bool_Exp>;
  provider_deliveries?: Maybe<Purchase_Delivery_Bool_Exp>;
  substance_providers?: Maybe<Product_Substance_Provider_Bool_Exp>;
  updatedAt?: Maybe<Date_Comparison_Exp>;
  updatedBy?: Maybe<Uuid_Comparison_Exp>;
  website?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "contact.provider" */
export enum Contact_Provider_Constraint {
  /** unique or primary key constraint */
  ProviderCodeKey = 'Provider_code_key',
  /** unique or primary key constraint */
  ProviderIdKey = 'Provider_id_key',
  /** unique or primary key constraint */
  ProviderNameKey = 'Provider_name_key',
  /** unique or primary key constraint */
  ProviderPhoneKey = 'Provider_phone_key',
  /** unique or primary key constraint */
  ProviderPkey = 'Provider_pkey'
}

/** columns and relationships of "contact.provider_contact" */
export type Contact_Provider_Contact = {
  __typename?: 'contact_provider_contact';
  /** An object relationship */
  contact: Contact_Contact;
  contactid: Scalars['uuid'];
  /** An object relationship */
  provider: Contact_Provider;
  providerid: Scalars['uuid'];
};

/** aggregated selection of "contact.provider_contact" */
export type Contact_Provider_Contact_Aggregate = {
  __typename?: 'contact_provider_contact_aggregate';
  aggregate?: Maybe<Contact_Provider_Contact_Aggregate_Fields>;
  nodes: Array<Contact_Provider_Contact>;
};

/** aggregate fields of "contact.provider_contact" */
export type Contact_Provider_Contact_Aggregate_Fields = {
  __typename?: 'contact_provider_contact_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Contact_Provider_Contact_Max_Fields>;
  min?: Maybe<Contact_Provider_Contact_Min_Fields>;
};


/** aggregate fields of "contact.provider_contact" */
export type Contact_Provider_Contact_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Contact_Provider_Contact_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "contact.provider_contact" */
export type Contact_Provider_Contact_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Contact_Provider_Contact_Max_Order_By>;
  min?: Maybe<Contact_Provider_Contact_Min_Order_By>;
};

/** input type for inserting array relation for remote table "contact.provider_contact" */
export type Contact_Provider_Contact_Arr_Rel_Insert_Input = {
  data: Array<Contact_Provider_Contact_Insert_Input>;
  /** on conflict condition */
  on_conflict?: Maybe<Contact_Provider_Contact_On_Conflict>;
};

/** Boolean expression to filter rows from the table "contact.provider_contact". All fields are combined with a logical 'AND'. */
export type Contact_Provider_Contact_Bool_Exp = {
  _and?: Maybe<Array<Contact_Provider_Contact_Bool_Exp>>;
  _not?: Maybe<Contact_Provider_Contact_Bool_Exp>;
  _or?: Maybe<Array<Contact_Provider_Contact_Bool_Exp>>;
  contact?: Maybe<Contact_Contact_Bool_Exp>;
  contactid?: Maybe<Uuid_Comparison_Exp>;
  provider?: Maybe<Contact_Provider_Bool_Exp>;
  providerid?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "contact.provider_contact" */
export enum Contact_Provider_Contact_Constraint {
  /** unique or primary key constraint */
  ProviderContactPkey = 'provider_contact_pkey'
}

/** input type for inserting data into table "contact.provider_contact" */
export type Contact_Provider_Contact_Insert_Input = {
  contact?: Maybe<Contact_Contact_Obj_Rel_Insert_Input>;
  contactid?: Maybe<Scalars['uuid']>;
  provider?: Maybe<Contact_Provider_Obj_Rel_Insert_Input>;
  providerid?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Contact_Provider_Contact_Max_Fields = {
  __typename?: 'contact_provider_contact_max_fields';
  contactid?: Maybe<Scalars['uuid']>;
  providerid?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "contact.provider_contact" */
export type Contact_Provider_Contact_Max_Order_By = {
  contactid?: Maybe<Order_By>;
  providerid?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Contact_Provider_Contact_Min_Fields = {
  __typename?: 'contact_provider_contact_min_fields';
  contactid?: Maybe<Scalars['uuid']>;
  providerid?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "contact.provider_contact" */
export type Contact_Provider_Contact_Min_Order_By = {
  contactid?: Maybe<Order_By>;
  providerid?: Maybe<Order_By>;
};

/** response of any mutation on the table "contact.provider_contact" */
export type Contact_Provider_Contact_Mutation_Response = {
  __typename?: 'contact_provider_contact_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Contact_Provider_Contact>;
};

/** on conflict condition type for table "contact.provider_contact" */
export type Contact_Provider_Contact_On_Conflict = {
  constraint: Contact_Provider_Contact_Constraint;
  update_columns?: Array<Contact_Provider_Contact_Update_Column>;
  where?: Maybe<Contact_Provider_Contact_Bool_Exp>;
};

/** Ordering options when selecting data from "contact.provider_contact". */
export type Contact_Provider_Contact_Order_By = {
  contact?: Maybe<Contact_Contact_Order_By>;
  contactid?: Maybe<Order_By>;
  provider?: Maybe<Contact_Provider_Order_By>;
  providerid?: Maybe<Order_By>;
};

/** primary key columns input for table: contact_provider_contact */
export type Contact_Provider_Contact_Pk_Columns_Input = {
  contactid: Scalars['uuid'];
  providerid: Scalars['uuid'];
};

/** select columns of table "contact.provider_contact" */
export enum Contact_Provider_Contact_Select_Column {
  /** column name */
  Contactid = 'contactid',
  /** column name */
  Providerid = 'providerid'
}

/** input type for updating data in table "contact.provider_contact" */
export type Contact_Provider_Contact_Set_Input = {
  contactid?: Maybe<Scalars['uuid']>;
  providerid?: Maybe<Scalars['uuid']>;
};

/** update columns of table "contact.provider_contact" */
export enum Contact_Provider_Contact_Update_Column {
  /** column name */
  Contactid = 'contactid',
  /** column name */
  Providerid = 'providerid'
}

/** columns and relationships of "contact.provider_contacts_view" */
export type Contact_Provider_Contacts_View = {
  __typename?: 'contact_provider_contacts_view';
  code?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['date']>;
  createdBy?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  mail?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  note?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  providerid?: Maybe<Scalars['uuid']>;
  updatedAt?: Maybe<Scalars['date']>;
  updatedBy?: Maybe<Scalars['uuid']>;
};

/** aggregated selection of "contact.provider_contacts_view" */
export type Contact_Provider_Contacts_View_Aggregate = {
  __typename?: 'contact_provider_contacts_view_aggregate';
  aggregate?: Maybe<Contact_Provider_Contacts_View_Aggregate_Fields>;
  nodes: Array<Contact_Provider_Contacts_View>;
};

/** aggregate fields of "contact.provider_contacts_view" */
export type Contact_Provider_Contacts_View_Aggregate_Fields = {
  __typename?: 'contact_provider_contacts_view_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Contact_Provider_Contacts_View_Max_Fields>;
  min?: Maybe<Contact_Provider_Contacts_View_Min_Fields>;
};


/** aggregate fields of "contact.provider_contacts_view" */
export type Contact_Provider_Contacts_View_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Contact_Provider_Contacts_View_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "contact.provider_contacts_view" */
export type Contact_Provider_Contacts_View_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Contact_Provider_Contacts_View_Max_Order_By>;
  min?: Maybe<Contact_Provider_Contacts_View_Min_Order_By>;
};

/** input type for inserting array relation for remote table "contact.provider_contacts_view" */
export type Contact_Provider_Contacts_View_Arr_Rel_Insert_Input = {
  data: Array<Contact_Provider_Contacts_View_Insert_Input>;
};

/** Boolean expression to filter rows from the table "contact.provider_contacts_view". All fields are combined with a logical 'AND'. */
export type Contact_Provider_Contacts_View_Bool_Exp = {
  _and?: Maybe<Array<Contact_Provider_Contacts_View_Bool_Exp>>;
  _not?: Maybe<Contact_Provider_Contacts_View_Bool_Exp>;
  _or?: Maybe<Array<Contact_Provider_Contacts_View_Bool_Exp>>;
  code?: Maybe<String_Comparison_Exp>;
  createdAt?: Maybe<Date_Comparison_Exp>;
  createdBy?: Maybe<Uuid_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  mail?: Maybe<String_Comparison_Exp>;
  name?: Maybe<String_Comparison_Exp>;
  note?: Maybe<String_Comparison_Exp>;
  phone?: Maybe<String_Comparison_Exp>;
  providerid?: Maybe<Uuid_Comparison_Exp>;
  updatedAt?: Maybe<Date_Comparison_Exp>;
  updatedBy?: Maybe<Uuid_Comparison_Exp>;
};

/** input type for inserting data into table "contact.provider_contacts_view" */
export type Contact_Provider_Contacts_View_Insert_Input = {
  code?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['date']>;
  createdBy?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  mail?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  note?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  providerid?: Maybe<Scalars['uuid']>;
  updatedAt?: Maybe<Scalars['date']>;
  updatedBy?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Contact_Provider_Contacts_View_Max_Fields = {
  __typename?: 'contact_provider_contacts_view_max_fields';
  code?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['date']>;
  createdBy?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  mail?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  note?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  providerid?: Maybe<Scalars['uuid']>;
  updatedAt?: Maybe<Scalars['date']>;
  updatedBy?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "contact.provider_contacts_view" */
export type Contact_Provider_Contacts_View_Max_Order_By = {
  code?: Maybe<Order_By>;
  createdAt?: Maybe<Order_By>;
  createdBy?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  mail?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  note?: Maybe<Order_By>;
  phone?: Maybe<Order_By>;
  providerid?: Maybe<Order_By>;
  updatedAt?: Maybe<Order_By>;
  updatedBy?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Contact_Provider_Contacts_View_Min_Fields = {
  __typename?: 'contact_provider_contacts_view_min_fields';
  code?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['date']>;
  createdBy?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  mail?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  note?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  providerid?: Maybe<Scalars['uuid']>;
  updatedAt?: Maybe<Scalars['date']>;
  updatedBy?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "contact.provider_contacts_view" */
export type Contact_Provider_Contacts_View_Min_Order_By = {
  code?: Maybe<Order_By>;
  createdAt?: Maybe<Order_By>;
  createdBy?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  mail?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  note?: Maybe<Order_By>;
  phone?: Maybe<Order_By>;
  providerid?: Maybe<Order_By>;
  updatedAt?: Maybe<Order_By>;
  updatedBy?: Maybe<Order_By>;
};

/** Ordering options when selecting data from "contact.provider_contacts_view". */
export type Contact_Provider_Contacts_View_Order_By = {
  code?: Maybe<Order_By>;
  createdAt?: Maybe<Order_By>;
  createdBy?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  mail?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  note?: Maybe<Order_By>;
  phone?: Maybe<Order_By>;
  providerid?: Maybe<Order_By>;
  updatedAt?: Maybe<Order_By>;
  updatedBy?: Maybe<Order_By>;
};

/** select columns of table "contact.provider_contacts_view" */
export enum Contact_Provider_Contacts_View_Select_Column {
  /** column name */
  Code = 'code',
  /** column name */
  CreatedAt = 'createdAt',
  /** column name */
  CreatedBy = 'createdBy',
  /** column name */
  Id = 'id',
  /** column name */
  Mail = 'mail',
  /** column name */
  Name = 'name',
  /** column name */
  Note = 'note',
  /** column name */
  Phone = 'phone',
  /** column name */
  Providerid = 'providerid',
  /** column name */
  UpdatedAt = 'updatedAt',
  /** column name */
  UpdatedBy = 'updatedBy'
}

/** input type for inserting data into table "contact.provider" */
export type Contact_Provider_Insert_Input = {
  FAX?: Maybe<Scalars['String']>;
  addresses?: Maybe<Contact_Provider_Addresses_View_Arr_Rel_Insert_Input>;
  code?: Maybe<Scalars['String']>;
  contacts?: Maybe<Contact_Provider_Contacts_View_Arr_Rel_Insert_Input>;
  createdAt?: Maybe<Scalars['date']>;
  createdBy?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  mail?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  note?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  provider_addresses?: Maybe<Contact_Provider_Address_Arr_Rel_Insert_Input>;
  provider_contacts?: Maybe<Contact_Provider_Contact_Arr_Rel_Insert_Input>;
  provider_deliveries?: Maybe<Purchase_Delivery_Arr_Rel_Insert_Input>;
  substance_providers?: Maybe<Product_Substance_Provider_Arr_Rel_Insert_Input>;
  updatedAt?: Maybe<Scalars['date']>;
  updatedBy?: Maybe<Scalars['uuid']>;
  website?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Contact_Provider_Max_Fields = {
  __typename?: 'contact_provider_max_fields';
  FAX?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['date']>;
  createdBy?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  mail?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  note?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['date']>;
  updatedBy?: Maybe<Scalars['uuid']>;
  website?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type Contact_Provider_Min_Fields = {
  __typename?: 'contact_provider_min_fields';
  FAX?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['date']>;
  createdBy?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  mail?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  note?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['date']>;
  updatedBy?: Maybe<Scalars['uuid']>;
  website?: Maybe<Scalars['String']>;
};

/** response of any mutation on the table "contact.provider" */
export type Contact_Provider_Mutation_Response = {
  __typename?: 'contact_provider_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Contact_Provider>;
};

/** input type for inserting object relation for remote table "contact.provider" */
export type Contact_Provider_Obj_Rel_Insert_Input = {
  data: Contact_Provider_Insert_Input;
  /** on conflict condition */
  on_conflict?: Maybe<Contact_Provider_On_Conflict>;
};

/** on conflict condition type for table "contact.provider" */
export type Contact_Provider_On_Conflict = {
  constraint: Contact_Provider_Constraint;
  update_columns?: Array<Contact_Provider_Update_Column>;
  where?: Maybe<Contact_Provider_Bool_Exp>;
};

/** Ordering options when selecting data from "contact.provider". */
export type Contact_Provider_Order_By = {
  FAX?: Maybe<Order_By>;
  addresses_aggregate?: Maybe<Contact_Provider_Addresses_View_Aggregate_Order_By>;
  code?: Maybe<Order_By>;
  contacts_aggregate?: Maybe<Contact_Provider_Contacts_View_Aggregate_Order_By>;
  createdAt?: Maybe<Order_By>;
  createdBy?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  mail?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  note?: Maybe<Order_By>;
  phone?: Maybe<Order_By>;
  provider_addresses_aggregate?: Maybe<Contact_Provider_Address_Aggregate_Order_By>;
  provider_contacts_aggregate?: Maybe<Contact_Provider_Contact_Aggregate_Order_By>;
  provider_deliveries_aggregate?: Maybe<Purchase_Delivery_Aggregate_Order_By>;
  substance_providers_aggregate?: Maybe<Product_Substance_Provider_Aggregate_Order_By>;
  updatedAt?: Maybe<Order_By>;
  updatedBy?: Maybe<Order_By>;
  website?: Maybe<Order_By>;
};

/** primary key columns input for table: contact_provider */
export type Contact_Provider_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "contact.provider" */
export enum Contact_Provider_Select_Column {
  /** column name */
  Fax = 'FAX',
  /** column name */
  Code = 'code',
  /** column name */
  CreatedAt = 'createdAt',
  /** column name */
  CreatedBy = 'createdBy',
  /** column name */
  Id = 'id',
  /** column name */
  Mail = 'mail',
  /** column name */
  Name = 'name',
  /** column name */
  Note = 'note',
  /** column name */
  Phone = 'phone',
  /** column name */
  UpdatedAt = 'updatedAt',
  /** column name */
  UpdatedBy = 'updatedBy',
  /** column name */
  Website = 'website'
}

/** input type for updating data in table "contact.provider" */
export type Contact_Provider_Set_Input = {
  FAX?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['date']>;
  createdBy?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  mail?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  note?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['date']>;
  updatedBy?: Maybe<Scalars['uuid']>;
  website?: Maybe<Scalars['String']>;
};

/** update columns of table "contact.provider" */
export enum Contact_Provider_Update_Column {
  /** column name */
  Fax = 'FAX',
  /** column name */
  Code = 'code',
  /** column name */
  CreatedAt = 'createdAt',
  /** column name */
  CreatedBy = 'createdBy',
  /** column name */
  Id = 'id',
  /** column name */
  Mail = 'mail',
  /** column name */
  Name = 'name',
  /** column name */
  Note = 'note',
  /** column name */
  Phone = 'phone',
  /** column name */
  UpdatedAt = 'updatedAt',
  /** column name */
  UpdatedBy = 'updatedBy',
  /** column name */
  Website = 'website'
}

/** columns and relationships of "customer_situation" */
export type Customer_Situation = {
  __typename?: 'customer_situation';
  credit?: Maybe<Scalars['numeric']>;
  customer_id?: Maybe<Scalars['uuid']>;
  order_ref?: Maybe<Scalars['String']>;
  paid?: Maybe<Scalars['numeric']>;
  total_ttc?: Maybe<Scalars['numeric']>;
};

/** aggregated selection of "customer_situation" */
export type Customer_Situation_Aggregate = {
  __typename?: 'customer_situation_aggregate';
  aggregate?: Maybe<Customer_Situation_Aggregate_Fields>;
  nodes: Array<Customer_Situation>;
};

/** aggregate fields of "customer_situation" */
export type Customer_Situation_Aggregate_Fields = {
  __typename?: 'customer_situation_aggregate_fields';
  avg?: Maybe<Customer_Situation_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Customer_Situation_Max_Fields>;
  min?: Maybe<Customer_Situation_Min_Fields>;
  stddev?: Maybe<Customer_Situation_Stddev_Fields>;
  stddev_pop?: Maybe<Customer_Situation_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Customer_Situation_Stddev_Samp_Fields>;
  sum?: Maybe<Customer_Situation_Sum_Fields>;
  var_pop?: Maybe<Customer_Situation_Var_Pop_Fields>;
  var_samp?: Maybe<Customer_Situation_Var_Samp_Fields>;
  variance?: Maybe<Customer_Situation_Variance_Fields>;
};


/** aggregate fields of "customer_situation" */
export type Customer_Situation_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Customer_Situation_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** aggregate avg on columns */
export type Customer_Situation_Avg_Fields = {
  __typename?: 'customer_situation_avg_fields';
  credit?: Maybe<Scalars['Float']>;
  paid?: Maybe<Scalars['Float']>;
  total_ttc?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "customer_situation". All fields are combined with a logical 'AND'. */
export type Customer_Situation_Bool_Exp = {
  _and?: Maybe<Array<Customer_Situation_Bool_Exp>>;
  _not?: Maybe<Customer_Situation_Bool_Exp>;
  _or?: Maybe<Array<Customer_Situation_Bool_Exp>>;
  credit?: Maybe<Numeric_Comparison_Exp>;
  customer_id?: Maybe<Uuid_Comparison_Exp>;
  order_ref?: Maybe<String_Comparison_Exp>;
  paid?: Maybe<Numeric_Comparison_Exp>;
  total_ttc?: Maybe<Numeric_Comparison_Exp>;
};

/** aggregate max on columns */
export type Customer_Situation_Max_Fields = {
  __typename?: 'customer_situation_max_fields';
  credit?: Maybe<Scalars['numeric']>;
  customer_id?: Maybe<Scalars['uuid']>;
  order_ref?: Maybe<Scalars['String']>;
  paid?: Maybe<Scalars['numeric']>;
  total_ttc?: Maybe<Scalars['numeric']>;
};

/** aggregate min on columns */
export type Customer_Situation_Min_Fields = {
  __typename?: 'customer_situation_min_fields';
  credit?: Maybe<Scalars['numeric']>;
  customer_id?: Maybe<Scalars['uuid']>;
  order_ref?: Maybe<Scalars['String']>;
  paid?: Maybe<Scalars['numeric']>;
  total_ttc?: Maybe<Scalars['numeric']>;
};

/** Ordering options when selecting data from "customer_situation". */
export type Customer_Situation_Order_By = {
  credit?: Maybe<Order_By>;
  customer_id?: Maybe<Order_By>;
  order_ref?: Maybe<Order_By>;
  paid?: Maybe<Order_By>;
  total_ttc?: Maybe<Order_By>;
};

/** select columns of table "customer_situation" */
export enum Customer_Situation_Select_Column {
  /** column name */
  Credit = 'credit',
  /** column name */
  CustomerId = 'customer_id',
  /** column name */
  OrderRef = 'order_ref',
  /** column name */
  Paid = 'paid',
  /** column name */
  TotalTtc = 'total_ttc'
}

/** aggregate stddev on columns */
export type Customer_Situation_Stddev_Fields = {
  __typename?: 'customer_situation_stddev_fields';
  credit?: Maybe<Scalars['Float']>;
  paid?: Maybe<Scalars['Float']>;
  total_ttc?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type Customer_Situation_Stddev_Pop_Fields = {
  __typename?: 'customer_situation_stddev_pop_fields';
  credit?: Maybe<Scalars['Float']>;
  paid?: Maybe<Scalars['Float']>;
  total_ttc?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type Customer_Situation_Stddev_Samp_Fields = {
  __typename?: 'customer_situation_stddev_samp_fields';
  credit?: Maybe<Scalars['Float']>;
  paid?: Maybe<Scalars['Float']>;
  total_ttc?: Maybe<Scalars['Float']>;
};

/** aggregate sum on columns */
export type Customer_Situation_Sum_Fields = {
  __typename?: 'customer_situation_sum_fields';
  credit?: Maybe<Scalars['numeric']>;
  paid?: Maybe<Scalars['numeric']>;
  total_ttc?: Maybe<Scalars['numeric']>;
};

/** aggregate var_pop on columns */
export type Customer_Situation_Var_Pop_Fields = {
  __typename?: 'customer_situation_var_pop_fields';
  credit?: Maybe<Scalars['Float']>;
  paid?: Maybe<Scalars['Float']>;
  total_ttc?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type Customer_Situation_Var_Samp_Fields = {
  __typename?: 'customer_situation_var_samp_fields';
  credit?: Maybe<Scalars['Float']>;
  paid?: Maybe<Scalars['Float']>;
  total_ttc?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type Customer_Situation_Variance_Fields = {
  __typename?: 'customer_situation_variance_fields';
  credit?: Maybe<Scalars['Float']>;
  paid?: Maybe<Scalars['Float']>;
  total_ttc?: Maybe<Scalars['Float']>;
};


/** Boolean expression to compare columns of type "date". All fields are combined with logical 'AND'. */
export type Date_Comparison_Exp = {
  _eq?: Maybe<Scalars['date']>;
  _gt?: Maybe<Scalars['date']>;
  _gte?: Maybe<Scalars['date']>;
  _in?: Maybe<Array<Scalars['date']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['date']>;
  _lte?: Maybe<Scalars['date']>;
  _neq?: Maybe<Scalars['date']>;
  _nin?: Maybe<Array<Scalars['date']>>;
};


/** Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'. */
export type Jsonb_Comparison_Exp = {
  /** is the column contained in the given json value */
  _contained_in?: Maybe<Scalars['jsonb']>;
  /** does the column contain the given json value at the top level */
  _contains?: Maybe<Scalars['jsonb']>;
  _eq?: Maybe<Scalars['jsonb']>;
  _gt?: Maybe<Scalars['jsonb']>;
  _gte?: Maybe<Scalars['jsonb']>;
  /** does the string exist as a top-level key in the column */
  _has_key?: Maybe<Scalars['String']>;
  /** do all of these strings exist as top-level keys in the column */
  _has_keys_all?: Maybe<Array<Scalars['String']>>;
  /** do any of these strings exist as top-level keys in the column */
  _has_keys_any?: Maybe<Array<Scalars['String']>>;
  _in?: Maybe<Array<Scalars['jsonb']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['jsonb']>;
  _lte?: Maybe<Scalars['jsonb']>;
  _neq?: Maybe<Scalars['jsonb']>;
  _nin?: Maybe<Array<Scalars['jsonb']>>;
};

/** columns and relationships of "management.company" */
export type Management_Company = {
  __typename?: 'management_company';
  CNSS: Scalars['String'];
  ICE: Scalars['String'];
  IF: Scalars['String'];
  RC: Scalars['String'];
  address: Scalars['String'];
  /** An array relationship */
  amounts: Array<Sales_Amount>;
  /** An aggregate relationship */
  amounts_aggregate: Sales_Amount_Aggregate;
  createdAt: Scalars['timestamptz'];
  createdBy?: Maybe<Scalars['String']>;
  /** An array relationship */
  deliveries: Array<Sales_Delivery>;
  /** An aggregate relationship */
  deliveries_aggregate: Sales_Delivery_Aggregate;
  email?: Maybe<Scalars['String']>;
  id: Scalars['uuid'];
  /** An array relationship */
  invoices: Array<Sales_Invoice>;
  /** An aggregate relationship */
  invoices_aggregate: Sales_Invoice_Aggregate;
  name: Scalars['String'];
  /** An array relationship */
  orders: Array<Sales_Order>;
  /** An aggregate relationship */
  orders_aggregate: Sales_Order_Aggregate;
  /** An array relationship */
  payments: Array<Sales_Payment>;
  /** An aggregate relationship */
  payments_aggregate: Sales_Payment_Aggregate;
  phone: Scalars['String'];
  /** An array relationship */
  product_companies: Array<Product_Product_Companies>;
  /** An aggregate relationship */
  product_companies_aggregate: Product_Product_Companies_Aggregate;
  /** An array relationship */
  product_drafts: Array<Sales_Product_Draft>;
  /** An aggregate relationship */
  product_drafts_aggregate: Sales_Product_Draft_Aggregate;
  /** An array relationship */
  quotations: Array<Sales_Quotation>;
  /** An aggregate relationship */
  quotations_aggregate: Sales_Quotation_Aggregate;
  updatedAt: Scalars['timestamptz'];
  updatedBy?: Maybe<Scalars['uuid']>;
  /** An array relationship */
  warehouses: Array<Stock_Warehouse>;
  /** An aggregate relationship */
  warehouses_aggregate: Stock_Warehouse_Aggregate;
  website?: Maybe<Scalars['String']>;
};


/** columns and relationships of "management.company" */
export type Management_CompanyAmountsArgs = {
  distinct_on?: Maybe<Array<Sales_Amount_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Amount_Order_By>>;
  where?: Maybe<Sales_Amount_Bool_Exp>;
};


/** columns and relationships of "management.company" */
export type Management_CompanyAmounts_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Amount_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Amount_Order_By>>;
  where?: Maybe<Sales_Amount_Bool_Exp>;
};


/** columns and relationships of "management.company" */
export type Management_CompanyDeliveriesArgs = {
  distinct_on?: Maybe<Array<Sales_Delivery_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Delivery_Order_By>>;
  where?: Maybe<Sales_Delivery_Bool_Exp>;
};


/** columns and relationships of "management.company" */
export type Management_CompanyDeliveries_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Delivery_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Delivery_Order_By>>;
  where?: Maybe<Sales_Delivery_Bool_Exp>;
};


/** columns and relationships of "management.company" */
export type Management_CompanyInvoicesArgs = {
  distinct_on?: Maybe<Array<Sales_Invoice_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Invoice_Order_By>>;
  where?: Maybe<Sales_Invoice_Bool_Exp>;
};


/** columns and relationships of "management.company" */
export type Management_CompanyInvoices_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Invoice_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Invoice_Order_By>>;
  where?: Maybe<Sales_Invoice_Bool_Exp>;
};


/** columns and relationships of "management.company" */
export type Management_CompanyOrdersArgs = {
  distinct_on?: Maybe<Array<Sales_Order_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Order_Order_By>>;
  where?: Maybe<Sales_Order_Bool_Exp>;
};


/** columns and relationships of "management.company" */
export type Management_CompanyOrders_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Order_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Order_Order_By>>;
  where?: Maybe<Sales_Order_Bool_Exp>;
};


/** columns and relationships of "management.company" */
export type Management_CompanyPaymentsArgs = {
  distinct_on?: Maybe<Array<Sales_Payment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Payment_Order_By>>;
  where?: Maybe<Sales_Payment_Bool_Exp>;
};


/** columns and relationships of "management.company" */
export type Management_CompanyPayments_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Payment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Payment_Order_By>>;
  where?: Maybe<Sales_Payment_Bool_Exp>;
};


/** columns and relationships of "management.company" */
export type Management_CompanyProduct_CompaniesArgs = {
  distinct_on?: Maybe<Array<Product_Product_Companies_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Product_Companies_Order_By>>;
  where?: Maybe<Product_Product_Companies_Bool_Exp>;
};


/** columns and relationships of "management.company" */
export type Management_CompanyProduct_Companies_AggregateArgs = {
  distinct_on?: Maybe<Array<Product_Product_Companies_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Product_Companies_Order_By>>;
  where?: Maybe<Product_Product_Companies_Bool_Exp>;
};


/** columns and relationships of "management.company" */
export type Management_CompanyProduct_DraftsArgs = {
  distinct_on?: Maybe<Array<Sales_Product_Draft_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Product_Draft_Order_By>>;
  where?: Maybe<Sales_Product_Draft_Bool_Exp>;
};


/** columns and relationships of "management.company" */
export type Management_CompanyProduct_Drafts_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Product_Draft_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Product_Draft_Order_By>>;
  where?: Maybe<Sales_Product_Draft_Bool_Exp>;
};


/** columns and relationships of "management.company" */
export type Management_CompanyQuotationsArgs = {
  distinct_on?: Maybe<Array<Sales_Quotation_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Quotation_Order_By>>;
  where?: Maybe<Sales_Quotation_Bool_Exp>;
};


/** columns and relationships of "management.company" */
export type Management_CompanyQuotations_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Quotation_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Quotation_Order_By>>;
  where?: Maybe<Sales_Quotation_Bool_Exp>;
};


/** columns and relationships of "management.company" */
export type Management_CompanyWarehousesArgs = {
  distinct_on?: Maybe<Array<Stock_Warehouse_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Warehouse_Order_By>>;
  where?: Maybe<Stock_Warehouse_Bool_Exp>;
};


/** columns and relationships of "management.company" */
export type Management_CompanyWarehouses_AggregateArgs = {
  distinct_on?: Maybe<Array<Stock_Warehouse_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Warehouse_Order_By>>;
  where?: Maybe<Stock_Warehouse_Bool_Exp>;
};

/** aggregated selection of "management.company" */
export type Management_Company_Aggregate = {
  __typename?: 'management_company_aggregate';
  aggregate?: Maybe<Management_Company_Aggregate_Fields>;
  nodes: Array<Management_Company>;
};

/** aggregate fields of "management.company" */
export type Management_Company_Aggregate_Fields = {
  __typename?: 'management_company_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Management_Company_Max_Fields>;
  min?: Maybe<Management_Company_Min_Fields>;
};


/** aggregate fields of "management.company" */
export type Management_Company_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Management_Company_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** Boolean expression to filter rows from the table "management.company". All fields are combined with a logical 'AND'. */
export type Management_Company_Bool_Exp = {
  CNSS?: Maybe<String_Comparison_Exp>;
  ICE?: Maybe<String_Comparison_Exp>;
  IF?: Maybe<String_Comparison_Exp>;
  RC?: Maybe<String_Comparison_Exp>;
  _and?: Maybe<Array<Management_Company_Bool_Exp>>;
  _not?: Maybe<Management_Company_Bool_Exp>;
  _or?: Maybe<Array<Management_Company_Bool_Exp>>;
  address?: Maybe<String_Comparison_Exp>;
  amounts?: Maybe<Sales_Amount_Bool_Exp>;
  createdAt?: Maybe<Timestamptz_Comparison_Exp>;
  createdBy?: Maybe<String_Comparison_Exp>;
  deliveries?: Maybe<Sales_Delivery_Bool_Exp>;
  email?: Maybe<String_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  invoices?: Maybe<Sales_Invoice_Bool_Exp>;
  name?: Maybe<String_Comparison_Exp>;
  orders?: Maybe<Sales_Order_Bool_Exp>;
  payments?: Maybe<Sales_Payment_Bool_Exp>;
  phone?: Maybe<String_Comparison_Exp>;
  product_companies?: Maybe<Product_Product_Companies_Bool_Exp>;
  product_drafts?: Maybe<Sales_Product_Draft_Bool_Exp>;
  quotations?: Maybe<Sales_Quotation_Bool_Exp>;
  updatedAt?: Maybe<Timestamptz_Comparison_Exp>;
  updatedBy?: Maybe<Uuid_Comparison_Exp>;
  warehouses?: Maybe<Stock_Warehouse_Bool_Exp>;
  website?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "management.company" */
export enum Management_Company_Constraint {
  /** unique or primary key constraint */
  CompanieNameKey = 'Companie_name_key',
  /** unique or primary key constraint */
  CompaniePkey = 'Companie_pkey',
  /** unique or primary key constraint */
  CompanyCnssKey = 'Company_CNSS_key',
  /** unique or primary key constraint */
  CompanyIceIfCnssRcKey = 'Company_ICE_IF_CNSS_RC_key',
  /** unique or primary key constraint */
  CompanyIfKey = 'Company_IF_key',
  /** unique or primary key constraint */
  CompanyRcKey = 'Company_RC_key'
}

/** input type for inserting data into table "management.company" */
export type Management_Company_Insert_Input = {
  CNSS?: Maybe<Scalars['String']>;
  ICE?: Maybe<Scalars['String']>;
  IF?: Maybe<Scalars['String']>;
  RC?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  amounts?: Maybe<Sales_Amount_Arr_Rel_Insert_Input>;
  createdAt?: Maybe<Scalars['timestamptz']>;
  createdBy?: Maybe<Scalars['String']>;
  deliveries?: Maybe<Sales_Delivery_Arr_Rel_Insert_Input>;
  email?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  invoices?: Maybe<Sales_Invoice_Arr_Rel_Insert_Input>;
  name?: Maybe<Scalars['String']>;
  orders?: Maybe<Sales_Order_Arr_Rel_Insert_Input>;
  payments?: Maybe<Sales_Payment_Arr_Rel_Insert_Input>;
  phone?: Maybe<Scalars['String']>;
  product_companies?: Maybe<Product_Product_Companies_Arr_Rel_Insert_Input>;
  product_drafts?: Maybe<Sales_Product_Draft_Arr_Rel_Insert_Input>;
  quotations?: Maybe<Sales_Quotation_Arr_Rel_Insert_Input>;
  updatedAt?: Maybe<Scalars['timestamptz']>;
  updatedBy?: Maybe<Scalars['uuid']>;
  warehouses?: Maybe<Stock_Warehouse_Arr_Rel_Insert_Input>;
  website?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Management_Company_Max_Fields = {
  __typename?: 'management_company_max_fields';
  CNSS?: Maybe<Scalars['String']>;
  ICE?: Maybe<Scalars['String']>;
  IF?: Maybe<Scalars['String']>;
  RC?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['timestamptz']>;
  createdBy?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['timestamptz']>;
  updatedBy?: Maybe<Scalars['uuid']>;
  website?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type Management_Company_Min_Fields = {
  __typename?: 'management_company_min_fields';
  CNSS?: Maybe<Scalars['String']>;
  ICE?: Maybe<Scalars['String']>;
  IF?: Maybe<Scalars['String']>;
  RC?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['timestamptz']>;
  createdBy?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['timestamptz']>;
  updatedBy?: Maybe<Scalars['uuid']>;
  website?: Maybe<Scalars['String']>;
};

/** response of any mutation on the table "management.company" */
export type Management_Company_Mutation_Response = {
  __typename?: 'management_company_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Management_Company>;
};

/** input type for inserting object relation for remote table "management.company" */
export type Management_Company_Obj_Rel_Insert_Input = {
  data: Management_Company_Insert_Input;
  /** on conflict condition */
  on_conflict?: Maybe<Management_Company_On_Conflict>;
};

/** on conflict condition type for table "management.company" */
export type Management_Company_On_Conflict = {
  constraint: Management_Company_Constraint;
  update_columns?: Array<Management_Company_Update_Column>;
  where?: Maybe<Management_Company_Bool_Exp>;
};

/** Ordering options when selecting data from "management.company". */
export type Management_Company_Order_By = {
  CNSS?: Maybe<Order_By>;
  ICE?: Maybe<Order_By>;
  IF?: Maybe<Order_By>;
  RC?: Maybe<Order_By>;
  address?: Maybe<Order_By>;
  amounts_aggregate?: Maybe<Sales_Amount_Aggregate_Order_By>;
  createdAt?: Maybe<Order_By>;
  createdBy?: Maybe<Order_By>;
  deliveries_aggregate?: Maybe<Sales_Delivery_Aggregate_Order_By>;
  email?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  invoices_aggregate?: Maybe<Sales_Invoice_Aggregate_Order_By>;
  name?: Maybe<Order_By>;
  orders_aggregate?: Maybe<Sales_Order_Aggregate_Order_By>;
  payments_aggregate?: Maybe<Sales_Payment_Aggregate_Order_By>;
  phone?: Maybe<Order_By>;
  product_companies_aggregate?: Maybe<Product_Product_Companies_Aggregate_Order_By>;
  product_drafts_aggregate?: Maybe<Sales_Product_Draft_Aggregate_Order_By>;
  quotations_aggregate?: Maybe<Sales_Quotation_Aggregate_Order_By>;
  updatedAt?: Maybe<Order_By>;
  updatedBy?: Maybe<Order_By>;
  warehouses_aggregate?: Maybe<Stock_Warehouse_Aggregate_Order_By>;
  website?: Maybe<Order_By>;
};

/** primary key columns input for table: management_company */
export type Management_Company_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "management.company" */
export enum Management_Company_Select_Column {
  /** column name */
  Cnss = 'CNSS',
  /** column name */
  Ice = 'ICE',
  /** column name */
  If = 'IF',
  /** column name */
  Rc = 'RC',
  /** column name */
  Address = 'address',
  /** column name */
  CreatedAt = 'createdAt',
  /** column name */
  CreatedBy = 'createdBy',
  /** column name */
  Email = 'email',
  /** column name */
  Id = 'id',
  /** column name */
  Name = 'name',
  /** column name */
  Phone = 'phone',
  /** column name */
  UpdatedAt = 'updatedAt',
  /** column name */
  UpdatedBy = 'updatedBy',
  /** column name */
  Website = 'website'
}

/** input type for updating data in table "management.company" */
export type Management_Company_Set_Input = {
  CNSS?: Maybe<Scalars['String']>;
  ICE?: Maybe<Scalars['String']>;
  IF?: Maybe<Scalars['String']>;
  RC?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['timestamptz']>;
  createdBy?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['timestamptz']>;
  updatedBy?: Maybe<Scalars['uuid']>;
  website?: Maybe<Scalars['String']>;
};

/** update columns of table "management.company" */
export enum Management_Company_Update_Column {
  /** column name */
  Cnss = 'CNSS',
  /** column name */
  Ice = 'ICE',
  /** column name */
  If = 'IF',
  /** column name */
  Rc = 'RC',
  /** column name */
  Address = 'address',
  /** column name */
  CreatedAt = 'createdAt',
  /** column name */
  CreatedBy = 'createdBy',
  /** column name */
  Email = 'email',
  /** column name */
  Id = 'id',
  /** column name */
  Name = 'name',
  /** column name */
  Phone = 'phone',
  /** column name */
  UpdatedAt = 'updatedAt',
  /** column name */
  UpdatedBy = 'updatedBy',
  /** column name */
  Website = 'website'
}

/** columns and relationships of "management.salesPoint" */
export type Management_SalesPoint = {
  __typename?: 'management_salesPoint';
  address: Scalars['String'];
  /** An array relationship */
  cash_boxes: Array<Cash_Register_Cash_Box>;
  /** An aggregate relationship */
  cash_boxes_aggregate: Cash_Register_Cash_Box_Aggregate;
  createdAt?: Maybe<Scalars['timestamptz']>;
  createdBy?: Maybe<Scalars['uuid']>;
  email?: Maybe<Scalars['String']>;
  fax?: Maybe<Scalars['String']>;
  id: Scalars['uuid'];
  isPrincipale: Scalars['Boolean'];
  name: Scalars['String'];
  /** An array relationship */
  orders: Array<Sales_Order>;
  /** An aggregate relationship */
  orders_aggregate: Sales_Order_Aggregate;
  phone: Scalars['String'];
  /** An array relationship */
  quotations: Array<Sales_Quotation>;
  /** An aggregate relationship */
  quotations_aggregate: Sales_Quotation_Aggregate;
  updatedAt?: Maybe<Scalars['timestamptz']>;
  updatedBy?: Maybe<Scalars['uuid']>;
  /** An array relationship */
  usersProfiles: Array<Management_UserProfile>;
  /** An aggregate relationship */
  usersProfiles_aggregate: Management_UserProfile_Aggregate;
  /** An array relationship */
  warehouses: Array<Stock_Warehouse>;
  /** An aggregate relationship */
  warehouses_aggregate: Stock_Warehouse_Aggregate;
};


/** columns and relationships of "management.salesPoint" */
export type Management_SalesPointCash_BoxesArgs = {
  distinct_on?: Maybe<Array<Cash_Register_Cash_Box_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Cash_Register_Cash_Box_Order_By>>;
  where?: Maybe<Cash_Register_Cash_Box_Bool_Exp>;
};


/** columns and relationships of "management.salesPoint" */
export type Management_SalesPointCash_Boxes_AggregateArgs = {
  distinct_on?: Maybe<Array<Cash_Register_Cash_Box_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Cash_Register_Cash_Box_Order_By>>;
  where?: Maybe<Cash_Register_Cash_Box_Bool_Exp>;
};


/** columns and relationships of "management.salesPoint" */
export type Management_SalesPointOrdersArgs = {
  distinct_on?: Maybe<Array<Sales_Order_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Order_Order_By>>;
  where?: Maybe<Sales_Order_Bool_Exp>;
};


/** columns and relationships of "management.salesPoint" */
export type Management_SalesPointOrders_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Order_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Order_Order_By>>;
  where?: Maybe<Sales_Order_Bool_Exp>;
};


/** columns and relationships of "management.salesPoint" */
export type Management_SalesPointQuotationsArgs = {
  distinct_on?: Maybe<Array<Sales_Quotation_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Quotation_Order_By>>;
  where?: Maybe<Sales_Quotation_Bool_Exp>;
};


/** columns and relationships of "management.salesPoint" */
export type Management_SalesPointQuotations_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Quotation_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Quotation_Order_By>>;
  where?: Maybe<Sales_Quotation_Bool_Exp>;
};


/** columns and relationships of "management.salesPoint" */
export type Management_SalesPointUsersProfilesArgs = {
  distinct_on?: Maybe<Array<Management_UserProfile_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Management_UserProfile_Order_By>>;
  where?: Maybe<Management_UserProfile_Bool_Exp>;
};


/** columns and relationships of "management.salesPoint" */
export type Management_SalesPointUsersProfiles_AggregateArgs = {
  distinct_on?: Maybe<Array<Management_UserProfile_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Management_UserProfile_Order_By>>;
  where?: Maybe<Management_UserProfile_Bool_Exp>;
};


/** columns and relationships of "management.salesPoint" */
export type Management_SalesPointWarehousesArgs = {
  distinct_on?: Maybe<Array<Stock_Warehouse_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Warehouse_Order_By>>;
  where?: Maybe<Stock_Warehouse_Bool_Exp>;
};


/** columns and relationships of "management.salesPoint" */
export type Management_SalesPointWarehouses_AggregateArgs = {
  distinct_on?: Maybe<Array<Stock_Warehouse_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Warehouse_Order_By>>;
  where?: Maybe<Stock_Warehouse_Bool_Exp>;
};

/** aggregated selection of "management.salesPoint" */
export type Management_SalesPoint_Aggregate = {
  __typename?: 'management_salesPoint_aggregate';
  aggregate?: Maybe<Management_SalesPoint_Aggregate_Fields>;
  nodes: Array<Management_SalesPoint>;
};

/** aggregate fields of "management.salesPoint" */
export type Management_SalesPoint_Aggregate_Fields = {
  __typename?: 'management_salesPoint_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Management_SalesPoint_Max_Fields>;
  min?: Maybe<Management_SalesPoint_Min_Fields>;
};


/** aggregate fields of "management.salesPoint" */
export type Management_SalesPoint_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Management_SalesPoint_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** Boolean expression to filter rows from the table "management.salesPoint". All fields are combined with a logical 'AND'. */
export type Management_SalesPoint_Bool_Exp = {
  _and?: Maybe<Array<Management_SalesPoint_Bool_Exp>>;
  _not?: Maybe<Management_SalesPoint_Bool_Exp>;
  _or?: Maybe<Array<Management_SalesPoint_Bool_Exp>>;
  address?: Maybe<String_Comparison_Exp>;
  cash_boxes?: Maybe<Cash_Register_Cash_Box_Bool_Exp>;
  createdAt?: Maybe<Timestamptz_Comparison_Exp>;
  createdBy?: Maybe<Uuid_Comparison_Exp>;
  email?: Maybe<String_Comparison_Exp>;
  fax?: Maybe<String_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  isPrincipale?: Maybe<Boolean_Comparison_Exp>;
  name?: Maybe<String_Comparison_Exp>;
  orders?: Maybe<Sales_Order_Bool_Exp>;
  phone?: Maybe<String_Comparison_Exp>;
  quotations?: Maybe<Sales_Quotation_Bool_Exp>;
  updatedAt?: Maybe<Timestamptz_Comparison_Exp>;
  updatedBy?: Maybe<Uuid_Comparison_Exp>;
  usersProfiles?: Maybe<Management_UserProfile_Bool_Exp>;
  warehouses?: Maybe<Stock_Warehouse_Bool_Exp>;
};

/** unique or primary key constraints on table "management.salesPoint" */
export enum Management_SalesPoint_Constraint {
  /** unique or primary key constraint */
  SalesPointAddressKey = 'SalesPoint_address_key',
  /** unique or primary key constraint */
  SalesPointNameKey = 'SalesPoint_name_key',
  /** unique or primary key constraint */
  SalesPointPkey = 'SalesPoint_pkey'
}

/** input type for inserting data into table "management.salesPoint" */
export type Management_SalesPoint_Insert_Input = {
  address?: Maybe<Scalars['String']>;
  cash_boxes?: Maybe<Cash_Register_Cash_Box_Arr_Rel_Insert_Input>;
  createdAt?: Maybe<Scalars['timestamptz']>;
  createdBy?: Maybe<Scalars['uuid']>;
  email?: Maybe<Scalars['String']>;
  fax?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  isPrincipale?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  orders?: Maybe<Sales_Order_Arr_Rel_Insert_Input>;
  phone?: Maybe<Scalars['String']>;
  quotations?: Maybe<Sales_Quotation_Arr_Rel_Insert_Input>;
  updatedAt?: Maybe<Scalars['timestamptz']>;
  updatedBy?: Maybe<Scalars['uuid']>;
  usersProfiles?: Maybe<Management_UserProfile_Arr_Rel_Insert_Input>;
  warehouses?: Maybe<Stock_Warehouse_Arr_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Management_SalesPoint_Max_Fields = {
  __typename?: 'management_salesPoint_max_fields';
  address?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['timestamptz']>;
  createdBy?: Maybe<Scalars['uuid']>;
  email?: Maybe<Scalars['String']>;
  fax?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['timestamptz']>;
  updatedBy?: Maybe<Scalars['uuid']>;
};

/** aggregate min on columns */
export type Management_SalesPoint_Min_Fields = {
  __typename?: 'management_salesPoint_min_fields';
  address?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['timestamptz']>;
  createdBy?: Maybe<Scalars['uuid']>;
  email?: Maybe<Scalars['String']>;
  fax?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['timestamptz']>;
  updatedBy?: Maybe<Scalars['uuid']>;
};

/** response of any mutation on the table "management.salesPoint" */
export type Management_SalesPoint_Mutation_Response = {
  __typename?: 'management_salesPoint_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Management_SalesPoint>;
};

/** input type for inserting object relation for remote table "management.salesPoint" */
export type Management_SalesPoint_Obj_Rel_Insert_Input = {
  data: Management_SalesPoint_Insert_Input;
  /** on conflict condition */
  on_conflict?: Maybe<Management_SalesPoint_On_Conflict>;
};

/** on conflict condition type for table "management.salesPoint" */
export type Management_SalesPoint_On_Conflict = {
  constraint: Management_SalesPoint_Constraint;
  update_columns?: Array<Management_SalesPoint_Update_Column>;
  where?: Maybe<Management_SalesPoint_Bool_Exp>;
};

/** Ordering options when selecting data from "management.salesPoint". */
export type Management_SalesPoint_Order_By = {
  address?: Maybe<Order_By>;
  cash_boxes_aggregate?: Maybe<Cash_Register_Cash_Box_Aggregate_Order_By>;
  createdAt?: Maybe<Order_By>;
  createdBy?: Maybe<Order_By>;
  email?: Maybe<Order_By>;
  fax?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  isPrincipale?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  orders_aggregate?: Maybe<Sales_Order_Aggregate_Order_By>;
  phone?: Maybe<Order_By>;
  quotations_aggregate?: Maybe<Sales_Quotation_Aggregate_Order_By>;
  updatedAt?: Maybe<Order_By>;
  updatedBy?: Maybe<Order_By>;
  usersProfiles_aggregate?: Maybe<Management_UserProfile_Aggregate_Order_By>;
  warehouses_aggregate?: Maybe<Stock_Warehouse_Aggregate_Order_By>;
};

/** primary key columns input for table: management_salesPoint */
export type Management_SalesPoint_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "management.salesPoint" */
export enum Management_SalesPoint_Select_Column {
  /** column name */
  Address = 'address',
  /** column name */
  CreatedAt = 'createdAt',
  /** column name */
  CreatedBy = 'createdBy',
  /** column name */
  Email = 'email',
  /** column name */
  Fax = 'fax',
  /** column name */
  Id = 'id',
  /** column name */
  IsPrincipale = 'isPrincipale',
  /** column name */
  Name = 'name',
  /** column name */
  Phone = 'phone',
  /** column name */
  UpdatedAt = 'updatedAt',
  /** column name */
  UpdatedBy = 'updatedBy'
}

/** input type for updating data in table "management.salesPoint" */
export type Management_SalesPoint_Set_Input = {
  address?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['timestamptz']>;
  createdBy?: Maybe<Scalars['uuid']>;
  email?: Maybe<Scalars['String']>;
  fax?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  isPrincipale?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['timestamptz']>;
  updatedBy?: Maybe<Scalars['uuid']>;
};

/** update columns of table "management.salesPoint" */
export enum Management_SalesPoint_Update_Column {
  /** column name */
  Address = 'address',
  /** column name */
  CreatedAt = 'createdAt',
  /** column name */
  CreatedBy = 'createdBy',
  /** column name */
  Email = 'email',
  /** column name */
  Fax = 'fax',
  /** column name */
  Id = 'id',
  /** column name */
  IsPrincipale = 'isPrincipale',
  /** column name */
  Name = 'name',
  /** column name */
  Phone = 'phone',
  /** column name */
  UpdatedAt = 'updatedAt',
  /** column name */
  UpdatedBy = 'updatedBy'
}

/** columns and relationships of "management.userProfile" */
export type Management_UserProfile = {
  __typename?: 'management_userProfile';
  CIN?: Maybe<Scalars['String']>;
  /** An object relationship */
  SalesPoint?: Maybe<Management_SalesPoint>;
  SalesPointsid?: Maybe<Scalars['uuid']>;
  active: Scalars['Boolean'];
  createdAt: Scalars['timestamptz'];
  createdBy?: Maybe<Scalars['uuid']>;
  email?: Maybe<Scalars['String']>;
  firstname?: Maybe<Scalars['String']>;
  id: Scalars['String'];
  joinUs?: Maybe<Scalars['date']>;
  lastname?: Maybe<Scalars['String']>;
  leftUs?: Maybe<Scalars['date']>;
  phone?: Maybe<Scalars['String']>;
  role: Management_User_Role_Enum;
  updatedAt: Scalars['timestamptz'];
  updatedBy?: Maybe<Scalars['uuid']>;
  /** An object relationship */
  user_role: Management_User_Role;
  username: Scalars['String'];
};

/** aggregated selection of "management.userProfile" */
export type Management_UserProfile_Aggregate = {
  __typename?: 'management_userProfile_aggregate';
  aggregate?: Maybe<Management_UserProfile_Aggregate_Fields>;
  nodes: Array<Management_UserProfile>;
};

/** aggregate fields of "management.userProfile" */
export type Management_UserProfile_Aggregate_Fields = {
  __typename?: 'management_userProfile_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Management_UserProfile_Max_Fields>;
  min?: Maybe<Management_UserProfile_Min_Fields>;
};


/** aggregate fields of "management.userProfile" */
export type Management_UserProfile_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Management_UserProfile_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "management.userProfile" */
export type Management_UserProfile_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Management_UserProfile_Max_Order_By>;
  min?: Maybe<Management_UserProfile_Min_Order_By>;
};

/** input type for inserting array relation for remote table "management.userProfile" */
export type Management_UserProfile_Arr_Rel_Insert_Input = {
  data: Array<Management_UserProfile_Insert_Input>;
  /** on conflict condition */
  on_conflict?: Maybe<Management_UserProfile_On_Conflict>;
};

/** Boolean expression to filter rows from the table "management.userProfile". All fields are combined with a logical 'AND'. */
export type Management_UserProfile_Bool_Exp = {
  CIN?: Maybe<String_Comparison_Exp>;
  SalesPoint?: Maybe<Management_SalesPoint_Bool_Exp>;
  SalesPointsid?: Maybe<Uuid_Comparison_Exp>;
  _and?: Maybe<Array<Management_UserProfile_Bool_Exp>>;
  _not?: Maybe<Management_UserProfile_Bool_Exp>;
  _or?: Maybe<Array<Management_UserProfile_Bool_Exp>>;
  active?: Maybe<Boolean_Comparison_Exp>;
  createdAt?: Maybe<Timestamptz_Comparison_Exp>;
  createdBy?: Maybe<Uuid_Comparison_Exp>;
  email?: Maybe<String_Comparison_Exp>;
  firstname?: Maybe<String_Comparison_Exp>;
  id?: Maybe<String_Comparison_Exp>;
  joinUs?: Maybe<Date_Comparison_Exp>;
  lastname?: Maybe<String_Comparison_Exp>;
  leftUs?: Maybe<Date_Comparison_Exp>;
  phone?: Maybe<String_Comparison_Exp>;
  role?: Maybe<Management_User_Role_Enum_Comparison_Exp>;
  updatedAt?: Maybe<Timestamptz_Comparison_Exp>;
  updatedBy?: Maybe<Uuid_Comparison_Exp>;
  user_role?: Maybe<Management_User_Role_Bool_Exp>;
  username?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "management.userProfile" */
export enum Management_UserProfile_Constraint {
  /** unique or primary key constraint */
  UserProfileCinKey = 'userProfile_CIN_key',
  /** unique or primary key constraint */
  UserProfileEmailKey = 'userProfile_email_key',
  /** unique or primary key constraint */
  UserProfilePhoneKey = 'userProfile_phone_key',
  /** unique or primary key constraint */
  UserProfilePkey = 'user_profile_pkey',
  /** unique or primary key constraint */
  UserProfileUsernameKey = 'user_profile_username_key'
}

/** input type for inserting data into table "management.userProfile" */
export type Management_UserProfile_Insert_Input = {
  CIN?: Maybe<Scalars['String']>;
  SalesPoint?: Maybe<Management_SalesPoint_Obj_Rel_Insert_Input>;
  SalesPointsid?: Maybe<Scalars['uuid']>;
  active?: Maybe<Scalars['Boolean']>;
  createdAt?: Maybe<Scalars['timestamptz']>;
  createdBy?: Maybe<Scalars['uuid']>;
  email?: Maybe<Scalars['String']>;
  firstname?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  joinUs?: Maybe<Scalars['date']>;
  lastname?: Maybe<Scalars['String']>;
  leftUs?: Maybe<Scalars['date']>;
  phone?: Maybe<Scalars['String']>;
  role?: Maybe<Management_User_Role_Enum>;
  updatedAt?: Maybe<Scalars['timestamptz']>;
  updatedBy?: Maybe<Scalars['uuid']>;
  user_role?: Maybe<Management_User_Role_Obj_Rel_Insert_Input>;
  username?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Management_UserProfile_Max_Fields = {
  __typename?: 'management_userProfile_max_fields';
  CIN?: Maybe<Scalars['String']>;
  SalesPointsid?: Maybe<Scalars['uuid']>;
  createdAt?: Maybe<Scalars['timestamptz']>;
  createdBy?: Maybe<Scalars['uuid']>;
  email?: Maybe<Scalars['String']>;
  firstname?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  joinUs?: Maybe<Scalars['date']>;
  lastname?: Maybe<Scalars['String']>;
  leftUs?: Maybe<Scalars['date']>;
  phone?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['timestamptz']>;
  updatedBy?: Maybe<Scalars['uuid']>;
  username?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "management.userProfile" */
export type Management_UserProfile_Max_Order_By = {
  CIN?: Maybe<Order_By>;
  SalesPointsid?: Maybe<Order_By>;
  createdAt?: Maybe<Order_By>;
  createdBy?: Maybe<Order_By>;
  email?: Maybe<Order_By>;
  firstname?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  joinUs?: Maybe<Order_By>;
  lastname?: Maybe<Order_By>;
  leftUs?: Maybe<Order_By>;
  phone?: Maybe<Order_By>;
  updatedAt?: Maybe<Order_By>;
  updatedBy?: Maybe<Order_By>;
  username?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Management_UserProfile_Min_Fields = {
  __typename?: 'management_userProfile_min_fields';
  CIN?: Maybe<Scalars['String']>;
  SalesPointsid?: Maybe<Scalars['uuid']>;
  createdAt?: Maybe<Scalars['timestamptz']>;
  createdBy?: Maybe<Scalars['uuid']>;
  email?: Maybe<Scalars['String']>;
  firstname?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  joinUs?: Maybe<Scalars['date']>;
  lastname?: Maybe<Scalars['String']>;
  leftUs?: Maybe<Scalars['date']>;
  phone?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['timestamptz']>;
  updatedBy?: Maybe<Scalars['uuid']>;
  username?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "management.userProfile" */
export type Management_UserProfile_Min_Order_By = {
  CIN?: Maybe<Order_By>;
  SalesPointsid?: Maybe<Order_By>;
  createdAt?: Maybe<Order_By>;
  createdBy?: Maybe<Order_By>;
  email?: Maybe<Order_By>;
  firstname?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  joinUs?: Maybe<Order_By>;
  lastname?: Maybe<Order_By>;
  leftUs?: Maybe<Order_By>;
  phone?: Maybe<Order_By>;
  updatedAt?: Maybe<Order_By>;
  updatedBy?: Maybe<Order_By>;
  username?: Maybe<Order_By>;
};

/** response of any mutation on the table "management.userProfile" */
export type Management_UserProfile_Mutation_Response = {
  __typename?: 'management_userProfile_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Management_UserProfile>;
};

/** input type for inserting object relation for remote table "management.userProfile" */
export type Management_UserProfile_Obj_Rel_Insert_Input = {
  data: Management_UserProfile_Insert_Input;
  /** on conflict condition */
  on_conflict?: Maybe<Management_UserProfile_On_Conflict>;
};

/** on conflict condition type for table "management.userProfile" */
export type Management_UserProfile_On_Conflict = {
  constraint: Management_UserProfile_Constraint;
  update_columns?: Array<Management_UserProfile_Update_Column>;
  where?: Maybe<Management_UserProfile_Bool_Exp>;
};

/** Ordering options when selecting data from "management.userProfile". */
export type Management_UserProfile_Order_By = {
  CIN?: Maybe<Order_By>;
  SalesPoint?: Maybe<Management_SalesPoint_Order_By>;
  SalesPointsid?: Maybe<Order_By>;
  active?: Maybe<Order_By>;
  createdAt?: Maybe<Order_By>;
  createdBy?: Maybe<Order_By>;
  email?: Maybe<Order_By>;
  firstname?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  joinUs?: Maybe<Order_By>;
  lastname?: Maybe<Order_By>;
  leftUs?: Maybe<Order_By>;
  phone?: Maybe<Order_By>;
  role?: Maybe<Order_By>;
  updatedAt?: Maybe<Order_By>;
  updatedBy?: Maybe<Order_By>;
  user_role?: Maybe<Management_User_Role_Order_By>;
  username?: Maybe<Order_By>;
};

/** primary key columns input for table: management_userProfile */
export type Management_UserProfile_Pk_Columns_Input = {
  id: Scalars['String'];
};

/** select columns of table "management.userProfile" */
export enum Management_UserProfile_Select_Column {
  /** column name */
  Cin = 'CIN',
  /** column name */
  SalesPointsid = 'SalesPointsid',
  /** column name */
  Active = 'active',
  /** column name */
  CreatedAt = 'createdAt',
  /** column name */
  CreatedBy = 'createdBy',
  /** column name */
  Email = 'email',
  /** column name */
  Firstname = 'firstname',
  /** column name */
  Id = 'id',
  /** column name */
  JoinUs = 'joinUs',
  /** column name */
  Lastname = 'lastname',
  /** column name */
  LeftUs = 'leftUs',
  /** column name */
  Phone = 'phone',
  /** column name */
  Role = 'role',
  /** column name */
  UpdatedAt = 'updatedAt',
  /** column name */
  UpdatedBy = 'updatedBy',
  /** column name */
  Username = 'username'
}

/** input type for updating data in table "management.userProfile" */
export type Management_UserProfile_Set_Input = {
  CIN?: Maybe<Scalars['String']>;
  SalesPointsid?: Maybe<Scalars['uuid']>;
  active?: Maybe<Scalars['Boolean']>;
  createdAt?: Maybe<Scalars['timestamptz']>;
  createdBy?: Maybe<Scalars['uuid']>;
  email?: Maybe<Scalars['String']>;
  firstname?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  joinUs?: Maybe<Scalars['date']>;
  lastname?: Maybe<Scalars['String']>;
  leftUs?: Maybe<Scalars['date']>;
  phone?: Maybe<Scalars['String']>;
  role?: Maybe<Management_User_Role_Enum>;
  updatedAt?: Maybe<Scalars['timestamptz']>;
  updatedBy?: Maybe<Scalars['uuid']>;
  username?: Maybe<Scalars['String']>;
};

/** update columns of table "management.userProfile" */
export enum Management_UserProfile_Update_Column {
  /** column name */
  Cin = 'CIN',
  /** column name */
  SalesPointsid = 'SalesPointsid',
  /** column name */
  Active = 'active',
  /** column name */
  CreatedAt = 'createdAt',
  /** column name */
  CreatedBy = 'createdBy',
  /** column name */
  Email = 'email',
  /** column name */
  Firstname = 'firstname',
  /** column name */
  Id = 'id',
  /** column name */
  JoinUs = 'joinUs',
  /** column name */
  Lastname = 'lastname',
  /** column name */
  LeftUs = 'leftUs',
  /** column name */
  Phone = 'phone',
  /** column name */
  Role = 'role',
  /** column name */
  UpdatedAt = 'updatedAt',
  /** column name */
  UpdatedBy = 'updatedBy',
  /** column name */
  Username = 'username'
}

/** columns and relationships of "management.user_role" */
export type Management_User_Role = {
  __typename?: 'management_user_role';
  description: Scalars['String'];
  name: Scalars['String'];
  /** An array relationship */
  userProfiles: Array<Management_UserProfile>;
  /** An aggregate relationship */
  userProfiles_aggregate: Management_UserProfile_Aggregate;
};


/** columns and relationships of "management.user_role" */
export type Management_User_RoleUserProfilesArgs = {
  distinct_on?: Maybe<Array<Management_UserProfile_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Management_UserProfile_Order_By>>;
  where?: Maybe<Management_UserProfile_Bool_Exp>;
};


/** columns and relationships of "management.user_role" */
export type Management_User_RoleUserProfiles_AggregateArgs = {
  distinct_on?: Maybe<Array<Management_UserProfile_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Management_UserProfile_Order_By>>;
  where?: Maybe<Management_UserProfile_Bool_Exp>;
};

/** aggregated selection of "management.user_role" */
export type Management_User_Role_Aggregate = {
  __typename?: 'management_user_role_aggregate';
  aggregate?: Maybe<Management_User_Role_Aggregate_Fields>;
  nodes: Array<Management_User_Role>;
};

/** aggregate fields of "management.user_role" */
export type Management_User_Role_Aggregate_Fields = {
  __typename?: 'management_user_role_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Management_User_Role_Max_Fields>;
  min?: Maybe<Management_User_Role_Min_Fields>;
};


/** aggregate fields of "management.user_role" */
export type Management_User_Role_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Management_User_Role_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** Boolean expression to filter rows from the table "management.user_role". All fields are combined with a logical 'AND'. */
export type Management_User_Role_Bool_Exp = {
  _and?: Maybe<Array<Management_User_Role_Bool_Exp>>;
  _not?: Maybe<Management_User_Role_Bool_Exp>;
  _or?: Maybe<Array<Management_User_Role_Bool_Exp>>;
  description?: Maybe<String_Comparison_Exp>;
  name?: Maybe<String_Comparison_Exp>;
  userProfiles?: Maybe<Management_UserProfile_Bool_Exp>;
};

/** unique or primary key constraints on table "management.user_role" */
export enum Management_User_Role_Constraint {
  /** unique or primary key constraint */
  UserRolePkey = 'user_role_pkey'
}

export enum Management_User_Role_Enum {
  /** admin */
  Admin = 'admin',
  /** caissier */
  Caissier = 'caissier',
  /** commercial */
  Commercial = 'commercial',
  /** comptable */
  Comptable = 'comptable',
  /** magazinier */
  Magazinier = 'magazinier',
  /** responsable_pv */
  ResponsablePv = 'responsable_pv'
}

/** Boolean expression to compare columns of type "management_user_role_enum". All fields are combined with logical 'AND'. */
export type Management_User_Role_Enum_Comparison_Exp = {
  _eq?: Maybe<Management_User_Role_Enum>;
  _in?: Maybe<Array<Management_User_Role_Enum>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _neq?: Maybe<Management_User_Role_Enum>;
  _nin?: Maybe<Array<Management_User_Role_Enum>>;
};

/** input type for inserting data into table "management.user_role" */
export type Management_User_Role_Insert_Input = {
  description?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  userProfiles?: Maybe<Management_UserProfile_Arr_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Management_User_Role_Max_Fields = {
  __typename?: 'management_user_role_max_fields';
  description?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type Management_User_Role_Min_Fields = {
  __typename?: 'management_user_role_min_fields';
  description?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

/** response of any mutation on the table "management.user_role" */
export type Management_User_Role_Mutation_Response = {
  __typename?: 'management_user_role_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Management_User_Role>;
};

/** input type for inserting object relation for remote table "management.user_role" */
export type Management_User_Role_Obj_Rel_Insert_Input = {
  data: Management_User_Role_Insert_Input;
  /** on conflict condition */
  on_conflict?: Maybe<Management_User_Role_On_Conflict>;
};

/** on conflict condition type for table "management.user_role" */
export type Management_User_Role_On_Conflict = {
  constraint: Management_User_Role_Constraint;
  update_columns?: Array<Management_User_Role_Update_Column>;
  where?: Maybe<Management_User_Role_Bool_Exp>;
};

/** Ordering options when selecting data from "management.user_role". */
export type Management_User_Role_Order_By = {
  description?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  userProfiles_aggregate?: Maybe<Management_UserProfile_Aggregate_Order_By>;
};

/** primary key columns input for table: management_user_role */
export type Management_User_Role_Pk_Columns_Input = {
  name: Scalars['String'];
};

/** select columns of table "management.user_role" */
export enum Management_User_Role_Select_Column {
  /** column name */
  Description = 'description',
  /** column name */
  Name = 'name'
}

/** input type for updating data in table "management.user_role" */
export type Management_User_Role_Set_Input = {
  description?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

/** update columns of table "management.user_role" */
export enum Management_User_Role_Update_Column {
  /** column name */
  Description = 'description',
  /** column name */
  Name = 'name'
}

/** columns and relationships of "manufacturing.job_order" */
export type Manufacturing_Job_Order = {
  __typename?: 'manufacturing_job_order';
  date: Scalars['timestamp'];
  /** An array relationship */
  glass_drafts: Array<Sales_Glass_Draft>;
  /** An aggregate relationship */
  glass_drafts_aggregate: Sales_Glass_Draft_Aggregate;
  id: Scalars['Int'];
  isReparing: Scalars['Boolean'];
  /** An object relationship */
  job_status: Manufacturing_Job_Status;
  order_ref: Scalars['String'];
  ref?: Maybe<Scalars['String']>;
  ref_num?: Maybe<Scalars['Int']>;
  status: Scalars['String'];
};


/** columns and relationships of "manufacturing.job_order" */
export type Manufacturing_Job_OrderGlass_DraftsArgs = {
  distinct_on?: Maybe<Array<Sales_Glass_Draft_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Glass_Draft_Order_By>>;
  where?: Maybe<Sales_Glass_Draft_Bool_Exp>;
};


/** columns and relationships of "manufacturing.job_order" */
export type Manufacturing_Job_OrderGlass_Drafts_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Glass_Draft_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Glass_Draft_Order_By>>;
  where?: Maybe<Sales_Glass_Draft_Bool_Exp>;
};

/** aggregated selection of "manufacturing.job_order" */
export type Manufacturing_Job_Order_Aggregate = {
  __typename?: 'manufacturing_job_order_aggregate';
  aggregate?: Maybe<Manufacturing_Job_Order_Aggregate_Fields>;
  nodes: Array<Manufacturing_Job_Order>;
};

/** aggregate fields of "manufacturing.job_order" */
export type Manufacturing_Job_Order_Aggregate_Fields = {
  __typename?: 'manufacturing_job_order_aggregate_fields';
  avg?: Maybe<Manufacturing_Job_Order_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Manufacturing_Job_Order_Max_Fields>;
  min?: Maybe<Manufacturing_Job_Order_Min_Fields>;
  stddev?: Maybe<Manufacturing_Job_Order_Stddev_Fields>;
  stddev_pop?: Maybe<Manufacturing_Job_Order_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Manufacturing_Job_Order_Stddev_Samp_Fields>;
  sum?: Maybe<Manufacturing_Job_Order_Sum_Fields>;
  var_pop?: Maybe<Manufacturing_Job_Order_Var_Pop_Fields>;
  var_samp?: Maybe<Manufacturing_Job_Order_Var_Samp_Fields>;
  variance?: Maybe<Manufacturing_Job_Order_Variance_Fields>;
};


/** aggregate fields of "manufacturing.job_order" */
export type Manufacturing_Job_Order_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Manufacturing_Job_Order_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "manufacturing.job_order" */
export type Manufacturing_Job_Order_Aggregate_Order_By = {
  avg?: Maybe<Manufacturing_Job_Order_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Manufacturing_Job_Order_Max_Order_By>;
  min?: Maybe<Manufacturing_Job_Order_Min_Order_By>;
  stddev?: Maybe<Manufacturing_Job_Order_Stddev_Order_By>;
  stddev_pop?: Maybe<Manufacturing_Job_Order_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Manufacturing_Job_Order_Stddev_Samp_Order_By>;
  sum?: Maybe<Manufacturing_Job_Order_Sum_Order_By>;
  var_pop?: Maybe<Manufacturing_Job_Order_Var_Pop_Order_By>;
  var_samp?: Maybe<Manufacturing_Job_Order_Var_Samp_Order_By>;
  variance?: Maybe<Manufacturing_Job_Order_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "manufacturing.job_order" */
export type Manufacturing_Job_Order_Arr_Rel_Insert_Input = {
  data: Array<Manufacturing_Job_Order_Insert_Input>;
  /** on conflict condition */
  on_conflict?: Maybe<Manufacturing_Job_Order_On_Conflict>;
};

/** aggregate avg on columns */
export type Manufacturing_Job_Order_Avg_Fields = {
  __typename?: 'manufacturing_job_order_avg_fields';
  id?: Maybe<Scalars['Float']>;
  ref_num?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "manufacturing.job_order" */
export type Manufacturing_Job_Order_Avg_Order_By = {
  id?: Maybe<Order_By>;
  ref_num?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "manufacturing.job_order". All fields are combined with a logical 'AND'. */
export type Manufacturing_Job_Order_Bool_Exp = {
  _and?: Maybe<Array<Manufacturing_Job_Order_Bool_Exp>>;
  _not?: Maybe<Manufacturing_Job_Order_Bool_Exp>;
  _or?: Maybe<Array<Manufacturing_Job_Order_Bool_Exp>>;
  date?: Maybe<Timestamp_Comparison_Exp>;
  glass_drafts?: Maybe<Sales_Glass_Draft_Bool_Exp>;
  id?: Maybe<Int_Comparison_Exp>;
  isReparing?: Maybe<Boolean_Comparison_Exp>;
  job_status?: Maybe<Manufacturing_Job_Status_Bool_Exp>;
  order_ref?: Maybe<String_Comparison_Exp>;
  ref?: Maybe<String_Comparison_Exp>;
  ref_num?: Maybe<Int_Comparison_Exp>;
  status?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "manufacturing.job_order" */
export enum Manufacturing_Job_Order_Constraint {
  /** unique or primary key constraint */
  JobOrderIdKey = 'job_order_id_key',
  /** unique or primary key constraint */
  JobOrderPkey = 'job_order_pkey'
}

/** input type for incrementing numeric columns in table "manufacturing.job_order" */
export type Manufacturing_Job_Order_Inc_Input = {
  id?: Maybe<Scalars['Int']>;
  ref_num?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "manufacturing.job_order" */
export type Manufacturing_Job_Order_Insert_Input = {
  date?: Maybe<Scalars['timestamp']>;
  glass_drafts?: Maybe<Sales_Glass_Draft_Arr_Rel_Insert_Input>;
  id?: Maybe<Scalars['Int']>;
  isReparing?: Maybe<Scalars['Boolean']>;
  job_status?: Maybe<Manufacturing_Job_Status_Obj_Rel_Insert_Input>;
  order_ref?: Maybe<Scalars['String']>;
  ref?: Maybe<Scalars['String']>;
  ref_num?: Maybe<Scalars['Int']>;
  status?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Manufacturing_Job_Order_Max_Fields = {
  __typename?: 'manufacturing_job_order_max_fields';
  date?: Maybe<Scalars['timestamp']>;
  id?: Maybe<Scalars['Int']>;
  order_ref?: Maybe<Scalars['String']>;
  ref?: Maybe<Scalars['String']>;
  ref_num?: Maybe<Scalars['Int']>;
  status?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "manufacturing.job_order" */
export type Manufacturing_Job_Order_Max_Order_By = {
  date?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  order_ref?: Maybe<Order_By>;
  ref?: Maybe<Order_By>;
  ref_num?: Maybe<Order_By>;
  status?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Manufacturing_Job_Order_Min_Fields = {
  __typename?: 'manufacturing_job_order_min_fields';
  date?: Maybe<Scalars['timestamp']>;
  id?: Maybe<Scalars['Int']>;
  order_ref?: Maybe<Scalars['String']>;
  ref?: Maybe<Scalars['String']>;
  ref_num?: Maybe<Scalars['Int']>;
  status?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "manufacturing.job_order" */
export type Manufacturing_Job_Order_Min_Order_By = {
  date?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  order_ref?: Maybe<Order_By>;
  ref?: Maybe<Order_By>;
  ref_num?: Maybe<Order_By>;
  status?: Maybe<Order_By>;
};

/** response of any mutation on the table "manufacturing.job_order" */
export type Manufacturing_Job_Order_Mutation_Response = {
  __typename?: 'manufacturing_job_order_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Manufacturing_Job_Order>;
};

/** input type for inserting object relation for remote table "manufacturing.job_order" */
export type Manufacturing_Job_Order_Obj_Rel_Insert_Input = {
  data: Manufacturing_Job_Order_Insert_Input;
  /** on conflict condition */
  on_conflict?: Maybe<Manufacturing_Job_Order_On_Conflict>;
};

/** on conflict condition type for table "manufacturing.job_order" */
export type Manufacturing_Job_Order_On_Conflict = {
  constraint: Manufacturing_Job_Order_Constraint;
  update_columns?: Array<Manufacturing_Job_Order_Update_Column>;
  where?: Maybe<Manufacturing_Job_Order_Bool_Exp>;
};

/** Ordering options when selecting data from "manufacturing.job_order". */
export type Manufacturing_Job_Order_Order_By = {
  date?: Maybe<Order_By>;
  glass_drafts_aggregate?: Maybe<Sales_Glass_Draft_Aggregate_Order_By>;
  id?: Maybe<Order_By>;
  isReparing?: Maybe<Order_By>;
  job_status?: Maybe<Manufacturing_Job_Status_Order_By>;
  order_ref?: Maybe<Order_By>;
  ref?: Maybe<Order_By>;
  ref_num?: Maybe<Order_By>;
  status?: Maybe<Order_By>;
};

/** primary key columns input for table: manufacturing_job_order */
export type Manufacturing_Job_Order_Pk_Columns_Input = {
  id: Scalars['Int'];
};

/** select columns of table "manufacturing.job_order" */
export enum Manufacturing_Job_Order_Select_Column {
  /** column name */
  Date = 'date',
  /** column name */
  Id = 'id',
  /** column name */
  IsReparing = 'isReparing',
  /** column name */
  OrderRef = 'order_ref',
  /** column name */
  Ref = 'ref',
  /** column name */
  RefNum = 'ref_num',
  /** column name */
  Status = 'status'
}

/** input type for updating data in table "manufacturing.job_order" */
export type Manufacturing_Job_Order_Set_Input = {
  date?: Maybe<Scalars['timestamp']>;
  id?: Maybe<Scalars['Int']>;
  isReparing?: Maybe<Scalars['Boolean']>;
  order_ref?: Maybe<Scalars['String']>;
  ref?: Maybe<Scalars['String']>;
  ref_num?: Maybe<Scalars['Int']>;
  status?: Maybe<Scalars['String']>;
};

/** aggregate stddev on columns */
export type Manufacturing_Job_Order_Stddev_Fields = {
  __typename?: 'manufacturing_job_order_stddev_fields';
  id?: Maybe<Scalars['Float']>;
  ref_num?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "manufacturing.job_order" */
export type Manufacturing_Job_Order_Stddev_Order_By = {
  id?: Maybe<Order_By>;
  ref_num?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Manufacturing_Job_Order_Stddev_Pop_Fields = {
  __typename?: 'manufacturing_job_order_stddev_pop_fields';
  id?: Maybe<Scalars['Float']>;
  ref_num?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "manufacturing.job_order" */
export type Manufacturing_Job_Order_Stddev_Pop_Order_By = {
  id?: Maybe<Order_By>;
  ref_num?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Manufacturing_Job_Order_Stddev_Samp_Fields = {
  __typename?: 'manufacturing_job_order_stddev_samp_fields';
  id?: Maybe<Scalars['Float']>;
  ref_num?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "manufacturing.job_order" */
export type Manufacturing_Job_Order_Stddev_Samp_Order_By = {
  id?: Maybe<Order_By>;
  ref_num?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Manufacturing_Job_Order_Sum_Fields = {
  __typename?: 'manufacturing_job_order_sum_fields';
  id?: Maybe<Scalars['Int']>;
  ref_num?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "manufacturing.job_order" */
export type Manufacturing_Job_Order_Sum_Order_By = {
  id?: Maybe<Order_By>;
  ref_num?: Maybe<Order_By>;
};

/** update columns of table "manufacturing.job_order" */
export enum Manufacturing_Job_Order_Update_Column {
  /** column name */
  Date = 'date',
  /** column name */
  Id = 'id',
  /** column name */
  IsReparing = 'isReparing',
  /** column name */
  OrderRef = 'order_ref',
  /** column name */
  Ref = 'ref',
  /** column name */
  RefNum = 'ref_num',
  /** column name */
  Status = 'status'
}

/** aggregate var_pop on columns */
export type Manufacturing_Job_Order_Var_Pop_Fields = {
  __typename?: 'manufacturing_job_order_var_pop_fields';
  id?: Maybe<Scalars['Float']>;
  ref_num?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "manufacturing.job_order" */
export type Manufacturing_Job_Order_Var_Pop_Order_By = {
  id?: Maybe<Order_By>;
  ref_num?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Manufacturing_Job_Order_Var_Samp_Fields = {
  __typename?: 'manufacturing_job_order_var_samp_fields';
  id?: Maybe<Scalars['Float']>;
  ref_num?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "manufacturing.job_order" */
export type Manufacturing_Job_Order_Var_Samp_Order_By = {
  id?: Maybe<Order_By>;
  ref_num?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Manufacturing_Job_Order_Variance_Fields = {
  __typename?: 'manufacturing_job_order_variance_fields';
  id?: Maybe<Scalars['Float']>;
  ref_num?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "manufacturing.job_order" */
export type Manufacturing_Job_Order_Variance_Order_By = {
  id?: Maybe<Order_By>;
  ref_num?: Maybe<Order_By>;
};

/** columns and relationships of "manufacturing.job_status" */
export type Manufacturing_Job_Status = {
  __typename?: 'manufacturing_job_status';
  /** An array relationship */
  job_orders: Array<Manufacturing_Job_Order>;
  /** An aggregate relationship */
  job_orders_aggregate: Manufacturing_Job_Order_Aggregate;
  key: Scalars['String'];
  value: Scalars['String'];
};


/** columns and relationships of "manufacturing.job_status" */
export type Manufacturing_Job_StatusJob_OrdersArgs = {
  distinct_on?: Maybe<Array<Manufacturing_Job_Order_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Manufacturing_Job_Order_Order_By>>;
  where?: Maybe<Manufacturing_Job_Order_Bool_Exp>;
};


/** columns and relationships of "manufacturing.job_status" */
export type Manufacturing_Job_StatusJob_Orders_AggregateArgs = {
  distinct_on?: Maybe<Array<Manufacturing_Job_Order_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Manufacturing_Job_Order_Order_By>>;
  where?: Maybe<Manufacturing_Job_Order_Bool_Exp>;
};

/** aggregated selection of "manufacturing.job_status" */
export type Manufacturing_Job_Status_Aggregate = {
  __typename?: 'manufacturing_job_status_aggregate';
  aggregate?: Maybe<Manufacturing_Job_Status_Aggregate_Fields>;
  nodes: Array<Manufacturing_Job_Status>;
};

/** aggregate fields of "manufacturing.job_status" */
export type Manufacturing_Job_Status_Aggregate_Fields = {
  __typename?: 'manufacturing_job_status_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Manufacturing_Job_Status_Max_Fields>;
  min?: Maybe<Manufacturing_Job_Status_Min_Fields>;
};


/** aggregate fields of "manufacturing.job_status" */
export type Manufacturing_Job_Status_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Manufacturing_Job_Status_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** Boolean expression to filter rows from the table "manufacturing.job_status". All fields are combined with a logical 'AND'. */
export type Manufacturing_Job_Status_Bool_Exp = {
  _and?: Maybe<Array<Manufacturing_Job_Status_Bool_Exp>>;
  _not?: Maybe<Manufacturing_Job_Status_Bool_Exp>;
  _or?: Maybe<Array<Manufacturing_Job_Status_Bool_Exp>>;
  job_orders?: Maybe<Manufacturing_Job_Order_Bool_Exp>;
  key?: Maybe<String_Comparison_Exp>;
  value?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "manufacturing.job_status" */
export enum Manufacturing_Job_Status_Constraint {
  /** unique or primary key constraint */
  JobStatusKeyKey = 'job_status_key_key',
  /** unique or primary key constraint */
  JobStatusPkey = 'job_status_pkey',
  /** unique or primary key constraint */
  JobStatusValueKey = 'job_status_value_key'
}

/** input type for inserting data into table "manufacturing.job_status" */
export type Manufacturing_Job_Status_Insert_Input = {
  job_orders?: Maybe<Manufacturing_Job_Order_Arr_Rel_Insert_Input>;
  key?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Manufacturing_Job_Status_Max_Fields = {
  __typename?: 'manufacturing_job_status_max_fields';
  key?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type Manufacturing_Job_Status_Min_Fields = {
  __typename?: 'manufacturing_job_status_min_fields';
  key?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/** response of any mutation on the table "manufacturing.job_status" */
export type Manufacturing_Job_Status_Mutation_Response = {
  __typename?: 'manufacturing_job_status_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Manufacturing_Job_Status>;
};

/** input type for inserting object relation for remote table "manufacturing.job_status" */
export type Manufacturing_Job_Status_Obj_Rel_Insert_Input = {
  data: Manufacturing_Job_Status_Insert_Input;
  /** on conflict condition */
  on_conflict?: Maybe<Manufacturing_Job_Status_On_Conflict>;
};

/** on conflict condition type for table "manufacturing.job_status" */
export type Manufacturing_Job_Status_On_Conflict = {
  constraint: Manufacturing_Job_Status_Constraint;
  update_columns?: Array<Manufacturing_Job_Status_Update_Column>;
  where?: Maybe<Manufacturing_Job_Status_Bool_Exp>;
};

/** Ordering options when selecting data from "manufacturing.job_status". */
export type Manufacturing_Job_Status_Order_By = {
  job_orders_aggregate?: Maybe<Manufacturing_Job_Order_Aggregate_Order_By>;
  key?: Maybe<Order_By>;
  value?: Maybe<Order_By>;
};

/** primary key columns input for table: manufacturing_job_status */
export type Manufacturing_Job_Status_Pk_Columns_Input = {
  key: Scalars['String'];
};

/** select columns of table "manufacturing.job_status" */
export enum Manufacturing_Job_Status_Select_Column {
  /** column name */
  Key = 'key',
  /** column name */
  Value = 'value'
}

/** input type for updating data in table "manufacturing.job_status" */
export type Manufacturing_Job_Status_Set_Input = {
  key?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/** update columns of table "manufacturing.job_status" */
export enum Manufacturing_Job_Status_Update_Column {
  /** column name */
  Key = 'key',
  /** column name */
  Value = 'value'
}

/** columns and relationships of "manufacturing.manufacturing_consumable" */
export type Manufacturing_Manufacturing_Consumable = {
  __typename?: 'manufacturing_manufacturing_consumable';
  /** An object relationship */
  consumable_draft: Sales_Consumable_Draft;
  consumable_draft_id: Scalars['uuid'];
  /** An object relationship */
  manufacturing_line: Manufacturing_Manufacturing_Line;
  manufacturing_line_id: Scalars['Int'];
};

/** aggregated selection of "manufacturing.manufacturing_consumable" */
export type Manufacturing_Manufacturing_Consumable_Aggregate = {
  __typename?: 'manufacturing_manufacturing_consumable_aggregate';
  aggregate?: Maybe<Manufacturing_Manufacturing_Consumable_Aggregate_Fields>;
  nodes: Array<Manufacturing_Manufacturing_Consumable>;
};

/** aggregate fields of "manufacturing.manufacturing_consumable" */
export type Manufacturing_Manufacturing_Consumable_Aggregate_Fields = {
  __typename?: 'manufacturing_manufacturing_consumable_aggregate_fields';
  avg?: Maybe<Manufacturing_Manufacturing_Consumable_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Manufacturing_Manufacturing_Consumable_Max_Fields>;
  min?: Maybe<Manufacturing_Manufacturing_Consumable_Min_Fields>;
  stddev?: Maybe<Manufacturing_Manufacturing_Consumable_Stddev_Fields>;
  stddev_pop?: Maybe<Manufacturing_Manufacturing_Consumable_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Manufacturing_Manufacturing_Consumable_Stddev_Samp_Fields>;
  sum?: Maybe<Manufacturing_Manufacturing_Consumable_Sum_Fields>;
  var_pop?: Maybe<Manufacturing_Manufacturing_Consumable_Var_Pop_Fields>;
  var_samp?: Maybe<Manufacturing_Manufacturing_Consumable_Var_Samp_Fields>;
  variance?: Maybe<Manufacturing_Manufacturing_Consumable_Variance_Fields>;
};


/** aggregate fields of "manufacturing.manufacturing_consumable" */
export type Manufacturing_Manufacturing_Consumable_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Manufacturing_Manufacturing_Consumable_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "manufacturing.manufacturing_consumable" */
export type Manufacturing_Manufacturing_Consumable_Aggregate_Order_By = {
  avg?: Maybe<Manufacturing_Manufacturing_Consumable_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Manufacturing_Manufacturing_Consumable_Max_Order_By>;
  min?: Maybe<Manufacturing_Manufacturing_Consumable_Min_Order_By>;
  stddev?: Maybe<Manufacturing_Manufacturing_Consumable_Stddev_Order_By>;
  stddev_pop?: Maybe<Manufacturing_Manufacturing_Consumable_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Manufacturing_Manufacturing_Consumable_Stddev_Samp_Order_By>;
  sum?: Maybe<Manufacturing_Manufacturing_Consumable_Sum_Order_By>;
  var_pop?: Maybe<Manufacturing_Manufacturing_Consumable_Var_Pop_Order_By>;
  var_samp?: Maybe<Manufacturing_Manufacturing_Consumable_Var_Samp_Order_By>;
  variance?: Maybe<Manufacturing_Manufacturing_Consumable_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "manufacturing.manufacturing_consumable" */
export type Manufacturing_Manufacturing_Consumable_Arr_Rel_Insert_Input = {
  data: Array<Manufacturing_Manufacturing_Consumable_Insert_Input>;
  /** on conflict condition */
  on_conflict?: Maybe<Manufacturing_Manufacturing_Consumable_On_Conflict>;
};

/** aggregate avg on columns */
export type Manufacturing_Manufacturing_Consumable_Avg_Fields = {
  __typename?: 'manufacturing_manufacturing_consumable_avg_fields';
  manufacturing_line_id?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "manufacturing.manufacturing_consumable" */
export type Manufacturing_Manufacturing_Consumable_Avg_Order_By = {
  manufacturing_line_id?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "manufacturing.manufacturing_consumable". All fields are combined with a logical 'AND'. */
export type Manufacturing_Manufacturing_Consumable_Bool_Exp = {
  _and?: Maybe<Array<Manufacturing_Manufacturing_Consumable_Bool_Exp>>;
  _not?: Maybe<Manufacturing_Manufacturing_Consumable_Bool_Exp>;
  _or?: Maybe<Array<Manufacturing_Manufacturing_Consumable_Bool_Exp>>;
  consumable_draft?: Maybe<Sales_Consumable_Draft_Bool_Exp>;
  consumable_draft_id?: Maybe<Uuid_Comparison_Exp>;
  manufacturing_line?: Maybe<Manufacturing_Manufacturing_Line_Bool_Exp>;
  manufacturing_line_id?: Maybe<Int_Comparison_Exp>;
};

/** unique or primary key constraints on table "manufacturing.manufacturing_consumable" */
export enum Manufacturing_Manufacturing_Consumable_Constraint {
  /** unique or primary key constraint */
  ManufacturingConsumablePkey = 'manufacturing_consumable_pkey'
}

/** input type for incrementing numeric columns in table "manufacturing.manufacturing_consumable" */
export type Manufacturing_Manufacturing_Consumable_Inc_Input = {
  manufacturing_line_id?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "manufacturing.manufacturing_consumable" */
export type Manufacturing_Manufacturing_Consumable_Insert_Input = {
  consumable_draft?: Maybe<Sales_Consumable_Draft_Obj_Rel_Insert_Input>;
  consumable_draft_id?: Maybe<Scalars['uuid']>;
  manufacturing_line?: Maybe<Manufacturing_Manufacturing_Line_Obj_Rel_Insert_Input>;
  manufacturing_line_id?: Maybe<Scalars['Int']>;
};

/** aggregate max on columns */
export type Manufacturing_Manufacturing_Consumable_Max_Fields = {
  __typename?: 'manufacturing_manufacturing_consumable_max_fields';
  consumable_draft_id?: Maybe<Scalars['uuid']>;
  manufacturing_line_id?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "manufacturing.manufacturing_consumable" */
export type Manufacturing_Manufacturing_Consumable_Max_Order_By = {
  consumable_draft_id?: Maybe<Order_By>;
  manufacturing_line_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Manufacturing_Manufacturing_Consumable_Min_Fields = {
  __typename?: 'manufacturing_manufacturing_consumable_min_fields';
  consumable_draft_id?: Maybe<Scalars['uuid']>;
  manufacturing_line_id?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "manufacturing.manufacturing_consumable" */
export type Manufacturing_Manufacturing_Consumable_Min_Order_By = {
  consumable_draft_id?: Maybe<Order_By>;
  manufacturing_line_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "manufacturing.manufacturing_consumable" */
export type Manufacturing_Manufacturing_Consumable_Mutation_Response = {
  __typename?: 'manufacturing_manufacturing_consumable_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Manufacturing_Manufacturing_Consumable>;
};

/** on conflict condition type for table "manufacturing.manufacturing_consumable" */
export type Manufacturing_Manufacturing_Consumable_On_Conflict = {
  constraint: Manufacturing_Manufacturing_Consumable_Constraint;
  update_columns?: Array<Manufacturing_Manufacturing_Consumable_Update_Column>;
  where?: Maybe<Manufacturing_Manufacturing_Consumable_Bool_Exp>;
};

/** Ordering options when selecting data from "manufacturing.manufacturing_consumable". */
export type Manufacturing_Manufacturing_Consumable_Order_By = {
  consumable_draft?: Maybe<Sales_Consumable_Draft_Order_By>;
  consumable_draft_id?: Maybe<Order_By>;
  manufacturing_line?: Maybe<Manufacturing_Manufacturing_Line_Order_By>;
  manufacturing_line_id?: Maybe<Order_By>;
};

/** primary key columns input for table: manufacturing_manufacturing_consumable */
export type Manufacturing_Manufacturing_Consumable_Pk_Columns_Input = {
  consumable_draft_id: Scalars['uuid'];
  manufacturing_line_id: Scalars['Int'];
};

/** select columns of table "manufacturing.manufacturing_consumable" */
export enum Manufacturing_Manufacturing_Consumable_Select_Column {
  /** column name */
  ConsumableDraftId = 'consumable_draft_id',
  /** column name */
  ManufacturingLineId = 'manufacturing_line_id'
}

/** input type for updating data in table "manufacturing.manufacturing_consumable" */
export type Manufacturing_Manufacturing_Consumable_Set_Input = {
  consumable_draft_id?: Maybe<Scalars['uuid']>;
  manufacturing_line_id?: Maybe<Scalars['Int']>;
};

/** aggregate stddev on columns */
export type Manufacturing_Manufacturing_Consumable_Stddev_Fields = {
  __typename?: 'manufacturing_manufacturing_consumable_stddev_fields';
  manufacturing_line_id?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "manufacturing.manufacturing_consumable" */
export type Manufacturing_Manufacturing_Consumable_Stddev_Order_By = {
  manufacturing_line_id?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Manufacturing_Manufacturing_Consumable_Stddev_Pop_Fields = {
  __typename?: 'manufacturing_manufacturing_consumable_stddev_pop_fields';
  manufacturing_line_id?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "manufacturing.manufacturing_consumable" */
export type Manufacturing_Manufacturing_Consumable_Stddev_Pop_Order_By = {
  manufacturing_line_id?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Manufacturing_Manufacturing_Consumable_Stddev_Samp_Fields = {
  __typename?: 'manufacturing_manufacturing_consumable_stddev_samp_fields';
  manufacturing_line_id?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "manufacturing.manufacturing_consumable" */
export type Manufacturing_Manufacturing_Consumable_Stddev_Samp_Order_By = {
  manufacturing_line_id?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Manufacturing_Manufacturing_Consumable_Sum_Fields = {
  __typename?: 'manufacturing_manufacturing_consumable_sum_fields';
  manufacturing_line_id?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "manufacturing.manufacturing_consumable" */
export type Manufacturing_Manufacturing_Consumable_Sum_Order_By = {
  manufacturing_line_id?: Maybe<Order_By>;
};

/** update columns of table "manufacturing.manufacturing_consumable" */
export enum Manufacturing_Manufacturing_Consumable_Update_Column {
  /** column name */
  ConsumableDraftId = 'consumable_draft_id',
  /** column name */
  ManufacturingLineId = 'manufacturing_line_id'
}

/** aggregate var_pop on columns */
export type Manufacturing_Manufacturing_Consumable_Var_Pop_Fields = {
  __typename?: 'manufacturing_manufacturing_consumable_var_pop_fields';
  manufacturing_line_id?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "manufacturing.manufacturing_consumable" */
export type Manufacturing_Manufacturing_Consumable_Var_Pop_Order_By = {
  manufacturing_line_id?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Manufacturing_Manufacturing_Consumable_Var_Samp_Fields = {
  __typename?: 'manufacturing_manufacturing_consumable_var_samp_fields';
  manufacturing_line_id?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "manufacturing.manufacturing_consumable" */
export type Manufacturing_Manufacturing_Consumable_Var_Samp_Order_By = {
  manufacturing_line_id?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Manufacturing_Manufacturing_Consumable_Variance_Fields = {
  __typename?: 'manufacturing_manufacturing_consumable_variance_fields';
  manufacturing_line_id?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "manufacturing.manufacturing_consumable" */
export type Manufacturing_Manufacturing_Consumable_Variance_Order_By = {
  manufacturing_line_id?: Maybe<Order_By>;
};

/** columns and relationships of "manufacturing.manufacturing_line" */
export type Manufacturing_Manufacturing_Line = {
  __typename?: 'manufacturing_manufacturing_line';
  /** An object relationship */
  glass_draft: Sales_Glass_Draft;
  glass_id: Scalars['uuid'];
  id: Scalars['Int'];
  /** An array relationship */
  manufacturing_consumables: Array<Manufacturing_Manufacturing_Consumable>;
  /** An aggregate relationship */
  manufacturing_consumables_aggregate: Manufacturing_Manufacturing_Consumable_Aggregate;
  /** An object relationship */
  manufacturing_line_status: Manufacturing_Manufacturing_Line_Status;
  /** An array relationship */
  manufacturing_services: Array<Manufacturing_Manufacturing_Service>;
  /** An aggregate relationship */
  manufacturing_services_aggregate: Manufacturing_Manufacturing_Service_Aggregate;
  ref?: Maybe<Scalars['String']>;
  status: Scalars['String'];
};


/** columns and relationships of "manufacturing.manufacturing_line" */
export type Manufacturing_Manufacturing_LineManufacturing_ConsumablesArgs = {
  distinct_on?: Maybe<Array<Manufacturing_Manufacturing_Consumable_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Manufacturing_Manufacturing_Consumable_Order_By>>;
  where?: Maybe<Manufacturing_Manufacturing_Consumable_Bool_Exp>;
};


/** columns and relationships of "manufacturing.manufacturing_line" */
export type Manufacturing_Manufacturing_LineManufacturing_Consumables_AggregateArgs = {
  distinct_on?: Maybe<Array<Manufacturing_Manufacturing_Consumable_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Manufacturing_Manufacturing_Consumable_Order_By>>;
  where?: Maybe<Manufacturing_Manufacturing_Consumable_Bool_Exp>;
};


/** columns and relationships of "manufacturing.manufacturing_line" */
export type Manufacturing_Manufacturing_LineManufacturing_ServicesArgs = {
  distinct_on?: Maybe<Array<Manufacturing_Manufacturing_Service_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Manufacturing_Manufacturing_Service_Order_By>>;
  where?: Maybe<Manufacturing_Manufacturing_Service_Bool_Exp>;
};


/** columns and relationships of "manufacturing.manufacturing_line" */
export type Manufacturing_Manufacturing_LineManufacturing_Services_AggregateArgs = {
  distinct_on?: Maybe<Array<Manufacturing_Manufacturing_Service_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Manufacturing_Manufacturing_Service_Order_By>>;
  where?: Maybe<Manufacturing_Manufacturing_Service_Bool_Exp>;
};

/** aggregated selection of "manufacturing.manufacturing_line" */
export type Manufacturing_Manufacturing_Line_Aggregate = {
  __typename?: 'manufacturing_manufacturing_line_aggregate';
  aggregate?: Maybe<Manufacturing_Manufacturing_Line_Aggregate_Fields>;
  nodes: Array<Manufacturing_Manufacturing_Line>;
};

/** aggregate fields of "manufacturing.manufacturing_line" */
export type Manufacturing_Manufacturing_Line_Aggregate_Fields = {
  __typename?: 'manufacturing_manufacturing_line_aggregate_fields';
  avg?: Maybe<Manufacturing_Manufacturing_Line_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Manufacturing_Manufacturing_Line_Max_Fields>;
  min?: Maybe<Manufacturing_Manufacturing_Line_Min_Fields>;
  stddev?: Maybe<Manufacturing_Manufacturing_Line_Stddev_Fields>;
  stddev_pop?: Maybe<Manufacturing_Manufacturing_Line_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Manufacturing_Manufacturing_Line_Stddev_Samp_Fields>;
  sum?: Maybe<Manufacturing_Manufacturing_Line_Sum_Fields>;
  var_pop?: Maybe<Manufacturing_Manufacturing_Line_Var_Pop_Fields>;
  var_samp?: Maybe<Manufacturing_Manufacturing_Line_Var_Samp_Fields>;
  variance?: Maybe<Manufacturing_Manufacturing_Line_Variance_Fields>;
};


/** aggregate fields of "manufacturing.manufacturing_line" */
export type Manufacturing_Manufacturing_Line_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Manufacturing_Manufacturing_Line_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "manufacturing.manufacturing_line" */
export type Manufacturing_Manufacturing_Line_Aggregate_Order_By = {
  avg?: Maybe<Manufacturing_Manufacturing_Line_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Manufacturing_Manufacturing_Line_Max_Order_By>;
  min?: Maybe<Manufacturing_Manufacturing_Line_Min_Order_By>;
  stddev?: Maybe<Manufacturing_Manufacturing_Line_Stddev_Order_By>;
  stddev_pop?: Maybe<Manufacturing_Manufacturing_Line_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Manufacturing_Manufacturing_Line_Stddev_Samp_Order_By>;
  sum?: Maybe<Manufacturing_Manufacturing_Line_Sum_Order_By>;
  var_pop?: Maybe<Manufacturing_Manufacturing_Line_Var_Pop_Order_By>;
  var_samp?: Maybe<Manufacturing_Manufacturing_Line_Var_Samp_Order_By>;
  variance?: Maybe<Manufacturing_Manufacturing_Line_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "manufacturing.manufacturing_line" */
export type Manufacturing_Manufacturing_Line_Arr_Rel_Insert_Input = {
  data: Array<Manufacturing_Manufacturing_Line_Insert_Input>;
  /** on conflict condition */
  on_conflict?: Maybe<Manufacturing_Manufacturing_Line_On_Conflict>;
};

/** aggregate avg on columns */
export type Manufacturing_Manufacturing_Line_Avg_Fields = {
  __typename?: 'manufacturing_manufacturing_line_avg_fields';
  id?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "manufacturing.manufacturing_line" */
export type Manufacturing_Manufacturing_Line_Avg_Order_By = {
  id?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "manufacturing.manufacturing_line". All fields are combined with a logical 'AND'. */
export type Manufacturing_Manufacturing_Line_Bool_Exp = {
  _and?: Maybe<Array<Manufacturing_Manufacturing_Line_Bool_Exp>>;
  _not?: Maybe<Manufacturing_Manufacturing_Line_Bool_Exp>;
  _or?: Maybe<Array<Manufacturing_Manufacturing_Line_Bool_Exp>>;
  glass_draft?: Maybe<Sales_Glass_Draft_Bool_Exp>;
  glass_id?: Maybe<Uuid_Comparison_Exp>;
  id?: Maybe<Int_Comparison_Exp>;
  manufacturing_consumables?: Maybe<Manufacturing_Manufacturing_Consumable_Bool_Exp>;
  manufacturing_line_status?: Maybe<Manufacturing_Manufacturing_Line_Status_Bool_Exp>;
  manufacturing_services?: Maybe<Manufacturing_Manufacturing_Service_Bool_Exp>;
  ref?: Maybe<String_Comparison_Exp>;
  status?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "manufacturing.manufacturing_line" */
export enum Manufacturing_Manufacturing_Line_Constraint {
  /** unique or primary key constraint */
  ManufacturingLinePkey = 'manufacturing_line_pkey'
}

/** input type for incrementing numeric columns in table "manufacturing.manufacturing_line" */
export type Manufacturing_Manufacturing_Line_Inc_Input = {
  id?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "manufacturing.manufacturing_line" */
export type Manufacturing_Manufacturing_Line_Insert_Input = {
  glass_draft?: Maybe<Sales_Glass_Draft_Obj_Rel_Insert_Input>;
  glass_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['Int']>;
  manufacturing_consumables?: Maybe<Manufacturing_Manufacturing_Consumable_Arr_Rel_Insert_Input>;
  manufacturing_line_status?: Maybe<Manufacturing_Manufacturing_Line_Status_Obj_Rel_Insert_Input>;
  manufacturing_services?: Maybe<Manufacturing_Manufacturing_Service_Arr_Rel_Insert_Input>;
  ref?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Manufacturing_Manufacturing_Line_Max_Fields = {
  __typename?: 'manufacturing_manufacturing_line_max_fields';
  glass_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['Int']>;
  ref?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "manufacturing.manufacturing_line" */
export type Manufacturing_Manufacturing_Line_Max_Order_By = {
  glass_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  ref?: Maybe<Order_By>;
  status?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Manufacturing_Manufacturing_Line_Min_Fields = {
  __typename?: 'manufacturing_manufacturing_line_min_fields';
  glass_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['Int']>;
  ref?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "manufacturing.manufacturing_line" */
export type Manufacturing_Manufacturing_Line_Min_Order_By = {
  glass_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  ref?: Maybe<Order_By>;
  status?: Maybe<Order_By>;
};

/** response of any mutation on the table "manufacturing.manufacturing_line" */
export type Manufacturing_Manufacturing_Line_Mutation_Response = {
  __typename?: 'manufacturing_manufacturing_line_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Manufacturing_Manufacturing_Line>;
};

/** input type for inserting object relation for remote table "manufacturing.manufacturing_line" */
export type Manufacturing_Manufacturing_Line_Obj_Rel_Insert_Input = {
  data: Manufacturing_Manufacturing_Line_Insert_Input;
  /** on conflict condition */
  on_conflict?: Maybe<Manufacturing_Manufacturing_Line_On_Conflict>;
};

/** on conflict condition type for table "manufacturing.manufacturing_line" */
export type Manufacturing_Manufacturing_Line_On_Conflict = {
  constraint: Manufacturing_Manufacturing_Line_Constraint;
  update_columns?: Array<Manufacturing_Manufacturing_Line_Update_Column>;
  where?: Maybe<Manufacturing_Manufacturing_Line_Bool_Exp>;
};

/** Ordering options when selecting data from "manufacturing.manufacturing_line". */
export type Manufacturing_Manufacturing_Line_Order_By = {
  glass_draft?: Maybe<Sales_Glass_Draft_Order_By>;
  glass_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  manufacturing_consumables_aggregate?: Maybe<Manufacturing_Manufacturing_Consumable_Aggregate_Order_By>;
  manufacturing_line_status?: Maybe<Manufacturing_Manufacturing_Line_Status_Order_By>;
  manufacturing_services_aggregate?: Maybe<Manufacturing_Manufacturing_Service_Aggregate_Order_By>;
  ref?: Maybe<Order_By>;
  status?: Maybe<Order_By>;
};

/** primary key columns input for table: manufacturing_manufacturing_line */
export type Manufacturing_Manufacturing_Line_Pk_Columns_Input = {
  id: Scalars['Int'];
};

/** select columns of table "manufacturing.manufacturing_line" */
export enum Manufacturing_Manufacturing_Line_Select_Column {
  /** column name */
  GlassId = 'glass_id',
  /** column name */
  Id = 'id',
  /** column name */
  Ref = 'ref',
  /** column name */
  Status = 'status'
}

/** input type for updating data in table "manufacturing.manufacturing_line" */
export type Manufacturing_Manufacturing_Line_Set_Input = {
  glass_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['Int']>;
  ref?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
};

/** columns and relationships of "manufacturing.manufacturing_line_status" */
export type Manufacturing_Manufacturing_Line_Status = {
  __typename?: 'manufacturing_manufacturing_line_status';
  /** An array relationship */
  manufacturing_lines: Array<Manufacturing_Manufacturing_Line>;
  /** An aggregate relationship */
  manufacturing_lines_aggregate: Manufacturing_Manufacturing_Line_Aggregate;
  status: Scalars['String'];
};


/** columns and relationships of "manufacturing.manufacturing_line_status" */
export type Manufacturing_Manufacturing_Line_StatusManufacturing_LinesArgs = {
  distinct_on?: Maybe<Array<Manufacturing_Manufacturing_Line_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Manufacturing_Manufacturing_Line_Order_By>>;
  where?: Maybe<Manufacturing_Manufacturing_Line_Bool_Exp>;
};


/** columns and relationships of "manufacturing.manufacturing_line_status" */
export type Manufacturing_Manufacturing_Line_StatusManufacturing_Lines_AggregateArgs = {
  distinct_on?: Maybe<Array<Manufacturing_Manufacturing_Line_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Manufacturing_Manufacturing_Line_Order_By>>;
  where?: Maybe<Manufacturing_Manufacturing_Line_Bool_Exp>;
};

/** aggregated selection of "manufacturing.manufacturing_line_status" */
export type Manufacturing_Manufacturing_Line_Status_Aggregate = {
  __typename?: 'manufacturing_manufacturing_line_status_aggregate';
  aggregate?: Maybe<Manufacturing_Manufacturing_Line_Status_Aggregate_Fields>;
  nodes: Array<Manufacturing_Manufacturing_Line_Status>;
};

/** aggregate fields of "manufacturing.manufacturing_line_status" */
export type Manufacturing_Manufacturing_Line_Status_Aggregate_Fields = {
  __typename?: 'manufacturing_manufacturing_line_status_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Manufacturing_Manufacturing_Line_Status_Max_Fields>;
  min?: Maybe<Manufacturing_Manufacturing_Line_Status_Min_Fields>;
};


/** aggregate fields of "manufacturing.manufacturing_line_status" */
export type Manufacturing_Manufacturing_Line_Status_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Manufacturing_Manufacturing_Line_Status_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** Boolean expression to filter rows from the table "manufacturing.manufacturing_line_status". All fields are combined with a logical 'AND'. */
export type Manufacturing_Manufacturing_Line_Status_Bool_Exp = {
  _and?: Maybe<Array<Manufacturing_Manufacturing_Line_Status_Bool_Exp>>;
  _not?: Maybe<Manufacturing_Manufacturing_Line_Status_Bool_Exp>;
  _or?: Maybe<Array<Manufacturing_Manufacturing_Line_Status_Bool_Exp>>;
  manufacturing_lines?: Maybe<Manufacturing_Manufacturing_Line_Bool_Exp>;
  status?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "manufacturing.manufacturing_line_status" */
export enum Manufacturing_Manufacturing_Line_Status_Constraint {
  /** unique or primary key constraint */
  ManufacturingLineStatusPkey = 'manufacturing_line_status_pkey'
}

/** input type for inserting data into table "manufacturing.manufacturing_line_status" */
export type Manufacturing_Manufacturing_Line_Status_Insert_Input = {
  manufacturing_lines?: Maybe<Manufacturing_Manufacturing_Line_Arr_Rel_Insert_Input>;
  status?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Manufacturing_Manufacturing_Line_Status_Max_Fields = {
  __typename?: 'manufacturing_manufacturing_line_status_max_fields';
  status?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type Manufacturing_Manufacturing_Line_Status_Min_Fields = {
  __typename?: 'manufacturing_manufacturing_line_status_min_fields';
  status?: Maybe<Scalars['String']>;
};

/** response of any mutation on the table "manufacturing.manufacturing_line_status" */
export type Manufacturing_Manufacturing_Line_Status_Mutation_Response = {
  __typename?: 'manufacturing_manufacturing_line_status_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Manufacturing_Manufacturing_Line_Status>;
};

/** input type for inserting object relation for remote table "manufacturing.manufacturing_line_status" */
export type Manufacturing_Manufacturing_Line_Status_Obj_Rel_Insert_Input = {
  data: Manufacturing_Manufacturing_Line_Status_Insert_Input;
  /** on conflict condition */
  on_conflict?: Maybe<Manufacturing_Manufacturing_Line_Status_On_Conflict>;
};

/** on conflict condition type for table "manufacturing.manufacturing_line_status" */
export type Manufacturing_Manufacturing_Line_Status_On_Conflict = {
  constraint: Manufacturing_Manufacturing_Line_Status_Constraint;
  update_columns?: Array<Manufacturing_Manufacturing_Line_Status_Update_Column>;
  where?: Maybe<Manufacturing_Manufacturing_Line_Status_Bool_Exp>;
};

/** Ordering options when selecting data from "manufacturing.manufacturing_line_status". */
export type Manufacturing_Manufacturing_Line_Status_Order_By = {
  manufacturing_lines_aggregate?: Maybe<Manufacturing_Manufacturing_Line_Aggregate_Order_By>;
  status?: Maybe<Order_By>;
};

/** primary key columns input for table: manufacturing_manufacturing_line_status */
export type Manufacturing_Manufacturing_Line_Status_Pk_Columns_Input = {
  status: Scalars['String'];
};

/** select columns of table "manufacturing.manufacturing_line_status" */
export enum Manufacturing_Manufacturing_Line_Status_Select_Column {
  /** column name */
  Status = 'status'
}

/** input type for updating data in table "manufacturing.manufacturing_line_status" */
export type Manufacturing_Manufacturing_Line_Status_Set_Input = {
  status?: Maybe<Scalars['String']>;
};

/** update columns of table "manufacturing.manufacturing_line_status" */
export enum Manufacturing_Manufacturing_Line_Status_Update_Column {
  /** column name */
  Status = 'status'
}

/** aggregate stddev on columns */
export type Manufacturing_Manufacturing_Line_Stddev_Fields = {
  __typename?: 'manufacturing_manufacturing_line_stddev_fields';
  id?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "manufacturing.manufacturing_line" */
export type Manufacturing_Manufacturing_Line_Stddev_Order_By = {
  id?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Manufacturing_Manufacturing_Line_Stddev_Pop_Fields = {
  __typename?: 'manufacturing_manufacturing_line_stddev_pop_fields';
  id?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "manufacturing.manufacturing_line" */
export type Manufacturing_Manufacturing_Line_Stddev_Pop_Order_By = {
  id?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Manufacturing_Manufacturing_Line_Stddev_Samp_Fields = {
  __typename?: 'manufacturing_manufacturing_line_stddev_samp_fields';
  id?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "manufacturing.manufacturing_line" */
export type Manufacturing_Manufacturing_Line_Stddev_Samp_Order_By = {
  id?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Manufacturing_Manufacturing_Line_Sum_Fields = {
  __typename?: 'manufacturing_manufacturing_line_sum_fields';
  id?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "manufacturing.manufacturing_line" */
export type Manufacturing_Manufacturing_Line_Sum_Order_By = {
  id?: Maybe<Order_By>;
};

/** update columns of table "manufacturing.manufacturing_line" */
export enum Manufacturing_Manufacturing_Line_Update_Column {
  /** column name */
  GlassId = 'glass_id',
  /** column name */
  Id = 'id',
  /** column name */
  Ref = 'ref',
  /** column name */
  Status = 'status'
}

/** aggregate var_pop on columns */
export type Manufacturing_Manufacturing_Line_Var_Pop_Fields = {
  __typename?: 'manufacturing_manufacturing_line_var_pop_fields';
  id?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "manufacturing.manufacturing_line" */
export type Manufacturing_Manufacturing_Line_Var_Pop_Order_By = {
  id?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Manufacturing_Manufacturing_Line_Var_Samp_Fields = {
  __typename?: 'manufacturing_manufacturing_line_var_samp_fields';
  id?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "manufacturing.manufacturing_line" */
export type Manufacturing_Manufacturing_Line_Var_Samp_Order_By = {
  id?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Manufacturing_Manufacturing_Line_Variance_Fields = {
  __typename?: 'manufacturing_manufacturing_line_variance_fields';
  id?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "manufacturing.manufacturing_line" */
export type Manufacturing_Manufacturing_Line_Variance_Order_By = {
  id?: Maybe<Order_By>;
};

/** columns and relationships of "manufacturing.manufacturing_service" */
export type Manufacturing_Manufacturing_Service = {
  __typename?: 'manufacturing_manufacturing_service';
  /** An object relationship */
  manufacturing_line: Manufacturing_Manufacturing_Line;
  manufacturing_line_id: Scalars['Int'];
  /** An object relationship */
  service_draft: Sales_Service_Draft;
  service_draft_id: Scalars['uuid'];
};

/** aggregated selection of "manufacturing.manufacturing_service" */
export type Manufacturing_Manufacturing_Service_Aggregate = {
  __typename?: 'manufacturing_manufacturing_service_aggregate';
  aggregate?: Maybe<Manufacturing_Manufacturing_Service_Aggregate_Fields>;
  nodes: Array<Manufacturing_Manufacturing_Service>;
};

/** aggregate fields of "manufacturing.manufacturing_service" */
export type Manufacturing_Manufacturing_Service_Aggregate_Fields = {
  __typename?: 'manufacturing_manufacturing_service_aggregate_fields';
  avg?: Maybe<Manufacturing_Manufacturing_Service_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Manufacturing_Manufacturing_Service_Max_Fields>;
  min?: Maybe<Manufacturing_Manufacturing_Service_Min_Fields>;
  stddev?: Maybe<Manufacturing_Manufacturing_Service_Stddev_Fields>;
  stddev_pop?: Maybe<Manufacturing_Manufacturing_Service_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Manufacturing_Manufacturing_Service_Stddev_Samp_Fields>;
  sum?: Maybe<Manufacturing_Manufacturing_Service_Sum_Fields>;
  var_pop?: Maybe<Manufacturing_Manufacturing_Service_Var_Pop_Fields>;
  var_samp?: Maybe<Manufacturing_Manufacturing_Service_Var_Samp_Fields>;
  variance?: Maybe<Manufacturing_Manufacturing_Service_Variance_Fields>;
};


/** aggregate fields of "manufacturing.manufacturing_service" */
export type Manufacturing_Manufacturing_Service_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Manufacturing_Manufacturing_Service_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "manufacturing.manufacturing_service" */
export type Manufacturing_Manufacturing_Service_Aggregate_Order_By = {
  avg?: Maybe<Manufacturing_Manufacturing_Service_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Manufacturing_Manufacturing_Service_Max_Order_By>;
  min?: Maybe<Manufacturing_Manufacturing_Service_Min_Order_By>;
  stddev?: Maybe<Manufacturing_Manufacturing_Service_Stddev_Order_By>;
  stddev_pop?: Maybe<Manufacturing_Manufacturing_Service_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Manufacturing_Manufacturing_Service_Stddev_Samp_Order_By>;
  sum?: Maybe<Manufacturing_Manufacturing_Service_Sum_Order_By>;
  var_pop?: Maybe<Manufacturing_Manufacturing_Service_Var_Pop_Order_By>;
  var_samp?: Maybe<Manufacturing_Manufacturing_Service_Var_Samp_Order_By>;
  variance?: Maybe<Manufacturing_Manufacturing_Service_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "manufacturing.manufacturing_service" */
export type Manufacturing_Manufacturing_Service_Arr_Rel_Insert_Input = {
  data: Array<Manufacturing_Manufacturing_Service_Insert_Input>;
  /** on conflict condition */
  on_conflict?: Maybe<Manufacturing_Manufacturing_Service_On_Conflict>;
};

/** aggregate avg on columns */
export type Manufacturing_Manufacturing_Service_Avg_Fields = {
  __typename?: 'manufacturing_manufacturing_service_avg_fields';
  manufacturing_line_id?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "manufacturing.manufacturing_service" */
export type Manufacturing_Manufacturing_Service_Avg_Order_By = {
  manufacturing_line_id?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "manufacturing.manufacturing_service". All fields are combined with a logical 'AND'. */
export type Manufacturing_Manufacturing_Service_Bool_Exp = {
  _and?: Maybe<Array<Manufacturing_Manufacturing_Service_Bool_Exp>>;
  _not?: Maybe<Manufacturing_Manufacturing_Service_Bool_Exp>;
  _or?: Maybe<Array<Manufacturing_Manufacturing_Service_Bool_Exp>>;
  manufacturing_line?: Maybe<Manufacturing_Manufacturing_Line_Bool_Exp>;
  manufacturing_line_id?: Maybe<Int_Comparison_Exp>;
  service_draft?: Maybe<Sales_Service_Draft_Bool_Exp>;
  service_draft_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "manufacturing.manufacturing_service" */
export enum Manufacturing_Manufacturing_Service_Constraint {
  /** unique or primary key constraint */
  ManufacturingServicePkey = 'manufacturing_service_pkey'
}

/** input type for incrementing numeric columns in table "manufacturing.manufacturing_service" */
export type Manufacturing_Manufacturing_Service_Inc_Input = {
  manufacturing_line_id?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "manufacturing.manufacturing_service" */
export type Manufacturing_Manufacturing_Service_Insert_Input = {
  manufacturing_line?: Maybe<Manufacturing_Manufacturing_Line_Obj_Rel_Insert_Input>;
  manufacturing_line_id?: Maybe<Scalars['Int']>;
  service_draft?: Maybe<Sales_Service_Draft_Obj_Rel_Insert_Input>;
  service_draft_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Manufacturing_Manufacturing_Service_Max_Fields = {
  __typename?: 'manufacturing_manufacturing_service_max_fields';
  manufacturing_line_id?: Maybe<Scalars['Int']>;
  service_draft_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "manufacturing.manufacturing_service" */
export type Manufacturing_Manufacturing_Service_Max_Order_By = {
  manufacturing_line_id?: Maybe<Order_By>;
  service_draft_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Manufacturing_Manufacturing_Service_Min_Fields = {
  __typename?: 'manufacturing_manufacturing_service_min_fields';
  manufacturing_line_id?: Maybe<Scalars['Int']>;
  service_draft_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "manufacturing.manufacturing_service" */
export type Manufacturing_Manufacturing_Service_Min_Order_By = {
  manufacturing_line_id?: Maybe<Order_By>;
  service_draft_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "manufacturing.manufacturing_service" */
export type Manufacturing_Manufacturing_Service_Mutation_Response = {
  __typename?: 'manufacturing_manufacturing_service_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Manufacturing_Manufacturing_Service>;
};

/** on conflict condition type for table "manufacturing.manufacturing_service" */
export type Manufacturing_Manufacturing_Service_On_Conflict = {
  constraint: Manufacturing_Manufacturing_Service_Constraint;
  update_columns?: Array<Manufacturing_Manufacturing_Service_Update_Column>;
  where?: Maybe<Manufacturing_Manufacturing_Service_Bool_Exp>;
};

/** Ordering options when selecting data from "manufacturing.manufacturing_service". */
export type Manufacturing_Manufacturing_Service_Order_By = {
  manufacturing_line?: Maybe<Manufacturing_Manufacturing_Line_Order_By>;
  manufacturing_line_id?: Maybe<Order_By>;
  service_draft?: Maybe<Sales_Service_Draft_Order_By>;
  service_draft_id?: Maybe<Order_By>;
};

/** primary key columns input for table: manufacturing_manufacturing_service */
export type Manufacturing_Manufacturing_Service_Pk_Columns_Input = {
  manufacturing_line_id: Scalars['Int'];
  service_draft_id: Scalars['uuid'];
};

/** select columns of table "manufacturing.manufacturing_service" */
export enum Manufacturing_Manufacturing_Service_Select_Column {
  /** column name */
  ManufacturingLineId = 'manufacturing_line_id',
  /** column name */
  ServiceDraftId = 'service_draft_id'
}

/** input type for updating data in table "manufacturing.manufacturing_service" */
export type Manufacturing_Manufacturing_Service_Set_Input = {
  manufacturing_line_id?: Maybe<Scalars['Int']>;
  service_draft_id?: Maybe<Scalars['uuid']>;
};

/** aggregate stddev on columns */
export type Manufacturing_Manufacturing_Service_Stddev_Fields = {
  __typename?: 'manufacturing_manufacturing_service_stddev_fields';
  manufacturing_line_id?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "manufacturing.manufacturing_service" */
export type Manufacturing_Manufacturing_Service_Stddev_Order_By = {
  manufacturing_line_id?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Manufacturing_Manufacturing_Service_Stddev_Pop_Fields = {
  __typename?: 'manufacturing_manufacturing_service_stddev_pop_fields';
  manufacturing_line_id?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "manufacturing.manufacturing_service" */
export type Manufacturing_Manufacturing_Service_Stddev_Pop_Order_By = {
  manufacturing_line_id?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Manufacturing_Manufacturing_Service_Stddev_Samp_Fields = {
  __typename?: 'manufacturing_manufacturing_service_stddev_samp_fields';
  manufacturing_line_id?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "manufacturing.manufacturing_service" */
export type Manufacturing_Manufacturing_Service_Stddev_Samp_Order_By = {
  manufacturing_line_id?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Manufacturing_Manufacturing_Service_Sum_Fields = {
  __typename?: 'manufacturing_manufacturing_service_sum_fields';
  manufacturing_line_id?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "manufacturing.manufacturing_service" */
export type Manufacturing_Manufacturing_Service_Sum_Order_By = {
  manufacturing_line_id?: Maybe<Order_By>;
};

/** update columns of table "manufacturing.manufacturing_service" */
export enum Manufacturing_Manufacturing_Service_Update_Column {
  /** column name */
  ManufacturingLineId = 'manufacturing_line_id',
  /** column name */
  ServiceDraftId = 'service_draft_id'
}

/** aggregate var_pop on columns */
export type Manufacturing_Manufacturing_Service_Var_Pop_Fields = {
  __typename?: 'manufacturing_manufacturing_service_var_pop_fields';
  manufacturing_line_id?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "manufacturing.manufacturing_service" */
export type Manufacturing_Manufacturing_Service_Var_Pop_Order_By = {
  manufacturing_line_id?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Manufacturing_Manufacturing_Service_Var_Samp_Fields = {
  __typename?: 'manufacturing_manufacturing_service_var_samp_fields';
  manufacturing_line_id?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "manufacturing.manufacturing_service" */
export type Manufacturing_Manufacturing_Service_Var_Samp_Order_By = {
  manufacturing_line_id?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Manufacturing_Manufacturing_Service_Variance_Fields = {
  __typename?: 'manufacturing_manufacturing_service_variance_fields';
  manufacturing_line_id?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "manufacturing.manufacturing_service" */
export type Manufacturing_Manufacturing_Service_Variance_Order_By = {
  manufacturing_line_id?: Maybe<Order_By>;
};

/** mutation root */
export type Mutation_Root = {
  __typename?: 'mutation_root';
  SignUp?: Maybe<SignUpOutput>;
  createTransferItem?: Maybe<InsertItemTranfserOutput>;
  /** delete data from the table: "cash_register.cash_box" */
  delete_cash_register_cash_box?: Maybe<Cash_Register_Cash_Box_Mutation_Response>;
  /** delete single row from the table: "cash_register.cash_box" */
  delete_cash_register_cash_box_by_pk?: Maybe<Cash_Register_Cash_Box>;
  /** delete data from the table: "cash_register.expense_category" */
  delete_cash_register_expense_category?: Maybe<Cash_Register_Expense_Category_Mutation_Response>;
  /** delete single row from the table: "cash_register.expense_category" */
  delete_cash_register_expense_category_by_pk?: Maybe<Cash_Register_Expense_Category>;
  /** delete data from the table: "cash_register.expenses" */
  delete_cash_register_expenses?: Maybe<Cash_Register_Expenses_Mutation_Response>;
  /** delete single row from the table: "cash_register.expenses" */
  delete_cash_register_expenses_by_pk?: Maybe<Cash_Register_Expenses>;
  /** delete data from the table: "contact.address" */
  delete_contact_address?: Maybe<Contact_Address_Mutation_Response>;
  /** delete single row from the table: "contact.address" */
  delete_contact_address_by_pk?: Maybe<Contact_Address>;
  /** delete data from the table: "contact.contact" */
  delete_contact_contact?: Maybe<Contact_Contact_Mutation_Response>;
  /** delete data from the table: "contact.contact_address" */
  delete_contact_contact_address?: Maybe<Contact_Contact_Address_Mutation_Response>;
  /** delete single row from the table: "contact.contact_address" */
  delete_contact_contact_address_by_pk?: Maybe<Contact_Contact_Address>;
  /** delete single row from the table: "contact.contact" */
  delete_contact_contact_by_pk?: Maybe<Contact_Contact>;
  /** delete data from the table: "contact.customer" */
  delete_contact_customer?: Maybe<Contact_Customer_Mutation_Response>;
  /** delete data from the table: "contact.customer_address" */
  delete_contact_customer_address?: Maybe<Contact_Customer_Address_Mutation_Response>;
  /** delete single row from the table: "contact.customer_address" */
  delete_contact_customer_address_by_pk?: Maybe<Contact_Customer_Address>;
  /** delete single row from the table: "contact.customer" */
  delete_contact_customer_by_pk?: Maybe<Contact_Customer>;
  /** delete data from the table: "contact.customer_contact" */
  delete_contact_customer_contact?: Maybe<Contact_Customer_Contact_Mutation_Response>;
  /** delete single row from the table: "contact.customer_contact" */
  delete_contact_customer_contact_by_pk?: Maybe<Contact_Customer_Contact>;
  /** delete data from the table: "contact.provider" */
  delete_contact_provider?: Maybe<Contact_Provider_Mutation_Response>;
  /** delete data from the table: "contact.provider_address" */
  delete_contact_provider_address?: Maybe<Contact_Provider_Address_Mutation_Response>;
  /** delete single row from the table: "contact.provider_address" */
  delete_contact_provider_address_by_pk?: Maybe<Contact_Provider_Address>;
  /** delete single row from the table: "contact.provider" */
  delete_contact_provider_by_pk?: Maybe<Contact_Provider>;
  /** delete data from the table: "contact.provider_contact" */
  delete_contact_provider_contact?: Maybe<Contact_Provider_Contact_Mutation_Response>;
  /** delete single row from the table: "contact.provider_contact" */
  delete_contact_provider_contact_by_pk?: Maybe<Contact_Provider_Contact>;
  /** delete data from the table: "management.company" */
  delete_management_company?: Maybe<Management_Company_Mutation_Response>;
  /** delete single row from the table: "management.company" */
  delete_management_company_by_pk?: Maybe<Management_Company>;
  /** delete data from the table: "management.salesPoint" */
  delete_management_salesPoint?: Maybe<Management_SalesPoint_Mutation_Response>;
  /** delete single row from the table: "management.salesPoint" */
  delete_management_salesPoint_by_pk?: Maybe<Management_SalesPoint>;
  /** delete data from the table: "management.userProfile" */
  delete_management_userProfile?: Maybe<Management_UserProfile_Mutation_Response>;
  /** delete single row from the table: "management.userProfile" */
  delete_management_userProfile_by_pk?: Maybe<Management_UserProfile>;
  /** delete data from the table: "management.user_role" */
  delete_management_user_role?: Maybe<Management_User_Role_Mutation_Response>;
  /** delete single row from the table: "management.user_role" */
  delete_management_user_role_by_pk?: Maybe<Management_User_Role>;
  /** delete data from the table: "manufacturing.job_order" */
  delete_manufacturing_job_order?: Maybe<Manufacturing_Job_Order_Mutation_Response>;
  /** delete single row from the table: "manufacturing.job_order" */
  delete_manufacturing_job_order_by_pk?: Maybe<Manufacturing_Job_Order>;
  /** delete data from the table: "manufacturing.job_status" */
  delete_manufacturing_job_status?: Maybe<Manufacturing_Job_Status_Mutation_Response>;
  /** delete single row from the table: "manufacturing.job_status" */
  delete_manufacturing_job_status_by_pk?: Maybe<Manufacturing_Job_Status>;
  /** delete data from the table: "manufacturing.manufacturing_consumable" */
  delete_manufacturing_manufacturing_consumable?: Maybe<Manufacturing_Manufacturing_Consumable_Mutation_Response>;
  /** delete single row from the table: "manufacturing.manufacturing_consumable" */
  delete_manufacturing_manufacturing_consumable_by_pk?: Maybe<Manufacturing_Manufacturing_Consumable>;
  /** delete data from the table: "manufacturing.manufacturing_line" */
  delete_manufacturing_manufacturing_line?: Maybe<Manufacturing_Manufacturing_Line_Mutation_Response>;
  /** delete single row from the table: "manufacturing.manufacturing_line" */
  delete_manufacturing_manufacturing_line_by_pk?: Maybe<Manufacturing_Manufacturing_Line>;
  /** delete data from the table: "manufacturing.manufacturing_line_status" */
  delete_manufacturing_manufacturing_line_status?: Maybe<Manufacturing_Manufacturing_Line_Status_Mutation_Response>;
  /** delete single row from the table: "manufacturing.manufacturing_line_status" */
  delete_manufacturing_manufacturing_line_status_by_pk?: Maybe<Manufacturing_Manufacturing_Line_Status>;
  /** delete data from the table: "manufacturing.manufacturing_service" */
  delete_manufacturing_manufacturing_service?: Maybe<Manufacturing_Manufacturing_Service_Mutation_Response>;
  /** delete single row from the table: "manufacturing.manufacturing_service" */
  delete_manufacturing_manufacturing_service_by_pk?: Maybe<Manufacturing_Manufacturing_Service>;
  /** delete data from the table: "notification.notification" */
  delete_notification_notification?: Maybe<Notification_Notification_Mutation_Response>;
  /** delete single row from the table: "notification.notification" */
  delete_notification_notification_by_pk?: Maybe<Notification_Notification>;
  /** delete data from the table: "notification.notification_priority" */
  delete_notification_notification_priority?: Maybe<Notification_Notification_Priority_Mutation_Response>;
  /** delete single row from the table: "notification.notification_priority" */
  delete_notification_notification_priority_by_pk?: Maybe<Notification_Notification_Priority>;
  /** delete data from the table: "notification.notification_status" */
  delete_notification_notification_status?: Maybe<Notification_Notification_Status_Mutation_Response>;
  /** delete single row from the table: "notification.notification_status" */
  delete_notification_notification_status_by_pk?: Maybe<Notification_Notification_Status>;
  /** delete data from the table: "product.accessory" */
  delete_product_accessory?: Maybe<Product_Accessory_Mutation_Response>;
  /** delete data from the table: "product.accessoryTypes" */
  delete_product_accessoryTypes?: Maybe<Product_AccessoryTypes_Mutation_Response>;
  /** delete single row from the table: "product.accessoryTypes" */
  delete_product_accessoryTypes_by_pk?: Maybe<Product_AccessoryTypes>;
  /** delete single row from the table: "product.accessory" */
  delete_product_accessory_by_pk?: Maybe<Product_Accessory>;
  /** delete data from the table: "product.consumable" */
  delete_product_consumable?: Maybe<Product_Consumable_Mutation_Response>;
  /** delete data from the table: "product.consumableCategory" */
  delete_product_consumableCategory?: Maybe<Product_ConsumableCategory_Mutation_Response>;
  /** delete single row from the table: "product.consumableCategory" */
  delete_product_consumableCategory_by_pk?: Maybe<Product_ConsumableCategory>;
  /** delete single row from the table: "product.consumable" */
  delete_product_consumable_by_pk?: Maybe<Product_Consumable>;
  /** delete data from the table: "product.customer_product" */
  delete_product_customer_product?: Maybe<Product_Customer_Product_Mutation_Response>;
  /** delete single row from the table: "product.customer_product" */
  delete_product_customer_product_by_pk?: Maybe<Product_Customer_Product>;
  /** delete data from the table: "product.glass" */
  delete_product_glass?: Maybe<Product_Glass_Mutation_Response>;
  /** delete data from the table: "product.glassColor" */
  delete_product_glassColor?: Maybe<Product_GlassColor_Mutation_Response>;
  /** delete single row from the table: "product.glassColor" */
  delete_product_glassColor_by_pk?: Maybe<Product_GlassColor>;
  /** delete data from the table: "product.glassThickness" */
  delete_product_glassThickness?: Maybe<Product_GlassThickness_Mutation_Response>;
  /** delete single row from the table: "product.glassThickness" */
  delete_product_glassThickness_by_pk?: Maybe<Product_GlassThickness>;
  /** delete data from the table: "product.glassType" */
  delete_product_glassType?: Maybe<Product_GlassType_Mutation_Response>;
  /** delete single row from the table: "product.glassType" */
  delete_product_glassType_by_pk?: Maybe<Product_GlassType>;
  /** delete single row from the table: "product.glass" */
  delete_product_glass_by_pk?: Maybe<Product_Glass>;
  /** delete data from the table: "product.product" */
  delete_product_product?: Maybe<Product_Product_Mutation_Response>;
  /** delete single row from the table: "product.product" */
  delete_product_product_by_pk?: Maybe<Product_Product>;
  /** delete data from the table: "product.product_companies" */
  delete_product_product_companies?: Maybe<Product_Product_Companies_Mutation_Response>;
  /** delete single row from the table: "product.product_companies" */
  delete_product_product_companies_by_pk?: Maybe<Product_Product_Companies>;
  /** delete data from the table: "product.product_unit" */
  delete_product_product_unit?: Maybe<Product_Product_Unit_Mutation_Response>;
  /** delete single row from the table: "product.product_unit" */
  delete_product_product_unit_by_pk?: Maybe<Product_Product_Unit>;
  /** delete data from the table: "product.service" */
  delete_product_service?: Maybe<Product_Service_Mutation_Response>;
  /** delete data from the table: "product.serviceConfig" */
  delete_product_serviceConfig?: Maybe<Product_ServiceConfig_Mutation_Response>;
  /** delete single row from the table: "product.serviceConfig" */
  delete_product_serviceConfig_by_pk?: Maybe<Product_ServiceConfig>;
  /** delete single row from the table: "product.service" */
  delete_product_service_by_pk?: Maybe<Product_Service>;
  /** delete data from the table: "product.service_consumable" */
  delete_product_service_consumable?: Maybe<Product_Service_Consumable_Mutation_Response>;
  /** delete single row from the table: "product.service_consumable" */
  delete_product_service_consumable_by_pk?: Maybe<Product_Service_Consumable>;
  /** delete data from the table: "product.substance" */
  delete_product_substance?: Maybe<Product_Substance_Mutation_Response>;
  /** delete single row from the table: "product.substance" */
  delete_product_substance_by_pk?: Maybe<Product_Substance>;
  /** delete data from the table: "product.substance_provider" */
  delete_product_substance_provider?: Maybe<Product_Substance_Provider_Mutation_Response>;
  /** delete single row from the table: "product.substance_provider" */
  delete_product_substance_provider_by_pk?: Maybe<Product_Substance_Provider>;
  /** delete data from the table: "product.substance_type" */
  delete_product_substance_type?: Maybe<Product_Substance_Type_Mutation_Response>;
  /** delete single row from the table: "product.substance_type" */
  delete_product_substance_type_by_pk?: Maybe<Product_Substance_Type>;
  /** delete data from the table: "product.supply" */
  delete_product_supply?: Maybe<Product_Supply_Mutation_Response>;
  /** delete single row from the table: "product.supply" */
  delete_product_supply_by_pk?: Maybe<Product_Supply>;
  /** delete data from the table: "purchase.delivery" */
  delete_purchase_delivery?: Maybe<Purchase_Delivery_Mutation_Response>;
  /** delete single row from the table: "purchase.delivery" */
  delete_purchase_delivery_by_pk?: Maybe<Purchase_Delivery>;
  /** delete data from the table: "purchase.delivery_item" */
  delete_purchase_delivery_item?: Maybe<Purchase_Delivery_Item_Mutation_Response>;
  /** delete single row from the table: "purchase.delivery_item" */
  delete_purchase_delivery_item_by_pk?: Maybe<Purchase_Delivery_Item>;
  /** delete data from the table: "sales.accessory_draft" */
  delete_sales_accessory_draft?: Maybe<Sales_Accessory_Draft_Mutation_Response>;
  /** delete single row from the table: "sales.accessory_draft" */
  delete_sales_accessory_draft_by_pk?: Maybe<Sales_Accessory_Draft>;
  /** delete data from the table: "sales.amount" */
  delete_sales_amount?: Maybe<Sales_Amount_Mutation_Response>;
  /** delete single row from the table: "sales.amount" */
  delete_sales_amount_by_pk?: Maybe<Sales_Amount>;
  /** delete data from the table: "sales.consumable_draft" */
  delete_sales_consumable_draft?: Maybe<Sales_Consumable_Draft_Mutation_Response>;
  /** delete single row from the table: "sales.consumable_draft" */
  delete_sales_consumable_draft_by_pk?: Maybe<Sales_Consumable_Draft>;
  /** delete data from the table: "sales.delivery" */
  delete_sales_delivery?: Maybe<Sales_Delivery_Mutation_Response>;
  /** delete single row from the table: "sales.delivery" */
  delete_sales_delivery_by_pk?: Maybe<Sales_Delivery>;
  /** delete data from the table: "sales.delivery_line" */
  delete_sales_delivery_line?: Maybe<Sales_Delivery_Line_Mutation_Response>;
  /** delete single row from the table: "sales.delivery_line" */
  delete_sales_delivery_line_by_pk?: Maybe<Sales_Delivery_Line>;
  /** delete data from the table: "sales.draft" */
  delete_sales_draft?: Maybe<Sales_Draft_Mutation_Response>;
  /** delete single row from the table: "sales.draft" */
  delete_sales_draft_by_pk?: Maybe<Sales_Draft>;
  /** delete data from the table: "sales.draft_status" */
  delete_sales_draft_status?: Maybe<Sales_Draft_Status_Mutation_Response>;
  /** delete single row from the table: "sales.draft_status" */
  delete_sales_draft_status_by_pk?: Maybe<Sales_Draft_Status>;
  /** delete data from the table: "sales.glass_draft" */
  delete_sales_glass_draft?: Maybe<Sales_Glass_Draft_Mutation_Response>;
  /** delete single row from the table: "sales.glass_draft" */
  delete_sales_glass_draft_by_pk?: Maybe<Sales_Glass_Draft>;
  /** delete data from the table: "sales.invoice" */
  delete_sales_invoice?: Maybe<Sales_Invoice_Mutation_Response>;
  /** delete single row from the table: "sales.invoice" */
  delete_sales_invoice_by_pk?: Maybe<Sales_Invoice>;
  /** delete data from the table: "sales.invoice_delivery" */
  delete_sales_invoice_delivery?: Maybe<Sales_Invoice_Delivery_Mutation_Response>;
  /** delete single row from the table: "sales.invoice_delivery" */
  delete_sales_invoice_delivery_by_pk?: Maybe<Sales_Invoice_Delivery>;
  /** delete data from the table: "sales.invoice_line" */
  delete_sales_invoice_line?: Maybe<Sales_Invoice_Line_Mutation_Response>;
  /** delete single row from the table: "sales.invoice_line" */
  delete_sales_invoice_line_by_pk?: Maybe<Sales_Invoice_Line>;
  /** delete data from the table: "sales.order" */
  delete_sales_order?: Maybe<Sales_Order_Mutation_Response>;
  /** delete single row from the table: "sales.order" */
  delete_sales_order_by_pk?: Maybe<Sales_Order>;
  /** delete data from the table: "sales.order_delivery_status" */
  delete_sales_order_delivery_status?: Maybe<Sales_Order_Delivery_Status_Mutation_Response>;
  /** delete single row from the table: "sales.order_delivery_status" */
  delete_sales_order_delivery_status_by_pk?: Maybe<Sales_Order_Delivery_Status>;
  /** delete data from the table: "sales.payment" */
  delete_sales_payment?: Maybe<Sales_Payment_Mutation_Response>;
  /** delete single row from the table: "sales.payment" */
  delete_sales_payment_by_pk?: Maybe<Sales_Payment>;
  /** delete data from the table: "sales.payment_method" */
  delete_sales_payment_method?: Maybe<Sales_Payment_Method_Mutation_Response>;
  /** delete single row from the table: "sales.payment_method" */
  delete_sales_payment_method_by_pk?: Maybe<Sales_Payment_Method>;
  /** delete data from the table: "sales.payment_status" */
  delete_sales_payment_status?: Maybe<Sales_Payment_Status_Mutation_Response>;
  /** delete single row from the table: "sales.payment_status" */
  delete_sales_payment_status_by_pk?: Maybe<Sales_Payment_Status>;
  /** delete data from the table: "sales.product_draft" */
  delete_sales_product_draft?: Maybe<Sales_Product_Draft_Mutation_Response>;
  /** delete single row from the table: "sales.product_draft" */
  delete_sales_product_draft_by_pk?: Maybe<Sales_Product_Draft>;
  /** delete data from the table: "sales.product_type" */
  delete_sales_product_type?: Maybe<Sales_Product_Type_Mutation_Response>;
  /** delete single row from the table: "sales.product_type" */
  delete_sales_product_type_by_pk?: Maybe<Sales_Product_Type>;
  /** delete data from the table: "sales.quotation" */
  delete_sales_quotation?: Maybe<Sales_Quotation_Mutation_Response>;
  /** delete single row from the table: "sales.quotation" */
  delete_sales_quotation_by_pk?: Maybe<Sales_Quotation>;
  /** delete data from the table: "sales.quotation_status" */
  delete_sales_quotation_status?: Maybe<Sales_Quotation_Status_Mutation_Response>;
  /** delete single row from the table: "sales.quotation_status" */
  delete_sales_quotation_status_by_pk?: Maybe<Sales_Quotation_Status>;
  /** delete data from the table: "sales.service_draft" */
  delete_sales_service_draft?: Maybe<Sales_Service_Draft_Mutation_Response>;
  /** delete single row from the table: "sales.service_draft" */
  delete_sales_service_draft_by_pk?: Maybe<Sales_Service_Draft>;
  /** delete data from the table: "sales.test" */
  delete_sales_test?: Maybe<Sales_Test_Mutation_Response>;
  /** delete single row from the table: "sales.test" */
  delete_sales_test_by_pk?: Maybe<Sales_Test>;
  /** delete data from the table: "stock.adjustment_reasons" */
  delete_stock_adjustment_reasons?: Maybe<Stock_Adjustment_Reasons_Mutation_Response>;
  /** delete single row from the table: "stock.adjustment_reasons" */
  delete_stock_adjustment_reasons_by_pk?: Maybe<Stock_Adjustment_Reasons>;
  /** delete data from the table: "stock.item_tranfer" */
  delete_stock_item_tranfer?: Maybe<Stock_Item_Tranfer_Mutation_Response>;
  /** delete single row from the table: "stock.item_tranfer" */
  delete_stock_item_tranfer_by_pk?: Maybe<Stock_Item_Tranfer>;
  /** delete data from the table: "stock.item_transfer_status" */
  delete_stock_item_transfer_status?: Maybe<Stock_Item_Transfer_Status_Mutation_Response>;
  /** delete single row from the table: "stock.item_transfer_status" */
  delete_stock_item_transfer_status_by_pk?: Maybe<Stock_Item_Transfer_Status>;
  /** delete data from the table: "stock.order_item" */
  delete_stock_order_item?: Maybe<Stock_Order_Item_Mutation_Response>;
  /** delete single row from the table: "stock.order_item" */
  delete_stock_order_item_by_pk?: Maybe<Stock_Order_Item>;
  /** delete data from the table: "stock.order_item_status" */
  delete_stock_order_item_status?: Maybe<Stock_Order_Item_Status_Mutation_Response>;
  /** delete single row from the table: "stock.order_item_status" */
  delete_stock_order_item_status_by_pk?: Maybe<Stock_Order_Item_Status>;
  /** delete data from the table: "stock.stock_adjustment" */
  delete_stock_stock_adjustment?: Maybe<Stock_Stock_Adjustment_Mutation_Response>;
  /** delete single row from the table: "stock.stock_adjustment" */
  delete_stock_stock_adjustment_by_pk?: Maybe<Stock_Stock_Adjustment>;
  /** delete data from the table: "stock.transfer_order" */
  delete_stock_transfer_order?: Maybe<Stock_Transfer_Order_Mutation_Response>;
  /** delete single row from the table: "stock.transfer_order" */
  delete_stock_transfer_order_by_pk?: Maybe<Stock_Transfer_Order>;
  /** delete data from the table: "stock.transfer_order_status" */
  delete_stock_transfer_order_status?: Maybe<Stock_Transfer_Order_Status_Mutation_Response>;
  /** delete single row from the table: "stock.transfer_order_status" */
  delete_stock_transfer_order_status_by_pk?: Maybe<Stock_Transfer_Order_Status>;
  /** delete data from the table: "stock.warehouse" */
  delete_stock_warehouse?: Maybe<Stock_Warehouse_Mutation_Response>;
  /** delete single row from the table: "stock.warehouse" */
  delete_stock_warehouse_by_pk?: Maybe<Stock_Warehouse>;
  /** delete data from the table: "stock.warehouse_substance" */
  delete_stock_warehouse_substance?: Maybe<Stock_Warehouse_Substance_Mutation_Response>;
  /** delete single row from the table: "stock.warehouse_substance" */
  delete_stock_warehouse_substance_by_pk?: Maybe<Stock_Warehouse_Substance>;
  /** insert data into the table: "cash_register.cash_box" */
  insert_cash_register_cash_box?: Maybe<Cash_Register_Cash_Box_Mutation_Response>;
  /** insert a single row into the table: "cash_register.cash_box" */
  insert_cash_register_cash_box_one?: Maybe<Cash_Register_Cash_Box>;
  /** insert data into the table: "cash_register.expense_category" */
  insert_cash_register_expense_category?: Maybe<Cash_Register_Expense_Category_Mutation_Response>;
  /** insert a single row into the table: "cash_register.expense_category" */
  insert_cash_register_expense_category_one?: Maybe<Cash_Register_Expense_Category>;
  /** insert data into the table: "cash_register.expenses" */
  insert_cash_register_expenses?: Maybe<Cash_Register_Expenses_Mutation_Response>;
  /** insert a single row into the table: "cash_register.expenses" */
  insert_cash_register_expenses_one?: Maybe<Cash_Register_Expenses>;
  /** insert data into the table: "contact.address" */
  insert_contact_address?: Maybe<Contact_Address_Mutation_Response>;
  /** insert a single row into the table: "contact.address" */
  insert_contact_address_one?: Maybe<Contact_Address>;
  /** insert data into the table: "contact.contact" */
  insert_contact_contact?: Maybe<Contact_Contact_Mutation_Response>;
  /** insert data into the table: "contact.contact_address" */
  insert_contact_contact_address?: Maybe<Contact_Contact_Address_Mutation_Response>;
  /** insert a single row into the table: "contact.contact_address" */
  insert_contact_contact_address_one?: Maybe<Contact_Contact_Address>;
  /** insert a single row into the table: "contact.contact" */
  insert_contact_contact_one?: Maybe<Contact_Contact>;
  /** insert data into the table: "contact.customer" */
  insert_contact_customer?: Maybe<Contact_Customer_Mutation_Response>;
  /** insert data into the table: "contact.customer_address" */
  insert_contact_customer_address?: Maybe<Contact_Customer_Address_Mutation_Response>;
  /** insert a single row into the table: "contact.customer_address" */
  insert_contact_customer_address_one?: Maybe<Contact_Customer_Address>;
  /** insert data into the table: "contact.customer_contact" */
  insert_contact_customer_contact?: Maybe<Contact_Customer_Contact_Mutation_Response>;
  /** insert a single row into the table: "contact.customer_contact" */
  insert_contact_customer_contact_one?: Maybe<Contact_Customer_Contact>;
  /** insert a single row into the table: "contact.customer" */
  insert_contact_customer_one?: Maybe<Contact_Customer>;
  /** insert data into the table: "contact.provider" */
  insert_contact_provider?: Maybe<Contact_Provider_Mutation_Response>;
  /** insert data into the table: "contact.provider_address" */
  insert_contact_provider_address?: Maybe<Contact_Provider_Address_Mutation_Response>;
  /** insert a single row into the table: "contact.provider_address" */
  insert_contact_provider_address_one?: Maybe<Contact_Provider_Address>;
  /** insert data into the table: "contact.provider_contact" */
  insert_contact_provider_contact?: Maybe<Contact_Provider_Contact_Mutation_Response>;
  /** insert a single row into the table: "contact.provider_contact" */
  insert_contact_provider_contact_one?: Maybe<Contact_Provider_Contact>;
  /** insert a single row into the table: "contact.provider" */
  insert_contact_provider_one?: Maybe<Contact_Provider>;
  /** insert data into the table: "management.company" */
  insert_management_company?: Maybe<Management_Company_Mutation_Response>;
  /** insert a single row into the table: "management.company" */
  insert_management_company_one?: Maybe<Management_Company>;
  /** insert data into the table: "management.salesPoint" */
  insert_management_salesPoint?: Maybe<Management_SalesPoint_Mutation_Response>;
  /** insert a single row into the table: "management.salesPoint" */
  insert_management_salesPoint_one?: Maybe<Management_SalesPoint>;
  /** insert data into the table: "management.userProfile" */
  insert_management_userProfile?: Maybe<Management_UserProfile_Mutation_Response>;
  /** insert a single row into the table: "management.userProfile" */
  insert_management_userProfile_one?: Maybe<Management_UserProfile>;
  /** insert data into the table: "management.user_role" */
  insert_management_user_role?: Maybe<Management_User_Role_Mutation_Response>;
  /** insert a single row into the table: "management.user_role" */
  insert_management_user_role_one?: Maybe<Management_User_Role>;
  /** insert data into the table: "manufacturing.job_order" */
  insert_manufacturing_job_order?: Maybe<Manufacturing_Job_Order_Mutation_Response>;
  /** insert a single row into the table: "manufacturing.job_order" */
  insert_manufacturing_job_order_one?: Maybe<Manufacturing_Job_Order>;
  /** insert data into the table: "manufacturing.job_status" */
  insert_manufacturing_job_status?: Maybe<Manufacturing_Job_Status_Mutation_Response>;
  /** insert a single row into the table: "manufacturing.job_status" */
  insert_manufacturing_job_status_one?: Maybe<Manufacturing_Job_Status>;
  /** insert data into the table: "manufacturing.manufacturing_consumable" */
  insert_manufacturing_manufacturing_consumable?: Maybe<Manufacturing_Manufacturing_Consumable_Mutation_Response>;
  /** insert a single row into the table: "manufacturing.manufacturing_consumable" */
  insert_manufacturing_manufacturing_consumable_one?: Maybe<Manufacturing_Manufacturing_Consumable>;
  /** insert data into the table: "manufacturing.manufacturing_line" */
  insert_manufacturing_manufacturing_line?: Maybe<Manufacturing_Manufacturing_Line_Mutation_Response>;
  /** insert a single row into the table: "manufacturing.manufacturing_line" */
  insert_manufacturing_manufacturing_line_one?: Maybe<Manufacturing_Manufacturing_Line>;
  /** insert data into the table: "manufacturing.manufacturing_line_status" */
  insert_manufacturing_manufacturing_line_status?: Maybe<Manufacturing_Manufacturing_Line_Status_Mutation_Response>;
  /** insert a single row into the table: "manufacturing.manufacturing_line_status" */
  insert_manufacturing_manufacturing_line_status_one?: Maybe<Manufacturing_Manufacturing_Line_Status>;
  /** insert data into the table: "manufacturing.manufacturing_service" */
  insert_manufacturing_manufacturing_service?: Maybe<Manufacturing_Manufacturing_Service_Mutation_Response>;
  /** insert a single row into the table: "manufacturing.manufacturing_service" */
  insert_manufacturing_manufacturing_service_one?: Maybe<Manufacturing_Manufacturing_Service>;
  /** insert data into the table: "notification.notification" */
  insert_notification_notification?: Maybe<Notification_Notification_Mutation_Response>;
  /** insert a single row into the table: "notification.notification" */
  insert_notification_notification_one?: Maybe<Notification_Notification>;
  /** insert data into the table: "notification.notification_priority" */
  insert_notification_notification_priority?: Maybe<Notification_Notification_Priority_Mutation_Response>;
  /** insert a single row into the table: "notification.notification_priority" */
  insert_notification_notification_priority_one?: Maybe<Notification_Notification_Priority>;
  /** insert data into the table: "notification.notification_status" */
  insert_notification_notification_status?: Maybe<Notification_Notification_Status_Mutation_Response>;
  /** insert a single row into the table: "notification.notification_status" */
  insert_notification_notification_status_one?: Maybe<Notification_Notification_Status>;
  /** insert data into the table: "product.accessory" */
  insert_product_accessory?: Maybe<Product_Accessory_Mutation_Response>;
  /** insert data into the table: "product.accessoryTypes" */
  insert_product_accessoryTypes?: Maybe<Product_AccessoryTypes_Mutation_Response>;
  /** insert a single row into the table: "product.accessoryTypes" */
  insert_product_accessoryTypes_one?: Maybe<Product_AccessoryTypes>;
  /** insert a single row into the table: "product.accessory" */
  insert_product_accessory_one?: Maybe<Product_Accessory>;
  /** insert data into the table: "product.consumable" */
  insert_product_consumable?: Maybe<Product_Consumable_Mutation_Response>;
  /** insert data into the table: "product.consumableCategory" */
  insert_product_consumableCategory?: Maybe<Product_ConsumableCategory_Mutation_Response>;
  /** insert a single row into the table: "product.consumableCategory" */
  insert_product_consumableCategory_one?: Maybe<Product_ConsumableCategory>;
  /** insert a single row into the table: "product.consumable" */
  insert_product_consumable_one?: Maybe<Product_Consumable>;
  /** insert data into the table: "product.customer_product" */
  insert_product_customer_product?: Maybe<Product_Customer_Product_Mutation_Response>;
  /** insert a single row into the table: "product.customer_product" */
  insert_product_customer_product_one?: Maybe<Product_Customer_Product>;
  /** insert data into the table: "product.glass" */
  insert_product_glass?: Maybe<Product_Glass_Mutation_Response>;
  /** insert data into the table: "product.glassColor" */
  insert_product_glassColor?: Maybe<Product_GlassColor_Mutation_Response>;
  /** insert a single row into the table: "product.glassColor" */
  insert_product_glassColor_one?: Maybe<Product_GlassColor>;
  /** insert data into the table: "product.glassThickness" */
  insert_product_glassThickness?: Maybe<Product_GlassThickness_Mutation_Response>;
  /** insert a single row into the table: "product.glassThickness" */
  insert_product_glassThickness_one?: Maybe<Product_GlassThickness>;
  /** insert data into the table: "product.glassType" */
  insert_product_glassType?: Maybe<Product_GlassType_Mutation_Response>;
  /** insert a single row into the table: "product.glassType" */
  insert_product_glassType_one?: Maybe<Product_GlassType>;
  /** insert a single row into the table: "product.glass" */
  insert_product_glass_one?: Maybe<Product_Glass>;
  /** insert data into the table: "product.product" */
  insert_product_product?: Maybe<Product_Product_Mutation_Response>;
  /** insert data into the table: "product.product_companies" */
  insert_product_product_companies?: Maybe<Product_Product_Companies_Mutation_Response>;
  /** insert a single row into the table: "product.product_companies" */
  insert_product_product_companies_one?: Maybe<Product_Product_Companies>;
  /** insert a single row into the table: "product.product" */
  insert_product_product_one?: Maybe<Product_Product>;
  /** insert data into the table: "product.product_unit" */
  insert_product_product_unit?: Maybe<Product_Product_Unit_Mutation_Response>;
  /** insert a single row into the table: "product.product_unit" */
  insert_product_product_unit_one?: Maybe<Product_Product_Unit>;
  /** insert data into the table: "product.service" */
  insert_product_service?: Maybe<Product_Service_Mutation_Response>;
  /** insert data into the table: "product.serviceConfig" */
  insert_product_serviceConfig?: Maybe<Product_ServiceConfig_Mutation_Response>;
  /** insert a single row into the table: "product.serviceConfig" */
  insert_product_serviceConfig_one?: Maybe<Product_ServiceConfig>;
  /** insert data into the table: "product.service_consumable" */
  insert_product_service_consumable?: Maybe<Product_Service_Consumable_Mutation_Response>;
  /** insert a single row into the table: "product.service_consumable" */
  insert_product_service_consumable_one?: Maybe<Product_Service_Consumable>;
  /** insert a single row into the table: "product.service" */
  insert_product_service_one?: Maybe<Product_Service>;
  /** insert data into the table: "product.substance" */
  insert_product_substance?: Maybe<Product_Substance_Mutation_Response>;
  /** insert a single row into the table: "product.substance" */
  insert_product_substance_one?: Maybe<Product_Substance>;
  /** insert data into the table: "product.substance_provider" */
  insert_product_substance_provider?: Maybe<Product_Substance_Provider_Mutation_Response>;
  /** insert a single row into the table: "product.substance_provider" */
  insert_product_substance_provider_one?: Maybe<Product_Substance_Provider>;
  /** insert data into the table: "product.substance_type" */
  insert_product_substance_type?: Maybe<Product_Substance_Type_Mutation_Response>;
  /** insert a single row into the table: "product.substance_type" */
  insert_product_substance_type_one?: Maybe<Product_Substance_Type>;
  /** insert data into the table: "product.supply" */
  insert_product_supply?: Maybe<Product_Supply_Mutation_Response>;
  /** insert a single row into the table: "product.supply" */
  insert_product_supply_one?: Maybe<Product_Supply>;
  /** insert data into the table: "purchase.delivery" */
  insert_purchase_delivery?: Maybe<Purchase_Delivery_Mutation_Response>;
  /** insert data into the table: "purchase.delivery_item" */
  insert_purchase_delivery_item?: Maybe<Purchase_Delivery_Item_Mutation_Response>;
  /** insert a single row into the table: "purchase.delivery_item" */
  insert_purchase_delivery_item_one?: Maybe<Purchase_Delivery_Item>;
  /** insert a single row into the table: "purchase.delivery" */
  insert_purchase_delivery_one?: Maybe<Purchase_Delivery>;
  /** insert data into the table: "sales.accessory_draft" */
  insert_sales_accessory_draft?: Maybe<Sales_Accessory_Draft_Mutation_Response>;
  /** insert a single row into the table: "sales.accessory_draft" */
  insert_sales_accessory_draft_one?: Maybe<Sales_Accessory_Draft>;
  /** insert data into the table: "sales.amount" */
  insert_sales_amount?: Maybe<Sales_Amount_Mutation_Response>;
  /** insert a single row into the table: "sales.amount" */
  insert_sales_amount_one?: Maybe<Sales_Amount>;
  /** insert data into the table: "sales.consumable_draft" */
  insert_sales_consumable_draft?: Maybe<Sales_Consumable_Draft_Mutation_Response>;
  /** insert a single row into the table: "sales.consumable_draft" */
  insert_sales_consumable_draft_one?: Maybe<Sales_Consumable_Draft>;
  /** insert data into the table: "sales.delivery" */
  insert_sales_delivery?: Maybe<Sales_Delivery_Mutation_Response>;
  /** insert data into the table: "sales.delivery_line" */
  insert_sales_delivery_line?: Maybe<Sales_Delivery_Line_Mutation_Response>;
  /** insert a single row into the table: "sales.delivery_line" */
  insert_sales_delivery_line_one?: Maybe<Sales_Delivery_Line>;
  /** insert a single row into the table: "sales.delivery" */
  insert_sales_delivery_one?: Maybe<Sales_Delivery>;
  /** insert data into the table: "sales.draft" */
  insert_sales_draft?: Maybe<Sales_Draft_Mutation_Response>;
  /** insert a single row into the table: "sales.draft" */
  insert_sales_draft_one?: Maybe<Sales_Draft>;
  /** insert data into the table: "sales.draft_status" */
  insert_sales_draft_status?: Maybe<Sales_Draft_Status_Mutation_Response>;
  /** insert a single row into the table: "sales.draft_status" */
  insert_sales_draft_status_one?: Maybe<Sales_Draft_Status>;
  /** insert data into the table: "sales.glass_draft" */
  insert_sales_glass_draft?: Maybe<Sales_Glass_Draft_Mutation_Response>;
  /** insert a single row into the table: "sales.glass_draft" */
  insert_sales_glass_draft_one?: Maybe<Sales_Glass_Draft>;
  /** insert data into the table: "sales.invoice" */
  insert_sales_invoice?: Maybe<Sales_Invoice_Mutation_Response>;
  /** insert data into the table: "sales.invoice_delivery" */
  insert_sales_invoice_delivery?: Maybe<Sales_Invoice_Delivery_Mutation_Response>;
  /** insert a single row into the table: "sales.invoice_delivery" */
  insert_sales_invoice_delivery_one?: Maybe<Sales_Invoice_Delivery>;
  /** insert data into the table: "sales.invoice_line" */
  insert_sales_invoice_line?: Maybe<Sales_Invoice_Line_Mutation_Response>;
  /** insert a single row into the table: "sales.invoice_line" */
  insert_sales_invoice_line_one?: Maybe<Sales_Invoice_Line>;
  /** insert a single row into the table: "sales.invoice" */
  insert_sales_invoice_one?: Maybe<Sales_Invoice>;
  /** insert data into the table: "sales.order" */
  insert_sales_order?: Maybe<Sales_Order_Mutation_Response>;
  /** insert data into the table: "sales.order_delivery_status" */
  insert_sales_order_delivery_status?: Maybe<Sales_Order_Delivery_Status_Mutation_Response>;
  /** insert a single row into the table: "sales.order_delivery_status" */
  insert_sales_order_delivery_status_one?: Maybe<Sales_Order_Delivery_Status>;
  /** insert a single row into the table: "sales.order" */
  insert_sales_order_one?: Maybe<Sales_Order>;
  /** insert data into the table: "sales.payment" */
  insert_sales_payment?: Maybe<Sales_Payment_Mutation_Response>;
  /** insert data into the table: "sales.payment_method" */
  insert_sales_payment_method?: Maybe<Sales_Payment_Method_Mutation_Response>;
  /** insert a single row into the table: "sales.payment_method" */
  insert_sales_payment_method_one?: Maybe<Sales_Payment_Method>;
  /** insert a single row into the table: "sales.payment" */
  insert_sales_payment_one?: Maybe<Sales_Payment>;
  /** insert data into the table: "sales.payment_status" */
  insert_sales_payment_status?: Maybe<Sales_Payment_Status_Mutation_Response>;
  /** insert a single row into the table: "sales.payment_status" */
  insert_sales_payment_status_one?: Maybe<Sales_Payment_Status>;
  /** insert data into the table: "sales.product_draft" */
  insert_sales_product_draft?: Maybe<Sales_Product_Draft_Mutation_Response>;
  /** insert a single row into the table: "sales.product_draft" */
  insert_sales_product_draft_one?: Maybe<Sales_Product_Draft>;
  /** insert data into the table: "sales.product_type" */
  insert_sales_product_type?: Maybe<Sales_Product_Type_Mutation_Response>;
  /** insert a single row into the table: "sales.product_type" */
  insert_sales_product_type_one?: Maybe<Sales_Product_Type>;
  /** insert data into the table: "sales.quotation" */
  insert_sales_quotation?: Maybe<Sales_Quotation_Mutation_Response>;
  /** insert a single row into the table: "sales.quotation" */
  insert_sales_quotation_one?: Maybe<Sales_Quotation>;
  /** insert data into the table: "sales.quotation_status" */
  insert_sales_quotation_status?: Maybe<Sales_Quotation_Status_Mutation_Response>;
  /** insert a single row into the table: "sales.quotation_status" */
  insert_sales_quotation_status_one?: Maybe<Sales_Quotation_Status>;
  /** insert data into the table: "sales.service_draft" */
  insert_sales_service_draft?: Maybe<Sales_Service_Draft_Mutation_Response>;
  /** insert a single row into the table: "sales.service_draft" */
  insert_sales_service_draft_one?: Maybe<Sales_Service_Draft>;
  /** insert data into the table: "sales.test" */
  insert_sales_test?: Maybe<Sales_Test_Mutation_Response>;
  /** insert a single row into the table: "sales.test" */
  insert_sales_test_one?: Maybe<Sales_Test>;
  /** insert data into the table: "stock.adjustment_reasons" */
  insert_stock_adjustment_reasons?: Maybe<Stock_Adjustment_Reasons_Mutation_Response>;
  /** insert a single row into the table: "stock.adjustment_reasons" */
  insert_stock_adjustment_reasons_one?: Maybe<Stock_Adjustment_Reasons>;
  /** insert data into the table: "stock.item_tranfer" */
  insert_stock_item_tranfer?: Maybe<Stock_Item_Tranfer_Mutation_Response>;
  /** insert a single row into the table: "stock.item_tranfer" */
  insert_stock_item_tranfer_one?: Maybe<Stock_Item_Tranfer>;
  /** insert data into the table: "stock.item_transfer_status" */
  insert_stock_item_transfer_status?: Maybe<Stock_Item_Transfer_Status_Mutation_Response>;
  /** insert a single row into the table: "stock.item_transfer_status" */
  insert_stock_item_transfer_status_one?: Maybe<Stock_Item_Transfer_Status>;
  /** insert data into the table: "stock.order_item" */
  insert_stock_order_item?: Maybe<Stock_Order_Item_Mutation_Response>;
  /** insert a single row into the table: "stock.order_item" */
  insert_stock_order_item_one?: Maybe<Stock_Order_Item>;
  /** insert data into the table: "stock.order_item_status" */
  insert_stock_order_item_status?: Maybe<Stock_Order_Item_Status_Mutation_Response>;
  /** insert a single row into the table: "stock.order_item_status" */
  insert_stock_order_item_status_one?: Maybe<Stock_Order_Item_Status>;
  /** insert data into the table: "stock.stock_adjustment" */
  insert_stock_stock_adjustment?: Maybe<Stock_Stock_Adjustment_Mutation_Response>;
  /** insert a single row into the table: "stock.stock_adjustment" */
  insert_stock_stock_adjustment_one?: Maybe<Stock_Stock_Adjustment>;
  /** insert data into the table: "stock.transfer_order" */
  insert_stock_transfer_order?: Maybe<Stock_Transfer_Order_Mutation_Response>;
  /** insert a single row into the table: "stock.transfer_order" */
  insert_stock_transfer_order_one?: Maybe<Stock_Transfer_Order>;
  /** insert data into the table: "stock.transfer_order_status" */
  insert_stock_transfer_order_status?: Maybe<Stock_Transfer_Order_Status_Mutation_Response>;
  /** insert a single row into the table: "stock.transfer_order_status" */
  insert_stock_transfer_order_status_one?: Maybe<Stock_Transfer_Order_Status>;
  /** insert data into the table: "stock.warehouse" */
  insert_stock_warehouse?: Maybe<Stock_Warehouse_Mutation_Response>;
  /** insert a single row into the table: "stock.warehouse" */
  insert_stock_warehouse_one?: Maybe<Stock_Warehouse>;
  /** insert data into the table: "stock.warehouse_substance" */
  insert_stock_warehouse_substance?: Maybe<Stock_Warehouse_Substance_Mutation_Response>;
  /** insert a single row into the table: "stock.warehouse_substance" */
  insert_stock_warehouse_substance_one?: Maybe<Stock_Warehouse_Substance>;
  login?: Maybe<LoginOutput>;
  /** update data of the table: "cash_register.cash_box" */
  update_cash_register_cash_box?: Maybe<Cash_Register_Cash_Box_Mutation_Response>;
  /** update single row of the table: "cash_register.cash_box" */
  update_cash_register_cash_box_by_pk?: Maybe<Cash_Register_Cash_Box>;
  /** update data of the table: "cash_register.expense_category" */
  update_cash_register_expense_category?: Maybe<Cash_Register_Expense_Category_Mutation_Response>;
  /** update single row of the table: "cash_register.expense_category" */
  update_cash_register_expense_category_by_pk?: Maybe<Cash_Register_Expense_Category>;
  /** update data of the table: "cash_register.expenses" */
  update_cash_register_expenses?: Maybe<Cash_Register_Expenses_Mutation_Response>;
  /** update single row of the table: "cash_register.expenses" */
  update_cash_register_expenses_by_pk?: Maybe<Cash_Register_Expenses>;
  /** update data of the table: "contact.address" */
  update_contact_address?: Maybe<Contact_Address_Mutation_Response>;
  /** update single row of the table: "contact.address" */
  update_contact_address_by_pk?: Maybe<Contact_Address>;
  /** update data of the table: "contact.contact" */
  update_contact_contact?: Maybe<Contact_Contact_Mutation_Response>;
  /** update data of the table: "contact.contact_address" */
  update_contact_contact_address?: Maybe<Contact_Contact_Address_Mutation_Response>;
  /** update single row of the table: "contact.contact_address" */
  update_contact_contact_address_by_pk?: Maybe<Contact_Contact_Address>;
  /** update single row of the table: "contact.contact" */
  update_contact_contact_by_pk?: Maybe<Contact_Contact>;
  /** update data of the table: "contact.customer" */
  update_contact_customer?: Maybe<Contact_Customer_Mutation_Response>;
  /** update data of the table: "contact.customer_address" */
  update_contact_customer_address?: Maybe<Contact_Customer_Address_Mutation_Response>;
  /** update single row of the table: "contact.customer_address" */
  update_contact_customer_address_by_pk?: Maybe<Contact_Customer_Address>;
  /** update single row of the table: "contact.customer" */
  update_contact_customer_by_pk?: Maybe<Contact_Customer>;
  /** update data of the table: "contact.customer_contact" */
  update_contact_customer_contact?: Maybe<Contact_Customer_Contact_Mutation_Response>;
  /** update single row of the table: "contact.customer_contact" */
  update_contact_customer_contact_by_pk?: Maybe<Contact_Customer_Contact>;
  /** update data of the table: "contact.provider" */
  update_contact_provider?: Maybe<Contact_Provider_Mutation_Response>;
  /** update data of the table: "contact.provider_address" */
  update_contact_provider_address?: Maybe<Contact_Provider_Address_Mutation_Response>;
  /** update single row of the table: "contact.provider_address" */
  update_contact_provider_address_by_pk?: Maybe<Contact_Provider_Address>;
  /** update single row of the table: "contact.provider" */
  update_contact_provider_by_pk?: Maybe<Contact_Provider>;
  /** update data of the table: "contact.provider_contact" */
  update_contact_provider_contact?: Maybe<Contact_Provider_Contact_Mutation_Response>;
  /** update single row of the table: "contact.provider_contact" */
  update_contact_provider_contact_by_pk?: Maybe<Contact_Provider_Contact>;
  /** update data of the table: "management.company" */
  update_management_company?: Maybe<Management_Company_Mutation_Response>;
  /** update single row of the table: "management.company" */
  update_management_company_by_pk?: Maybe<Management_Company>;
  /** update data of the table: "management.salesPoint" */
  update_management_salesPoint?: Maybe<Management_SalesPoint_Mutation_Response>;
  /** update single row of the table: "management.salesPoint" */
  update_management_salesPoint_by_pk?: Maybe<Management_SalesPoint>;
  /** update data of the table: "management.userProfile" */
  update_management_userProfile?: Maybe<Management_UserProfile_Mutation_Response>;
  /** update single row of the table: "management.userProfile" */
  update_management_userProfile_by_pk?: Maybe<Management_UserProfile>;
  /** update data of the table: "management.user_role" */
  update_management_user_role?: Maybe<Management_User_Role_Mutation_Response>;
  /** update single row of the table: "management.user_role" */
  update_management_user_role_by_pk?: Maybe<Management_User_Role>;
  /** update data of the table: "manufacturing.job_order" */
  update_manufacturing_job_order?: Maybe<Manufacturing_Job_Order_Mutation_Response>;
  /** update single row of the table: "manufacturing.job_order" */
  update_manufacturing_job_order_by_pk?: Maybe<Manufacturing_Job_Order>;
  /** update data of the table: "manufacturing.job_status" */
  update_manufacturing_job_status?: Maybe<Manufacturing_Job_Status_Mutation_Response>;
  /** update single row of the table: "manufacturing.job_status" */
  update_manufacturing_job_status_by_pk?: Maybe<Manufacturing_Job_Status>;
  /** update data of the table: "manufacturing.manufacturing_consumable" */
  update_manufacturing_manufacturing_consumable?: Maybe<Manufacturing_Manufacturing_Consumable_Mutation_Response>;
  /** update single row of the table: "manufacturing.manufacturing_consumable" */
  update_manufacturing_manufacturing_consumable_by_pk?: Maybe<Manufacturing_Manufacturing_Consumable>;
  /** update data of the table: "manufacturing.manufacturing_line" */
  update_manufacturing_manufacturing_line?: Maybe<Manufacturing_Manufacturing_Line_Mutation_Response>;
  /** update single row of the table: "manufacturing.manufacturing_line" */
  update_manufacturing_manufacturing_line_by_pk?: Maybe<Manufacturing_Manufacturing_Line>;
  /** update data of the table: "manufacturing.manufacturing_line_status" */
  update_manufacturing_manufacturing_line_status?: Maybe<Manufacturing_Manufacturing_Line_Status_Mutation_Response>;
  /** update single row of the table: "manufacturing.manufacturing_line_status" */
  update_manufacturing_manufacturing_line_status_by_pk?: Maybe<Manufacturing_Manufacturing_Line_Status>;
  /** update data of the table: "manufacturing.manufacturing_service" */
  update_manufacturing_manufacturing_service?: Maybe<Manufacturing_Manufacturing_Service_Mutation_Response>;
  /** update single row of the table: "manufacturing.manufacturing_service" */
  update_manufacturing_manufacturing_service_by_pk?: Maybe<Manufacturing_Manufacturing_Service>;
  /** update data of the table: "notification.notification" */
  update_notification_notification?: Maybe<Notification_Notification_Mutation_Response>;
  /** update single row of the table: "notification.notification" */
  update_notification_notification_by_pk?: Maybe<Notification_Notification>;
  /** update data of the table: "notification.notification_priority" */
  update_notification_notification_priority?: Maybe<Notification_Notification_Priority_Mutation_Response>;
  /** update single row of the table: "notification.notification_priority" */
  update_notification_notification_priority_by_pk?: Maybe<Notification_Notification_Priority>;
  /** update data of the table: "notification.notification_status" */
  update_notification_notification_status?: Maybe<Notification_Notification_Status_Mutation_Response>;
  /** update single row of the table: "notification.notification_status" */
  update_notification_notification_status_by_pk?: Maybe<Notification_Notification_Status>;
  /** update data of the table: "product.accessory" */
  update_product_accessory?: Maybe<Product_Accessory_Mutation_Response>;
  /** update data of the table: "product.accessoryTypes" */
  update_product_accessoryTypes?: Maybe<Product_AccessoryTypes_Mutation_Response>;
  /** update single row of the table: "product.accessoryTypes" */
  update_product_accessoryTypes_by_pk?: Maybe<Product_AccessoryTypes>;
  /** update single row of the table: "product.accessory" */
  update_product_accessory_by_pk?: Maybe<Product_Accessory>;
  /** update data of the table: "product.consumable" */
  update_product_consumable?: Maybe<Product_Consumable_Mutation_Response>;
  /** update data of the table: "product.consumableCategory" */
  update_product_consumableCategory?: Maybe<Product_ConsumableCategory_Mutation_Response>;
  /** update single row of the table: "product.consumableCategory" */
  update_product_consumableCategory_by_pk?: Maybe<Product_ConsumableCategory>;
  /** update single row of the table: "product.consumable" */
  update_product_consumable_by_pk?: Maybe<Product_Consumable>;
  /** update data of the table: "product.customer_product" */
  update_product_customer_product?: Maybe<Product_Customer_Product_Mutation_Response>;
  /** update single row of the table: "product.customer_product" */
  update_product_customer_product_by_pk?: Maybe<Product_Customer_Product>;
  /** update data of the table: "product.glass" */
  update_product_glass?: Maybe<Product_Glass_Mutation_Response>;
  /** update data of the table: "product.glassColor" */
  update_product_glassColor?: Maybe<Product_GlassColor_Mutation_Response>;
  /** update single row of the table: "product.glassColor" */
  update_product_glassColor_by_pk?: Maybe<Product_GlassColor>;
  /** update data of the table: "product.glassThickness" */
  update_product_glassThickness?: Maybe<Product_GlassThickness_Mutation_Response>;
  /** update single row of the table: "product.glassThickness" */
  update_product_glassThickness_by_pk?: Maybe<Product_GlassThickness>;
  /** update data of the table: "product.glassType" */
  update_product_glassType?: Maybe<Product_GlassType_Mutation_Response>;
  /** update single row of the table: "product.glassType" */
  update_product_glassType_by_pk?: Maybe<Product_GlassType>;
  /** update single row of the table: "product.glass" */
  update_product_glass_by_pk?: Maybe<Product_Glass>;
  /** update data of the table: "product.product" */
  update_product_product?: Maybe<Product_Product_Mutation_Response>;
  /** update single row of the table: "product.product" */
  update_product_product_by_pk?: Maybe<Product_Product>;
  /** update data of the table: "product.product_companies" */
  update_product_product_companies?: Maybe<Product_Product_Companies_Mutation_Response>;
  /** update single row of the table: "product.product_companies" */
  update_product_product_companies_by_pk?: Maybe<Product_Product_Companies>;
  /** update data of the table: "product.product_unit" */
  update_product_product_unit?: Maybe<Product_Product_Unit_Mutation_Response>;
  /** update single row of the table: "product.product_unit" */
  update_product_product_unit_by_pk?: Maybe<Product_Product_Unit>;
  /** update data of the table: "product.service" */
  update_product_service?: Maybe<Product_Service_Mutation_Response>;
  /** update data of the table: "product.serviceConfig" */
  update_product_serviceConfig?: Maybe<Product_ServiceConfig_Mutation_Response>;
  /** update single row of the table: "product.serviceConfig" */
  update_product_serviceConfig_by_pk?: Maybe<Product_ServiceConfig>;
  /** update single row of the table: "product.service" */
  update_product_service_by_pk?: Maybe<Product_Service>;
  /** update data of the table: "product.service_consumable" */
  update_product_service_consumable?: Maybe<Product_Service_Consumable_Mutation_Response>;
  /** update single row of the table: "product.service_consumable" */
  update_product_service_consumable_by_pk?: Maybe<Product_Service_Consumable>;
  /** update data of the table: "product.substance" */
  update_product_substance?: Maybe<Product_Substance_Mutation_Response>;
  /** update single row of the table: "product.substance" */
  update_product_substance_by_pk?: Maybe<Product_Substance>;
  /** update data of the table: "product.substance_provider" */
  update_product_substance_provider?: Maybe<Product_Substance_Provider_Mutation_Response>;
  /** update single row of the table: "product.substance_provider" */
  update_product_substance_provider_by_pk?: Maybe<Product_Substance_Provider>;
  /** update data of the table: "product.substance_type" */
  update_product_substance_type?: Maybe<Product_Substance_Type_Mutation_Response>;
  /** update single row of the table: "product.substance_type" */
  update_product_substance_type_by_pk?: Maybe<Product_Substance_Type>;
  /** update data of the table: "product.supply" */
  update_product_supply?: Maybe<Product_Supply_Mutation_Response>;
  /** update single row of the table: "product.supply" */
  update_product_supply_by_pk?: Maybe<Product_Supply>;
  /** update data of the table: "purchase.delivery" */
  update_purchase_delivery?: Maybe<Purchase_Delivery_Mutation_Response>;
  /** update single row of the table: "purchase.delivery" */
  update_purchase_delivery_by_pk?: Maybe<Purchase_Delivery>;
  /** update data of the table: "purchase.delivery_item" */
  update_purchase_delivery_item?: Maybe<Purchase_Delivery_Item_Mutation_Response>;
  /** update single row of the table: "purchase.delivery_item" */
  update_purchase_delivery_item_by_pk?: Maybe<Purchase_Delivery_Item>;
  /** update data of the table: "sales.accessory_draft" */
  update_sales_accessory_draft?: Maybe<Sales_Accessory_Draft_Mutation_Response>;
  /** update single row of the table: "sales.accessory_draft" */
  update_sales_accessory_draft_by_pk?: Maybe<Sales_Accessory_Draft>;
  /** update data of the table: "sales.amount" */
  update_sales_amount?: Maybe<Sales_Amount_Mutation_Response>;
  /** update single row of the table: "sales.amount" */
  update_sales_amount_by_pk?: Maybe<Sales_Amount>;
  /** update data of the table: "sales.consumable_draft" */
  update_sales_consumable_draft?: Maybe<Sales_Consumable_Draft_Mutation_Response>;
  /** update single row of the table: "sales.consumable_draft" */
  update_sales_consumable_draft_by_pk?: Maybe<Sales_Consumable_Draft>;
  /** update data of the table: "sales.delivery" */
  update_sales_delivery?: Maybe<Sales_Delivery_Mutation_Response>;
  /** update single row of the table: "sales.delivery" */
  update_sales_delivery_by_pk?: Maybe<Sales_Delivery>;
  /** update data of the table: "sales.delivery_line" */
  update_sales_delivery_line?: Maybe<Sales_Delivery_Line_Mutation_Response>;
  /** update single row of the table: "sales.delivery_line" */
  update_sales_delivery_line_by_pk?: Maybe<Sales_Delivery_Line>;
  /** update data of the table: "sales.draft" */
  update_sales_draft?: Maybe<Sales_Draft_Mutation_Response>;
  /** update single row of the table: "sales.draft" */
  update_sales_draft_by_pk?: Maybe<Sales_Draft>;
  /** update data of the table: "sales.draft_status" */
  update_sales_draft_status?: Maybe<Sales_Draft_Status_Mutation_Response>;
  /** update single row of the table: "sales.draft_status" */
  update_sales_draft_status_by_pk?: Maybe<Sales_Draft_Status>;
  /** update data of the table: "sales.glass_draft" */
  update_sales_glass_draft?: Maybe<Sales_Glass_Draft_Mutation_Response>;
  /** update single row of the table: "sales.glass_draft" */
  update_sales_glass_draft_by_pk?: Maybe<Sales_Glass_Draft>;
  /** update data of the table: "sales.invoice" */
  update_sales_invoice?: Maybe<Sales_Invoice_Mutation_Response>;
  /** update single row of the table: "sales.invoice" */
  update_sales_invoice_by_pk?: Maybe<Sales_Invoice>;
  /** update data of the table: "sales.invoice_delivery" */
  update_sales_invoice_delivery?: Maybe<Sales_Invoice_Delivery_Mutation_Response>;
  /** update single row of the table: "sales.invoice_delivery" */
  update_sales_invoice_delivery_by_pk?: Maybe<Sales_Invoice_Delivery>;
  /** update data of the table: "sales.invoice_line" */
  update_sales_invoice_line?: Maybe<Sales_Invoice_Line_Mutation_Response>;
  /** update single row of the table: "sales.invoice_line" */
  update_sales_invoice_line_by_pk?: Maybe<Sales_Invoice_Line>;
  /** update data of the table: "sales.order" */
  update_sales_order?: Maybe<Sales_Order_Mutation_Response>;
  /** update single row of the table: "sales.order" */
  update_sales_order_by_pk?: Maybe<Sales_Order>;
  /** update data of the table: "sales.order_delivery_status" */
  update_sales_order_delivery_status?: Maybe<Sales_Order_Delivery_Status_Mutation_Response>;
  /** update single row of the table: "sales.order_delivery_status" */
  update_sales_order_delivery_status_by_pk?: Maybe<Sales_Order_Delivery_Status>;
  /** update data of the table: "sales.payment" */
  update_sales_payment?: Maybe<Sales_Payment_Mutation_Response>;
  /** update single row of the table: "sales.payment" */
  update_sales_payment_by_pk?: Maybe<Sales_Payment>;
  /** update data of the table: "sales.payment_method" */
  update_sales_payment_method?: Maybe<Sales_Payment_Method_Mutation_Response>;
  /** update single row of the table: "sales.payment_method" */
  update_sales_payment_method_by_pk?: Maybe<Sales_Payment_Method>;
  /** update data of the table: "sales.payment_status" */
  update_sales_payment_status?: Maybe<Sales_Payment_Status_Mutation_Response>;
  /** update single row of the table: "sales.payment_status" */
  update_sales_payment_status_by_pk?: Maybe<Sales_Payment_Status>;
  /** update data of the table: "sales.product_draft" */
  update_sales_product_draft?: Maybe<Sales_Product_Draft_Mutation_Response>;
  /** update single row of the table: "sales.product_draft" */
  update_sales_product_draft_by_pk?: Maybe<Sales_Product_Draft>;
  /** update data of the table: "sales.product_type" */
  update_sales_product_type?: Maybe<Sales_Product_Type_Mutation_Response>;
  /** update single row of the table: "sales.product_type" */
  update_sales_product_type_by_pk?: Maybe<Sales_Product_Type>;
  /** update data of the table: "sales.quotation" */
  update_sales_quotation?: Maybe<Sales_Quotation_Mutation_Response>;
  /** update single row of the table: "sales.quotation" */
  update_sales_quotation_by_pk?: Maybe<Sales_Quotation>;
  /** update data of the table: "sales.quotation_status" */
  update_sales_quotation_status?: Maybe<Sales_Quotation_Status_Mutation_Response>;
  /** update single row of the table: "sales.quotation_status" */
  update_sales_quotation_status_by_pk?: Maybe<Sales_Quotation_Status>;
  /** update data of the table: "sales.service_draft" */
  update_sales_service_draft?: Maybe<Sales_Service_Draft_Mutation_Response>;
  /** update single row of the table: "sales.service_draft" */
  update_sales_service_draft_by_pk?: Maybe<Sales_Service_Draft>;
  /** update data of the table: "sales.test" */
  update_sales_test?: Maybe<Sales_Test_Mutation_Response>;
  /** update single row of the table: "sales.test" */
  update_sales_test_by_pk?: Maybe<Sales_Test>;
  /** update data of the table: "stock.adjustment_reasons" */
  update_stock_adjustment_reasons?: Maybe<Stock_Adjustment_Reasons_Mutation_Response>;
  /** update single row of the table: "stock.adjustment_reasons" */
  update_stock_adjustment_reasons_by_pk?: Maybe<Stock_Adjustment_Reasons>;
  /** update data of the table: "stock.item_tranfer" */
  update_stock_item_tranfer?: Maybe<Stock_Item_Tranfer_Mutation_Response>;
  /** update single row of the table: "stock.item_tranfer" */
  update_stock_item_tranfer_by_pk?: Maybe<Stock_Item_Tranfer>;
  /** update data of the table: "stock.item_transfer_status" */
  update_stock_item_transfer_status?: Maybe<Stock_Item_Transfer_Status_Mutation_Response>;
  /** update single row of the table: "stock.item_transfer_status" */
  update_stock_item_transfer_status_by_pk?: Maybe<Stock_Item_Transfer_Status>;
  /** update data of the table: "stock.order_item" */
  update_stock_order_item?: Maybe<Stock_Order_Item_Mutation_Response>;
  /** update single row of the table: "stock.order_item" */
  update_stock_order_item_by_pk?: Maybe<Stock_Order_Item>;
  /** update data of the table: "stock.order_item_status" */
  update_stock_order_item_status?: Maybe<Stock_Order_Item_Status_Mutation_Response>;
  /** update single row of the table: "stock.order_item_status" */
  update_stock_order_item_status_by_pk?: Maybe<Stock_Order_Item_Status>;
  /** update data of the table: "stock.stock_adjustment" */
  update_stock_stock_adjustment?: Maybe<Stock_Stock_Adjustment_Mutation_Response>;
  /** update single row of the table: "stock.stock_adjustment" */
  update_stock_stock_adjustment_by_pk?: Maybe<Stock_Stock_Adjustment>;
  /** update data of the table: "stock.transfer_order" */
  update_stock_transfer_order?: Maybe<Stock_Transfer_Order_Mutation_Response>;
  /** update single row of the table: "stock.transfer_order" */
  update_stock_transfer_order_by_pk?: Maybe<Stock_Transfer_Order>;
  /** update data of the table: "stock.transfer_order_status" */
  update_stock_transfer_order_status?: Maybe<Stock_Transfer_Order_Status_Mutation_Response>;
  /** update single row of the table: "stock.transfer_order_status" */
  update_stock_transfer_order_status_by_pk?: Maybe<Stock_Transfer_Order_Status>;
  /** update data of the table: "stock.warehouse" */
  update_stock_warehouse?: Maybe<Stock_Warehouse_Mutation_Response>;
  /** update single row of the table: "stock.warehouse" */
  update_stock_warehouse_by_pk?: Maybe<Stock_Warehouse>;
  /** update data of the table: "stock.warehouse_substance" */
  update_stock_warehouse_substance?: Maybe<Stock_Warehouse_Substance_Mutation_Response>;
  /** update single row of the table: "stock.warehouse_substance" */
  update_stock_warehouse_substance_by_pk?: Maybe<Stock_Warehouse_Substance>;
};


/** mutation root */
export type Mutation_RootSignUpArgs = {
  CIN?: Maybe<Scalars['String']>;
  SalesPointsid?: Maybe<Scalars['uuid']>;
  active?: Maybe<Scalars['Boolean']>;
  email: Scalars['String'];
  firstname?: Maybe<Scalars['String']>;
  lastname?: Maybe<Scalars['String']>;
  password: Scalars['String'];
  phone?: Maybe<Scalars['String']>;
  role: Scalars['String'];
  username?: Maybe<Scalars['String']>;
};


/** mutation root */
export type Mutation_RootCreateTransferItemArgs = {
  date?: Maybe<Scalars['date']>;
  order_itemid?: Maybe<Scalars['uuid']>;
  quantity?: Maybe<Scalars['Float']>;
  status?: Maybe<Scalars['String']>;
  substanceid?: Maybe<Scalars['uuid']>;
  warehouseid?: Maybe<Scalars['uuid']>;
};


/** mutation root */
export type Mutation_RootDelete_Cash_Register_Cash_BoxArgs = {
  where: Cash_Register_Cash_Box_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Cash_Register_Cash_Box_By_PkArgs = {
  id: Scalars['Int'];
};


/** mutation root */
export type Mutation_RootDelete_Cash_Register_Expense_CategoryArgs = {
  where: Cash_Register_Expense_Category_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Cash_Register_Expense_Category_By_PkArgs = {
  key: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_Cash_Register_ExpensesArgs = {
  where: Cash_Register_Expenses_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Cash_Register_Expenses_By_PkArgs = {
  id: Scalars['Int'];
};


/** mutation root */
export type Mutation_RootDelete_Contact_AddressArgs = {
  where: Contact_Address_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Contact_Address_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Contact_ContactArgs = {
  where: Contact_Contact_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Contact_Contact_AddressArgs = {
  where: Contact_Contact_Address_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Contact_Contact_Address_By_PkArgs = {
  addressid: Scalars['uuid'];
  contactid: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Contact_Contact_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Contact_CustomerArgs = {
  where: Contact_Customer_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Contact_Customer_AddressArgs = {
  where: Contact_Customer_Address_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Contact_Customer_Address_By_PkArgs = {
  addressid: Scalars['uuid'];
  customerid: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Contact_Customer_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Contact_Customer_ContactArgs = {
  where: Contact_Customer_Contact_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Contact_Customer_Contact_By_PkArgs = {
  contactid: Scalars['uuid'];
  customerid: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Contact_ProviderArgs = {
  where: Contact_Provider_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Contact_Provider_AddressArgs = {
  where: Contact_Provider_Address_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Contact_Provider_Address_By_PkArgs = {
  addressid: Scalars['uuid'];
  providerid: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Contact_Provider_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Contact_Provider_ContactArgs = {
  where: Contact_Provider_Contact_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Contact_Provider_Contact_By_PkArgs = {
  contactid: Scalars['uuid'];
  providerid: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Management_CompanyArgs = {
  where: Management_Company_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Management_Company_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Management_SalesPointArgs = {
  where: Management_SalesPoint_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Management_SalesPoint_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Management_UserProfileArgs = {
  where: Management_UserProfile_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Management_UserProfile_By_PkArgs = {
  id: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_Management_User_RoleArgs = {
  where: Management_User_Role_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Management_User_Role_By_PkArgs = {
  name: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_Manufacturing_Job_OrderArgs = {
  where: Manufacturing_Job_Order_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Manufacturing_Job_Order_By_PkArgs = {
  id: Scalars['Int'];
};


/** mutation root */
export type Mutation_RootDelete_Manufacturing_Job_StatusArgs = {
  where: Manufacturing_Job_Status_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Manufacturing_Job_Status_By_PkArgs = {
  key: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_Manufacturing_Manufacturing_ConsumableArgs = {
  where: Manufacturing_Manufacturing_Consumable_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Manufacturing_Manufacturing_Consumable_By_PkArgs = {
  consumable_draft_id: Scalars['uuid'];
  manufacturing_line_id: Scalars['Int'];
};


/** mutation root */
export type Mutation_RootDelete_Manufacturing_Manufacturing_LineArgs = {
  where: Manufacturing_Manufacturing_Line_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Manufacturing_Manufacturing_Line_By_PkArgs = {
  id: Scalars['Int'];
};


/** mutation root */
export type Mutation_RootDelete_Manufacturing_Manufacturing_Line_StatusArgs = {
  where: Manufacturing_Manufacturing_Line_Status_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Manufacturing_Manufacturing_Line_Status_By_PkArgs = {
  status: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_Manufacturing_Manufacturing_ServiceArgs = {
  where: Manufacturing_Manufacturing_Service_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Manufacturing_Manufacturing_Service_By_PkArgs = {
  manufacturing_line_id: Scalars['Int'];
  service_draft_id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Notification_NotificationArgs = {
  where: Notification_Notification_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Notification_Notification_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Notification_Notification_PriorityArgs = {
  where: Notification_Notification_Priority_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Notification_Notification_Priority_By_PkArgs = {
  key: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_Notification_Notification_StatusArgs = {
  where: Notification_Notification_Status_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Notification_Notification_Status_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Product_AccessoryArgs = {
  where: Product_Accessory_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Product_AccessoryTypesArgs = {
  where: Product_AccessoryTypes_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Product_AccessoryTypes_By_PkArgs = {
  type: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_Product_Accessory_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Product_ConsumableArgs = {
  where: Product_Consumable_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Product_ConsumableCategoryArgs = {
  where: Product_ConsumableCategory_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Product_ConsumableCategory_By_PkArgs = {
  category: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_Product_Consumable_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Product_Customer_ProductArgs = {
  where: Product_Customer_Product_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Product_Customer_Product_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Product_GlassArgs = {
  where: Product_Glass_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Product_GlassColorArgs = {
  where: Product_GlassColor_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Product_GlassColor_By_PkArgs = {
  color: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_Product_GlassThicknessArgs = {
  where: Product_GlassThickness_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Product_GlassThickness_By_PkArgs = {
  thickness: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_Product_GlassTypeArgs = {
  where: Product_GlassType_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Product_GlassType_By_PkArgs = {
  type: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_Product_Glass_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Product_ProductArgs = {
  where: Product_Product_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Product_Product_By_PkArgs = {
  code: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_Product_Product_CompaniesArgs = {
  where: Product_Product_Companies_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Product_Product_Companies_By_PkArgs = {
  companyid: Scalars['uuid'];
  productcode: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_Product_Product_UnitArgs = {
  where: Product_Product_Unit_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Product_Product_Unit_By_PkArgs = {
  unit: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_Product_ServiceArgs = {
  where: Product_Service_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Product_ServiceConfigArgs = {
  where: Product_ServiceConfig_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Product_ServiceConfig_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Product_Service_By_PkArgs = {
  productcode: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_Product_Service_ConsumableArgs = {
  where: Product_Service_Consumable_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Product_Service_Consumable_By_PkArgs = {
  consumableid: Scalars['uuid'];
  serviceid: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Product_SubstanceArgs = {
  where: Product_Substance_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Product_Substance_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Product_Substance_ProviderArgs = {
  where: Product_Substance_Provider_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Product_Substance_Provider_By_PkArgs = {
  providerid: Scalars['uuid'];
  substanceid: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Product_Substance_TypeArgs = {
  where: Product_Substance_Type_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Product_Substance_Type_By_PkArgs = {
  type: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_Product_SupplyArgs = {
  where: Product_Supply_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Product_Supply_By_PkArgs = {
  code: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_Purchase_DeliveryArgs = {
  where: Purchase_Delivery_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Purchase_Delivery_By_PkArgs = {
  id: Scalars['Int'];
};


/** mutation root */
export type Mutation_RootDelete_Purchase_Delivery_ItemArgs = {
  where: Purchase_Delivery_Item_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Purchase_Delivery_Item_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Sales_Accessory_DraftArgs = {
  where: Sales_Accessory_Draft_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Sales_Accessory_Draft_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Sales_AmountArgs = {
  where: Sales_Amount_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Sales_Amount_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Sales_Consumable_DraftArgs = {
  where: Sales_Consumable_Draft_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Sales_Consumable_Draft_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Sales_DeliveryArgs = {
  where: Sales_Delivery_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Sales_Delivery_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Sales_Delivery_LineArgs = {
  where: Sales_Delivery_Line_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Sales_Delivery_Line_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Sales_DraftArgs = {
  where: Sales_Draft_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Sales_Draft_By_PkArgs = {
  id: Scalars['Int'];
};


/** mutation root */
export type Mutation_RootDelete_Sales_Draft_StatusArgs = {
  where: Sales_Draft_Status_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Sales_Draft_Status_By_PkArgs = {
  status: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_Sales_Glass_DraftArgs = {
  where: Sales_Glass_Draft_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Sales_Glass_Draft_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Sales_InvoiceArgs = {
  where: Sales_Invoice_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Sales_Invoice_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Sales_Invoice_DeliveryArgs = {
  where: Sales_Invoice_Delivery_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Sales_Invoice_Delivery_By_PkArgs = {
  delivery_id: Scalars['uuid'];
  invoice_id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Sales_Invoice_LineArgs = {
  where: Sales_Invoice_Line_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Sales_Invoice_Line_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Sales_OrderArgs = {
  where: Sales_Order_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Sales_Order_By_PkArgs = {
  id: Scalars['Int'];
};


/** mutation root */
export type Mutation_RootDelete_Sales_Order_Delivery_StatusArgs = {
  where: Sales_Order_Delivery_Status_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Sales_Order_Delivery_Status_By_PkArgs = {
  key: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_Sales_PaymentArgs = {
  where: Sales_Payment_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Sales_Payment_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Sales_Payment_MethodArgs = {
  where: Sales_Payment_Method_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Sales_Payment_Method_By_PkArgs = {
  key: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_Sales_Payment_StatusArgs = {
  where: Sales_Payment_Status_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Sales_Payment_Status_By_PkArgs = {
  key: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_Sales_Product_DraftArgs = {
  where: Sales_Product_Draft_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Sales_Product_Draft_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Sales_Product_TypeArgs = {
  where: Sales_Product_Type_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Sales_Product_Type_By_PkArgs = {
  type: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_Sales_QuotationArgs = {
  where: Sales_Quotation_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Sales_Quotation_By_PkArgs = {
  id: Scalars['Int'];
};


/** mutation root */
export type Mutation_RootDelete_Sales_Quotation_StatusArgs = {
  where: Sales_Quotation_Status_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Sales_Quotation_Status_By_PkArgs = {
  key: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_Sales_Service_DraftArgs = {
  where: Sales_Service_Draft_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Sales_Service_Draft_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Sales_TestArgs = {
  where: Sales_Test_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Sales_Test_By_PkArgs = {
  id: Scalars['Int'];
};


/** mutation root */
export type Mutation_RootDelete_Stock_Adjustment_ReasonsArgs = {
  where: Stock_Adjustment_Reasons_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Stock_Adjustment_Reasons_By_PkArgs = {
  value: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_Stock_Item_TranferArgs = {
  where: Stock_Item_Tranfer_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Stock_Item_Tranfer_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Stock_Item_Transfer_StatusArgs = {
  where: Stock_Item_Transfer_Status_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Stock_Item_Transfer_Status_By_PkArgs = {
  key: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_Stock_Order_ItemArgs = {
  where: Stock_Order_Item_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Stock_Order_Item_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Stock_Order_Item_StatusArgs = {
  where: Stock_Order_Item_Status_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Stock_Order_Item_Status_By_PkArgs = {
  key: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_Stock_Stock_AdjustmentArgs = {
  where: Stock_Stock_Adjustment_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Stock_Stock_Adjustment_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Stock_Transfer_OrderArgs = {
  where: Stock_Transfer_Order_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Stock_Transfer_Order_By_PkArgs = {
  id: Scalars['Int'];
};


/** mutation root */
export type Mutation_RootDelete_Stock_Transfer_Order_StatusArgs = {
  where: Stock_Transfer_Order_Status_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Stock_Transfer_Order_Status_By_PkArgs = {
  key: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_Stock_WarehouseArgs = {
  where: Stock_Warehouse_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Stock_Warehouse_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_Stock_Warehouse_SubstanceArgs = {
  where: Stock_Warehouse_Substance_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Stock_Warehouse_Substance_By_PkArgs = {
  substanceid: Scalars['uuid'];
  warehouseid: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootInsert_Cash_Register_Cash_BoxArgs = {
  objects: Array<Cash_Register_Cash_Box_Insert_Input>;
  on_conflict?: Maybe<Cash_Register_Cash_Box_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Cash_Register_Cash_Box_OneArgs = {
  object: Cash_Register_Cash_Box_Insert_Input;
  on_conflict?: Maybe<Cash_Register_Cash_Box_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Cash_Register_Expense_CategoryArgs = {
  objects: Array<Cash_Register_Expense_Category_Insert_Input>;
  on_conflict?: Maybe<Cash_Register_Expense_Category_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Cash_Register_Expense_Category_OneArgs = {
  object: Cash_Register_Expense_Category_Insert_Input;
  on_conflict?: Maybe<Cash_Register_Expense_Category_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Cash_Register_ExpensesArgs = {
  objects: Array<Cash_Register_Expenses_Insert_Input>;
  on_conflict?: Maybe<Cash_Register_Expenses_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Cash_Register_Expenses_OneArgs = {
  object: Cash_Register_Expenses_Insert_Input;
  on_conflict?: Maybe<Cash_Register_Expenses_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Contact_AddressArgs = {
  objects: Array<Contact_Address_Insert_Input>;
  on_conflict?: Maybe<Contact_Address_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Contact_Address_OneArgs = {
  object: Contact_Address_Insert_Input;
  on_conflict?: Maybe<Contact_Address_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Contact_ContactArgs = {
  objects: Array<Contact_Contact_Insert_Input>;
  on_conflict?: Maybe<Contact_Contact_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Contact_Contact_AddressArgs = {
  objects: Array<Contact_Contact_Address_Insert_Input>;
  on_conflict?: Maybe<Contact_Contact_Address_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Contact_Contact_Address_OneArgs = {
  object: Contact_Contact_Address_Insert_Input;
  on_conflict?: Maybe<Contact_Contact_Address_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Contact_Contact_OneArgs = {
  object: Contact_Contact_Insert_Input;
  on_conflict?: Maybe<Contact_Contact_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Contact_CustomerArgs = {
  objects: Array<Contact_Customer_Insert_Input>;
  on_conflict?: Maybe<Contact_Customer_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Contact_Customer_AddressArgs = {
  objects: Array<Contact_Customer_Address_Insert_Input>;
  on_conflict?: Maybe<Contact_Customer_Address_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Contact_Customer_Address_OneArgs = {
  object: Contact_Customer_Address_Insert_Input;
  on_conflict?: Maybe<Contact_Customer_Address_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Contact_Customer_ContactArgs = {
  objects: Array<Contact_Customer_Contact_Insert_Input>;
  on_conflict?: Maybe<Contact_Customer_Contact_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Contact_Customer_Contact_OneArgs = {
  object: Contact_Customer_Contact_Insert_Input;
  on_conflict?: Maybe<Contact_Customer_Contact_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Contact_Customer_OneArgs = {
  object: Contact_Customer_Insert_Input;
  on_conflict?: Maybe<Contact_Customer_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Contact_ProviderArgs = {
  objects: Array<Contact_Provider_Insert_Input>;
  on_conflict?: Maybe<Contact_Provider_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Contact_Provider_AddressArgs = {
  objects: Array<Contact_Provider_Address_Insert_Input>;
  on_conflict?: Maybe<Contact_Provider_Address_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Contact_Provider_Address_OneArgs = {
  object: Contact_Provider_Address_Insert_Input;
  on_conflict?: Maybe<Contact_Provider_Address_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Contact_Provider_ContactArgs = {
  objects: Array<Contact_Provider_Contact_Insert_Input>;
  on_conflict?: Maybe<Contact_Provider_Contact_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Contact_Provider_Contact_OneArgs = {
  object: Contact_Provider_Contact_Insert_Input;
  on_conflict?: Maybe<Contact_Provider_Contact_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Contact_Provider_OneArgs = {
  object: Contact_Provider_Insert_Input;
  on_conflict?: Maybe<Contact_Provider_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Management_CompanyArgs = {
  objects: Array<Management_Company_Insert_Input>;
  on_conflict?: Maybe<Management_Company_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Management_Company_OneArgs = {
  object: Management_Company_Insert_Input;
  on_conflict?: Maybe<Management_Company_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Management_SalesPointArgs = {
  objects: Array<Management_SalesPoint_Insert_Input>;
  on_conflict?: Maybe<Management_SalesPoint_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Management_SalesPoint_OneArgs = {
  object: Management_SalesPoint_Insert_Input;
  on_conflict?: Maybe<Management_SalesPoint_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Management_UserProfileArgs = {
  objects: Array<Management_UserProfile_Insert_Input>;
  on_conflict?: Maybe<Management_UserProfile_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Management_UserProfile_OneArgs = {
  object: Management_UserProfile_Insert_Input;
  on_conflict?: Maybe<Management_UserProfile_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Management_User_RoleArgs = {
  objects: Array<Management_User_Role_Insert_Input>;
  on_conflict?: Maybe<Management_User_Role_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Management_User_Role_OneArgs = {
  object: Management_User_Role_Insert_Input;
  on_conflict?: Maybe<Management_User_Role_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Manufacturing_Job_OrderArgs = {
  objects: Array<Manufacturing_Job_Order_Insert_Input>;
  on_conflict?: Maybe<Manufacturing_Job_Order_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Manufacturing_Job_Order_OneArgs = {
  object: Manufacturing_Job_Order_Insert_Input;
  on_conflict?: Maybe<Manufacturing_Job_Order_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Manufacturing_Job_StatusArgs = {
  objects: Array<Manufacturing_Job_Status_Insert_Input>;
  on_conflict?: Maybe<Manufacturing_Job_Status_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Manufacturing_Job_Status_OneArgs = {
  object: Manufacturing_Job_Status_Insert_Input;
  on_conflict?: Maybe<Manufacturing_Job_Status_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Manufacturing_Manufacturing_ConsumableArgs = {
  objects: Array<Manufacturing_Manufacturing_Consumable_Insert_Input>;
  on_conflict?: Maybe<Manufacturing_Manufacturing_Consumable_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Manufacturing_Manufacturing_Consumable_OneArgs = {
  object: Manufacturing_Manufacturing_Consumable_Insert_Input;
  on_conflict?: Maybe<Manufacturing_Manufacturing_Consumable_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Manufacturing_Manufacturing_LineArgs = {
  objects: Array<Manufacturing_Manufacturing_Line_Insert_Input>;
  on_conflict?: Maybe<Manufacturing_Manufacturing_Line_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Manufacturing_Manufacturing_Line_OneArgs = {
  object: Manufacturing_Manufacturing_Line_Insert_Input;
  on_conflict?: Maybe<Manufacturing_Manufacturing_Line_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Manufacturing_Manufacturing_Line_StatusArgs = {
  objects: Array<Manufacturing_Manufacturing_Line_Status_Insert_Input>;
  on_conflict?: Maybe<Manufacturing_Manufacturing_Line_Status_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Manufacturing_Manufacturing_Line_Status_OneArgs = {
  object: Manufacturing_Manufacturing_Line_Status_Insert_Input;
  on_conflict?: Maybe<Manufacturing_Manufacturing_Line_Status_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Manufacturing_Manufacturing_ServiceArgs = {
  objects: Array<Manufacturing_Manufacturing_Service_Insert_Input>;
  on_conflict?: Maybe<Manufacturing_Manufacturing_Service_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Manufacturing_Manufacturing_Service_OneArgs = {
  object: Manufacturing_Manufacturing_Service_Insert_Input;
  on_conflict?: Maybe<Manufacturing_Manufacturing_Service_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Notification_NotificationArgs = {
  objects: Array<Notification_Notification_Insert_Input>;
  on_conflict?: Maybe<Notification_Notification_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Notification_Notification_OneArgs = {
  object: Notification_Notification_Insert_Input;
  on_conflict?: Maybe<Notification_Notification_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Notification_Notification_PriorityArgs = {
  objects: Array<Notification_Notification_Priority_Insert_Input>;
  on_conflict?: Maybe<Notification_Notification_Priority_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Notification_Notification_Priority_OneArgs = {
  object: Notification_Notification_Priority_Insert_Input;
  on_conflict?: Maybe<Notification_Notification_Priority_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Notification_Notification_StatusArgs = {
  objects: Array<Notification_Notification_Status_Insert_Input>;
  on_conflict?: Maybe<Notification_Notification_Status_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Notification_Notification_Status_OneArgs = {
  object: Notification_Notification_Status_Insert_Input;
  on_conflict?: Maybe<Notification_Notification_Status_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Product_AccessoryArgs = {
  objects: Array<Product_Accessory_Insert_Input>;
  on_conflict?: Maybe<Product_Accessory_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Product_AccessoryTypesArgs = {
  objects: Array<Product_AccessoryTypes_Insert_Input>;
  on_conflict?: Maybe<Product_AccessoryTypes_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Product_AccessoryTypes_OneArgs = {
  object: Product_AccessoryTypes_Insert_Input;
  on_conflict?: Maybe<Product_AccessoryTypes_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Product_Accessory_OneArgs = {
  object: Product_Accessory_Insert_Input;
  on_conflict?: Maybe<Product_Accessory_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Product_ConsumableArgs = {
  objects: Array<Product_Consumable_Insert_Input>;
  on_conflict?: Maybe<Product_Consumable_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Product_ConsumableCategoryArgs = {
  objects: Array<Product_ConsumableCategory_Insert_Input>;
  on_conflict?: Maybe<Product_ConsumableCategory_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Product_ConsumableCategory_OneArgs = {
  object: Product_ConsumableCategory_Insert_Input;
  on_conflict?: Maybe<Product_ConsumableCategory_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Product_Consumable_OneArgs = {
  object: Product_Consumable_Insert_Input;
  on_conflict?: Maybe<Product_Consumable_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Product_Customer_ProductArgs = {
  objects: Array<Product_Customer_Product_Insert_Input>;
  on_conflict?: Maybe<Product_Customer_Product_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Product_Customer_Product_OneArgs = {
  object: Product_Customer_Product_Insert_Input;
  on_conflict?: Maybe<Product_Customer_Product_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Product_GlassArgs = {
  objects: Array<Product_Glass_Insert_Input>;
  on_conflict?: Maybe<Product_Glass_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Product_GlassColorArgs = {
  objects: Array<Product_GlassColor_Insert_Input>;
  on_conflict?: Maybe<Product_GlassColor_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Product_GlassColor_OneArgs = {
  object: Product_GlassColor_Insert_Input;
  on_conflict?: Maybe<Product_GlassColor_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Product_GlassThicknessArgs = {
  objects: Array<Product_GlassThickness_Insert_Input>;
  on_conflict?: Maybe<Product_GlassThickness_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Product_GlassThickness_OneArgs = {
  object: Product_GlassThickness_Insert_Input;
  on_conflict?: Maybe<Product_GlassThickness_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Product_GlassTypeArgs = {
  objects: Array<Product_GlassType_Insert_Input>;
  on_conflict?: Maybe<Product_GlassType_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Product_GlassType_OneArgs = {
  object: Product_GlassType_Insert_Input;
  on_conflict?: Maybe<Product_GlassType_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Product_Glass_OneArgs = {
  object: Product_Glass_Insert_Input;
  on_conflict?: Maybe<Product_Glass_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Product_ProductArgs = {
  objects: Array<Product_Product_Insert_Input>;
  on_conflict?: Maybe<Product_Product_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Product_Product_CompaniesArgs = {
  objects: Array<Product_Product_Companies_Insert_Input>;
  on_conflict?: Maybe<Product_Product_Companies_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Product_Product_Companies_OneArgs = {
  object: Product_Product_Companies_Insert_Input;
  on_conflict?: Maybe<Product_Product_Companies_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Product_Product_OneArgs = {
  object: Product_Product_Insert_Input;
  on_conflict?: Maybe<Product_Product_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Product_Product_UnitArgs = {
  objects: Array<Product_Product_Unit_Insert_Input>;
  on_conflict?: Maybe<Product_Product_Unit_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Product_Product_Unit_OneArgs = {
  object: Product_Product_Unit_Insert_Input;
  on_conflict?: Maybe<Product_Product_Unit_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Product_ServiceArgs = {
  objects: Array<Product_Service_Insert_Input>;
  on_conflict?: Maybe<Product_Service_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Product_ServiceConfigArgs = {
  objects: Array<Product_ServiceConfig_Insert_Input>;
  on_conflict?: Maybe<Product_ServiceConfig_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Product_ServiceConfig_OneArgs = {
  object: Product_ServiceConfig_Insert_Input;
  on_conflict?: Maybe<Product_ServiceConfig_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Product_Service_ConsumableArgs = {
  objects: Array<Product_Service_Consumable_Insert_Input>;
  on_conflict?: Maybe<Product_Service_Consumable_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Product_Service_Consumable_OneArgs = {
  object: Product_Service_Consumable_Insert_Input;
  on_conflict?: Maybe<Product_Service_Consumable_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Product_Service_OneArgs = {
  object: Product_Service_Insert_Input;
  on_conflict?: Maybe<Product_Service_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Product_SubstanceArgs = {
  objects: Array<Product_Substance_Insert_Input>;
  on_conflict?: Maybe<Product_Substance_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Product_Substance_OneArgs = {
  object: Product_Substance_Insert_Input;
  on_conflict?: Maybe<Product_Substance_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Product_Substance_ProviderArgs = {
  objects: Array<Product_Substance_Provider_Insert_Input>;
  on_conflict?: Maybe<Product_Substance_Provider_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Product_Substance_Provider_OneArgs = {
  object: Product_Substance_Provider_Insert_Input;
  on_conflict?: Maybe<Product_Substance_Provider_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Product_Substance_TypeArgs = {
  objects: Array<Product_Substance_Type_Insert_Input>;
  on_conflict?: Maybe<Product_Substance_Type_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Product_Substance_Type_OneArgs = {
  object: Product_Substance_Type_Insert_Input;
  on_conflict?: Maybe<Product_Substance_Type_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Product_SupplyArgs = {
  objects: Array<Product_Supply_Insert_Input>;
  on_conflict?: Maybe<Product_Supply_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Product_Supply_OneArgs = {
  object: Product_Supply_Insert_Input;
  on_conflict?: Maybe<Product_Supply_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Purchase_DeliveryArgs = {
  objects: Array<Purchase_Delivery_Insert_Input>;
  on_conflict?: Maybe<Purchase_Delivery_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Purchase_Delivery_ItemArgs = {
  objects: Array<Purchase_Delivery_Item_Insert_Input>;
  on_conflict?: Maybe<Purchase_Delivery_Item_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Purchase_Delivery_Item_OneArgs = {
  object: Purchase_Delivery_Item_Insert_Input;
  on_conflict?: Maybe<Purchase_Delivery_Item_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Purchase_Delivery_OneArgs = {
  object: Purchase_Delivery_Insert_Input;
  on_conflict?: Maybe<Purchase_Delivery_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Sales_Accessory_DraftArgs = {
  objects: Array<Sales_Accessory_Draft_Insert_Input>;
  on_conflict?: Maybe<Sales_Accessory_Draft_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Sales_Accessory_Draft_OneArgs = {
  object: Sales_Accessory_Draft_Insert_Input;
  on_conflict?: Maybe<Sales_Accessory_Draft_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Sales_AmountArgs = {
  objects: Array<Sales_Amount_Insert_Input>;
  on_conflict?: Maybe<Sales_Amount_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Sales_Amount_OneArgs = {
  object: Sales_Amount_Insert_Input;
  on_conflict?: Maybe<Sales_Amount_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Sales_Consumable_DraftArgs = {
  objects: Array<Sales_Consumable_Draft_Insert_Input>;
  on_conflict?: Maybe<Sales_Consumable_Draft_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Sales_Consumable_Draft_OneArgs = {
  object: Sales_Consumable_Draft_Insert_Input;
  on_conflict?: Maybe<Sales_Consumable_Draft_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Sales_DeliveryArgs = {
  objects: Array<Sales_Delivery_Insert_Input>;
  on_conflict?: Maybe<Sales_Delivery_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Sales_Delivery_LineArgs = {
  objects: Array<Sales_Delivery_Line_Insert_Input>;
  on_conflict?: Maybe<Sales_Delivery_Line_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Sales_Delivery_Line_OneArgs = {
  object: Sales_Delivery_Line_Insert_Input;
  on_conflict?: Maybe<Sales_Delivery_Line_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Sales_Delivery_OneArgs = {
  object: Sales_Delivery_Insert_Input;
  on_conflict?: Maybe<Sales_Delivery_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Sales_DraftArgs = {
  objects: Array<Sales_Draft_Insert_Input>;
  on_conflict?: Maybe<Sales_Draft_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Sales_Draft_OneArgs = {
  object: Sales_Draft_Insert_Input;
  on_conflict?: Maybe<Sales_Draft_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Sales_Draft_StatusArgs = {
  objects: Array<Sales_Draft_Status_Insert_Input>;
  on_conflict?: Maybe<Sales_Draft_Status_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Sales_Draft_Status_OneArgs = {
  object: Sales_Draft_Status_Insert_Input;
  on_conflict?: Maybe<Sales_Draft_Status_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Sales_Glass_DraftArgs = {
  objects: Array<Sales_Glass_Draft_Insert_Input>;
  on_conflict?: Maybe<Sales_Glass_Draft_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Sales_Glass_Draft_OneArgs = {
  object: Sales_Glass_Draft_Insert_Input;
  on_conflict?: Maybe<Sales_Glass_Draft_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Sales_InvoiceArgs = {
  objects: Array<Sales_Invoice_Insert_Input>;
  on_conflict?: Maybe<Sales_Invoice_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Sales_Invoice_DeliveryArgs = {
  objects: Array<Sales_Invoice_Delivery_Insert_Input>;
  on_conflict?: Maybe<Sales_Invoice_Delivery_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Sales_Invoice_Delivery_OneArgs = {
  object: Sales_Invoice_Delivery_Insert_Input;
  on_conflict?: Maybe<Sales_Invoice_Delivery_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Sales_Invoice_LineArgs = {
  objects: Array<Sales_Invoice_Line_Insert_Input>;
  on_conflict?: Maybe<Sales_Invoice_Line_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Sales_Invoice_Line_OneArgs = {
  object: Sales_Invoice_Line_Insert_Input;
  on_conflict?: Maybe<Sales_Invoice_Line_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Sales_Invoice_OneArgs = {
  object: Sales_Invoice_Insert_Input;
  on_conflict?: Maybe<Sales_Invoice_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Sales_OrderArgs = {
  objects: Array<Sales_Order_Insert_Input>;
  on_conflict?: Maybe<Sales_Order_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Sales_Order_Delivery_StatusArgs = {
  objects: Array<Sales_Order_Delivery_Status_Insert_Input>;
  on_conflict?: Maybe<Sales_Order_Delivery_Status_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Sales_Order_Delivery_Status_OneArgs = {
  object: Sales_Order_Delivery_Status_Insert_Input;
  on_conflict?: Maybe<Sales_Order_Delivery_Status_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Sales_Order_OneArgs = {
  object: Sales_Order_Insert_Input;
  on_conflict?: Maybe<Sales_Order_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Sales_PaymentArgs = {
  objects: Array<Sales_Payment_Insert_Input>;
  on_conflict?: Maybe<Sales_Payment_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Sales_Payment_MethodArgs = {
  objects: Array<Sales_Payment_Method_Insert_Input>;
  on_conflict?: Maybe<Sales_Payment_Method_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Sales_Payment_Method_OneArgs = {
  object: Sales_Payment_Method_Insert_Input;
  on_conflict?: Maybe<Sales_Payment_Method_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Sales_Payment_OneArgs = {
  object: Sales_Payment_Insert_Input;
  on_conflict?: Maybe<Sales_Payment_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Sales_Payment_StatusArgs = {
  objects: Array<Sales_Payment_Status_Insert_Input>;
  on_conflict?: Maybe<Sales_Payment_Status_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Sales_Payment_Status_OneArgs = {
  object: Sales_Payment_Status_Insert_Input;
  on_conflict?: Maybe<Sales_Payment_Status_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Sales_Product_DraftArgs = {
  objects: Array<Sales_Product_Draft_Insert_Input>;
  on_conflict?: Maybe<Sales_Product_Draft_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Sales_Product_Draft_OneArgs = {
  object: Sales_Product_Draft_Insert_Input;
  on_conflict?: Maybe<Sales_Product_Draft_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Sales_Product_TypeArgs = {
  objects: Array<Sales_Product_Type_Insert_Input>;
  on_conflict?: Maybe<Sales_Product_Type_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Sales_Product_Type_OneArgs = {
  object: Sales_Product_Type_Insert_Input;
  on_conflict?: Maybe<Sales_Product_Type_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Sales_QuotationArgs = {
  objects: Array<Sales_Quotation_Insert_Input>;
  on_conflict?: Maybe<Sales_Quotation_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Sales_Quotation_OneArgs = {
  object: Sales_Quotation_Insert_Input;
  on_conflict?: Maybe<Sales_Quotation_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Sales_Quotation_StatusArgs = {
  objects: Array<Sales_Quotation_Status_Insert_Input>;
  on_conflict?: Maybe<Sales_Quotation_Status_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Sales_Quotation_Status_OneArgs = {
  object: Sales_Quotation_Status_Insert_Input;
  on_conflict?: Maybe<Sales_Quotation_Status_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Sales_Service_DraftArgs = {
  objects: Array<Sales_Service_Draft_Insert_Input>;
  on_conflict?: Maybe<Sales_Service_Draft_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Sales_Service_Draft_OneArgs = {
  object: Sales_Service_Draft_Insert_Input;
  on_conflict?: Maybe<Sales_Service_Draft_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Sales_TestArgs = {
  objects: Array<Sales_Test_Insert_Input>;
  on_conflict?: Maybe<Sales_Test_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Sales_Test_OneArgs = {
  object: Sales_Test_Insert_Input;
  on_conflict?: Maybe<Sales_Test_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Stock_Adjustment_ReasonsArgs = {
  objects: Array<Stock_Adjustment_Reasons_Insert_Input>;
  on_conflict?: Maybe<Stock_Adjustment_Reasons_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Stock_Adjustment_Reasons_OneArgs = {
  object: Stock_Adjustment_Reasons_Insert_Input;
  on_conflict?: Maybe<Stock_Adjustment_Reasons_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Stock_Item_TranferArgs = {
  objects: Array<Stock_Item_Tranfer_Insert_Input>;
  on_conflict?: Maybe<Stock_Item_Tranfer_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Stock_Item_Tranfer_OneArgs = {
  object: Stock_Item_Tranfer_Insert_Input;
  on_conflict?: Maybe<Stock_Item_Tranfer_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Stock_Item_Transfer_StatusArgs = {
  objects: Array<Stock_Item_Transfer_Status_Insert_Input>;
  on_conflict?: Maybe<Stock_Item_Transfer_Status_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Stock_Item_Transfer_Status_OneArgs = {
  object: Stock_Item_Transfer_Status_Insert_Input;
  on_conflict?: Maybe<Stock_Item_Transfer_Status_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Stock_Order_ItemArgs = {
  objects: Array<Stock_Order_Item_Insert_Input>;
  on_conflict?: Maybe<Stock_Order_Item_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Stock_Order_Item_OneArgs = {
  object: Stock_Order_Item_Insert_Input;
  on_conflict?: Maybe<Stock_Order_Item_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Stock_Order_Item_StatusArgs = {
  objects: Array<Stock_Order_Item_Status_Insert_Input>;
  on_conflict?: Maybe<Stock_Order_Item_Status_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Stock_Order_Item_Status_OneArgs = {
  object: Stock_Order_Item_Status_Insert_Input;
  on_conflict?: Maybe<Stock_Order_Item_Status_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Stock_Stock_AdjustmentArgs = {
  objects: Array<Stock_Stock_Adjustment_Insert_Input>;
  on_conflict?: Maybe<Stock_Stock_Adjustment_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Stock_Stock_Adjustment_OneArgs = {
  object: Stock_Stock_Adjustment_Insert_Input;
  on_conflict?: Maybe<Stock_Stock_Adjustment_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Stock_Transfer_OrderArgs = {
  objects: Array<Stock_Transfer_Order_Insert_Input>;
  on_conflict?: Maybe<Stock_Transfer_Order_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Stock_Transfer_Order_OneArgs = {
  object: Stock_Transfer_Order_Insert_Input;
  on_conflict?: Maybe<Stock_Transfer_Order_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Stock_Transfer_Order_StatusArgs = {
  objects: Array<Stock_Transfer_Order_Status_Insert_Input>;
  on_conflict?: Maybe<Stock_Transfer_Order_Status_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Stock_Transfer_Order_Status_OneArgs = {
  object: Stock_Transfer_Order_Status_Insert_Input;
  on_conflict?: Maybe<Stock_Transfer_Order_Status_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Stock_WarehouseArgs = {
  objects: Array<Stock_Warehouse_Insert_Input>;
  on_conflict?: Maybe<Stock_Warehouse_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Stock_Warehouse_OneArgs = {
  object: Stock_Warehouse_Insert_Input;
  on_conflict?: Maybe<Stock_Warehouse_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Stock_Warehouse_SubstanceArgs = {
  objects: Array<Stock_Warehouse_Substance_Insert_Input>;
  on_conflict?: Maybe<Stock_Warehouse_Substance_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Stock_Warehouse_Substance_OneArgs = {
  object: Stock_Warehouse_Substance_Insert_Input;
  on_conflict?: Maybe<Stock_Warehouse_Substance_On_Conflict>;
};


/** mutation root */
export type Mutation_RootLoginArgs = {
  user: LoginInput;
};


/** mutation root */
export type Mutation_RootUpdate_Cash_Register_Cash_BoxArgs = {
  _inc?: Maybe<Cash_Register_Cash_Box_Inc_Input>;
  _set?: Maybe<Cash_Register_Cash_Box_Set_Input>;
  where: Cash_Register_Cash_Box_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Cash_Register_Cash_Box_By_PkArgs = {
  _inc?: Maybe<Cash_Register_Cash_Box_Inc_Input>;
  _set?: Maybe<Cash_Register_Cash_Box_Set_Input>;
  pk_columns: Cash_Register_Cash_Box_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Cash_Register_Expense_CategoryArgs = {
  _set?: Maybe<Cash_Register_Expense_Category_Set_Input>;
  where: Cash_Register_Expense_Category_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Cash_Register_Expense_Category_By_PkArgs = {
  _set?: Maybe<Cash_Register_Expense_Category_Set_Input>;
  pk_columns: Cash_Register_Expense_Category_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Cash_Register_ExpensesArgs = {
  _inc?: Maybe<Cash_Register_Expenses_Inc_Input>;
  _set?: Maybe<Cash_Register_Expenses_Set_Input>;
  where: Cash_Register_Expenses_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Cash_Register_Expenses_By_PkArgs = {
  _inc?: Maybe<Cash_Register_Expenses_Inc_Input>;
  _set?: Maybe<Cash_Register_Expenses_Set_Input>;
  pk_columns: Cash_Register_Expenses_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Contact_AddressArgs = {
  _set?: Maybe<Contact_Address_Set_Input>;
  where: Contact_Address_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Contact_Address_By_PkArgs = {
  _set?: Maybe<Contact_Address_Set_Input>;
  pk_columns: Contact_Address_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Contact_ContactArgs = {
  _set?: Maybe<Contact_Contact_Set_Input>;
  where: Contact_Contact_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Contact_Contact_AddressArgs = {
  _set?: Maybe<Contact_Contact_Address_Set_Input>;
  where: Contact_Contact_Address_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Contact_Contact_Address_By_PkArgs = {
  _set?: Maybe<Contact_Contact_Address_Set_Input>;
  pk_columns: Contact_Contact_Address_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Contact_Contact_By_PkArgs = {
  _set?: Maybe<Contact_Contact_Set_Input>;
  pk_columns: Contact_Contact_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Contact_CustomerArgs = {
  _set?: Maybe<Contact_Customer_Set_Input>;
  where: Contact_Customer_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Contact_Customer_AddressArgs = {
  _set?: Maybe<Contact_Customer_Address_Set_Input>;
  where: Contact_Customer_Address_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Contact_Customer_Address_By_PkArgs = {
  _set?: Maybe<Contact_Customer_Address_Set_Input>;
  pk_columns: Contact_Customer_Address_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Contact_Customer_By_PkArgs = {
  _set?: Maybe<Contact_Customer_Set_Input>;
  pk_columns: Contact_Customer_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Contact_Customer_ContactArgs = {
  _set?: Maybe<Contact_Customer_Contact_Set_Input>;
  where: Contact_Customer_Contact_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Contact_Customer_Contact_By_PkArgs = {
  _set?: Maybe<Contact_Customer_Contact_Set_Input>;
  pk_columns: Contact_Customer_Contact_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Contact_ProviderArgs = {
  _set?: Maybe<Contact_Provider_Set_Input>;
  where: Contact_Provider_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Contact_Provider_AddressArgs = {
  _set?: Maybe<Contact_Provider_Address_Set_Input>;
  where: Contact_Provider_Address_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Contact_Provider_Address_By_PkArgs = {
  _set?: Maybe<Contact_Provider_Address_Set_Input>;
  pk_columns: Contact_Provider_Address_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Contact_Provider_By_PkArgs = {
  _set?: Maybe<Contact_Provider_Set_Input>;
  pk_columns: Contact_Provider_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Contact_Provider_ContactArgs = {
  _set?: Maybe<Contact_Provider_Contact_Set_Input>;
  where: Contact_Provider_Contact_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Contact_Provider_Contact_By_PkArgs = {
  _set?: Maybe<Contact_Provider_Contact_Set_Input>;
  pk_columns: Contact_Provider_Contact_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Management_CompanyArgs = {
  _set?: Maybe<Management_Company_Set_Input>;
  where: Management_Company_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Management_Company_By_PkArgs = {
  _set?: Maybe<Management_Company_Set_Input>;
  pk_columns: Management_Company_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Management_SalesPointArgs = {
  _set?: Maybe<Management_SalesPoint_Set_Input>;
  where: Management_SalesPoint_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Management_SalesPoint_By_PkArgs = {
  _set?: Maybe<Management_SalesPoint_Set_Input>;
  pk_columns: Management_SalesPoint_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Management_UserProfileArgs = {
  _set?: Maybe<Management_UserProfile_Set_Input>;
  where: Management_UserProfile_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Management_UserProfile_By_PkArgs = {
  _set?: Maybe<Management_UserProfile_Set_Input>;
  pk_columns: Management_UserProfile_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Management_User_RoleArgs = {
  _set?: Maybe<Management_User_Role_Set_Input>;
  where: Management_User_Role_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Management_User_Role_By_PkArgs = {
  _set?: Maybe<Management_User_Role_Set_Input>;
  pk_columns: Management_User_Role_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Manufacturing_Job_OrderArgs = {
  _inc?: Maybe<Manufacturing_Job_Order_Inc_Input>;
  _set?: Maybe<Manufacturing_Job_Order_Set_Input>;
  where: Manufacturing_Job_Order_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Manufacturing_Job_Order_By_PkArgs = {
  _inc?: Maybe<Manufacturing_Job_Order_Inc_Input>;
  _set?: Maybe<Manufacturing_Job_Order_Set_Input>;
  pk_columns: Manufacturing_Job_Order_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Manufacturing_Job_StatusArgs = {
  _set?: Maybe<Manufacturing_Job_Status_Set_Input>;
  where: Manufacturing_Job_Status_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Manufacturing_Job_Status_By_PkArgs = {
  _set?: Maybe<Manufacturing_Job_Status_Set_Input>;
  pk_columns: Manufacturing_Job_Status_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Manufacturing_Manufacturing_ConsumableArgs = {
  _inc?: Maybe<Manufacturing_Manufacturing_Consumable_Inc_Input>;
  _set?: Maybe<Manufacturing_Manufacturing_Consumable_Set_Input>;
  where: Manufacturing_Manufacturing_Consumable_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Manufacturing_Manufacturing_Consumable_By_PkArgs = {
  _inc?: Maybe<Manufacturing_Manufacturing_Consumable_Inc_Input>;
  _set?: Maybe<Manufacturing_Manufacturing_Consumable_Set_Input>;
  pk_columns: Manufacturing_Manufacturing_Consumable_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Manufacturing_Manufacturing_LineArgs = {
  _inc?: Maybe<Manufacturing_Manufacturing_Line_Inc_Input>;
  _set?: Maybe<Manufacturing_Manufacturing_Line_Set_Input>;
  where: Manufacturing_Manufacturing_Line_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Manufacturing_Manufacturing_Line_By_PkArgs = {
  _inc?: Maybe<Manufacturing_Manufacturing_Line_Inc_Input>;
  _set?: Maybe<Manufacturing_Manufacturing_Line_Set_Input>;
  pk_columns: Manufacturing_Manufacturing_Line_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Manufacturing_Manufacturing_Line_StatusArgs = {
  _set?: Maybe<Manufacturing_Manufacturing_Line_Status_Set_Input>;
  where: Manufacturing_Manufacturing_Line_Status_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Manufacturing_Manufacturing_Line_Status_By_PkArgs = {
  _set?: Maybe<Manufacturing_Manufacturing_Line_Status_Set_Input>;
  pk_columns: Manufacturing_Manufacturing_Line_Status_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Manufacturing_Manufacturing_ServiceArgs = {
  _inc?: Maybe<Manufacturing_Manufacturing_Service_Inc_Input>;
  _set?: Maybe<Manufacturing_Manufacturing_Service_Set_Input>;
  where: Manufacturing_Manufacturing_Service_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Manufacturing_Manufacturing_Service_By_PkArgs = {
  _inc?: Maybe<Manufacturing_Manufacturing_Service_Inc_Input>;
  _set?: Maybe<Manufacturing_Manufacturing_Service_Set_Input>;
  pk_columns: Manufacturing_Manufacturing_Service_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Notification_NotificationArgs = {
  _set?: Maybe<Notification_Notification_Set_Input>;
  where: Notification_Notification_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Notification_Notification_By_PkArgs = {
  _set?: Maybe<Notification_Notification_Set_Input>;
  pk_columns: Notification_Notification_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Notification_Notification_PriorityArgs = {
  _set?: Maybe<Notification_Notification_Priority_Set_Input>;
  where: Notification_Notification_Priority_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Notification_Notification_Priority_By_PkArgs = {
  _set?: Maybe<Notification_Notification_Priority_Set_Input>;
  pk_columns: Notification_Notification_Priority_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Notification_Notification_StatusArgs = {
  _set?: Maybe<Notification_Notification_Status_Set_Input>;
  where: Notification_Notification_Status_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Notification_Notification_Status_By_PkArgs = {
  _set?: Maybe<Notification_Notification_Status_Set_Input>;
  pk_columns: Notification_Notification_Status_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Product_AccessoryArgs = {
  _inc?: Maybe<Product_Accessory_Inc_Input>;
  _set?: Maybe<Product_Accessory_Set_Input>;
  where: Product_Accessory_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Product_AccessoryTypesArgs = {
  _set?: Maybe<Product_AccessoryTypes_Set_Input>;
  where: Product_AccessoryTypes_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Product_AccessoryTypes_By_PkArgs = {
  _set?: Maybe<Product_AccessoryTypes_Set_Input>;
  pk_columns: Product_AccessoryTypes_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Product_Accessory_By_PkArgs = {
  _inc?: Maybe<Product_Accessory_Inc_Input>;
  _set?: Maybe<Product_Accessory_Set_Input>;
  pk_columns: Product_Accessory_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Product_ConsumableArgs = {
  _set?: Maybe<Product_Consumable_Set_Input>;
  where: Product_Consumable_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Product_ConsumableCategoryArgs = {
  _set?: Maybe<Product_ConsumableCategory_Set_Input>;
  where: Product_ConsumableCategory_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Product_ConsumableCategory_By_PkArgs = {
  _set?: Maybe<Product_ConsumableCategory_Set_Input>;
  pk_columns: Product_ConsumableCategory_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Product_Consumable_By_PkArgs = {
  _set?: Maybe<Product_Consumable_Set_Input>;
  pk_columns: Product_Consumable_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Product_Customer_ProductArgs = {
  _inc?: Maybe<Product_Customer_Product_Inc_Input>;
  _set?: Maybe<Product_Customer_Product_Set_Input>;
  where: Product_Customer_Product_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Product_Customer_Product_By_PkArgs = {
  _inc?: Maybe<Product_Customer_Product_Inc_Input>;
  _set?: Maybe<Product_Customer_Product_Set_Input>;
  pk_columns: Product_Customer_Product_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Product_GlassArgs = {
  _inc?: Maybe<Product_Glass_Inc_Input>;
  _set?: Maybe<Product_Glass_Set_Input>;
  where: Product_Glass_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Product_GlassColorArgs = {
  _set?: Maybe<Product_GlassColor_Set_Input>;
  where: Product_GlassColor_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Product_GlassColor_By_PkArgs = {
  _set?: Maybe<Product_GlassColor_Set_Input>;
  pk_columns: Product_GlassColor_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Product_GlassThicknessArgs = {
  _set?: Maybe<Product_GlassThickness_Set_Input>;
  where: Product_GlassThickness_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Product_GlassThickness_By_PkArgs = {
  _set?: Maybe<Product_GlassThickness_Set_Input>;
  pk_columns: Product_GlassThickness_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Product_GlassTypeArgs = {
  _set?: Maybe<Product_GlassType_Set_Input>;
  where: Product_GlassType_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Product_GlassType_By_PkArgs = {
  _set?: Maybe<Product_GlassType_Set_Input>;
  pk_columns: Product_GlassType_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Product_Glass_By_PkArgs = {
  _inc?: Maybe<Product_Glass_Inc_Input>;
  _set?: Maybe<Product_Glass_Set_Input>;
  pk_columns: Product_Glass_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Product_ProductArgs = {
  _inc?: Maybe<Product_Product_Inc_Input>;
  _set?: Maybe<Product_Product_Set_Input>;
  where: Product_Product_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Product_Product_By_PkArgs = {
  _inc?: Maybe<Product_Product_Inc_Input>;
  _set?: Maybe<Product_Product_Set_Input>;
  pk_columns: Product_Product_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Product_Product_CompaniesArgs = {
  _set?: Maybe<Product_Product_Companies_Set_Input>;
  where: Product_Product_Companies_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Product_Product_Companies_By_PkArgs = {
  _set?: Maybe<Product_Product_Companies_Set_Input>;
  pk_columns: Product_Product_Companies_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Product_Product_UnitArgs = {
  _set?: Maybe<Product_Product_Unit_Set_Input>;
  where: Product_Product_Unit_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Product_Product_Unit_By_PkArgs = {
  _set?: Maybe<Product_Product_Unit_Set_Input>;
  pk_columns: Product_Product_Unit_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Product_ServiceArgs = {
  _append?: Maybe<Product_Service_Append_Input>;
  _delete_at_path?: Maybe<Product_Service_Delete_At_Path_Input>;
  _delete_elem?: Maybe<Product_Service_Delete_Elem_Input>;
  _delete_key?: Maybe<Product_Service_Delete_Key_Input>;
  _prepend?: Maybe<Product_Service_Prepend_Input>;
  _set?: Maybe<Product_Service_Set_Input>;
  where: Product_Service_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Product_ServiceConfigArgs = {
  _append?: Maybe<Product_ServiceConfig_Append_Input>;
  _delete_at_path?: Maybe<Product_ServiceConfig_Delete_At_Path_Input>;
  _delete_elem?: Maybe<Product_ServiceConfig_Delete_Elem_Input>;
  _delete_key?: Maybe<Product_ServiceConfig_Delete_Key_Input>;
  _prepend?: Maybe<Product_ServiceConfig_Prepend_Input>;
  _set?: Maybe<Product_ServiceConfig_Set_Input>;
  where: Product_ServiceConfig_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Product_ServiceConfig_By_PkArgs = {
  _append?: Maybe<Product_ServiceConfig_Append_Input>;
  _delete_at_path?: Maybe<Product_ServiceConfig_Delete_At_Path_Input>;
  _delete_elem?: Maybe<Product_ServiceConfig_Delete_Elem_Input>;
  _delete_key?: Maybe<Product_ServiceConfig_Delete_Key_Input>;
  _prepend?: Maybe<Product_ServiceConfig_Prepend_Input>;
  _set?: Maybe<Product_ServiceConfig_Set_Input>;
  pk_columns: Product_ServiceConfig_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Product_Service_By_PkArgs = {
  _append?: Maybe<Product_Service_Append_Input>;
  _delete_at_path?: Maybe<Product_Service_Delete_At_Path_Input>;
  _delete_elem?: Maybe<Product_Service_Delete_Elem_Input>;
  _delete_key?: Maybe<Product_Service_Delete_Key_Input>;
  _prepend?: Maybe<Product_Service_Prepend_Input>;
  _set?: Maybe<Product_Service_Set_Input>;
  pk_columns: Product_Service_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Product_Service_ConsumableArgs = {
  _inc?: Maybe<Product_Service_Consumable_Inc_Input>;
  _set?: Maybe<Product_Service_Consumable_Set_Input>;
  where: Product_Service_Consumable_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Product_Service_Consumable_By_PkArgs = {
  _inc?: Maybe<Product_Service_Consumable_Inc_Input>;
  _set?: Maybe<Product_Service_Consumable_Set_Input>;
  pk_columns: Product_Service_Consumable_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Product_SubstanceArgs = {
  _set?: Maybe<Product_Substance_Set_Input>;
  where: Product_Substance_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Product_Substance_By_PkArgs = {
  _set?: Maybe<Product_Substance_Set_Input>;
  pk_columns: Product_Substance_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Product_Substance_ProviderArgs = {
  _inc?: Maybe<Product_Substance_Provider_Inc_Input>;
  _set?: Maybe<Product_Substance_Provider_Set_Input>;
  where: Product_Substance_Provider_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Product_Substance_Provider_By_PkArgs = {
  _inc?: Maybe<Product_Substance_Provider_Inc_Input>;
  _set?: Maybe<Product_Substance_Provider_Set_Input>;
  pk_columns: Product_Substance_Provider_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Product_Substance_TypeArgs = {
  _set?: Maybe<Product_Substance_Type_Set_Input>;
  where: Product_Substance_Type_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Product_Substance_Type_By_PkArgs = {
  _set?: Maybe<Product_Substance_Type_Set_Input>;
  pk_columns: Product_Substance_Type_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Product_SupplyArgs = {
  _set?: Maybe<Product_Supply_Set_Input>;
  where: Product_Supply_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Product_Supply_By_PkArgs = {
  _set?: Maybe<Product_Supply_Set_Input>;
  pk_columns: Product_Supply_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Purchase_DeliveryArgs = {
  _inc?: Maybe<Purchase_Delivery_Inc_Input>;
  _set?: Maybe<Purchase_Delivery_Set_Input>;
  where: Purchase_Delivery_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Purchase_Delivery_By_PkArgs = {
  _inc?: Maybe<Purchase_Delivery_Inc_Input>;
  _set?: Maybe<Purchase_Delivery_Set_Input>;
  pk_columns: Purchase_Delivery_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Purchase_Delivery_ItemArgs = {
  _inc?: Maybe<Purchase_Delivery_Item_Inc_Input>;
  _set?: Maybe<Purchase_Delivery_Item_Set_Input>;
  where: Purchase_Delivery_Item_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Purchase_Delivery_Item_By_PkArgs = {
  _inc?: Maybe<Purchase_Delivery_Item_Inc_Input>;
  _set?: Maybe<Purchase_Delivery_Item_Set_Input>;
  pk_columns: Purchase_Delivery_Item_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Sales_Accessory_DraftArgs = {
  _set?: Maybe<Sales_Accessory_Draft_Set_Input>;
  where: Sales_Accessory_Draft_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Sales_Accessory_Draft_By_PkArgs = {
  _set?: Maybe<Sales_Accessory_Draft_Set_Input>;
  pk_columns: Sales_Accessory_Draft_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Sales_AmountArgs = {
  _inc?: Maybe<Sales_Amount_Inc_Input>;
  _set?: Maybe<Sales_Amount_Set_Input>;
  where: Sales_Amount_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Sales_Amount_By_PkArgs = {
  _inc?: Maybe<Sales_Amount_Inc_Input>;
  _set?: Maybe<Sales_Amount_Set_Input>;
  pk_columns: Sales_Amount_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Sales_Consumable_DraftArgs = {
  _set?: Maybe<Sales_Consumable_Draft_Set_Input>;
  where: Sales_Consumable_Draft_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Sales_Consumable_Draft_By_PkArgs = {
  _set?: Maybe<Sales_Consumable_Draft_Set_Input>;
  pk_columns: Sales_Consumable_Draft_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Sales_DeliveryArgs = {
  _inc?: Maybe<Sales_Delivery_Inc_Input>;
  _set?: Maybe<Sales_Delivery_Set_Input>;
  where: Sales_Delivery_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Sales_Delivery_By_PkArgs = {
  _inc?: Maybe<Sales_Delivery_Inc_Input>;
  _set?: Maybe<Sales_Delivery_Set_Input>;
  pk_columns: Sales_Delivery_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Sales_Delivery_LineArgs = {
  _inc?: Maybe<Sales_Delivery_Line_Inc_Input>;
  _set?: Maybe<Sales_Delivery_Line_Set_Input>;
  where: Sales_Delivery_Line_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Sales_Delivery_Line_By_PkArgs = {
  _inc?: Maybe<Sales_Delivery_Line_Inc_Input>;
  _set?: Maybe<Sales_Delivery_Line_Set_Input>;
  pk_columns: Sales_Delivery_Line_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Sales_DraftArgs = {
  _inc?: Maybe<Sales_Draft_Inc_Input>;
  _set?: Maybe<Sales_Draft_Set_Input>;
  where: Sales_Draft_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Sales_Draft_By_PkArgs = {
  _inc?: Maybe<Sales_Draft_Inc_Input>;
  _set?: Maybe<Sales_Draft_Set_Input>;
  pk_columns: Sales_Draft_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Sales_Draft_StatusArgs = {
  _set?: Maybe<Sales_Draft_Status_Set_Input>;
  where: Sales_Draft_Status_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Sales_Draft_Status_By_PkArgs = {
  _set?: Maybe<Sales_Draft_Status_Set_Input>;
  pk_columns: Sales_Draft_Status_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Sales_Glass_DraftArgs = {
  _inc?: Maybe<Sales_Glass_Draft_Inc_Input>;
  _set?: Maybe<Sales_Glass_Draft_Set_Input>;
  where: Sales_Glass_Draft_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Sales_Glass_Draft_By_PkArgs = {
  _inc?: Maybe<Sales_Glass_Draft_Inc_Input>;
  _set?: Maybe<Sales_Glass_Draft_Set_Input>;
  pk_columns: Sales_Glass_Draft_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Sales_InvoiceArgs = {
  _inc?: Maybe<Sales_Invoice_Inc_Input>;
  _set?: Maybe<Sales_Invoice_Set_Input>;
  where: Sales_Invoice_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Sales_Invoice_By_PkArgs = {
  _inc?: Maybe<Sales_Invoice_Inc_Input>;
  _set?: Maybe<Sales_Invoice_Set_Input>;
  pk_columns: Sales_Invoice_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Sales_Invoice_DeliveryArgs = {
  _set?: Maybe<Sales_Invoice_Delivery_Set_Input>;
  where: Sales_Invoice_Delivery_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Sales_Invoice_Delivery_By_PkArgs = {
  _set?: Maybe<Sales_Invoice_Delivery_Set_Input>;
  pk_columns: Sales_Invoice_Delivery_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Sales_Invoice_LineArgs = {
  _inc?: Maybe<Sales_Invoice_Line_Inc_Input>;
  _set?: Maybe<Sales_Invoice_Line_Set_Input>;
  where: Sales_Invoice_Line_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Sales_Invoice_Line_By_PkArgs = {
  _inc?: Maybe<Sales_Invoice_Line_Inc_Input>;
  _set?: Maybe<Sales_Invoice_Line_Set_Input>;
  pk_columns: Sales_Invoice_Line_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Sales_OrderArgs = {
  _inc?: Maybe<Sales_Order_Inc_Input>;
  _set?: Maybe<Sales_Order_Set_Input>;
  where: Sales_Order_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Sales_Order_By_PkArgs = {
  _inc?: Maybe<Sales_Order_Inc_Input>;
  _set?: Maybe<Sales_Order_Set_Input>;
  pk_columns: Sales_Order_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Sales_Order_Delivery_StatusArgs = {
  _set?: Maybe<Sales_Order_Delivery_Status_Set_Input>;
  where: Sales_Order_Delivery_Status_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Sales_Order_Delivery_Status_By_PkArgs = {
  _set?: Maybe<Sales_Order_Delivery_Status_Set_Input>;
  pk_columns: Sales_Order_Delivery_Status_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Sales_PaymentArgs = {
  _inc?: Maybe<Sales_Payment_Inc_Input>;
  _set?: Maybe<Sales_Payment_Set_Input>;
  where: Sales_Payment_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Sales_Payment_By_PkArgs = {
  _inc?: Maybe<Sales_Payment_Inc_Input>;
  _set?: Maybe<Sales_Payment_Set_Input>;
  pk_columns: Sales_Payment_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Sales_Payment_MethodArgs = {
  _set?: Maybe<Sales_Payment_Method_Set_Input>;
  where: Sales_Payment_Method_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Sales_Payment_Method_By_PkArgs = {
  _set?: Maybe<Sales_Payment_Method_Set_Input>;
  pk_columns: Sales_Payment_Method_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Sales_Payment_StatusArgs = {
  _set?: Maybe<Sales_Payment_Status_Set_Input>;
  where: Sales_Payment_Status_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Sales_Payment_Status_By_PkArgs = {
  _set?: Maybe<Sales_Payment_Status_Set_Input>;
  pk_columns: Sales_Payment_Status_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Sales_Product_DraftArgs = {
  _inc?: Maybe<Sales_Product_Draft_Inc_Input>;
  _set?: Maybe<Sales_Product_Draft_Set_Input>;
  where: Sales_Product_Draft_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Sales_Product_Draft_By_PkArgs = {
  _inc?: Maybe<Sales_Product_Draft_Inc_Input>;
  _set?: Maybe<Sales_Product_Draft_Set_Input>;
  pk_columns: Sales_Product_Draft_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Sales_Product_TypeArgs = {
  _set?: Maybe<Sales_Product_Type_Set_Input>;
  where: Sales_Product_Type_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Sales_Product_Type_By_PkArgs = {
  _set?: Maybe<Sales_Product_Type_Set_Input>;
  pk_columns: Sales_Product_Type_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Sales_QuotationArgs = {
  _inc?: Maybe<Sales_Quotation_Inc_Input>;
  _set?: Maybe<Sales_Quotation_Set_Input>;
  where: Sales_Quotation_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Sales_Quotation_By_PkArgs = {
  _inc?: Maybe<Sales_Quotation_Inc_Input>;
  _set?: Maybe<Sales_Quotation_Set_Input>;
  pk_columns: Sales_Quotation_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Sales_Quotation_StatusArgs = {
  _set?: Maybe<Sales_Quotation_Status_Set_Input>;
  where: Sales_Quotation_Status_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Sales_Quotation_Status_By_PkArgs = {
  _set?: Maybe<Sales_Quotation_Status_Set_Input>;
  pk_columns: Sales_Quotation_Status_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Sales_Service_DraftArgs = {
  _set?: Maybe<Sales_Service_Draft_Set_Input>;
  where: Sales_Service_Draft_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Sales_Service_Draft_By_PkArgs = {
  _set?: Maybe<Sales_Service_Draft_Set_Input>;
  pk_columns: Sales_Service_Draft_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Sales_TestArgs = {
  _inc?: Maybe<Sales_Test_Inc_Input>;
  _set?: Maybe<Sales_Test_Set_Input>;
  where: Sales_Test_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Sales_Test_By_PkArgs = {
  _inc?: Maybe<Sales_Test_Inc_Input>;
  _set?: Maybe<Sales_Test_Set_Input>;
  pk_columns: Sales_Test_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Stock_Adjustment_ReasonsArgs = {
  _set?: Maybe<Stock_Adjustment_Reasons_Set_Input>;
  where: Stock_Adjustment_Reasons_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Stock_Adjustment_Reasons_By_PkArgs = {
  _set?: Maybe<Stock_Adjustment_Reasons_Set_Input>;
  pk_columns: Stock_Adjustment_Reasons_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Stock_Item_TranferArgs = {
  _inc?: Maybe<Stock_Item_Tranfer_Inc_Input>;
  _set?: Maybe<Stock_Item_Tranfer_Set_Input>;
  where: Stock_Item_Tranfer_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Stock_Item_Tranfer_By_PkArgs = {
  _inc?: Maybe<Stock_Item_Tranfer_Inc_Input>;
  _set?: Maybe<Stock_Item_Tranfer_Set_Input>;
  pk_columns: Stock_Item_Tranfer_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Stock_Item_Transfer_StatusArgs = {
  _set?: Maybe<Stock_Item_Transfer_Status_Set_Input>;
  where: Stock_Item_Transfer_Status_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Stock_Item_Transfer_Status_By_PkArgs = {
  _set?: Maybe<Stock_Item_Transfer_Status_Set_Input>;
  pk_columns: Stock_Item_Transfer_Status_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Stock_Order_ItemArgs = {
  _inc?: Maybe<Stock_Order_Item_Inc_Input>;
  _set?: Maybe<Stock_Order_Item_Set_Input>;
  where: Stock_Order_Item_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Stock_Order_Item_By_PkArgs = {
  _inc?: Maybe<Stock_Order_Item_Inc_Input>;
  _set?: Maybe<Stock_Order_Item_Set_Input>;
  pk_columns: Stock_Order_Item_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Stock_Order_Item_StatusArgs = {
  _set?: Maybe<Stock_Order_Item_Status_Set_Input>;
  where: Stock_Order_Item_Status_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Stock_Order_Item_Status_By_PkArgs = {
  _set?: Maybe<Stock_Order_Item_Status_Set_Input>;
  pk_columns: Stock_Order_Item_Status_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Stock_Stock_AdjustmentArgs = {
  _inc?: Maybe<Stock_Stock_Adjustment_Inc_Input>;
  _set?: Maybe<Stock_Stock_Adjustment_Set_Input>;
  where: Stock_Stock_Adjustment_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Stock_Stock_Adjustment_By_PkArgs = {
  _inc?: Maybe<Stock_Stock_Adjustment_Inc_Input>;
  _set?: Maybe<Stock_Stock_Adjustment_Set_Input>;
  pk_columns: Stock_Stock_Adjustment_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Stock_Transfer_OrderArgs = {
  _inc?: Maybe<Stock_Transfer_Order_Inc_Input>;
  _set?: Maybe<Stock_Transfer_Order_Set_Input>;
  where: Stock_Transfer_Order_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Stock_Transfer_Order_By_PkArgs = {
  _inc?: Maybe<Stock_Transfer_Order_Inc_Input>;
  _set?: Maybe<Stock_Transfer_Order_Set_Input>;
  pk_columns: Stock_Transfer_Order_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Stock_Transfer_Order_StatusArgs = {
  _set?: Maybe<Stock_Transfer_Order_Status_Set_Input>;
  where: Stock_Transfer_Order_Status_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Stock_Transfer_Order_Status_By_PkArgs = {
  _set?: Maybe<Stock_Transfer_Order_Status_Set_Input>;
  pk_columns: Stock_Transfer_Order_Status_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Stock_WarehouseArgs = {
  _set?: Maybe<Stock_Warehouse_Set_Input>;
  where: Stock_Warehouse_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Stock_Warehouse_By_PkArgs = {
  _set?: Maybe<Stock_Warehouse_Set_Input>;
  pk_columns: Stock_Warehouse_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Stock_Warehouse_SubstanceArgs = {
  _inc?: Maybe<Stock_Warehouse_Substance_Inc_Input>;
  _set?: Maybe<Stock_Warehouse_Substance_Set_Input>;
  where: Stock_Warehouse_Substance_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Stock_Warehouse_Substance_By_PkArgs = {
  _inc?: Maybe<Stock_Warehouse_Substance_Inc_Input>;
  _set?: Maybe<Stock_Warehouse_Substance_Set_Input>;
  pk_columns: Stock_Warehouse_Substance_Pk_Columns_Input;
};

/** columns and relationships of "notification.notification" */
export type Notification_Notification = {
  __typename?: 'notification_notification';
  createdAt?: Maybe<Scalars['timestamptz']>;
  id: Scalars['uuid'];
  message: Scalars['String'];
  /** An object relationship */
  notification_priority: Notification_Notification_Priority;
  /** An array relationship */
  notification_status: Array<Notification_Notification_Status>;
  /** An aggregate relationship */
  notification_status_aggregate: Notification_Notification_Status_Aggregate;
  priority: Scalars['String'];
  ref?: Maybe<Scalars['String']>;
  role?: Maybe<Management_User_Role_Enum>;
  route?: Maybe<Scalars['String']>;
  subject?: Maybe<Scalars['String']>;
  title: Scalars['String'];
  /** An object relationship */
  user?: Maybe<Management_UserProfile>;
  user_id?: Maybe<Scalars['String']>;
  /** An object relationship */
  user_role?: Maybe<Management_User_Role>;
};


/** columns and relationships of "notification.notification" */
export type Notification_NotificationNotification_StatusArgs = {
  distinct_on?: Maybe<Array<Notification_Notification_Status_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Notification_Notification_Status_Order_By>>;
  where?: Maybe<Notification_Notification_Status_Bool_Exp>;
};


/** columns and relationships of "notification.notification" */
export type Notification_NotificationNotification_Status_AggregateArgs = {
  distinct_on?: Maybe<Array<Notification_Notification_Status_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Notification_Notification_Status_Order_By>>;
  where?: Maybe<Notification_Notification_Status_Bool_Exp>;
};

/** aggregated selection of "notification.notification" */
export type Notification_Notification_Aggregate = {
  __typename?: 'notification_notification_aggregate';
  aggregate?: Maybe<Notification_Notification_Aggregate_Fields>;
  nodes: Array<Notification_Notification>;
};

/** aggregate fields of "notification.notification" */
export type Notification_Notification_Aggregate_Fields = {
  __typename?: 'notification_notification_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Notification_Notification_Max_Fields>;
  min?: Maybe<Notification_Notification_Min_Fields>;
};


/** aggregate fields of "notification.notification" */
export type Notification_Notification_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Notification_Notification_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "notification.notification" */
export type Notification_Notification_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Notification_Notification_Max_Order_By>;
  min?: Maybe<Notification_Notification_Min_Order_By>;
};

/** input type for inserting array relation for remote table "notification.notification" */
export type Notification_Notification_Arr_Rel_Insert_Input = {
  data: Array<Notification_Notification_Insert_Input>;
  /** on conflict condition */
  on_conflict?: Maybe<Notification_Notification_On_Conflict>;
};

/** Boolean expression to filter rows from the table "notification.notification". All fields are combined with a logical 'AND'. */
export type Notification_Notification_Bool_Exp = {
  _and?: Maybe<Array<Notification_Notification_Bool_Exp>>;
  _not?: Maybe<Notification_Notification_Bool_Exp>;
  _or?: Maybe<Array<Notification_Notification_Bool_Exp>>;
  createdAt?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  message?: Maybe<String_Comparison_Exp>;
  notification_priority?: Maybe<Notification_Notification_Priority_Bool_Exp>;
  notification_status?: Maybe<Notification_Notification_Status_Bool_Exp>;
  priority?: Maybe<String_Comparison_Exp>;
  ref?: Maybe<String_Comparison_Exp>;
  role?: Maybe<Management_User_Role_Enum_Comparison_Exp>;
  route?: Maybe<String_Comparison_Exp>;
  subject?: Maybe<String_Comparison_Exp>;
  title?: Maybe<String_Comparison_Exp>;
  user?: Maybe<Management_UserProfile_Bool_Exp>;
  user_id?: Maybe<String_Comparison_Exp>;
  user_role?: Maybe<Management_User_Role_Bool_Exp>;
};

/** unique or primary key constraints on table "notification.notification" */
export enum Notification_Notification_Constraint {
  /** unique or primary key constraint */
  NotificationPkey = 'notification_pkey',
  /** unique or primary key constraint */
  NotificationRefKey = 'notification_ref_key'
}

/** input type for inserting data into table "notification.notification" */
export type Notification_Notification_Insert_Input = {
  createdAt?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  message?: Maybe<Scalars['String']>;
  notification_priority?: Maybe<Notification_Notification_Priority_Obj_Rel_Insert_Input>;
  notification_status?: Maybe<Notification_Notification_Status_Arr_Rel_Insert_Input>;
  priority?: Maybe<Scalars['String']>;
  ref?: Maybe<Scalars['String']>;
  role?: Maybe<Management_User_Role_Enum>;
  route?: Maybe<Scalars['String']>;
  subject?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  user?: Maybe<Management_UserProfile_Obj_Rel_Insert_Input>;
  user_id?: Maybe<Scalars['String']>;
  user_role?: Maybe<Management_User_Role_Obj_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Notification_Notification_Max_Fields = {
  __typename?: 'notification_notification_max_fields';
  createdAt?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  message?: Maybe<Scalars['String']>;
  priority?: Maybe<Scalars['String']>;
  ref?: Maybe<Scalars['String']>;
  route?: Maybe<Scalars['String']>;
  subject?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  user_id?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "notification.notification" */
export type Notification_Notification_Max_Order_By = {
  createdAt?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  message?: Maybe<Order_By>;
  priority?: Maybe<Order_By>;
  ref?: Maybe<Order_By>;
  route?: Maybe<Order_By>;
  subject?: Maybe<Order_By>;
  title?: Maybe<Order_By>;
  user_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Notification_Notification_Min_Fields = {
  __typename?: 'notification_notification_min_fields';
  createdAt?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  message?: Maybe<Scalars['String']>;
  priority?: Maybe<Scalars['String']>;
  ref?: Maybe<Scalars['String']>;
  route?: Maybe<Scalars['String']>;
  subject?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  user_id?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "notification.notification" */
export type Notification_Notification_Min_Order_By = {
  createdAt?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  message?: Maybe<Order_By>;
  priority?: Maybe<Order_By>;
  ref?: Maybe<Order_By>;
  route?: Maybe<Order_By>;
  subject?: Maybe<Order_By>;
  title?: Maybe<Order_By>;
  user_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "notification.notification" */
export type Notification_Notification_Mutation_Response = {
  __typename?: 'notification_notification_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Notification_Notification>;
};

/** input type for inserting object relation for remote table "notification.notification" */
export type Notification_Notification_Obj_Rel_Insert_Input = {
  data: Notification_Notification_Insert_Input;
  /** on conflict condition */
  on_conflict?: Maybe<Notification_Notification_On_Conflict>;
};

/** on conflict condition type for table "notification.notification" */
export type Notification_Notification_On_Conflict = {
  constraint: Notification_Notification_Constraint;
  update_columns?: Array<Notification_Notification_Update_Column>;
  where?: Maybe<Notification_Notification_Bool_Exp>;
};

/** Ordering options when selecting data from "notification.notification". */
export type Notification_Notification_Order_By = {
  createdAt?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  message?: Maybe<Order_By>;
  notification_priority?: Maybe<Notification_Notification_Priority_Order_By>;
  notification_status_aggregate?: Maybe<Notification_Notification_Status_Aggregate_Order_By>;
  priority?: Maybe<Order_By>;
  ref?: Maybe<Order_By>;
  role?: Maybe<Order_By>;
  route?: Maybe<Order_By>;
  subject?: Maybe<Order_By>;
  title?: Maybe<Order_By>;
  user?: Maybe<Management_UserProfile_Order_By>;
  user_id?: Maybe<Order_By>;
  user_role?: Maybe<Management_User_Role_Order_By>;
};

/** primary key columns input for table: notification_notification */
export type Notification_Notification_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** columns and relationships of "notification.notification_priority" */
export type Notification_Notification_Priority = {
  __typename?: 'notification_notification_priority';
  key: Scalars['String'];
  /** An array relationship */
  notifications: Array<Notification_Notification>;
  /** An aggregate relationship */
  notifications_aggregate: Notification_Notification_Aggregate;
  value: Scalars['String'];
};


/** columns and relationships of "notification.notification_priority" */
export type Notification_Notification_PriorityNotificationsArgs = {
  distinct_on?: Maybe<Array<Notification_Notification_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Notification_Notification_Order_By>>;
  where?: Maybe<Notification_Notification_Bool_Exp>;
};


/** columns and relationships of "notification.notification_priority" */
export type Notification_Notification_PriorityNotifications_AggregateArgs = {
  distinct_on?: Maybe<Array<Notification_Notification_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Notification_Notification_Order_By>>;
  where?: Maybe<Notification_Notification_Bool_Exp>;
};

/** aggregated selection of "notification.notification_priority" */
export type Notification_Notification_Priority_Aggregate = {
  __typename?: 'notification_notification_priority_aggregate';
  aggregate?: Maybe<Notification_Notification_Priority_Aggregate_Fields>;
  nodes: Array<Notification_Notification_Priority>;
};

/** aggregate fields of "notification.notification_priority" */
export type Notification_Notification_Priority_Aggregate_Fields = {
  __typename?: 'notification_notification_priority_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Notification_Notification_Priority_Max_Fields>;
  min?: Maybe<Notification_Notification_Priority_Min_Fields>;
};


/** aggregate fields of "notification.notification_priority" */
export type Notification_Notification_Priority_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Notification_Notification_Priority_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** Boolean expression to filter rows from the table "notification.notification_priority". All fields are combined with a logical 'AND'. */
export type Notification_Notification_Priority_Bool_Exp = {
  _and?: Maybe<Array<Notification_Notification_Priority_Bool_Exp>>;
  _not?: Maybe<Notification_Notification_Priority_Bool_Exp>;
  _or?: Maybe<Array<Notification_Notification_Priority_Bool_Exp>>;
  key?: Maybe<String_Comparison_Exp>;
  notifications?: Maybe<Notification_Notification_Bool_Exp>;
  value?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "notification.notification_priority" */
export enum Notification_Notification_Priority_Constraint {
  /** unique or primary key constraint */
  NotificationPriorityPkey = 'notification_priority_pkey',
  /** unique or primary key constraint */
  NotificationPriorityValueKey = 'notification_priority_value_key'
}

/** input type for inserting data into table "notification.notification_priority" */
export type Notification_Notification_Priority_Insert_Input = {
  key?: Maybe<Scalars['String']>;
  notifications?: Maybe<Notification_Notification_Arr_Rel_Insert_Input>;
  value?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Notification_Notification_Priority_Max_Fields = {
  __typename?: 'notification_notification_priority_max_fields';
  key?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type Notification_Notification_Priority_Min_Fields = {
  __typename?: 'notification_notification_priority_min_fields';
  key?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/** response of any mutation on the table "notification.notification_priority" */
export type Notification_Notification_Priority_Mutation_Response = {
  __typename?: 'notification_notification_priority_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Notification_Notification_Priority>;
};

/** input type for inserting object relation for remote table "notification.notification_priority" */
export type Notification_Notification_Priority_Obj_Rel_Insert_Input = {
  data: Notification_Notification_Priority_Insert_Input;
  /** on conflict condition */
  on_conflict?: Maybe<Notification_Notification_Priority_On_Conflict>;
};

/** on conflict condition type for table "notification.notification_priority" */
export type Notification_Notification_Priority_On_Conflict = {
  constraint: Notification_Notification_Priority_Constraint;
  update_columns?: Array<Notification_Notification_Priority_Update_Column>;
  where?: Maybe<Notification_Notification_Priority_Bool_Exp>;
};

/** Ordering options when selecting data from "notification.notification_priority". */
export type Notification_Notification_Priority_Order_By = {
  key?: Maybe<Order_By>;
  notifications_aggregate?: Maybe<Notification_Notification_Aggregate_Order_By>;
  value?: Maybe<Order_By>;
};

/** primary key columns input for table: notification_notification_priority */
export type Notification_Notification_Priority_Pk_Columns_Input = {
  key: Scalars['String'];
};

/** select columns of table "notification.notification_priority" */
export enum Notification_Notification_Priority_Select_Column {
  /** column name */
  Key = 'key',
  /** column name */
  Value = 'value'
}

/** input type for updating data in table "notification.notification_priority" */
export type Notification_Notification_Priority_Set_Input = {
  key?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/** update columns of table "notification.notification_priority" */
export enum Notification_Notification_Priority_Update_Column {
  /** column name */
  Key = 'key',
  /** column name */
  Value = 'value'
}

/** select columns of table "notification.notification" */
export enum Notification_Notification_Select_Column {
  /** column name */
  CreatedAt = 'createdAt',
  /** column name */
  Id = 'id',
  /** column name */
  Message = 'message',
  /** column name */
  Priority = 'priority',
  /** column name */
  Ref = 'ref',
  /** column name */
  Role = 'role',
  /** column name */
  Route = 'route',
  /** column name */
  Subject = 'subject',
  /** column name */
  Title = 'title',
  /** column name */
  UserId = 'user_id'
}

/** input type for updating data in table "notification.notification" */
export type Notification_Notification_Set_Input = {
  createdAt?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  message?: Maybe<Scalars['String']>;
  priority?: Maybe<Scalars['String']>;
  ref?: Maybe<Scalars['String']>;
  role?: Maybe<Management_User_Role_Enum>;
  route?: Maybe<Scalars['String']>;
  subject?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  user_id?: Maybe<Scalars['String']>;
};

/** columns and relationships of "notification.notification_status" */
export type Notification_Notification_Status = {
  __typename?: 'notification_notification_status';
  hide: Scalars['Boolean'];
  id: Scalars['uuid'];
  /** An object relationship */
  notification: Notification_Notification;
  notification_id: Scalars['uuid'];
  read: Scalars['Boolean'];
  /** An object relationship */
  userProfile: Management_UserProfile;
  user_id: Scalars['String'];
};

/** aggregated selection of "notification.notification_status" */
export type Notification_Notification_Status_Aggregate = {
  __typename?: 'notification_notification_status_aggregate';
  aggregate?: Maybe<Notification_Notification_Status_Aggregate_Fields>;
  nodes: Array<Notification_Notification_Status>;
};

/** aggregate fields of "notification.notification_status" */
export type Notification_Notification_Status_Aggregate_Fields = {
  __typename?: 'notification_notification_status_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Notification_Notification_Status_Max_Fields>;
  min?: Maybe<Notification_Notification_Status_Min_Fields>;
};


/** aggregate fields of "notification.notification_status" */
export type Notification_Notification_Status_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Notification_Notification_Status_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "notification.notification_status" */
export type Notification_Notification_Status_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Notification_Notification_Status_Max_Order_By>;
  min?: Maybe<Notification_Notification_Status_Min_Order_By>;
};

/** input type for inserting array relation for remote table "notification.notification_status" */
export type Notification_Notification_Status_Arr_Rel_Insert_Input = {
  data: Array<Notification_Notification_Status_Insert_Input>;
  /** on conflict condition */
  on_conflict?: Maybe<Notification_Notification_Status_On_Conflict>;
};

/** Boolean expression to filter rows from the table "notification.notification_status". All fields are combined with a logical 'AND'. */
export type Notification_Notification_Status_Bool_Exp = {
  _and?: Maybe<Array<Notification_Notification_Status_Bool_Exp>>;
  _not?: Maybe<Notification_Notification_Status_Bool_Exp>;
  _or?: Maybe<Array<Notification_Notification_Status_Bool_Exp>>;
  hide?: Maybe<Boolean_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  notification?: Maybe<Notification_Notification_Bool_Exp>;
  notification_id?: Maybe<Uuid_Comparison_Exp>;
  read?: Maybe<Boolean_Comparison_Exp>;
  userProfile?: Maybe<Management_UserProfile_Bool_Exp>;
  user_id?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "notification.notification_status" */
export enum Notification_Notification_Status_Constraint {
  /** unique or primary key constraint */
  NotificationStatusNotificationIdUserIdKey = 'notification_status_notification_id_user_id_key',
  /** unique or primary key constraint */
  NotificationStatusPkey = 'notification_status_pkey'
}

/** input type for inserting data into table "notification.notification_status" */
export type Notification_Notification_Status_Insert_Input = {
  hide?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['uuid']>;
  notification?: Maybe<Notification_Notification_Obj_Rel_Insert_Input>;
  notification_id?: Maybe<Scalars['uuid']>;
  read?: Maybe<Scalars['Boolean']>;
  userProfile?: Maybe<Management_UserProfile_Obj_Rel_Insert_Input>;
  user_id?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Notification_Notification_Status_Max_Fields = {
  __typename?: 'notification_notification_status_max_fields';
  id?: Maybe<Scalars['uuid']>;
  notification_id?: Maybe<Scalars['uuid']>;
  user_id?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "notification.notification_status" */
export type Notification_Notification_Status_Max_Order_By = {
  id?: Maybe<Order_By>;
  notification_id?: Maybe<Order_By>;
  user_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Notification_Notification_Status_Min_Fields = {
  __typename?: 'notification_notification_status_min_fields';
  id?: Maybe<Scalars['uuid']>;
  notification_id?: Maybe<Scalars['uuid']>;
  user_id?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "notification.notification_status" */
export type Notification_Notification_Status_Min_Order_By = {
  id?: Maybe<Order_By>;
  notification_id?: Maybe<Order_By>;
  user_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "notification.notification_status" */
export type Notification_Notification_Status_Mutation_Response = {
  __typename?: 'notification_notification_status_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Notification_Notification_Status>;
};

/** on conflict condition type for table "notification.notification_status" */
export type Notification_Notification_Status_On_Conflict = {
  constraint: Notification_Notification_Status_Constraint;
  update_columns?: Array<Notification_Notification_Status_Update_Column>;
  where?: Maybe<Notification_Notification_Status_Bool_Exp>;
};

/** Ordering options when selecting data from "notification.notification_status". */
export type Notification_Notification_Status_Order_By = {
  hide?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  notification?: Maybe<Notification_Notification_Order_By>;
  notification_id?: Maybe<Order_By>;
  read?: Maybe<Order_By>;
  userProfile?: Maybe<Management_UserProfile_Order_By>;
  user_id?: Maybe<Order_By>;
};

/** primary key columns input for table: notification_notification_status */
export type Notification_Notification_Status_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "notification.notification_status" */
export enum Notification_Notification_Status_Select_Column {
  /** column name */
  Hide = 'hide',
  /** column name */
  Id = 'id',
  /** column name */
  NotificationId = 'notification_id',
  /** column name */
  Read = 'read',
  /** column name */
  UserId = 'user_id'
}

/** input type for updating data in table "notification.notification_status" */
export type Notification_Notification_Status_Set_Input = {
  hide?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['uuid']>;
  notification_id?: Maybe<Scalars['uuid']>;
  read?: Maybe<Scalars['Boolean']>;
  user_id?: Maybe<Scalars['String']>;
};

/** update columns of table "notification.notification_status" */
export enum Notification_Notification_Status_Update_Column {
  /** column name */
  Hide = 'hide',
  /** column name */
  Id = 'id',
  /** column name */
  NotificationId = 'notification_id',
  /** column name */
  Read = 'read',
  /** column name */
  UserId = 'user_id'
}

/** update columns of table "notification.notification" */
export enum Notification_Notification_Update_Column {
  /** column name */
  CreatedAt = 'createdAt',
  /** column name */
  Id = 'id',
  /** column name */
  Message = 'message',
  /** column name */
  Priority = 'priority',
  /** column name */
  Ref = 'ref',
  /** column name */
  Role = 'role',
  /** column name */
  Route = 'route',
  /** column name */
  Subject = 'subject',
  /** column name */
  Title = 'title',
  /** column name */
  UserId = 'user_id'
}


/** Boolean expression to compare columns of type "numeric". All fields are combined with logical 'AND'. */
export type Numeric_Comparison_Exp = {
  _eq?: Maybe<Scalars['numeric']>;
  _gt?: Maybe<Scalars['numeric']>;
  _gte?: Maybe<Scalars['numeric']>;
  _in?: Maybe<Array<Scalars['numeric']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['numeric']>;
  _lte?: Maybe<Scalars['numeric']>;
  _neq?: Maybe<Scalars['numeric']>;
  _nin?: Maybe<Array<Scalars['numeric']>>;
};

/** column ordering options */
export enum Order_By {
  /** in ascending order, nulls last */
  Asc = 'asc',
  /** in ascending order, nulls first */
  AscNullsFirst = 'asc_nulls_first',
  /** in ascending order, nulls last */
  AscNullsLast = 'asc_nulls_last',
  /** in descending order, nulls first */
  Desc = 'desc',
  /** in descending order, nulls first */
  DescNullsFirst = 'desc_nulls_first',
  /** in descending order, nulls last */
  DescNullsLast = 'desc_nulls_last'
}

/** columns and relationships of "product.accessory" */
export type Product_Accessory = {
  __typename?: 'product_accessory';
  /** An object relationship */
  accessoryType: Product_AccessoryTypes;
  category: Product_AccessoryTypes_Enum;
  createdAt?: Maybe<Scalars['date']>;
  createdBy?: Maybe<Scalars['String']>;
  id: Scalars['uuid'];
  /** An object relationship */
  product: Product_Product;
  productcode: Scalars['String'];
  quota?: Maybe<Scalars['numeric']>;
  /** An object relationship */
  substance: Product_Substance;
  substanceid: Scalars['uuid'];
  updatedAt?: Maybe<Scalars['date']>;
  updatedBy?: Maybe<Scalars['String']>;
};

/** columns and relationships of "product.accessoryTypes" */
export type Product_AccessoryTypes = {
  __typename?: 'product_accessoryTypes';
  /** An array relationship */
  accessories: Array<Product_Accessory>;
  /** An aggregate relationship */
  accessories_aggregate: Product_Accessory_Aggregate;
  description: Scalars['String'];
  type: Scalars['String'];
};


/** columns and relationships of "product.accessoryTypes" */
export type Product_AccessoryTypesAccessoriesArgs = {
  distinct_on?: Maybe<Array<Product_Accessory_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Accessory_Order_By>>;
  where?: Maybe<Product_Accessory_Bool_Exp>;
};


/** columns and relationships of "product.accessoryTypes" */
export type Product_AccessoryTypesAccessories_AggregateArgs = {
  distinct_on?: Maybe<Array<Product_Accessory_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Accessory_Order_By>>;
  where?: Maybe<Product_Accessory_Bool_Exp>;
};

/** aggregated selection of "product.accessoryTypes" */
export type Product_AccessoryTypes_Aggregate = {
  __typename?: 'product_accessoryTypes_aggregate';
  aggregate?: Maybe<Product_AccessoryTypes_Aggregate_Fields>;
  nodes: Array<Product_AccessoryTypes>;
};

/** aggregate fields of "product.accessoryTypes" */
export type Product_AccessoryTypes_Aggregate_Fields = {
  __typename?: 'product_accessoryTypes_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Product_AccessoryTypes_Max_Fields>;
  min?: Maybe<Product_AccessoryTypes_Min_Fields>;
};


/** aggregate fields of "product.accessoryTypes" */
export type Product_AccessoryTypes_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Product_AccessoryTypes_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** Boolean expression to filter rows from the table "product.accessoryTypes". All fields are combined with a logical 'AND'. */
export type Product_AccessoryTypes_Bool_Exp = {
  _and?: Maybe<Array<Product_AccessoryTypes_Bool_Exp>>;
  _not?: Maybe<Product_AccessoryTypes_Bool_Exp>;
  _or?: Maybe<Array<Product_AccessoryTypes_Bool_Exp>>;
  accessories?: Maybe<Product_Accessory_Bool_Exp>;
  description?: Maybe<String_Comparison_Exp>;
  type?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "product.accessoryTypes" */
export enum Product_AccessoryTypes_Constraint {
  /** unique or primary key constraint */
  AccessoryTypesPkey = 'accessoryTypes_pkey'
}

export enum Product_AccessoryTypes_Enum {
  Accessoire = 'ACCESSOIRE',
  Apparent = 'APPARENT'
}

/** Boolean expression to compare columns of type "product_accessoryTypes_enum". All fields are combined with logical 'AND'. */
export type Product_AccessoryTypes_Enum_Comparison_Exp = {
  _eq?: Maybe<Product_AccessoryTypes_Enum>;
  _in?: Maybe<Array<Product_AccessoryTypes_Enum>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _neq?: Maybe<Product_AccessoryTypes_Enum>;
  _nin?: Maybe<Array<Product_AccessoryTypes_Enum>>;
};

/** input type for inserting data into table "product.accessoryTypes" */
export type Product_AccessoryTypes_Insert_Input = {
  accessories?: Maybe<Product_Accessory_Arr_Rel_Insert_Input>;
  description?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Product_AccessoryTypes_Max_Fields = {
  __typename?: 'product_accessoryTypes_max_fields';
  description?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type Product_AccessoryTypes_Min_Fields = {
  __typename?: 'product_accessoryTypes_min_fields';
  description?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

/** response of any mutation on the table "product.accessoryTypes" */
export type Product_AccessoryTypes_Mutation_Response = {
  __typename?: 'product_accessoryTypes_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Product_AccessoryTypes>;
};

/** input type for inserting object relation for remote table "product.accessoryTypes" */
export type Product_AccessoryTypes_Obj_Rel_Insert_Input = {
  data: Product_AccessoryTypes_Insert_Input;
  /** on conflict condition */
  on_conflict?: Maybe<Product_AccessoryTypes_On_Conflict>;
};

/** on conflict condition type for table "product.accessoryTypes" */
export type Product_AccessoryTypes_On_Conflict = {
  constraint: Product_AccessoryTypes_Constraint;
  update_columns?: Array<Product_AccessoryTypes_Update_Column>;
  where?: Maybe<Product_AccessoryTypes_Bool_Exp>;
};

/** Ordering options when selecting data from "product.accessoryTypes". */
export type Product_AccessoryTypes_Order_By = {
  accessories_aggregate?: Maybe<Product_Accessory_Aggregate_Order_By>;
  description?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
};

/** primary key columns input for table: product_accessoryTypes */
export type Product_AccessoryTypes_Pk_Columns_Input = {
  type: Scalars['String'];
};

/** select columns of table "product.accessoryTypes" */
export enum Product_AccessoryTypes_Select_Column {
  /** column name */
  Description = 'description',
  /** column name */
  Type = 'type'
}

/** input type for updating data in table "product.accessoryTypes" */
export type Product_AccessoryTypes_Set_Input = {
  description?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

/** update columns of table "product.accessoryTypes" */
export enum Product_AccessoryTypes_Update_Column {
  /** column name */
  Description = 'description',
  /** column name */
  Type = 'type'
}

/** aggregated selection of "product.accessory" */
export type Product_Accessory_Aggregate = {
  __typename?: 'product_accessory_aggregate';
  aggregate?: Maybe<Product_Accessory_Aggregate_Fields>;
  nodes: Array<Product_Accessory>;
};

/** aggregate fields of "product.accessory" */
export type Product_Accessory_Aggregate_Fields = {
  __typename?: 'product_accessory_aggregate_fields';
  avg?: Maybe<Product_Accessory_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Product_Accessory_Max_Fields>;
  min?: Maybe<Product_Accessory_Min_Fields>;
  stddev?: Maybe<Product_Accessory_Stddev_Fields>;
  stddev_pop?: Maybe<Product_Accessory_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Product_Accessory_Stddev_Samp_Fields>;
  sum?: Maybe<Product_Accessory_Sum_Fields>;
  var_pop?: Maybe<Product_Accessory_Var_Pop_Fields>;
  var_samp?: Maybe<Product_Accessory_Var_Samp_Fields>;
  variance?: Maybe<Product_Accessory_Variance_Fields>;
};


/** aggregate fields of "product.accessory" */
export type Product_Accessory_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Product_Accessory_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "product.accessory" */
export type Product_Accessory_Aggregate_Order_By = {
  avg?: Maybe<Product_Accessory_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Product_Accessory_Max_Order_By>;
  min?: Maybe<Product_Accessory_Min_Order_By>;
  stddev?: Maybe<Product_Accessory_Stddev_Order_By>;
  stddev_pop?: Maybe<Product_Accessory_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Product_Accessory_Stddev_Samp_Order_By>;
  sum?: Maybe<Product_Accessory_Sum_Order_By>;
  var_pop?: Maybe<Product_Accessory_Var_Pop_Order_By>;
  var_samp?: Maybe<Product_Accessory_Var_Samp_Order_By>;
  variance?: Maybe<Product_Accessory_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "product.accessory" */
export type Product_Accessory_Arr_Rel_Insert_Input = {
  data: Array<Product_Accessory_Insert_Input>;
  /** on conflict condition */
  on_conflict?: Maybe<Product_Accessory_On_Conflict>;
};

/** aggregate avg on columns */
export type Product_Accessory_Avg_Fields = {
  __typename?: 'product_accessory_avg_fields';
  quota?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "product.accessory" */
export type Product_Accessory_Avg_Order_By = {
  quota?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "product.accessory". All fields are combined with a logical 'AND'. */
export type Product_Accessory_Bool_Exp = {
  _and?: Maybe<Array<Product_Accessory_Bool_Exp>>;
  _not?: Maybe<Product_Accessory_Bool_Exp>;
  _or?: Maybe<Array<Product_Accessory_Bool_Exp>>;
  accessoryType?: Maybe<Product_AccessoryTypes_Bool_Exp>;
  category?: Maybe<Product_AccessoryTypes_Enum_Comparison_Exp>;
  createdAt?: Maybe<Date_Comparison_Exp>;
  createdBy?: Maybe<String_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  product?: Maybe<Product_Product_Bool_Exp>;
  productcode?: Maybe<String_Comparison_Exp>;
  quota?: Maybe<Numeric_Comparison_Exp>;
  substance?: Maybe<Product_Substance_Bool_Exp>;
  substanceid?: Maybe<Uuid_Comparison_Exp>;
  updatedAt?: Maybe<Date_Comparison_Exp>;
  updatedBy?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "product.accessory" */
export enum Product_Accessory_Constraint {
  /** unique or primary key constraint */
  AccessoiresPkey = 'accessoires_pkey',
  /** unique or primary key constraint */
  AccessoryProductCodeKey = 'accessory_productCode_key',
  /** unique or primary key constraint */
  AccessorySubstanceidKey = 'accessory_substanceid_key'
}

/** input type for incrementing numeric columns in table "product.accessory" */
export type Product_Accessory_Inc_Input = {
  quota?: Maybe<Scalars['numeric']>;
};

/** input type for inserting data into table "product.accessory" */
export type Product_Accessory_Insert_Input = {
  accessoryType?: Maybe<Product_AccessoryTypes_Obj_Rel_Insert_Input>;
  category?: Maybe<Product_AccessoryTypes_Enum>;
  createdAt?: Maybe<Scalars['date']>;
  createdBy?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  product?: Maybe<Product_Product_Obj_Rel_Insert_Input>;
  productcode?: Maybe<Scalars['String']>;
  quota?: Maybe<Scalars['numeric']>;
  substance?: Maybe<Product_Substance_Obj_Rel_Insert_Input>;
  substanceid?: Maybe<Scalars['uuid']>;
  updatedAt?: Maybe<Scalars['date']>;
  updatedBy?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Product_Accessory_Max_Fields = {
  __typename?: 'product_accessory_max_fields';
  createdAt?: Maybe<Scalars['date']>;
  createdBy?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  productcode?: Maybe<Scalars['String']>;
  quota?: Maybe<Scalars['numeric']>;
  substanceid?: Maybe<Scalars['uuid']>;
  updatedAt?: Maybe<Scalars['date']>;
  updatedBy?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "product.accessory" */
export type Product_Accessory_Max_Order_By = {
  createdAt?: Maybe<Order_By>;
  createdBy?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  productcode?: Maybe<Order_By>;
  quota?: Maybe<Order_By>;
  substanceid?: Maybe<Order_By>;
  updatedAt?: Maybe<Order_By>;
  updatedBy?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Product_Accessory_Min_Fields = {
  __typename?: 'product_accessory_min_fields';
  createdAt?: Maybe<Scalars['date']>;
  createdBy?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  productcode?: Maybe<Scalars['String']>;
  quota?: Maybe<Scalars['numeric']>;
  substanceid?: Maybe<Scalars['uuid']>;
  updatedAt?: Maybe<Scalars['date']>;
  updatedBy?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "product.accessory" */
export type Product_Accessory_Min_Order_By = {
  createdAt?: Maybe<Order_By>;
  createdBy?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  productcode?: Maybe<Order_By>;
  quota?: Maybe<Order_By>;
  substanceid?: Maybe<Order_By>;
  updatedAt?: Maybe<Order_By>;
  updatedBy?: Maybe<Order_By>;
};

/** response of any mutation on the table "product.accessory" */
export type Product_Accessory_Mutation_Response = {
  __typename?: 'product_accessory_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Product_Accessory>;
};

/** input type for inserting object relation for remote table "product.accessory" */
export type Product_Accessory_Obj_Rel_Insert_Input = {
  data: Product_Accessory_Insert_Input;
  /** on conflict condition */
  on_conflict?: Maybe<Product_Accessory_On_Conflict>;
};

/** on conflict condition type for table "product.accessory" */
export type Product_Accessory_On_Conflict = {
  constraint: Product_Accessory_Constraint;
  update_columns?: Array<Product_Accessory_Update_Column>;
  where?: Maybe<Product_Accessory_Bool_Exp>;
};

/** Ordering options when selecting data from "product.accessory". */
export type Product_Accessory_Order_By = {
  accessoryType?: Maybe<Product_AccessoryTypes_Order_By>;
  category?: Maybe<Order_By>;
  createdAt?: Maybe<Order_By>;
  createdBy?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  product?: Maybe<Product_Product_Order_By>;
  productcode?: Maybe<Order_By>;
  quota?: Maybe<Order_By>;
  substance?: Maybe<Product_Substance_Order_By>;
  substanceid?: Maybe<Order_By>;
  updatedAt?: Maybe<Order_By>;
  updatedBy?: Maybe<Order_By>;
};

/** primary key columns input for table: product_accessory */
export type Product_Accessory_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "product.accessory" */
export enum Product_Accessory_Select_Column {
  /** column name */
  Category = 'category',
  /** column name */
  CreatedAt = 'createdAt',
  /** column name */
  CreatedBy = 'createdBy',
  /** column name */
  Id = 'id',
  /** column name */
  Productcode = 'productcode',
  /** column name */
  Quota = 'quota',
  /** column name */
  Substanceid = 'substanceid',
  /** column name */
  UpdatedAt = 'updatedAt',
  /** column name */
  UpdatedBy = 'updatedBy'
}

/** input type for updating data in table "product.accessory" */
export type Product_Accessory_Set_Input = {
  category?: Maybe<Product_AccessoryTypes_Enum>;
  createdAt?: Maybe<Scalars['date']>;
  createdBy?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  productcode?: Maybe<Scalars['String']>;
  quota?: Maybe<Scalars['numeric']>;
  substanceid?: Maybe<Scalars['uuid']>;
  updatedAt?: Maybe<Scalars['date']>;
  updatedBy?: Maybe<Scalars['String']>;
};

/** aggregate stddev on columns */
export type Product_Accessory_Stddev_Fields = {
  __typename?: 'product_accessory_stddev_fields';
  quota?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "product.accessory" */
export type Product_Accessory_Stddev_Order_By = {
  quota?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Product_Accessory_Stddev_Pop_Fields = {
  __typename?: 'product_accessory_stddev_pop_fields';
  quota?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "product.accessory" */
export type Product_Accessory_Stddev_Pop_Order_By = {
  quota?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Product_Accessory_Stddev_Samp_Fields = {
  __typename?: 'product_accessory_stddev_samp_fields';
  quota?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "product.accessory" */
export type Product_Accessory_Stddev_Samp_Order_By = {
  quota?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Product_Accessory_Sum_Fields = {
  __typename?: 'product_accessory_sum_fields';
  quota?: Maybe<Scalars['numeric']>;
};

/** order by sum() on columns of table "product.accessory" */
export type Product_Accessory_Sum_Order_By = {
  quota?: Maybe<Order_By>;
};

/** update columns of table "product.accessory" */
export enum Product_Accessory_Update_Column {
  /** column name */
  Category = 'category',
  /** column name */
  CreatedAt = 'createdAt',
  /** column name */
  CreatedBy = 'createdBy',
  /** column name */
  Id = 'id',
  /** column name */
  Productcode = 'productcode',
  /** column name */
  Quota = 'quota',
  /** column name */
  Substanceid = 'substanceid',
  /** column name */
  UpdatedAt = 'updatedAt',
  /** column name */
  UpdatedBy = 'updatedBy'
}

/** aggregate var_pop on columns */
export type Product_Accessory_Var_Pop_Fields = {
  __typename?: 'product_accessory_var_pop_fields';
  quota?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "product.accessory" */
export type Product_Accessory_Var_Pop_Order_By = {
  quota?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Product_Accessory_Var_Samp_Fields = {
  __typename?: 'product_accessory_var_samp_fields';
  quota?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "product.accessory" */
export type Product_Accessory_Var_Samp_Order_By = {
  quota?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Product_Accessory_Variance_Fields = {
  __typename?: 'product_accessory_variance_fields';
  quota?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "product.accessory" */
export type Product_Accessory_Variance_Order_By = {
  quota?: Maybe<Order_By>;
};

/** columns and relationships of "product.consumable" */
export type Product_Consumable = {
  __typename?: 'product_consumable';
  category: Product_ConsumableCategory_Enum;
  /** An object relationship */
  consumableCategory: Product_ConsumableCategory;
  createdAt: Scalars['date'];
  createdBy?: Maybe<Scalars['String']>;
  id: Scalars['uuid'];
  labelFactory?: Maybe<Scalars['String']>;
  /** An object relationship */
  product: Product_Product;
  productcode: Scalars['String'];
  /** An array relationship */
  service_consumables: Array<Product_Service_Consumable>;
  /** An aggregate relationship */
  service_consumables_aggregate: Product_Service_Consumable_Aggregate;
  /** An object relationship */
  substance: Product_Substance;
  substanceid: Scalars['uuid'];
  updatedAt: Scalars['date'];
  updatedBy?: Maybe<Scalars['String']>;
};


/** columns and relationships of "product.consumable" */
export type Product_ConsumableService_ConsumablesArgs = {
  distinct_on?: Maybe<Array<Product_Service_Consumable_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Service_Consumable_Order_By>>;
  where?: Maybe<Product_Service_Consumable_Bool_Exp>;
};


/** columns and relationships of "product.consumable" */
export type Product_ConsumableService_Consumables_AggregateArgs = {
  distinct_on?: Maybe<Array<Product_Service_Consumable_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Service_Consumable_Order_By>>;
  where?: Maybe<Product_Service_Consumable_Bool_Exp>;
};

/** columns and relationships of "product.consumableCategory" */
export type Product_ConsumableCategory = {
  __typename?: 'product_consumableCategory';
  category: Scalars['String'];
  /** An array relationship */
  consumables: Array<Product_Consumable>;
  /** An aggregate relationship */
  consumables_aggregate: Product_Consumable_Aggregate;
  description: Scalars['String'];
};


/** columns and relationships of "product.consumableCategory" */
export type Product_ConsumableCategoryConsumablesArgs = {
  distinct_on?: Maybe<Array<Product_Consumable_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Consumable_Order_By>>;
  where?: Maybe<Product_Consumable_Bool_Exp>;
};


/** columns and relationships of "product.consumableCategory" */
export type Product_ConsumableCategoryConsumables_AggregateArgs = {
  distinct_on?: Maybe<Array<Product_Consumable_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Consumable_Order_By>>;
  where?: Maybe<Product_Consumable_Bool_Exp>;
};

/** aggregated selection of "product.consumableCategory" */
export type Product_ConsumableCategory_Aggregate = {
  __typename?: 'product_consumableCategory_aggregate';
  aggregate?: Maybe<Product_ConsumableCategory_Aggregate_Fields>;
  nodes: Array<Product_ConsumableCategory>;
};

/** aggregate fields of "product.consumableCategory" */
export type Product_ConsumableCategory_Aggregate_Fields = {
  __typename?: 'product_consumableCategory_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Product_ConsumableCategory_Max_Fields>;
  min?: Maybe<Product_ConsumableCategory_Min_Fields>;
};


/** aggregate fields of "product.consumableCategory" */
export type Product_ConsumableCategory_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Product_ConsumableCategory_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** Boolean expression to filter rows from the table "product.consumableCategory". All fields are combined with a logical 'AND'. */
export type Product_ConsumableCategory_Bool_Exp = {
  _and?: Maybe<Array<Product_ConsumableCategory_Bool_Exp>>;
  _not?: Maybe<Product_ConsumableCategory_Bool_Exp>;
  _or?: Maybe<Array<Product_ConsumableCategory_Bool_Exp>>;
  category?: Maybe<String_Comparison_Exp>;
  consumables?: Maybe<Product_Consumable_Bool_Exp>;
  description?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "product.consumableCategory" */
export enum Product_ConsumableCategory_Constraint {
  /** unique or primary key constraint */
  ConsumableCategoryPkey = 'consumableCategory_pkey'
}

export enum Product_ConsumableCategory_Enum {
  /** Consommable */
  Consommable = 'Consommable',
  /** Matiére Premiére */
  Mp = 'MP'
}

/** Boolean expression to compare columns of type "product_consumableCategory_enum". All fields are combined with logical 'AND'. */
export type Product_ConsumableCategory_Enum_Comparison_Exp = {
  _eq?: Maybe<Product_ConsumableCategory_Enum>;
  _in?: Maybe<Array<Product_ConsumableCategory_Enum>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _neq?: Maybe<Product_ConsumableCategory_Enum>;
  _nin?: Maybe<Array<Product_ConsumableCategory_Enum>>;
};

/** input type for inserting data into table "product.consumableCategory" */
export type Product_ConsumableCategory_Insert_Input = {
  category?: Maybe<Scalars['String']>;
  consumables?: Maybe<Product_Consumable_Arr_Rel_Insert_Input>;
  description?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Product_ConsumableCategory_Max_Fields = {
  __typename?: 'product_consumableCategory_max_fields';
  category?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type Product_ConsumableCategory_Min_Fields = {
  __typename?: 'product_consumableCategory_min_fields';
  category?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
};

/** response of any mutation on the table "product.consumableCategory" */
export type Product_ConsumableCategory_Mutation_Response = {
  __typename?: 'product_consumableCategory_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Product_ConsumableCategory>;
};

/** input type for inserting object relation for remote table "product.consumableCategory" */
export type Product_ConsumableCategory_Obj_Rel_Insert_Input = {
  data: Product_ConsumableCategory_Insert_Input;
  /** on conflict condition */
  on_conflict?: Maybe<Product_ConsumableCategory_On_Conflict>;
};

/** on conflict condition type for table "product.consumableCategory" */
export type Product_ConsumableCategory_On_Conflict = {
  constraint: Product_ConsumableCategory_Constraint;
  update_columns?: Array<Product_ConsumableCategory_Update_Column>;
  where?: Maybe<Product_ConsumableCategory_Bool_Exp>;
};

/** Ordering options when selecting data from "product.consumableCategory". */
export type Product_ConsumableCategory_Order_By = {
  category?: Maybe<Order_By>;
  consumables_aggregate?: Maybe<Product_Consumable_Aggregate_Order_By>;
  description?: Maybe<Order_By>;
};

/** primary key columns input for table: product_consumableCategory */
export type Product_ConsumableCategory_Pk_Columns_Input = {
  category: Scalars['String'];
};

/** select columns of table "product.consumableCategory" */
export enum Product_ConsumableCategory_Select_Column {
  /** column name */
  Category = 'category',
  /** column name */
  Description = 'description'
}

/** input type for updating data in table "product.consumableCategory" */
export type Product_ConsumableCategory_Set_Input = {
  category?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
};

/** update columns of table "product.consumableCategory" */
export enum Product_ConsumableCategory_Update_Column {
  /** column name */
  Category = 'category',
  /** column name */
  Description = 'description'
}

/** aggregated selection of "product.consumable" */
export type Product_Consumable_Aggregate = {
  __typename?: 'product_consumable_aggregate';
  aggregate?: Maybe<Product_Consumable_Aggregate_Fields>;
  nodes: Array<Product_Consumable>;
};

/** aggregate fields of "product.consumable" */
export type Product_Consumable_Aggregate_Fields = {
  __typename?: 'product_consumable_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Product_Consumable_Max_Fields>;
  min?: Maybe<Product_Consumable_Min_Fields>;
};


/** aggregate fields of "product.consumable" */
export type Product_Consumable_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Product_Consumable_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "product.consumable" */
export type Product_Consumable_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Product_Consumable_Max_Order_By>;
  min?: Maybe<Product_Consumable_Min_Order_By>;
};

/** input type for inserting array relation for remote table "product.consumable" */
export type Product_Consumable_Arr_Rel_Insert_Input = {
  data: Array<Product_Consumable_Insert_Input>;
  /** on conflict condition */
  on_conflict?: Maybe<Product_Consumable_On_Conflict>;
};

/** Boolean expression to filter rows from the table "product.consumable". All fields are combined with a logical 'AND'. */
export type Product_Consumable_Bool_Exp = {
  _and?: Maybe<Array<Product_Consumable_Bool_Exp>>;
  _not?: Maybe<Product_Consumable_Bool_Exp>;
  _or?: Maybe<Array<Product_Consumable_Bool_Exp>>;
  category?: Maybe<Product_ConsumableCategory_Enum_Comparison_Exp>;
  consumableCategory?: Maybe<Product_ConsumableCategory_Bool_Exp>;
  createdAt?: Maybe<Date_Comparison_Exp>;
  createdBy?: Maybe<String_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  labelFactory?: Maybe<String_Comparison_Exp>;
  product?: Maybe<Product_Product_Bool_Exp>;
  productcode?: Maybe<String_Comparison_Exp>;
  service_consumables?: Maybe<Product_Service_Consumable_Bool_Exp>;
  substance?: Maybe<Product_Substance_Bool_Exp>;
  substanceid?: Maybe<Uuid_Comparison_Exp>;
  updatedAt?: Maybe<Date_Comparison_Exp>;
  updatedBy?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "product.consumable" */
export enum Product_Consumable_Constraint {
  /** unique or primary key constraint */
  ConsumablePkey = 'consumable_pkey',
  /** unique or primary key constraint */
  ConsumableProductCodeKey = 'consumable_productCode_key',
  /** unique or primary key constraint */
  ConsumableSubstanceidKey = 'consumable_substanceid_key'
}

/** input type for inserting data into table "product.consumable" */
export type Product_Consumable_Insert_Input = {
  category?: Maybe<Product_ConsumableCategory_Enum>;
  consumableCategory?: Maybe<Product_ConsumableCategory_Obj_Rel_Insert_Input>;
  createdAt?: Maybe<Scalars['date']>;
  createdBy?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  labelFactory?: Maybe<Scalars['String']>;
  product?: Maybe<Product_Product_Obj_Rel_Insert_Input>;
  productcode?: Maybe<Scalars['String']>;
  service_consumables?: Maybe<Product_Service_Consumable_Arr_Rel_Insert_Input>;
  substance?: Maybe<Product_Substance_Obj_Rel_Insert_Input>;
  substanceid?: Maybe<Scalars['uuid']>;
  updatedAt?: Maybe<Scalars['date']>;
  updatedBy?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Product_Consumable_Max_Fields = {
  __typename?: 'product_consumable_max_fields';
  createdAt?: Maybe<Scalars['date']>;
  createdBy?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  labelFactory?: Maybe<Scalars['String']>;
  productcode?: Maybe<Scalars['String']>;
  substanceid?: Maybe<Scalars['uuid']>;
  updatedAt?: Maybe<Scalars['date']>;
  updatedBy?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "product.consumable" */
export type Product_Consumable_Max_Order_By = {
  createdAt?: Maybe<Order_By>;
  createdBy?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  labelFactory?: Maybe<Order_By>;
  productcode?: Maybe<Order_By>;
  substanceid?: Maybe<Order_By>;
  updatedAt?: Maybe<Order_By>;
  updatedBy?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Product_Consumable_Min_Fields = {
  __typename?: 'product_consumable_min_fields';
  createdAt?: Maybe<Scalars['date']>;
  createdBy?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  labelFactory?: Maybe<Scalars['String']>;
  productcode?: Maybe<Scalars['String']>;
  substanceid?: Maybe<Scalars['uuid']>;
  updatedAt?: Maybe<Scalars['date']>;
  updatedBy?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "product.consumable" */
export type Product_Consumable_Min_Order_By = {
  createdAt?: Maybe<Order_By>;
  createdBy?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  labelFactory?: Maybe<Order_By>;
  productcode?: Maybe<Order_By>;
  substanceid?: Maybe<Order_By>;
  updatedAt?: Maybe<Order_By>;
  updatedBy?: Maybe<Order_By>;
};

/** response of any mutation on the table "product.consumable" */
export type Product_Consumable_Mutation_Response = {
  __typename?: 'product_consumable_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Product_Consumable>;
};

/** input type for inserting object relation for remote table "product.consumable" */
export type Product_Consumable_Obj_Rel_Insert_Input = {
  data: Product_Consumable_Insert_Input;
  /** on conflict condition */
  on_conflict?: Maybe<Product_Consumable_On_Conflict>;
};

/** on conflict condition type for table "product.consumable" */
export type Product_Consumable_On_Conflict = {
  constraint: Product_Consumable_Constraint;
  update_columns?: Array<Product_Consumable_Update_Column>;
  where?: Maybe<Product_Consumable_Bool_Exp>;
};

/** Ordering options when selecting data from "product.consumable". */
export type Product_Consumable_Order_By = {
  category?: Maybe<Order_By>;
  consumableCategory?: Maybe<Product_ConsumableCategory_Order_By>;
  createdAt?: Maybe<Order_By>;
  createdBy?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  labelFactory?: Maybe<Order_By>;
  product?: Maybe<Product_Product_Order_By>;
  productcode?: Maybe<Order_By>;
  service_consumables_aggregate?: Maybe<Product_Service_Consumable_Aggregate_Order_By>;
  substance?: Maybe<Product_Substance_Order_By>;
  substanceid?: Maybe<Order_By>;
  updatedAt?: Maybe<Order_By>;
  updatedBy?: Maybe<Order_By>;
};

/** primary key columns input for table: product_consumable */
export type Product_Consumable_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "product.consumable" */
export enum Product_Consumable_Select_Column {
  /** column name */
  Category = 'category',
  /** column name */
  CreatedAt = 'createdAt',
  /** column name */
  CreatedBy = 'createdBy',
  /** column name */
  Id = 'id',
  /** column name */
  LabelFactory = 'labelFactory',
  /** column name */
  Productcode = 'productcode',
  /** column name */
  Substanceid = 'substanceid',
  /** column name */
  UpdatedAt = 'updatedAt',
  /** column name */
  UpdatedBy = 'updatedBy'
}

/** input type for updating data in table "product.consumable" */
export type Product_Consumable_Set_Input = {
  category?: Maybe<Product_ConsumableCategory_Enum>;
  createdAt?: Maybe<Scalars['date']>;
  createdBy?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  labelFactory?: Maybe<Scalars['String']>;
  productcode?: Maybe<Scalars['String']>;
  substanceid?: Maybe<Scalars['uuid']>;
  updatedAt?: Maybe<Scalars['date']>;
  updatedBy?: Maybe<Scalars['String']>;
};

/** update columns of table "product.consumable" */
export enum Product_Consumable_Update_Column {
  /** column name */
  Category = 'category',
  /** column name */
  CreatedAt = 'createdAt',
  /** column name */
  CreatedBy = 'createdBy',
  /** column name */
  Id = 'id',
  /** column name */
  LabelFactory = 'labelFactory',
  /** column name */
  Productcode = 'productcode',
  /** column name */
  Substanceid = 'substanceid',
  /** column name */
  UpdatedAt = 'updatedAt',
  /** column name */
  UpdatedBy = 'updatedBy'
}

/** columns and relationships of "product.customer_product" */
export type Product_Customer_Product = {
  __typename?: 'product_customer_product';
  id: Scalars['uuid'];
  /** An object relationship */
  product: Product_Product;
  productcode: Scalars['String'];
  thickness: Scalars['numeric'];
};

/** aggregated selection of "product.customer_product" */
export type Product_Customer_Product_Aggregate = {
  __typename?: 'product_customer_product_aggregate';
  aggregate?: Maybe<Product_Customer_Product_Aggregate_Fields>;
  nodes: Array<Product_Customer_Product>;
};

/** aggregate fields of "product.customer_product" */
export type Product_Customer_Product_Aggregate_Fields = {
  __typename?: 'product_customer_product_aggregate_fields';
  avg?: Maybe<Product_Customer_Product_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Product_Customer_Product_Max_Fields>;
  min?: Maybe<Product_Customer_Product_Min_Fields>;
  stddev?: Maybe<Product_Customer_Product_Stddev_Fields>;
  stddev_pop?: Maybe<Product_Customer_Product_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Product_Customer_Product_Stddev_Samp_Fields>;
  sum?: Maybe<Product_Customer_Product_Sum_Fields>;
  var_pop?: Maybe<Product_Customer_Product_Var_Pop_Fields>;
  var_samp?: Maybe<Product_Customer_Product_Var_Samp_Fields>;
  variance?: Maybe<Product_Customer_Product_Variance_Fields>;
};


/** aggregate fields of "product.customer_product" */
export type Product_Customer_Product_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Product_Customer_Product_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "product.customer_product" */
export type Product_Customer_Product_Aggregate_Order_By = {
  avg?: Maybe<Product_Customer_Product_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Product_Customer_Product_Max_Order_By>;
  min?: Maybe<Product_Customer_Product_Min_Order_By>;
  stddev?: Maybe<Product_Customer_Product_Stddev_Order_By>;
  stddev_pop?: Maybe<Product_Customer_Product_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Product_Customer_Product_Stddev_Samp_Order_By>;
  sum?: Maybe<Product_Customer_Product_Sum_Order_By>;
  var_pop?: Maybe<Product_Customer_Product_Var_Pop_Order_By>;
  var_samp?: Maybe<Product_Customer_Product_Var_Samp_Order_By>;
  variance?: Maybe<Product_Customer_Product_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "product.customer_product" */
export type Product_Customer_Product_Arr_Rel_Insert_Input = {
  data: Array<Product_Customer_Product_Insert_Input>;
  /** on conflict condition */
  on_conflict?: Maybe<Product_Customer_Product_On_Conflict>;
};

/** aggregate avg on columns */
export type Product_Customer_Product_Avg_Fields = {
  __typename?: 'product_customer_product_avg_fields';
  thickness?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "product.customer_product" */
export type Product_Customer_Product_Avg_Order_By = {
  thickness?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "product.customer_product". All fields are combined with a logical 'AND'. */
export type Product_Customer_Product_Bool_Exp = {
  _and?: Maybe<Array<Product_Customer_Product_Bool_Exp>>;
  _not?: Maybe<Product_Customer_Product_Bool_Exp>;
  _or?: Maybe<Array<Product_Customer_Product_Bool_Exp>>;
  id?: Maybe<Uuid_Comparison_Exp>;
  product?: Maybe<Product_Product_Bool_Exp>;
  productcode?: Maybe<String_Comparison_Exp>;
  thickness?: Maybe<Numeric_Comparison_Exp>;
};

/** unique or primary key constraints on table "product.customer_product" */
export enum Product_Customer_Product_Constraint {
  /** unique or primary key constraint */
  CustomerProductPkey = 'customer_product_pkey'
}

/** input type for incrementing numeric columns in table "product.customer_product" */
export type Product_Customer_Product_Inc_Input = {
  thickness?: Maybe<Scalars['numeric']>;
};

/** input type for inserting data into table "product.customer_product" */
export type Product_Customer_Product_Insert_Input = {
  id?: Maybe<Scalars['uuid']>;
  product?: Maybe<Product_Product_Obj_Rel_Insert_Input>;
  productcode?: Maybe<Scalars['String']>;
  thickness?: Maybe<Scalars['numeric']>;
};

/** aggregate max on columns */
export type Product_Customer_Product_Max_Fields = {
  __typename?: 'product_customer_product_max_fields';
  id?: Maybe<Scalars['uuid']>;
  productcode?: Maybe<Scalars['String']>;
  thickness?: Maybe<Scalars['numeric']>;
};

/** order by max() on columns of table "product.customer_product" */
export type Product_Customer_Product_Max_Order_By = {
  id?: Maybe<Order_By>;
  productcode?: Maybe<Order_By>;
  thickness?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Product_Customer_Product_Min_Fields = {
  __typename?: 'product_customer_product_min_fields';
  id?: Maybe<Scalars['uuid']>;
  productcode?: Maybe<Scalars['String']>;
  thickness?: Maybe<Scalars['numeric']>;
};

/** order by min() on columns of table "product.customer_product" */
export type Product_Customer_Product_Min_Order_By = {
  id?: Maybe<Order_By>;
  productcode?: Maybe<Order_By>;
  thickness?: Maybe<Order_By>;
};

/** response of any mutation on the table "product.customer_product" */
export type Product_Customer_Product_Mutation_Response = {
  __typename?: 'product_customer_product_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Product_Customer_Product>;
};

/** input type for inserting object relation for remote table "product.customer_product" */
export type Product_Customer_Product_Obj_Rel_Insert_Input = {
  data: Product_Customer_Product_Insert_Input;
  /** on conflict condition */
  on_conflict?: Maybe<Product_Customer_Product_On_Conflict>;
};

/** on conflict condition type for table "product.customer_product" */
export type Product_Customer_Product_On_Conflict = {
  constraint: Product_Customer_Product_Constraint;
  update_columns?: Array<Product_Customer_Product_Update_Column>;
  where?: Maybe<Product_Customer_Product_Bool_Exp>;
};

/** Ordering options when selecting data from "product.customer_product". */
export type Product_Customer_Product_Order_By = {
  id?: Maybe<Order_By>;
  product?: Maybe<Product_Product_Order_By>;
  productcode?: Maybe<Order_By>;
  thickness?: Maybe<Order_By>;
};

/** primary key columns input for table: product_customer_product */
export type Product_Customer_Product_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "product.customer_product" */
export enum Product_Customer_Product_Select_Column {
  /** column name */
  Id = 'id',
  /** column name */
  Productcode = 'productcode',
  /** column name */
  Thickness = 'thickness'
}

/** input type for updating data in table "product.customer_product" */
export type Product_Customer_Product_Set_Input = {
  id?: Maybe<Scalars['uuid']>;
  productcode?: Maybe<Scalars['String']>;
  thickness?: Maybe<Scalars['numeric']>;
};

/** aggregate stddev on columns */
export type Product_Customer_Product_Stddev_Fields = {
  __typename?: 'product_customer_product_stddev_fields';
  thickness?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "product.customer_product" */
export type Product_Customer_Product_Stddev_Order_By = {
  thickness?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Product_Customer_Product_Stddev_Pop_Fields = {
  __typename?: 'product_customer_product_stddev_pop_fields';
  thickness?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "product.customer_product" */
export type Product_Customer_Product_Stddev_Pop_Order_By = {
  thickness?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Product_Customer_Product_Stddev_Samp_Fields = {
  __typename?: 'product_customer_product_stddev_samp_fields';
  thickness?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "product.customer_product" */
export type Product_Customer_Product_Stddev_Samp_Order_By = {
  thickness?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Product_Customer_Product_Sum_Fields = {
  __typename?: 'product_customer_product_sum_fields';
  thickness?: Maybe<Scalars['numeric']>;
};

/** order by sum() on columns of table "product.customer_product" */
export type Product_Customer_Product_Sum_Order_By = {
  thickness?: Maybe<Order_By>;
};

/** update columns of table "product.customer_product" */
export enum Product_Customer_Product_Update_Column {
  /** column name */
  Id = 'id',
  /** column name */
  Productcode = 'productcode',
  /** column name */
  Thickness = 'thickness'
}

/** aggregate var_pop on columns */
export type Product_Customer_Product_Var_Pop_Fields = {
  __typename?: 'product_customer_product_var_pop_fields';
  thickness?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "product.customer_product" */
export type Product_Customer_Product_Var_Pop_Order_By = {
  thickness?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Product_Customer_Product_Var_Samp_Fields = {
  __typename?: 'product_customer_product_var_samp_fields';
  thickness?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "product.customer_product" */
export type Product_Customer_Product_Var_Samp_Order_By = {
  thickness?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Product_Customer_Product_Variance_Fields = {
  __typename?: 'product_customer_product_variance_fields';
  thickness?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "product.customer_product" */
export type Product_Customer_Product_Variance_Order_By = {
  thickness?: Maybe<Order_By>;
};

/** columns and relationships of "product.glass" */
export type Product_Glass = {
  __typename?: 'product_glass';
  color?: Maybe<Product_GlassColor_Enum>;
  createdAt?: Maybe<Scalars['date']>;
  createdBy?: Maybe<Scalars['uuid']>;
  /** An object relationship */
  glassColor?: Maybe<Product_GlassColor>;
  /** An object relationship */
  glassType?: Maybe<Product_GlassType>;
  id: Scalars['uuid'];
  /** An object relationship */
  product: Product_Product;
  productcode: Scalars['String'];
  /** An object relationship */
  substance?: Maybe<Product_Substance>;
  substanceid: Scalars['uuid'];
  thickness: Scalars['Int'];
  type?: Maybe<Product_GlassType_Enum>;
  updatedAt?: Maybe<Scalars['date']>;
  updatedBy?: Maybe<Scalars['uuid']>;
};

/** columns and relationships of "product.glassColor" */
export type Product_GlassColor = {
  __typename?: 'product_glassColor';
  color: Scalars['String'];
  /** An array relationship */
  glasses: Array<Product_Glass>;
  /** An aggregate relationship */
  glasses_aggregate: Product_Glass_Aggregate;
};


/** columns and relationships of "product.glassColor" */
export type Product_GlassColorGlassesArgs = {
  distinct_on?: Maybe<Array<Product_Glass_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Glass_Order_By>>;
  where?: Maybe<Product_Glass_Bool_Exp>;
};


/** columns and relationships of "product.glassColor" */
export type Product_GlassColorGlasses_AggregateArgs = {
  distinct_on?: Maybe<Array<Product_Glass_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Glass_Order_By>>;
  where?: Maybe<Product_Glass_Bool_Exp>;
};

/** aggregated selection of "product.glassColor" */
export type Product_GlassColor_Aggregate = {
  __typename?: 'product_glassColor_aggregate';
  aggregate?: Maybe<Product_GlassColor_Aggregate_Fields>;
  nodes: Array<Product_GlassColor>;
};

/** aggregate fields of "product.glassColor" */
export type Product_GlassColor_Aggregate_Fields = {
  __typename?: 'product_glassColor_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Product_GlassColor_Max_Fields>;
  min?: Maybe<Product_GlassColor_Min_Fields>;
};


/** aggregate fields of "product.glassColor" */
export type Product_GlassColor_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Product_GlassColor_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** Boolean expression to filter rows from the table "product.glassColor". All fields are combined with a logical 'AND'. */
export type Product_GlassColor_Bool_Exp = {
  _and?: Maybe<Array<Product_GlassColor_Bool_Exp>>;
  _not?: Maybe<Product_GlassColor_Bool_Exp>;
  _or?: Maybe<Array<Product_GlassColor_Bool_Exp>>;
  color?: Maybe<String_Comparison_Exp>;
  glasses?: Maybe<Product_Glass_Bool_Exp>;
};

/** unique or primary key constraints on table "product.glassColor" */
export enum Product_GlassColor_Constraint {
  /** unique or primary key constraint */
  GlassColorPkey = 'glassColor_pkey'
}

export enum Product_GlassColor_Enum {
  Blanc = 'blanc',
  Vert = 'vert'
}

/** Boolean expression to compare columns of type "product_glassColor_enum". All fields are combined with logical 'AND'. */
export type Product_GlassColor_Enum_Comparison_Exp = {
  _eq?: Maybe<Product_GlassColor_Enum>;
  _in?: Maybe<Array<Product_GlassColor_Enum>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _neq?: Maybe<Product_GlassColor_Enum>;
  _nin?: Maybe<Array<Product_GlassColor_Enum>>;
};

/** input type for inserting data into table "product.glassColor" */
export type Product_GlassColor_Insert_Input = {
  color?: Maybe<Scalars['String']>;
  glasses?: Maybe<Product_Glass_Arr_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Product_GlassColor_Max_Fields = {
  __typename?: 'product_glassColor_max_fields';
  color?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type Product_GlassColor_Min_Fields = {
  __typename?: 'product_glassColor_min_fields';
  color?: Maybe<Scalars['String']>;
};

/** response of any mutation on the table "product.glassColor" */
export type Product_GlassColor_Mutation_Response = {
  __typename?: 'product_glassColor_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Product_GlassColor>;
};

/** input type for inserting object relation for remote table "product.glassColor" */
export type Product_GlassColor_Obj_Rel_Insert_Input = {
  data: Product_GlassColor_Insert_Input;
  /** on conflict condition */
  on_conflict?: Maybe<Product_GlassColor_On_Conflict>;
};

/** on conflict condition type for table "product.glassColor" */
export type Product_GlassColor_On_Conflict = {
  constraint: Product_GlassColor_Constraint;
  update_columns?: Array<Product_GlassColor_Update_Column>;
  where?: Maybe<Product_GlassColor_Bool_Exp>;
};

/** Ordering options when selecting data from "product.glassColor". */
export type Product_GlassColor_Order_By = {
  color?: Maybe<Order_By>;
  glasses_aggregate?: Maybe<Product_Glass_Aggregate_Order_By>;
};

/** primary key columns input for table: product_glassColor */
export type Product_GlassColor_Pk_Columns_Input = {
  color: Scalars['String'];
};

/** select columns of table "product.glassColor" */
export enum Product_GlassColor_Select_Column {
  /** column name */
  Color = 'color'
}

/** input type for updating data in table "product.glassColor" */
export type Product_GlassColor_Set_Input = {
  color?: Maybe<Scalars['String']>;
};

/** update columns of table "product.glassColor" */
export enum Product_GlassColor_Update_Column {
  /** column name */
  Color = 'color'
}

/** columns and relationships of "product.glassThickness" */
export type Product_GlassThickness = {
  __typename?: 'product_glassThickness';
  thickness: Scalars['String'];
};

/** aggregated selection of "product.glassThickness" */
export type Product_GlassThickness_Aggregate = {
  __typename?: 'product_glassThickness_aggregate';
  aggregate?: Maybe<Product_GlassThickness_Aggregate_Fields>;
  nodes: Array<Product_GlassThickness>;
};

/** aggregate fields of "product.glassThickness" */
export type Product_GlassThickness_Aggregate_Fields = {
  __typename?: 'product_glassThickness_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Product_GlassThickness_Max_Fields>;
  min?: Maybe<Product_GlassThickness_Min_Fields>;
};


/** aggregate fields of "product.glassThickness" */
export type Product_GlassThickness_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Product_GlassThickness_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** Boolean expression to filter rows from the table "product.glassThickness". All fields are combined with a logical 'AND'. */
export type Product_GlassThickness_Bool_Exp = {
  _and?: Maybe<Array<Product_GlassThickness_Bool_Exp>>;
  _not?: Maybe<Product_GlassThickness_Bool_Exp>;
  _or?: Maybe<Array<Product_GlassThickness_Bool_Exp>>;
  thickness?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "product.glassThickness" */
export enum Product_GlassThickness_Constraint {
  /** unique or primary key constraint */
  GlassThicknessPkey = 'glassThickness_pkey'
}

/** input type for inserting data into table "product.glassThickness" */
export type Product_GlassThickness_Insert_Input = {
  thickness?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Product_GlassThickness_Max_Fields = {
  __typename?: 'product_glassThickness_max_fields';
  thickness?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type Product_GlassThickness_Min_Fields = {
  __typename?: 'product_glassThickness_min_fields';
  thickness?: Maybe<Scalars['String']>;
};

/** response of any mutation on the table "product.glassThickness" */
export type Product_GlassThickness_Mutation_Response = {
  __typename?: 'product_glassThickness_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Product_GlassThickness>;
};

/** on conflict condition type for table "product.glassThickness" */
export type Product_GlassThickness_On_Conflict = {
  constraint: Product_GlassThickness_Constraint;
  update_columns?: Array<Product_GlassThickness_Update_Column>;
  where?: Maybe<Product_GlassThickness_Bool_Exp>;
};

/** Ordering options when selecting data from "product.glassThickness". */
export type Product_GlassThickness_Order_By = {
  thickness?: Maybe<Order_By>;
};

/** primary key columns input for table: product_glassThickness */
export type Product_GlassThickness_Pk_Columns_Input = {
  thickness: Scalars['String'];
};

/** select columns of table "product.glassThickness" */
export enum Product_GlassThickness_Select_Column {
  /** column name */
  Thickness = 'thickness'
}

/** input type for updating data in table "product.glassThickness" */
export type Product_GlassThickness_Set_Input = {
  thickness?: Maybe<Scalars['String']>;
};

/** update columns of table "product.glassThickness" */
export enum Product_GlassThickness_Update_Column {
  /** column name */
  Thickness = 'thickness'
}

/** columns and relationships of "product.glassType" */
export type Product_GlassType = {
  __typename?: 'product_glassType';
  /** An array relationship */
  glasses: Array<Product_Glass>;
  /** An aggregate relationship */
  glasses_aggregate: Product_Glass_Aggregate;
  type: Scalars['String'];
};


/** columns and relationships of "product.glassType" */
export type Product_GlassTypeGlassesArgs = {
  distinct_on?: Maybe<Array<Product_Glass_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Glass_Order_By>>;
  where?: Maybe<Product_Glass_Bool_Exp>;
};


/** columns and relationships of "product.glassType" */
export type Product_GlassTypeGlasses_AggregateArgs = {
  distinct_on?: Maybe<Array<Product_Glass_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Glass_Order_By>>;
  where?: Maybe<Product_Glass_Bool_Exp>;
};

/** aggregated selection of "product.glassType" */
export type Product_GlassType_Aggregate = {
  __typename?: 'product_glassType_aggregate';
  aggregate?: Maybe<Product_GlassType_Aggregate_Fields>;
  nodes: Array<Product_GlassType>;
};

/** aggregate fields of "product.glassType" */
export type Product_GlassType_Aggregate_Fields = {
  __typename?: 'product_glassType_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Product_GlassType_Max_Fields>;
  min?: Maybe<Product_GlassType_Min_Fields>;
};


/** aggregate fields of "product.glassType" */
export type Product_GlassType_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Product_GlassType_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** Boolean expression to filter rows from the table "product.glassType". All fields are combined with a logical 'AND'. */
export type Product_GlassType_Bool_Exp = {
  _and?: Maybe<Array<Product_GlassType_Bool_Exp>>;
  _not?: Maybe<Product_GlassType_Bool_Exp>;
  _or?: Maybe<Array<Product_GlassType_Bool_Exp>>;
  glasses?: Maybe<Product_Glass_Bool_Exp>;
  type?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "product.glassType" */
export enum Product_GlassType_Constraint {
  /** unique or primary key constraint */
  GlassTypePkey = 'glassType_pkey'
}

export enum Product_GlassType_Enum {
  Bronze = 'bronze',
  Karatachi = 'karatachi',
  Normale = 'normale',
  Test = 'test'
}

/** Boolean expression to compare columns of type "product_glassType_enum". All fields are combined with logical 'AND'. */
export type Product_GlassType_Enum_Comparison_Exp = {
  _eq?: Maybe<Product_GlassType_Enum>;
  _in?: Maybe<Array<Product_GlassType_Enum>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _neq?: Maybe<Product_GlassType_Enum>;
  _nin?: Maybe<Array<Product_GlassType_Enum>>;
};

/** input type for inserting data into table "product.glassType" */
export type Product_GlassType_Insert_Input = {
  glasses?: Maybe<Product_Glass_Arr_Rel_Insert_Input>;
  type?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Product_GlassType_Max_Fields = {
  __typename?: 'product_glassType_max_fields';
  type?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type Product_GlassType_Min_Fields = {
  __typename?: 'product_glassType_min_fields';
  type?: Maybe<Scalars['String']>;
};

/** response of any mutation on the table "product.glassType" */
export type Product_GlassType_Mutation_Response = {
  __typename?: 'product_glassType_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Product_GlassType>;
};

/** input type for inserting object relation for remote table "product.glassType" */
export type Product_GlassType_Obj_Rel_Insert_Input = {
  data: Product_GlassType_Insert_Input;
  /** on conflict condition */
  on_conflict?: Maybe<Product_GlassType_On_Conflict>;
};

/** on conflict condition type for table "product.glassType" */
export type Product_GlassType_On_Conflict = {
  constraint: Product_GlassType_Constraint;
  update_columns?: Array<Product_GlassType_Update_Column>;
  where?: Maybe<Product_GlassType_Bool_Exp>;
};

/** Ordering options when selecting data from "product.glassType". */
export type Product_GlassType_Order_By = {
  glasses_aggregate?: Maybe<Product_Glass_Aggregate_Order_By>;
  type?: Maybe<Order_By>;
};

/** primary key columns input for table: product_glassType */
export type Product_GlassType_Pk_Columns_Input = {
  type: Scalars['String'];
};

/** select columns of table "product.glassType" */
export enum Product_GlassType_Select_Column {
  /** column name */
  Type = 'type'
}

/** input type for updating data in table "product.glassType" */
export type Product_GlassType_Set_Input = {
  type?: Maybe<Scalars['String']>;
};

/** update columns of table "product.glassType" */
export enum Product_GlassType_Update_Column {
  /** column name */
  Type = 'type'
}

/** aggregated selection of "product.glass" */
export type Product_Glass_Aggregate = {
  __typename?: 'product_glass_aggregate';
  aggregate?: Maybe<Product_Glass_Aggregate_Fields>;
  nodes: Array<Product_Glass>;
};

/** aggregate fields of "product.glass" */
export type Product_Glass_Aggregate_Fields = {
  __typename?: 'product_glass_aggregate_fields';
  avg?: Maybe<Product_Glass_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Product_Glass_Max_Fields>;
  min?: Maybe<Product_Glass_Min_Fields>;
  stddev?: Maybe<Product_Glass_Stddev_Fields>;
  stddev_pop?: Maybe<Product_Glass_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Product_Glass_Stddev_Samp_Fields>;
  sum?: Maybe<Product_Glass_Sum_Fields>;
  var_pop?: Maybe<Product_Glass_Var_Pop_Fields>;
  var_samp?: Maybe<Product_Glass_Var_Samp_Fields>;
  variance?: Maybe<Product_Glass_Variance_Fields>;
};


/** aggregate fields of "product.glass" */
export type Product_Glass_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Product_Glass_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "product.glass" */
export type Product_Glass_Aggregate_Order_By = {
  avg?: Maybe<Product_Glass_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Product_Glass_Max_Order_By>;
  min?: Maybe<Product_Glass_Min_Order_By>;
  stddev?: Maybe<Product_Glass_Stddev_Order_By>;
  stddev_pop?: Maybe<Product_Glass_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Product_Glass_Stddev_Samp_Order_By>;
  sum?: Maybe<Product_Glass_Sum_Order_By>;
  var_pop?: Maybe<Product_Glass_Var_Pop_Order_By>;
  var_samp?: Maybe<Product_Glass_Var_Samp_Order_By>;
  variance?: Maybe<Product_Glass_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "product.glass" */
export type Product_Glass_Arr_Rel_Insert_Input = {
  data: Array<Product_Glass_Insert_Input>;
  /** on conflict condition */
  on_conflict?: Maybe<Product_Glass_On_Conflict>;
};

/** aggregate avg on columns */
export type Product_Glass_Avg_Fields = {
  __typename?: 'product_glass_avg_fields';
  thickness?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "product.glass" */
export type Product_Glass_Avg_Order_By = {
  thickness?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "product.glass". All fields are combined with a logical 'AND'. */
export type Product_Glass_Bool_Exp = {
  _and?: Maybe<Array<Product_Glass_Bool_Exp>>;
  _not?: Maybe<Product_Glass_Bool_Exp>;
  _or?: Maybe<Array<Product_Glass_Bool_Exp>>;
  color?: Maybe<Product_GlassColor_Enum_Comparison_Exp>;
  createdAt?: Maybe<Date_Comparison_Exp>;
  createdBy?: Maybe<Uuid_Comparison_Exp>;
  glassColor?: Maybe<Product_GlassColor_Bool_Exp>;
  glassType?: Maybe<Product_GlassType_Bool_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  product?: Maybe<Product_Product_Bool_Exp>;
  productcode?: Maybe<String_Comparison_Exp>;
  substance?: Maybe<Product_Substance_Bool_Exp>;
  substanceid?: Maybe<Uuid_Comparison_Exp>;
  thickness?: Maybe<Int_Comparison_Exp>;
  type?: Maybe<Product_GlassType_Enum_Comparison_Exp>;
  updatedAt?: Maybe<Date_Comparison_Exp>;
  updatedBy?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "product.glass" */
export enum Product_Glass_Constraint {
  /** unique or primary key constraint */
  GlassPkey = 'glass_pkey',
  /** unique or primary key constraint */
  GlassProductCodeKey = 'glass_productCode_key',
  /** unique or primary key constraint */
  GlassSubstanceidKey = 'glass_substanceid_key'
}

/** input type for incrementing numeric columns in table "product.glass" */
export type Product_Glass_Inc_Input = {
  thickness?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "product.glass" */
export type Product_Glass_Insert_Input = {
  color?: Maybe<Product_GlassColor_Enum>;
  createdAt?: Maybe<Scalars['date']>;
  createdBy?: Maybe<Scalars['uuid']>;
  glassColor?: Maybe<Product_GlassColor_Obj_Rel_Insert_Input>;
  glassType?: Maybe<Product_GlassType_Obj_Rel_Insert_Input>;
  id?: Maybe<Scalars['uuid']>;
  product?: Maybe<Product_Product_Obj_Rel_Insert_Input>;
  productcode?: Maybe<Scalars['String']>;
  substance?: Maybe<Product_Substance_Obj_Rel_Insert_Input>;
  substanceid?: Maybe<Scalars['uuid']>;
  thickness?: Maybe<Scalars['Int']>;
  type?: Maybe<Product_GlassType_Enum>;
  updatedAt?: Maybe<Scalars['date']>;
  updatedBy?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Product_Glass_Max_Fields = {
  __typename?: 'product_glass_max_fields';
  createdAt?: Maybe<Scalars['date']>;
  createdBy?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  productcode?: Maybe<Scalars['String']>;
  substanceid?: Maybe<Scalars['uuid']>;
  thickness?: Maybe<Scalars['Int']>;
  updatedAt?: Maybe<Scalars['date']>;
  updatedBy?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "product.glass" */
export type Product_Glass_Max_Order_By = {
  createdAt?: Maybe<Order_By>;
  createdBy?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  productcode?: Maybe<Order_By>;
  substanceid?: Maybe<Order_By>;
  thickness?: Maybe<Order_By>;
  updatedAt?: Maybe<Order_By>;
  updatedBy?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Product_Glass_Min_Fields = {
  __typename?: 'product_glass_min_fields';
  createdAt?: Maybe<Scalars['date']>;
  createdBy?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  productcode?: Maybe<Scalars['String']>;
  substanceid?: Maybe<Scalars['uuid']>;
  thickness?: Maybe<Scalars['Int']>;
  updatedAt?: Maybe<Scalars['date']>;
  updatedBy?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "product.glass" */
export type Product_Glass_Min_Order_By = {
  createdAt?: Maybe<Order_By>;
  createdBy?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  productcode?: Maybe<Order_By>;
  substanceid?: Maybe<Order_By>;
  thickness?: Maybe<Order_By>;
  updatedAt?: Maybe<Order_By>;
  updatedBy?: Maybe<Order_By>;
};

/** response of any mutation on the table "product.glass" */
export type Product_Glass_Mutation_Response = {
  __typename?: 'product_glass_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Product_Glass>;
};

/** input type for inserting object relation for remote table "product.glass" */
export type Product_Glass_Obj_Rel_Insert_Input = {
  data: Product_Glass_Insert_Input;
  /** on conflict condition */
  on_conflict?: Maybe<Product_Glass_On_Conflict>;
};

/** on conflict condition type for table "product.glass" */
export type Product_Glass_On_Conflict = {
  constraint: Product_Glass_Constraint;
  update_columns?: Array<Product_Glass_Update_Column>;
  where?: Maybe<Product_Glass_Bool_Exp>;
};

/** Ordering options when selecting data from "product.glass". */
export type Product_Glass_Order_By = {
  color?: Maybe<Order_By>;
  createdAt?: Maybe<Order_By>;
  createdBy?: Maybe<Order_By>;
  glassColor?: Maybe<Product_GlassColor_Order_By>;
  glassType?: Maybe<Product_GlassType_Order_By>;
  id?: Maybe<Order_By>;
  product?: Maybe<Product_Product_Order_By>;
  productcode?: Maybe<Order_By>;
  substance?: Maybe<Product_Substance_Order_By>;
  substanceid?: Maybe<Order_By>;
  thickness?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
  updatedAt?: Maybe<Order_By>;
  updatedBy?: Maybe<Order_By>;
};

/** primary key columns input for table: product_glass */
export type Product_Glass_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "product.glass" */
export enum Product_Glass_Select_Column {
  /** column name */
  Color = 'color',
  /** column name */
  CreatedAt = 'createdAt',
  /** column name */
  CreatedBy = 'createdBy',
  /** column name */
  Id = 'id',
  /** column name */
  Productcode = 'productcode',
  /** column name */
  Substanceid = 'substanceid',
  /** column name */
  Thickness = 'thickness',
  /** column name */
  Type = 'type',
  /** column name */
  UpdatedAt = 'updatedAt',
  /** column name */
  UpdatedBy = 'updatedBy'
}

/** input type for updating data in table "product.glass" */
export type Product_Glass_Set_Input = {
  color?: Maybe<Product_GlassColor_Enum>;
  createdAt?: Maybe<Scalars['date']>;
  createdBy?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  productcode?: Maybe<Scalars['String']>;
  substanceid?: Maybe<Scalars['uuid']>;
  thickness?: Maybe<Scalars['Int']>;
  type?: Maybe<Product_GlassType_Enum>;
  updatedAt?: Maybe<Scalars['date']>;
  updatedBy?: Maybe<Scalars['uuid']>;
};

/** aggregate stddev on columns */
export type Product_Glass_Stddev_Fields = {
  __typename?: 'product_glass_stddev_fields';
  thickness?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "product.glass" */
export type Product_Glass_Stddev_Order_By = {
  thickness?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Product_Glass_Stddev_Pop_Fields = {
  __typename?: 'product_glass_stddev_pop_fields';
  thickness?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "product.glass" */
export type Product_Glass_Stddev_Pop_Order_By = {
  thickness?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Product_Glass_Stddev_Samp_Fields = {
  __typename?: 'product_glass_stddev_samp_fields';
  thickness?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "product.glass" */
export type Product_Glass_Stddev_Samp_Order_By = {
  thickness?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Product_Glass_Sum_Fields = {
  __typename?: 'product_glass_sum_fields';
  thickness?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "product.glass" */
export type Product_Glass_Sum_Order_By = {
  thickness?: Maybe<Order_By>;
};

/** update columns of table "product.glass" */
export enum Product_Glass_Update_Column {
  /** column name */
  Color = 'color',
  /** column name */
  CreatedAt = 'createdAt',
  /** column name */
  CreatedBy = 'createdBy',
  /** column name */
  Id = 'id',
  /** column name */
  Productcode = 'productcode',
  /** column name */
  Substanceid = 'substanceid',
  /** column name */
  Thickness = 'thickness',
  /** column name */
  Type = 'type',
  /** column name */
  UpdatedAt = 'updatedAt',
  /** column name */
  UpdatedBy = 'updatedBy'
}

/** aggregate var_pop on columns */
export type Product_Glass_Var_Pop_Fields = {
  __typename?: 'product_glass_var_pop_fields';
  thickness?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "product.glass" */
export type Product_Glass_Var_Pop_Order_By = {
  thickness?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Product_Glass_Var_Samp_Fields = {
  __typename?: 'product_glass_var_samp_fields';
  thickness?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "product.glass" */
export type Product_Glass_Var_Samp_Order_By = {
  thickness?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Product_Glass_Variance_Fields = {
  __typename?: 'product_glass_variance_fields';
  thickness?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "product.glass" */
export type Product_Glass_Variance_Order_By = {
  thickness?: Maybe<Order_By>;
};

/** columns and relationships of "product.product" */
export type Product_Product = {
  __typename?: 'product_product';
  /** An object relationship */
  accessory?: Maybe<Product_Accessory>;
  code: Scalars['String'];
  /** An array relationship */
  companies: Array<Product_Product_Companies_View>;
  /** An aggregate relationship */
  companies_aggregate: Product_Product_Companies_View_Aggregate;
  /** An object relationship */
  consumable?: Maybe<Product_Consumable>;
  /** An object relationship */
  customerItem?: Maybe<Product_Customer_Product>;
  /** An array relationship */
  customer_products: Array<Product_Customer_Product>;
  /** An aggregate relationship */
  customer_products_aggregate: Product_Customer_Product_Aggregate;
  /** An object relationship */
  glass?: Maybe<Product_Glass>;
  label: Scalars['String'];
  price: Scalars['Float'];
  priceMax: Scalars['Float'];
  priceMin: Scalars['Float'];
  /** An array relationship */
  product_companies: Array<Product_Product_Companies>;
  /** An aggregate relationship */
  product_companies_aggregate: Product_Product_Companies_Aggregate;
  /** An array relationship */
  product_drafts: Array<Sales_Product_Draft>;
  /** An aggregate relationship */
  product_drafts_aggregate: Sales_Product_Draft_Aggregate;
  /** An object relationship */
  product_unit: Product_Product_Unit;
  /** An object relationship */
  service?: Maybe<Product_Service>;
  unit: Product_Product_Unit_Enum;
};


/** columns and relationships of "product.product" */
export type Product_ProductCompaniesArgs = {
  distinct_on?: Maybe<Array<Product_Product_Companies_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Product_Companies_View_Order_By>>;
  where?: Maybe<Product_Product_Companies_View_Bool_Exp>;
};


/** columns and relationships of "product.product" */
export type Product_ProductCompanies_AggregateArgs = {
  distinct_on?: Maybe<Array<Product_Product_Companies_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Product_Companies_View_Order_By>>;
  where?: Maybe<Product_Product_Companies_View_Bool_Exp>;
};


/** columns and relationships of "product.product" */
export type Product_ProductCustomer_ProductsArgs = {
  distinct_on?: Maybe<Array<Product_Customer_Product_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Customer_Product_Order_By>>;
  where?: Maybe<Product_Customer_Product_Bool_Exp>;
};


/** columns and relationships of "product.product" */
export type Product_ProductCustomer_Products_AggregateArgs = {
  distinct_on?: Maybe<Array<Product_Customer_Product_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Customer_Product_Order_By>>;
  where?: Maybe<Product_Customer_Product_Bool_Exp>;
};


/** columns and relationships of "product.product" */
export type Product_ProductProduct_CompaniesArgs = {
  distinct_on?: Maybe<Array<Product_Product_Companies_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Product_Companies_Order_By>>;
  where?: Maybe<Product_Product_Companies_Bool_Exp>;
};


/** columns and relationships of "product.product" */
export type Product_ProductProduct_Companies_AggregateArgs = {
  distinct_on?: Maybe<Array<Product_Product_Companies_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Product_Companies_Order_By>>;
  where?: Maybe<Product_Product_Companies_Bool_Exp>;
};


/** columns and relationships of "product.product" */
export type Product_ProductProduct_DraftsArgs = {
  distinct_on?: Maybe<Array<Sales_Product_Draft_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Product_Draft_Order_By>>;
  where?: Maybe<Sales_Product_Draft_Bool_Exp>;
};


/** columns and relationships of "product.product" */
export type Product_ProductProduct_Drafts_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Product_Draft_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Product_Draft_Order_By>>;
  where?: Maybe<Sales_Product_Draft_Bool_Exp>;
};

/** columns and relationships of "product.product_accessory_view" */
export type Product_Product_Accessory_View = {
  __typename?: 'product_product_accessory_view';
  code?: Maybe<Scalars['String']>;
  label?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['Float']>;
  priceMax?: Maybe<Scalars['Float']>;
  priceMin?: Maybe<Scalars['Float']>;
  substanceid?: Maybe<Scalars['uuid']>;
  unit?: Maybe<Scalars['String']>;
};

/** aggregated selection of "product.product_accessory_view" */
export type Product_Product_Accessory_View_Aggregate = {
  __typename?: 'product_product_accessory_view_aggregate';
  aggregate?: Maybe<Product_Product_Accessory_View_Aggregate_Fields>;
  nodes: Array<Product_Product_Accessory_View>;
};

/** aggregate fields of "product.product_accessory_view" */
export type Product_Product_Accessory_View_Aggregate_Fields = {
  __typename?: 'product_product_accessory_view_aggregate_fields';
  avg?: Maybe<Product_Product_Accessory_View_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Product_Product_Accessory_View_Max_Fields>;
  min?: Maybe<Product_Product_Accessory_View_Min_Fields>;
  stddev?: Maybe<Product_Product_Accessory_View_Stddev_Fields>;
  stddev_pop?: Maybe<Product_Product_Accessory_View_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Product_Product_Accessory_View_Stddev_Samp_Fields>;
  sum?: Maybe<Product_Product_Accessory_View_Sum_Fields>;
  var_pop?: Maybe<Product_Product_Accessory_View_Var_Pop_Fields>;
  var_samp?: Maybe<Product_Product_Accessory_View_Var_Samp_Fields>;
  variance?: Maybe<Product_Product_Accessory_View_Variance_Fields>;
};


/** aggregate fields of "product.product_accessory_view" */
export type Product_Product_Accessory_View_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Product_Product_Accessory_View_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** aggregate avg on columns */
export type Product_Product_Accessory_View_Avg_Fields = {
  __typename?: 'product_product_accessory_view_avg_fields';
  price?: Maybe<Scalars['Float']>;
  priceMax?: Maybe<Scalars['Float']>;
  priceMin?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "product.product_accessory_view". All fields are combined with a logical 'AND'. */
export type Product_Product_Accessory_View_Bool_Exp = {
  _and?: Maybe<Array<Product_Product_Accessory_View_Bool_Exp>>;
  _not?: Maybe<Product_Product_Accessory_View_Bool_Exp>;
  _or?: Maybe<Array<Product_Product_Accessory_View_Bool_Exp>>;
  code?: Maybe<String_Comparison_Exp>;
  label?: Maybe<String_Comparison_Exp>;
  price?: Maybe<Float_Comparison_Exp>;
  priceMax?: Maybe<Float_Comparison_Exp>;
  priceMin?: Maybe<Float_Comparison_Exp>;
  substanceid?: Maybe<Uuid_Comparison_Exp>;
  unit?: Maybe<String_Comparison_Exp>;
};

/** input type for inserting data into table "product.product_accessory_view" */
export type Product_Product_Accessory_View_Insert_Input = {
  code?: Maybe<Scalars['String']>;
  label?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['Float']>;
  priceMax?: Maybe<Scalars['Float']>;
  priceMin?: Maybe<Scalars['Float']>;
  substanceid?: Maybe<Scalars['uuid']>;
  unit?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Product_Product_Accessory_View_Max_Fields = {
  __typename?: 'product_product_accessory_view_max_fields';
  code?: Maybe<Scalars['String']>;
  label?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['Float']>;
  priceMax?: Maybe<Scalars['Float']>;
  priceMin?: Maybe<Scalars['Float']>;
  substanceid?: Maybe<Scalars['uuid']>;
  unit?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type Product_Product_Accessory_View_Min_Fields = {
  __typename?: 'product_product_accessory_view_min_fields';
  code?: Maybe<Scalars['String']>;
  label?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['Float']>;
  priceMax?: Maybe<Scalars['Float']>;
  priceMin?: Maybe<Scalars['Float']>;
  substanceid?: Maybe<Scalars['uuid']>;
  unit?: Maybe<Scalars['String']>;
};

/** input type for inserting object relation for remote table "product.product_accessory_view" */
export type Product_Product_Accessory_View_Obj_Rel_Insert_Input = {
  data: Product_Product_Accessory_View_Insert_Input;
};

/** Ordering options when selecting data from "product.product_accessory_view". */
export type Product_Product_Accessory_View_Order_By = {
  code?: Maybe<Order_By>;
  label?: Maybe<Order_By>;
  price?: Maybe<Order_By>;
  priceMax?: Maybe<Order_By>;
  priceMin?: Maybe<Order_By>;
  substanceid?: Maybe<Order_By>;
  unit?: Maybe<Order_By>;
};

/** select columns of table "product.product_accessory_view" */
export enum Product_Product_Accessory_View_Select_Column {
  /** column name */
  Code = 'code',
  /** column name */
  Label = 'label',
  /** column name */
  Price = 'price',
  /** column name */
  PriceMax = 'priceMax',
  /** column name */
  PriceMin = 'priceMin',
  /** column name */
  Substanceid = 'substanceid',
  /** column name */
  Unit = 'unit'
}

/** aggregate stddev on columns */
export type Product_Product_Accessory_View_Stddev_Fields = {
  __typename?: 'product_product_accessory_view_stddev_fields';
  price?: Maybe<Scalars['Float']>;
  priceMax?: Maybe<Scalars['Float']>;
  priceMin?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type Product_Product_Accessory_View_Stddev_Pop_Fields = {
  __typename?: 'product_product_accessory_view_stddev_pop_fields';
  price?: Maybe<Scalars['Float']>;
  priceMax?: Maybe<Scalars['Float']>;
  priceMin?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type Product_Product_Accessory_View_Stddev_Samp_Fields = {
  __typename?: 'product_product_accessory_view_stddev_samp_fields';
  price?: Maybe<Scalars['Float']>;
  priceMax?: Maybe<Scalars['Float']>;
  priceMin?: Maybe<Scalars['Float']>;
};

/** aggregate sum on columns */
export type Product_Product_Accessory_View_Sum_Fields = {
  __typename?: 'product_product_accessory_view_sum_fields';
  price?: Maybe<Scalars['Float']>;
  priceMax?: Maybe<Scalars['Float']>;
  priceMin?: Maybe<Scalars['Float']>;
};

/** aggregate var_pop on columns */
export type Product_Product_Accessory_View_Var_Pop_Fields = {
  __typename?: 'product_product_accessory_view_var_pop_fields';
  price?: Maybe<Scalars['Float']>;
  priceMax?: Maybe<Scalars['Float']>;
  priceMin?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type Product_Product_Accessory_View_Var_Samp_Fields = {
  __typename?: 'product_product_accessory_view_var_samp_fields';
  price?: Maybe<Scalars['Float']>;
  priceMax?: Maybe<Scalars['Float']>;
  priceMin?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type Product_Product_Accessory_View_Variance_Fields = {
  __typename?: 'product_product_accessory_view_variance_fields';
  price?: Maybe<Scalars['Float']>;
  priceMax?: Maybe<Scalars['Float']>;
  priceMin?: Maybe<Scalars['Float']>;
};

/** aggregated selection of "product.product" */
export type Product_Product_Aggregate = {
  __typename?: 'product_product_aggregate';
  aggregate?: Maybe<Product_Product_Aggregate_Fields>;
  nodes: Array<Product_Product>;
};

/** aggregate fields of "product.product" */
export type Product_Product_Aggregate_Fields = {
  __typename?: 'product_product_aggregate_fields';
  avg?: Maybe<Product_Product_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Product_Product_Max_Fields>;
  min?: Maybe<Product_Product_Min_Fields>;
  stddev?: Maybe<Product_Product_Stddev_Fields>;
  stddev_pop?: Maybe<Product_Product_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Product_Product_Stddev_Samp_Fields>;
  sum?: Maybe<Product_Product_Sum_Fields>;
  var_pop?: Maybe<Product_Product_Var_Pop_Fields>;
  var_samp?: Maybe<Product_Product_Var_Samp_Fields>;
  variance?: Maybe<Product_Product_Variance_Fields>;
};


/** aggregate fields of "product.product" */
export type Product_Product_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Product_Product_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "product.product" */
export type Product_Product_Aggregate_Order_By = {
  avg?: Maybe<Product_Product_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Product_Product_Max_Order_By>;
  min?: Maybe<Product_Product_Min_Order_By>;
  stddev?: Maybe<Product_Product_Stddev_Order_By>;
  stddev_pop?: Maybe<Product_Product_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Product_Product_Stddev_Samp_Order_By>;
  sum?: Maybe<Product_Product_Sum_Order_By>;
  var_pop?: Maybe<Product_Product_Var_Pop_Order_By>;
  var_samp?: Maybe<Product_Product_Var_Samp_Order_By>;
  variance?: Maybe<Product_Product_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "product.product" */
export type Product_Product_Arr_Rel_Insert_Input = {
  data: Array<Product_Product_Insert_Input>;
  /** on conflict condition */
  on_conflict?: Maybe<Product_Product_On_Conflict>;
};

/** aggregate avg on columns */
export type Product_Product_Avg_Fields = {
  __typename?: 'product_product_avg_fields';
  price?: Maybe<Scalars['Float']>;
  priceMax?: Maybe<Scalars['Float']>;
  priceMin?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "product.product" */
export type Product_Product_Avg_Order_By = {
  price?: Maybe<Order_By>;
  priceMax?: Maybe<Order_By>;
  priceMin?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "product.product". All fields are combined with a logical 'AND'. */
export type Product_Product_Bool_Exp = {
  _and?: Maybe<Array<Product_Product_Bool_Exp>>;
  _not?: Maybe<Product_Product_Bool_Exp>;
  _or?: Maybe<Array<Product_Product_Bool_Exp>>;
  accessory?: Maybe<Product_Accessory_Bool_Exp>;
  code?: Maybe<String_Comparison_Exp>;
  companies?: Maybe<Product_Product_Companies_View_Bool_Exp>;
  consumable?: Maybe<Product_Consumable_Bool_Exp>;
  customerItem?: Maybe<Product_Customer_Product_Bool_Exp>;
  customer_products?: Maybe<Product_Customer_Product_Bool_Exp>;
  glass?: Maybe<Product_Glass_Bool_Exp>;
  label?: Maybe<String_Comparison_Exp>;
  price?: Maybe<Float_Comparison_Exp>;
  priceMax?: Maybe<Float_Comparison_Exp>;
  priceMin?: Maybe<Float_Comparison_Exp>;
  product_companies?: Maybe<Product_Product_Companies_Bool_Exp>;
  product_drafts?: Maybe<Sales_Product_Draft_Bool_Exp>;
  product_unit?: Maybe<Product_Product_Unit_Bool_Exp>;
  service?: Maybe<Product_Service_Bool_Exp>;
  unit?: Maybe<Product_Product_Unit_Enum_Comparison_Exp>;
};

/** columns and relationships of "product.product_companies" */
export type Product_Product_Companies = {
  __typename?: 'product_product_companies';
  /** An object relationship */
  Company: Management_Company;
  companyid: Scalars['uuid'];
  /** An object relationship */
  product: Product_Product;
  productcode: Scalars['String'];
};

/** aggregated selection of "product.product_companies" */
export type Product_Product_Companies_Aggregate = {
  __typename?: 'product_product_companies_aggregate';
  aggregate?: Maybe<Product_Product_Companies_Aggregate_Fields>;
  nodes: Array<Product_Product_Companies>;
};

/** aggregate fields of "product.product_companies" */
export type Product_Product_Companies_Aggregate_Fields = {
  __typename?: 'product_product_companies_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Product_Product_Companies_Max_Fields>;
  min?: Maybe<Product_Product_Companies_Min_Fields>;
};


/** aggregate fields of "product.product_companies" */
export type Product_Product_Companies_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Product_Product_Companies_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "product.product_companies" */
export type Product_Product_Companies_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Product_Product_Companies_Max_Order_By>;
  min?: Maybe<Product_Product_Companies_Min_Order_By>;
};

/** input type for inserting array relation for remote table "product.product_companies" */
export type Product_Product_Companies_Arr_Rel_Insert_Input = {
  data: Array<Product_Product_Companies_Insert_Input>;
  /** on conflict condition */
  on_conflict?: Maybe<Product_Product_Companies_On_Conflict>;
};

/** Boolean expression to filter rows from the table "product.product_companies". All fields are combined with a logical 'AND'. */
export type Product_Product_Companies_Bool_Exp = {
  Company?: Maybe<Management_Company_Bool_Exp>;
  _and?: Maybe<Array<Product_Product_Companies_Bool_Exp>>;
  _not?: Maybe<Product_Product_Companies_Bool_Exp>;
  _or?: Maybe<Array<Product_Product_Companies_Bool_Exp>>;
  companyid?: Maybe<Uuid_Comparison_Exp>;
  product?: Maybe<Product_Product_Bool_Exp>;
  productcode?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "product.product_companies" */
export enum Product_Product_Companies_Constraint {
  /** unique or primary key constraint */
  ProductCompaniesPkey = 'product_companies_pkey'
}

/** input type for inserting data into table "product.product_companies" */
export type Product_Product_Companies_Insert_Input = {
  Company?: Maybe<Management_Company_Obj_Rel_Insert_Input>;
  companyid?: Maybe<Scalars['uuid']>;
  product?: Maybe<Product_Product_Obj_Rel_Insert_Input>;
  productcode?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Product_Product_Companies_Max_Fields = {
  __typename?: 'product_product_companies_max_fields';
  companyid?: Maybe<Scalars['uuid']>;
  productcode?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "product.product_companies" */
export type Product_Product_Companies_Max_Order_By = {
  companyid?: Maybe<Order_By>;
  productcode?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Product_Product_Companies_Min_Fields = {
  __typename?: 'product_product_companies_min_fields';
  companyid?: Maybe<Scalars['uuid']>;
  productcode?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "product.product_companies" */
export type Product_Product_Companies_Min_Order_By = {
  companyid?: Maybe<Order_By>;
  productcode?: Maybe<Order_By>;
};

/** response of any mutation on the table "product.product_companies" */
export type Product_Product_Companies_Mutation_Response = {
  __typename?: 'product_product_companies_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Product_Product_Companies>;
};

/** on conflict condition type for table "product.product_companies" */
export type Product_Product_Companies_On_Conflict = {
  constraint: Product_Product_Companies_Constraint;
  update_columns?: Array<Product_Product_Companies_Update_Column>;
  where?: Maybe<Product_Product_Companies_Bool_Exp>;
};

/** Ordering options when selecting data from "product.product_companies". */
export type Product_Product_Companies_Order_By = {
  Company?: Maybe<Management_Company_Order_By>;
  companyid?: Maybe<Order_By>;
  product?: Maybe<Product_Product_Order_By>;
  productcode?: Maybe<Order_By>;
};

/** primary key columns input for table: product_product_companies */
export type Product_Product_Companies_Pk_Columns_Input = {
  companyid: Scalars['uuid'];
  productcode: Scalars['String'];
};

/** select columns of table "product.product_companies" */
export enum Product_Product_Companies_Select_Column {
  /** column name */
  Companyid = 'companyid',
  /** column name */
  Productcode = 'productcode'
}

/** input type for updating data in table "product.product_companies" */
export type Product_Product_Companies_Set_Input = {
  companyid?: Maybe<Scalars['uuid']>;
  productcode?: Maybe<Scalars['String']>;
};

/** update columns of table "product.product_companies" */
export enum Product_Product_Companies_Update_Column {
  /** column name */
  Companyid = 'companyid',
  /** column name */
  Productcode = 'productcode'
}

/** columns and relationships of "product.product_companies_view" */
export type Product_Product_Companies_View = {
  __typename?: 'product_product_companies_view';
  CNSS?: Maybe<Scalars['String']>;
  ICE?: Maybe<Scalars['String']>;
  IF?: Maybe<Scalars['String']>;
  RC?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['timestamptz']>;
  createdBy?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  productcode?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['timestamptz']>;
  updatedBy?: Maybe<Scalars['uuid']>;
  website?: Maybe<Scalars['String']>;
};

/** aggregated selection of "product.product_companies_view" */
export type Product_Product_Companies_View_Aggregate = {
  __typename?: 'product_product_companies_view_aggregate';
  aggregate?: Maybe<Product_Product_Companies_View_Aggregate_Fields>;
  nodes: Array<Product_Product_Companies_View>;
};

/** aggregate fields of "product.product_companies_view" */
export type Product_Product_Companies_View_Aggregate_Fields = {
  __typename?: 'product_product_companies_view_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Product_Product_Companies_View_Max_Fields>;
  min?: Maybe<Product_Product_Companies_View_Min_Fields>;
};


/** aggregate fields of "product.product_companies_view" */
export type Product_Product_Companies_View_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Product_Product_Companies_View_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "product.product_companies_view" */
export type Product_Product_Companies_View_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Product_Product_Companies_View_Max_Order_By>;
  min?: Maybe<Product_Product_Companies_View_Min_Order_By>;
};

/** input type for inserting array relation for remote table "product.product_companies_view" */
export type Product_Product_Companies_View_Arr_Rel_Insert_Input = {
  data: Array<Product_Product_Companies_View_Insert_Input>;
};

/** Boolean expression to filter rows from the table "product.product_companies_view". All fields are combined with a logical 'AND'. */
export type Product_Product_Companies_View_Bool_Exp = {
  CNSS?: Maybe<String_Comparison_Exp>;
  ICE?: Maybe<String_Comparison_Exp>;
  IF?: Maybe<String_Comparison_Exp>;
  RC?: Maybe<String_Comparison_Exp>;
  _and?: Maybe<Array<Product_Product_Companies_View_Bool_Exp>>;
  _not?: Maybe<Product_Product_Companies_View_Bool_Exp>;
  _or?: Maybe<Array<Product_Product_Companies_View_Bool_Exp>>;
  address?: Maybe<String_Comparison_Exp>;
  createdAt?: Maybe<Timestamptz_Comparison_Exp>;
  createdBy?: Maybe<String_Comparison_Exp>;
  email?: Maybe<String_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  name?: Maybe<String_Comparison_Exp>;
  phone?: Maybe<String_Comparison_Exp>;
  productcode?: Maybe<String_Comparison_Exp>;
  updatedAt?: Maybe<Timestamptz_Comparison_Exp>;
  updatedBy?: Maybe<Uuid_Comparison_Exp>;
  website?: Maybe<String_Comparison_Exp>;
};

/** input type for inserting data into table "product.product_companies_view" */
export type Product_Product_Companies_View_Insert_Input = {
  CNSS?: Maybe<Scalars['String']>;
  ICE?: Maybe<Scalars['String']>;
  IF?: Maybe<Scalars['String']>;
  RC?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['timestamptz']>;
  createdBy?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  productcode?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['timestamptz']>;
  updatedBy?: Maybe<Scalars['uuid']>;
  website?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Product_Product_Companies_View_Max_Fields = {
  __typename?: 'product_product_companies_view_max_fields';
  CNSS?: Maybe<Scalars['String']>;
  ICE?: Maybe<Scalars['String']>;
  IF?: Maybe<Scalars['String']>;
  RC?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['timestamptz']>;
  createdBy?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  productcode?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['timestamptz']>;
  updatedBy?: Maybe<Scalars['uuid']>;
  website?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "product.product_companies_view" */
export type Product_Product_Companies_View_Max_Order_By = {
  CNSS?: Maybe<Order_By>;
  ICE?: Maybe<Order_By>;
  IF?: Maybe<Order_By>;
  RC?: Maybe<Order_By>;
  address?: Maybe<Order_By>;
  createdAt?: Maybe<Order_By>;
  createdBy?: Maybe<Order_By>;
  email?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  phone?: Maybe<Order_By>;
  productcode?: Maybe<Order_By>;
  updatedAt?: Maybe<Order_By>;
  updatedBy?: Maybe<Order_By>;
  website?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Product_Product_Companies_View_Min_Fields = {
  __typename?: 'product_product_companies_view_min_fields';
  CNSS?: Maybe<Scalars['String']>;
  ICE?: Maybe<Scalars['String']>;
  IF?: Maybe<Scalars['String']>;
  RC?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['timestamptz']>;
  createdBy?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  productcode?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['timestamptz']>;
  updatedBy?: Maybe<Scalars['uuid']>;
  website?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "product.product_companies_view" */
export type Product_Product_Companies_View_Min_Order_By = {
  CNSS?: Maybe<Order_By>;
  ICE?: Maybe<Order_By>;
  IF?: Maybe<Order_By>;
  RC?: Maybe<Order_By>;
  address?: Maybe<Order_By>;
  createdAt?: Maybe<Order_By>;
  createdBy?: Maybe<Order_By>;
  email?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  phone?: Maybe<Order_By>;
  productcode?: Maybe<Order_By>;
  updatedAt?: Maybe<Order_By>;
  updatedBy?: Maybe<Order_By>;
  website?: Maybe<Order_By>;
};

/** Ordering options when selecting data from "product.product_companies_view". */
export type Product_Product_Companies_View_Order_By = {
  CNSS?: Maybe<Order_By>;
  ICE?: Maybe<Order_By>;
  IF?: Maybe<Order_By>;
  RC?: Maybe<Order_By>;
  address?: Maybe<Order_By>;
  createdAt?: Maybe<Order_By>;
  createdBy?: Maybe<Order_By>;
  email?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  phone?: Maybe<Order_By>;
  productcode?: Maybe<Order_By>;
  updatedAt?: Maybe<Order_By>;
  updatedBy?: Maybe<Order_By>;
  website?: Maybe<Order_By>;
};

/** select columns of table "product.product_companies_view" */
export enum Product_Product_Companies_View_Select_Column {
  /** column name */
  Cnss = 'CNSS',
  /** column name */
  Ice = 'ICE',
  /** column name */
  If = 'IF',
  /** column name */
  Rc = 'RC',
  /** column name */
  Address = 'address',
  /** column name */
  CreatedAt = 'createdAt',
  /** column name */
  CreatedBy = 'createdBy',
  /** column name */
  Email = 'email',
  /** column name */
  Id = 'id',
  /** column name */
  Name = 'name',
  /** column name */
  Phone = 'phone',
  /** column name */
  Productcode = 'productcode',
  /** column name */
  UpdatedAt = 'updatedAt',
  /** column name */
  UpdatedBy = 'updatedBy',
  /** column name */
  Website = 'website'
}

/** unique or primary key constraints on table "product.product" */
export enum Product_Product_Constraint {
  /** unique or primary key constraint */
  ProductPkey = 'product_pkey'
}

/** columns and relationships of "product.product_consumable_view" */
export type Product_Product_Consumable_View = {
  __typename?: 'product_product_consumable_view';
  code?: Maybe<Scalars['String']>;
  label?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['Float']>;
  priceMax?: Maybe<Scalars['Float']>;
  priceMin?: Maybe<Scalars['Float']>;
  substanceid?: Maybe<Scalars['uuid']>;
  unit?: Maybe<Scalars['String']>;
};

/** aggregated selection of "product.product_consumable_view" */
export type Product_Product_Consumable_View_Aggregate = {
  __typename?: 'product_product_consumable_view_aggregate';
  aggregate?: Maybe<Product_Product_Consumable_View_Aggregate_Fields>;
  nodes: Array<Product_Product_Consumable_View>;
};

/** aggregate fields of "product.product_consumable_view" */
export type Product_Product_Consumable_View_Aggregate_Fields = {
  __typename?: 'product_product_consumable_view_aggregate_fields';
  avg?: Maybe<Product_Product_Consumable_View_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Product_Product_Consumable_View_Max_Fields>;
  min?: Maybe<Product_Product_Consumable_View_Min_Fields>;
  stddev?: Maybe<Product_Product_Consumable_View_Stddev_Fields>;
  stddev_pop?: Maybe<Product_Product_Consumable_View_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Product_Product_Consumable_View_Stddev_Samp_Fields>;
  sum?: Maybe<Product_Product_Consumable_View_Sum_Fields>;
  var_pop?: Maybe<Product_Product_Consumable_View_Var_Pop_Fields>;
  var_samp?: Maybe<Product_Product_Consumable_View_Var_Samp_Fields>;
  variance?: Maybe<Product_Product_Consumable_View_Variance_Fields>;
};


/** aggregate fields of "product.product_consumable_view" */
export type Product_Product_Consumable_View_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Product_Product_Consumable_View_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** aggregate avg on columns */
export type Product_Product_Consumable_View_Avg_Fields = {
  __typename?: 'product_product_consumable_view_avg_fields';
  price?: Maybe<Scalars['Float']>;
  priceMax?: Maybe<Scalars['Float']>;
  priceMin?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "product.product_consumable_view". All fields are combined with a logical 'AND'. */
export type Product_Product_Consumable_View_Bool_Exp = {
  _and?: Maybe<Array<Product_Product_Consumable_View_Bool_Exp>>;
  _not?: Maybe<Product_Product_Consumable_View_Bool_Exp>;
  _or?: Maybe<Array<Product_Product_Consumable_View_Bool_Exp>>;
  code?: Maybe<String_Comparison_Exp>;
  label?: Maybe<String_Comparison_Exp>;
  price?: Maybe<Float_Comparison_Exp>;
  priceMax?: Maybe<Float_Comparison_Exp>;
  priceMin?: Maybe<Float_Comparison_Exp>;
  substanceid?: Maybe<Uuid_Comparison_Exp>;
  unit?: Maybe<String_Comparison_Exp>;
};

/** input type for inserting data into table "product.product_consumable_view" */
export type Product_Product_Consumable_View_Insert_Input = {
  code?: Maybe<Scalars['String']>;
  label?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['Float']>;
  priceMax?: Maybe<Scalars['Float']>;
  priceMin?: Maybe<Scalars['Float']>;
  substanceid?: Maybe<Scalars['uuid']>;
  unit?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Product_Product_Consumable_View_Max_Fields = {
  __typename?: 'product_product_consumable_view_max_fields';
  code?: Maybe<Scalars['String']>;
  label?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['Float']>;
  priceMax?: Maybe<Scalars['Float']>;
  priceMin?: Maybe<Scalars['Float']>;
  substanceid?: Maybe<Scalars['uuid']>;
  unit?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type Product_Product_Consumable_View_Min_Fields = {
  __typename?: 'product_product_consumable_view_min_fields';
  code?: Maybe<Scalars['String']>;
  label?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['Float']>;
  priceMax?: Maybe<Scalars['Float']>;
  priceMin?: Maybe<Scalars['Float']>;
  substanceid?: Maybe<Scalars['uuid']>;
  unit?: Maybe<Scalars['String']>;
};

/** input type for inserting object relation for remote table "product.product_consumable_view" */
export type Product_Product_Consumable_View_Obj_Rel_Insert_Input = {
  data: Product_Product_Consumable_View_Insert_Input;
};

/** Ordering options when selecting data from "product.product_consumable_view". */
export type Product_Product_Consumable_View_Order_By = {
  code?: Maybe<Order_By>;
  label?: Maybe<Order_By>;
  price?: Maybe<Order_By>;
  priceMax?: Maybe<Order_By>;
  priceMin?: Maybe<Order_By>;
  substanceid?: Maybe<Order_By>;
  unit?: Maybe<Order_By>;
};

/** select columns of table "product.product_consumable_view" */
export enum Product_Product_Consumable_View_Select_Column {
  /** column name */
  Code = 'code',
  /** column name */
  Label = 'label',
  /** column name */
  Price = 'price',
  /** column name */
  PriceMax = 'priceMax',
  /** column name */
  PriceMin = 'priceMin',
  /** column name */
  Substanceid = 'substanceid',
  /** column name */
  Unit = 'unit'
}

/** aggregate stddev on columns */
export type Product_Product_Consumable_View_Stddev_Fields = {
  __typename?: 'product_product_consumable_view_stddev_fields';
  price?: Maybe<Scalars['Float']>;
  priceMax?: Maybe<Scalars['Float']>;
  priceMin?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type Product_Product_Consumable_View_Stddev_Pop_Fields = {
  __typename?: 'product_product_consumable_view_stddev_pop_fields';
  price?: Maybe<Scalars['Float']>;
  priceMax?: Maybe<Scalars['Float']>;
  priceMin?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type Product_Product_Consumable_View_Stddev_Samp_Fields = {
  __typename?: 'product_product_consumable_view_stddev_samp_fields';
  price?: Maybe<Scalars['Float']>;
  priceMax?: Maybe<Scalars['Float']>;
  priceMin?: Maybe<Scalars['Float']>;
};

/** aggregate sum on columns */
export type Product_Product_Consumable_View_Sum_Fields = {
  __typename?: 'product_product_consumable_view_sum_fields';
  price?: Maybe<Scalars['Float']>;
  priceMax?: Maybe<Scalars['Float']>;
  priceMin?: Maybe<Scalars['Float']>;
};

/** aggregate var_pop on columns */
export type Product_Product_Consumable_View_Var_Pop_Fields = {
  __typename?: 'product_product_consumable_view_var_pop_fields';
  price?: Maybe<Scalars['Float']>;
  priceMax?: Maybe<Scalars['Float']>;
  priceMin?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type Product_Product_Consumable_View_Var_Samp_Fields = {
  __typename?: 'product_product_consumable_view_var_samp_fields';
  price?: Maybe<Scalars['Float']>;
  priceMax?: Maybe<Scalars['Float']>;
  priceMin?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type Product_Product_Consumable_View_Variance_Fields = {
  __typename?: 'product_product_consumable_view_variance_fields';
  price?: Maybe<Scalars['Float']>;
  priceMax?: Maybe<Scalars['Float']>;
  priceMin?: Maybe<Scalars['Float']>;
};

/** columns and relationships of "product.product_glass_view" */
export type Product_Product_Glass_View = {
  __typename?: 'product_product_glass_view';
  code?: Maybe<Scalars['String']>;
  label?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['Float']>;
  priceMax?: Maybe<Scalars['Float']>;
  priceMin?: Maybe<Scalars['Float']>;
  substanceid?: Maybe<Scalars['uuid']>;
  unit?: Maybe<Scalars['String']>;
};

/** aggregated selection of "product.product_glass_view" */
export type Product_Product_Glass_View_Aggregate = {
  __typename?: 'product_product_glass_view_aggregate';
  aggregate?: Maybe<Product_Product_Glass_View_Aggregate_Fields>;
  nodes: Array<Product_Product_Glass_View>;
};

/** aggregate fields of "product.product_glass_view" */
export type Product_Product_Glass_View_Aggregate_Fields = {
  __typename?: 'product_product_glass_view_aggregate_fields';
  avg?: Maybe<Product_Product_Glass_View_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Product_Product_Glass_View_Max_Fields>;
  min?: Maybe<Product_Product_Glass_View_Min_Fields>;
  stddev?: Maybe<Product_Product_Glass_View_Stddev_Fields>;
  stddev_pop?: Maybe<Product_Product_Glass_View_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Product_Product_Glass_View_Stddev_Samp_Fields>;
  sum?: Maybe<Product_Product_Glass_View_Sum_Fields>;
  var_pop?: Maybe<Product_Product_Glass_View_Var_Pop_Fields>;
  var_samp?: Maybe<Product_Product_Glass_View_Var_Samp_Fields>;
  variance?: Maybe<Product_Product_Glass_View_Variance_Fields>;
};


/** aggregate fields of "product.product_glass_view" */
export type Product_Product_Glass_View_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Product_Product_Glass_View_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** aggregate avg on columns */
export type Product_Product_Glass_View_Avg_Fields = {
  __typename?: 'product_product_glass_view_avg_fields';
  price?: Maybe<Scalars['Float']>;
  priceMax?: Maybe<Scalars['Float']>;
  priceMin?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "product.product_glass_view". All fields are combined with a logical 'AND'. */
export type Product_Product_Glass_View_Bool_Exp = {
  _and?: Maybe<Array<Product_Product_Glass_View_Bool_Exp>>;
  _not?: Maybe<Product_Product_Glass_View_Bool_Exp>;
  _or?: Maybe<Array<Product_Product_Glass_View_Bool_Exp>>;
  code?: Maybe<String_Comparison_Exp>;
  label?: Maybe<String_Comparison_Exp>;
  price?: Maybe<Float_Comparison_Exp>;
  priceMax?: Maybe<Float_Comparison_Exp>;
  priceMin?: Maybe<Float_Comparison_Exp>;
  substanceid?: Maybe<Uuid_Comparison_Exp>;
  unit?: Maybe<String_Comparison_Exp>;
};

/** input type for inserting data into table "product.product_glass_view" */
export type Product_Product_Glass_View_Insert_Input = {
  code?: Maybe<Scalars['String']>;
  label?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['Float']>;
  priceMax?: Maybe<Scalars['Float']>;
  priceMin?: Maybe<Scalars['Float']>;
  substanceid?: Maybe<Scalars['uuid']>;
  unit?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Product_Product_Glass_View_Max_Fields = {
  __typename?: 'product_product_glass_view_max_fields';
  code?: Maybe<Scalars['String']>;
  label?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['Float']>;
  priceMax?: Maybe<Scalars['Float']>;
  priceMin?: Maybe<Scalars['Float']>;
  substanceid?: Maybe<Scalars['uuid']>;
  unit?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type Product_Product_Glass_View_Min_Fields = {
  __typename?: 'product_product_glass_view_min_fields';
  code?: Maybe<Scalars['String']>;
  label?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['Float']>;
  priceMax?: Maybe<Scalars['Float']>;
  priceMin?: Maybe<Scalars['Float']>;
  substanceid?: Maybe<Scalars['uuid']>;
  unit?: Maybe<Scalars['String']>;
};

/** input type for inserting object relation for remote table "product.product_glass_view" */
export type Product_Product_Glass_View_Obj_Rel_Insert_Input = {
  data: Product_Product_Glass_View_Insert_Input;
};

/** Ordering options when selecting data from "product.product_glass_view". */
export type Product_Product_Glass_View_Order_By = {
  code?: Maybe<Order_By>;
  label?: Maybe<Order_By>;
  price?: Maybe<Order_By>;
  priceMax?: Maybe<Order_By>;
  priceMin?: Maybe<Order_By>;
  substanceid?: Maybe<Order_By>;
  unit?: Maybe<Order_By>;
};

/** select columns of table "product.product_glass_view" */
export enum Product_Product_Glass_View_Select_Column {
  /** column name */
  Code = 'code',
  /** column name */
  Label = 'label',
  /** column name */
  Price = 'price',
  /** column name */
  PriceMax = 'priceMax',
  /** column name */
  PriceMin = 'priceMin',
  /** column name */
  Substanceid = 'substanceid',
  /** column name */
  Unit = 'unit'
}

/** aggregate stddev on columns */
export type Product_Product_Glass_View_Stddev_Fields = {
  __typename?: 'product_product_glass_view_stddev_fields';
  price?: Maybe<Scalars['Float']>;
  priceMax?: Maybe<Scalars['Float']>;
  priceMin?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type Product_Product_Glass_View_Stddev_Pop_Fields = {
  __typename?: 'product_product_glass_view_stddev_pop_fields';
  price?: Maybe<Scalars['Float']>;
  priceMax?: Maybe<Scalars['Float']>;
  priceMin?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type Product_Product_Glass_View_Stddev_Samp_Fields = {
  __typename?: 'product_product_glass_view_stddev_samp_fields';
  price?: Maybe<Scalars['Float']>;
  priceMax?: Maybe<Scalars['Float']>;
  priceMin?: Maybe<Scalars['Float']>;
};

/** aggregate sum on columns */
export type Product_Product_Glass_View_Sum_Fields = {
  __typename?: 'product_product_glass_view_sum_fields';
  price?: Maybe<Scalars['Float']>;
  priceMax?: Maybe<Scalars['Float']>;
  priceMin?: Maybe<Scalars['Float']>;
};

/** aggregate var_pop on columns */
export type Product_Product_Glass_View_Var_Pop_Fields = {
  __typename?: 'product_product_glass_view_var_pop_fields';
  price?: Maybe<Scalars['Float']>;
  priceMax?: Maybe<Scalars['Float']>;
  priceMin?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type Product_Product_Glass_View_Var_Samp_Fields = {
  __typename?: 'product_product_glass_view_var_samp_fields';
  price?: Maybe<Scalars['Float']>;
  priceMax?: Maybe<Scalars['Float']>;
  priceMin?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type Product_Product_Glass_View_Variance_Fields = {
  __typename?: 'product_product_glass_view_variance_fields';
  price?: Maybe<Scalars['Float']>;
  priceMax?: Maybe<Scalars['Float']>;
  priceMin?: Maybe<Scalars['Float']>;
};

/** input type for incrementing numeric columns in table "product.product" */
export type Product_Product_Inc_Input = {
  price?: Maybe<Scalars['Float']>;
  priceMax?: Maybe<Scalars['Float']>;
  priceMin?: Maybe<Scalars['Float']>;
};

/** input type for inserting data into table "product.product" */
export type Product_Product_Insert_Input = {
  accessory?: Maybe<Product_Accessory_Obj_Rel_Insert_Input>;
  code?: Maybe<Scalars['String']>;
  companies?: Maybe<Product_Product_Companies_View_Arr_Rel_Insert_Input>;
  consumable?: Maybe<Product_Consumable_Obj_Rel_Insert_Input>;
  customerItem?: Maybe<Product_Customer_Product_Obj_Rel_Insert_Input>;
  customer_products?: Maybe<Product_Customer_Product_Arr_Rel_Insert_Input>;
  glass?: Maybe<Product_Glass_Obj_Rel_Insert_Input>;
  label?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['Float']>;
  priceMax?: Maybe<Scalars['Float']>;
  priceMin?: Maybe<Scalars['Float']>;
  product_companies?: Maybe<Product_Product_Companies_Arr_Rel_Insert_Input>;
  product_drafts?: Maybe<Sales_Product_Draft_Arr_Rel_Insert_Input>;
  product_unit?: Maybe<Product_Product_Unit_Obj_Rel_Insert_Input>;
  service?: Maybe<Product_Service_Obj_Rel_Insert_Input>;
  unit?: Maybe<Product_Product_Unit_Enum>;
};

/** aggregate max on columns */
export type Product_Product_Max_Fields = {
  __typename?: 'product_product_max_fields';
  code?: Maybe<Scalars['String']>;
  label?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['Float']>;
  priceMax?: Maybe<Scalars['Float']>;
  priceMin?: Maybe<Scalars['Float']>;
};

/** order by max() on columns of table "product.product" */
export type Product_Product_Max_Order_By = {
  code?: Maybe<Order_By>;
  label?: Maybe<Order_By>;
  price?: Maybe<Order_By>;
  priceMax?: Maybe<Order_By>;
  priceMin?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Product_Product_Min_Fields = {
  __typename?: 'product_product_min_fields';
  code?: Maybe<Scalars['String']>;
  label?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['Float']>;
  priceMax?: Maybe<Scalars['Float']>;
  priceMin?: Maybe<Scalars['Float']>;
};

/** order by min() on columns of table "product.product" */
export type Product_Product_Min_Order_By = {
  code?: Maybe<Order_By>;
  label?: Maybe<Order_By>;
  price?: Maybe<Order_By>;
  priceMax?: Maybe<Order_By>;
  priceMin?: Maybe<Order_By>;
};

/** response of any mutation on the table "product.product" */
export type Product_Product_Mutation_Response = {
  __typename?: 'product_product_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Product_Product>;
};

/** input type for inserting object relation for remote table "product.product" */
export type Product_Product_Obj_Rel_Insert_Input = {
  data: Product_Product_Insert_Input;
  /** on conflict condition */
  on_conflict?: Maybe<Product_Product_On_Conflict>;
};

/** on conflict condition type for table "product.product" */
export type Product_Product_On_Conflict = {
  constraint: Product_Product_Constraint;
  update_columns?: Array<Product_Product_Update_Column>;
  where?: Maybe<Product_Product_Bool_Exp>;
};

/** Ordering options when selecting data from "product.product". */
export type Product_Product_Order_By = {
  accessory?: Maybe<Product_Accessory_Order_By>;
  code?: Maybe<Order_By>;
  companies_aggregate?: Maybe<Product_Product_Companies_View_Aggregate_Order_By>;
  consumable?: Maybe<Product_Consumable_Order_By>;
  customerItem?: Maybe<Product_Customer_Product_Order_By>;
  customer_products_aggregate?: Maybe<Product_Customer_Product_Aggregate_Order_By>;
  glass?: Maybe<Product_Glass_Order_By>;
  label?: Maybe<Order_By>;
  price?: Maybe<Order_By>;
  priceMax?: Maybe<Order_By>;
  priceMin?: Maybe<Order_By>;
  product_companies_aggregate?: Maybe<Product_Product_Companies_Aggregate_Order_By>;
  product_drafts_aggregate?: Maybe<Sales_Product_Draft_Aggregate_Order_By>;
  product_unit?: Maybe<Product_Product_Unit_Order_By>;
  service?: Maybe<Product_Service_Order_By>;
  unit?: Maybe<Order_By>;
};

/** primary key columns input for table: product_product */
export type Product_Product_Pk_Columns_Input = {
  code: Scalars['String'];
};

/** select columns of table "product.product" */
export enum Product_Product_Select_Column {
  /** column name */
  Code = 'code',
  /** column name */
  Label = 'label',
  /** column name */
  Price = 'price',
  /** column name */
  PriceMax = 'priceMax',
  /** column name */
  PriceMin = 'priceMin',
  /** column name */
  Unit = 'unit'
}

/** input type for updating data in table "product.product" */
export type Product_Product_Set_Input = {
  code?: Maybe<Scalars['String']>;
  label?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['Float']>;
  priceMax?: Maybe<Scalars['Float']>;
  priceMin?: Maybe<Scalars['Float']>;
  unit?: Maybe<Product_Product_Unit_Enum>;
};

/** aggregate stddev on columns */
export type Product_Product_Stddev_Fields = {
  __typename?: 'product_product_stddev_fields';
  price?: Maybe<Scalars['Float']>;
  priceMax?: Maybe<Scalars['Float']>;
  priceMin?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "product.product" */
export type Product_Product_Stddev_Order_By = {
  price?: Maybe<Order_By>;
  priceMax?: Maybe<Order_By>;
  priceMin?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Product_Product_Stddev_Pop_Fields = {
  __typename?: 'product_product_stddev_pop_fields';
  price?: Maybe<Scalars['Float']>;
  priceMax?: Maybe<Scalars['Float']>;
  priceMin?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "product.product" */
export type Product_Product_Stddev_Pop_Order_By = {
  price?: Maybe<Order_By>;
  priceMax?: Maybe<Order_By>;
  priceMin?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Product_Product_Stddev_Samp_Fields = {
  __typename?: 'product_product_stddev_samp_fields';
  price?: Maybe<Scalars['Float']>;
  priceMax?: Maybe<Scalars['Float']>;
  priceMin?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "product.product" */
export type Product_Product_Stddev_Samp_Order_By = {
  price?: Maybe<Order_By>;
  priceMax?: Maybe<Order_By>;
  priceMin?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Product_Product_Sum_Fields = {
  __typename?: 'product_product_sum_fields';
  price?: Maybe<Scalars['Float']>;
  priceMax?: Maybe<Scalars['Float']>;
  priceMin?: Maybe<Scalars['Float']>;
};

/** order by sum() on columns of table "product.product" */
export type Product_Product_Sum_Order_By = {
  price?: Maybe<Order_By>;
  priceMax?: Maybe<Order_By>;
  priceMin?: Maybe<Order_By>;
};

/** columns and relationships of "product.product_unit" */
export type Product_Product_Unit = {
  __typename?: 'product_product_unit';
  description: Scalars['String'];
  /** An array relationship */
  products: Array<Product_Product>;
  /** An aggregate relationship */
  products_aggregate: Product_Product_Aggregate;
  unit: Scalars['String'];
};


/** columns and relationships of "product.product_unit" */
export type Product_Product_UnitProductsArgs = {
  distinct_on?: Maybe<Array<Product_Product_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Product_Order_By>>;
  where?: Maybe<Product_Product_Bool_Exp>;
};


/** columns and relationships of "product.product_unit" */
export type Product_Product_UnitProducts_AggregateArgs = {
  distinct_on?: Maybe<Array<Product_Product_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Product_Order_By>>;
  where?: Maybe<Product_Product_Bool_Exp>;
};

/** aggregated selection of "product.product_unit" */
export type Product_Product_Unit_Aggregate = {
  __typename?: 'product_product_unit_aggregate';
  aggregate?: Maybe<Product_Product_Unit_Aggregate_Fields>;
  nodes: Array<Product_Product_Unit>;
};

/** aggregate fields of "product.product_unit" */
export type Product_Product_Unit_Aggregate_Fields = {
  __typename?: 'product_product_unit_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Product_Product_Unit_Max_Fields>;
  min?: Maybe<Product_Product_Unit_Min_Fields>;
};


/** aggregate fields of "product.product_unit" */
export type Product_Product_Unit_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Product_Product_Unit_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** Boolean expression to filter rows from the table "product.product_unit". All fields are combined with a logical 'AND'. */
export type Product_Product_Unit_Bool_Exp = {
  _and?: Maybe<Array<Product_Product_Unit_Bool_Exp>>;
  _not?: Maybe<Product_Product_Unit_Bool_Exp>;
  _or?: Maybe<Array<Product_Product_Unit_Bool_Exp>>;
  description?: Maybe<String_Comparison_Exp>;
  products?: Maybe<Product_Product_Bool_Exp>;
  unit?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "product.product_unit" */
export enum Product_Product_Unit_Constraint {
  /** unique or primary key constraint */
  ProductUnitPkey = 'product_unit_pkey'
}

export enum Product_Product_Unit_Enum {
  /** Kilogramme */
  Kg = 'Kg',
  /** Metre linéaire */
  Ml = 'ML',
  /** Mettre Carré */
  M2 = 'm2',
  /** par unité */
  Unit = 'unit'
}

/** Boolean expression to compare columns of type "product_product_unit_enum". All fields are combined with logical 'AND'. */
export type Product_Product_Unit_Enum_Comparison_Exp = {
  _eq?: Maybe<Product_Product_Unit_Enum>;
  _in?: Maybe<Array<Product_Product_Unit_Enum>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _neq?: Maybe<Product_Product_Unit_Enum>;
  _nin?: Maybe<Array<Product_Product_Unit_Enum>>;
};

/** input type for inserting data into table "product.product_unit" */
export type Product_Product_Unit_Insert_Input = {
  description?: Maybe<Scalars['String']>;
  products?: Maybe<Product_Product_Arr_Rel_Insert_Input>;
  unit?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Product_Product_Unit_Max_Fields = {
  __typename?: 'product_product_unit_max_fields';
  description?: Maybe<Scalars['String']>;
  unit?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type Product_Product_Unit_Min_Fields = {
  __typename?: 'product_product_unit_min_fields';
  description?: Maybe<Scalars['String']>;
  unit?: Maybe<Scalars['String']>;
};

/** response of any mutation on the table "product.product_unit" */
export type Product_Product_Unit_Mutation_Response = {
  __typename?: 'product_product_unit_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Product_Product_Unit>;
};

/** input type for inserting object relation for remote table "product.product_unit" */
export type Product_Product_Unit_Obj_Rel_Insert_Input = {
  data: Product_Product_Unit_Insert_Input;
  /** on conflict condition */
  on_conflict?: Maybe<Product_Product_Unit_On_Conflict>;
};

/** on conflict condition type for table "product.product_unit" */
export type Product_Product_Unit_On_Conflict = {
  constraint: Product_Product_Unit_Constraint;
  update_columns?: Array<Product_Product_Unit_Update_Column>;
  where?: Maybe<Product_Product_Unit_Bool_Exp>;
};

/** Ordering options when selecting data from "product.product_unit". */
export type Product_Product_Unit_Order_By = {
  description?: Maybe<Order_By>;
  products_aggregate?: Maybe<Product_Product_Aggregate_Order_By>;
  unit?: Maybe<Order_By>;
};

/** primary key columns input for table: product_product_unit */
export type Product_Product_Unit_Pk_Columns_Input = {
  unit: Scalars['String'];
};

/** select columns of table "product.product_unit" */
export enum Product_Product_Unit_Select_Column {
  /** column name */
  Description = 'description',
  /** column name */
  Unit = 'unit'
}

/** input type for updating data in table "product.product_unit" */
export type Product_Product_Unit_Set_Input = {
  description?: Maybe<Scalars['String']>;
  unit?: Maybe<Scalars['String']>;
};

/** update columns of table "product.product_unit" */
export enum Product_Product_Unit_Update_Column {
  /** column name */
  Description = 'description',
  /** column name */
  Unit = 'unit'
}

/** update columns of table "product.product" */
export enum Product_Product_Update_Column {
  /** column name */
  Code = 'code',
  /** column name */
  Label = 'label',
  /** column name */
  Price = 'price',
  /** column name */
  PriceMax = 'priceMax',
  /** column name */
  PriceMin = 'priceMin',
  /** column name */
  Unit = 'unit'
}

/** aggregate var_pop on columns */
export type Product_Product_Var_Pop_Fields = {
  __typename?: 'product_product_var_pop_fields';
  price?: Maybe<Scalars['Float']>;
  priceMax?: Maybe<Scalars['Float']>;
  priceMin?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "product.product" */
export type Product_Product_Var_Pop_Order_By = {
  price?: Maybe<Order_By>;
  priceMax?: Maybe<Order_By>;
  priceMin?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Product_Product_Var_Samp_Fields = {
  __typename?: 'product_product_var_samp_fields';
  price?: Maybe<Scalars['Float']>;
  priceMax?: Maybe<Scalars['Float']>;
  priceMin?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "product.product" */
export type Product_Product_Var_Samp_Order_By = {
  price?: Maybe<Order_By>;
  priceMax?: Maybe<Order_By>;
  priceMin?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Product_Product_Variance_Fields = {
  __typename?: 'product_product_variance_fields';
  price?: Maybe<Scalars['Float']>;
  priceMax?: Maybe<Scalars['Float']>;
  priceMin?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "product.product" */
export type Product_Product_Variance_Order_By = {
  price?: Maybe<Order_By>;
  priceMax?: Maybe<Order_By>;
  priceMin?: Maybe<Order_By>;
};

/** columns and relationships of "product.service" */
export type Product_Service = {
  __typename?: 'product_service';
  paramValues?: Maybe<Scalars['jsonb']>;
  /** An object relationship */
  product: Product_Product;
  productcode: Scalars['String'];
  /** An object relationship */
  serviceConfig?: Maybe<Product_ServiceConfig>;
  serviceConfigid: Scalars['uuid'];
};


/** columns and relationships of "product.service" */
export type Product_ServiceParamValuesArgs = {
  path?: Maybe<Scalars['String']>;
};

/** columns and relationships of "product.serviceConfig" */
export type Product_ServiceConfig = {
  __typename?: 'product_serviceConfig';
  createdAt?: Maybe<Scalars['date']>;
  createdBy?: Maybe<Scalars['String']>;
  id: Scalars['uuid'];
  labelFactory: Scalars['String'];
  name: Scalars['String'];
  params?: Maybe<Scalars['jsonb']>;
  /** An array relationship */
  services: Array<Product_Service>;
  /** An aggregate relationship */
  services_aggregate: Product_Service_Aggregate;
  updatedAt?: Maybe<Scalars['date']>;
  updatedBy?: Maybe<Scalars['uuid']>;
};


/** columns and relationships of "product.serviceConfig" */
export type Product_ServiceConfigParamsArgs = {
  path?: Maybe<Scalars['String']>;
};


/** columns and relationships of "product.serviceConfig" */
export type Product_ServiceConfigServicesArgs = {
  distinct_on?: Maybe<Array<Product_Service_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Service_Order_By>>;
  where?: Maybe<Product_Service_Bool_Exp>;
};


/** columns and relationships of "product.serviceConfig" */
export type Product_ServiceConfigServices_AggregateArgs = {
  distinct_on?: Maybe<Array<Product_Service_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Service_Order_By>>;
  where?: Maybe<Product_Service_Bool_Exp>;
};

/** aggregated selection of "product.serviceConfig" */
export type Product_ServiceConfig_Aggregate = {
  __typename?: 'product_serviceConfig_aggregate';
  aggregate?: Maybe<Product_ServiceConfig_Aggregate_Fields>;
  nodes: Array<Product_ServiceConfig>;
};

/** aggregate fields of "product.serviceConfig" */
export type Product_ServiceConfig_Aggregate_Fields = {
  __typename?: 'product_serviceConfig_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Product_ServiceConfig_Max_Fields>;
  min?: Maybe<Product_ServiceConfig_Min_Fields>;
};


/** aggregate fields of "product.serviceConfig" */
export type Product_ServiceConfig_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Product_ServiceConfig_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** append existing jsonb value of filtered columns with new jsonb value */
export type Product_ServiceConfig_Append_Input = {
  params?: Maybe<Scalars['jsonb']>;
};

/** Boolean expression to filter rows from the table "product.serviceConfig". All fields are combined with a logical 'AND'. */
export type Product_ServiceConfig_Bool_Exp = {
  _and?: Maybe<Array<Product_ServiceConfig_Bool_Exp>>;
  _not?: Maybe<Product_ServiceConfig_Bool_Exp>;
  _or?: Maybe<Array<Product_ServiceConfig_Bool_Exp>>;
  createdAt?: Maybe<Date_Comparison_Exp>;
  createdBy?: Maybe<String_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  labelFactory?: Maybe<String_Comparison_Exp>;
  name?: Maybe<String_Comparison_Exp>;
  params?: Maybe<Jsonb_Comparison_Exp>;
  services?: Maybe<Product_Service_Bool_Exp>;
  updatedAt?: Maybe<Date_Comparison_Exp>;
  updatedBy?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "product.serviceConfig" */
export enum Product_ServiceConfig_Constraint {
  /** unique or primary key constraint */
  ServiceConfigNameKey = 'serviceConfig_name_key',
  /** unique or primary key constraint */
  ServiceConfigPkey = 'serviceConfig_pkey'
}

/** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
export type Product_ServiceConfig_Delete_At_Path_Input = {
  params?: Maybe<Array<Scalars['String']>>;
};

/** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
export type Product_ServiceConfig_Delete_Elem_Input = {
  params?: Maybe<Scalars['Int']>;
};

/** delete key/value pair or string element. key/value pairs are matched based on their key value */
export type Product_ServiceConfig_Delete_Key_Input = {
  params?: Maybe<Scalars['String']>;
};

/** input type for inserting data into table "product.serviceConfig" */
export type Product_ServiceConfig_Insert_Input = {
  createdAt?: Maybe<Scalars['date']>;
  createdBy?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  labelFactory?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  params?: Maybe<Scalars['jsonb']>;
  services?: Maybe<Product_Service_Arr_Rel_Insert_Input>;
  updatedAt?: Maybe<Scalars['date']>;
  updatedBy?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Product_ServiceConfig_Max_Fields = {
  __typename?: 'product_serviceConfig_max_fields';
  createdAt?: Maybe<Scalars['date']>;
  createdBy?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  labelFactory?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['date']>;
  updatedBy?: Maybe<Scalars['uuid']>;
};

/** aggregate min on columns */
export type Product_ServiceConfig_Min_Fields = {
  __typename?: 'product_serviceConfig_min_fields';
  createdAt?: Maybe<Scalars['date']>;
  createdBy?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  labelFactory?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['date']>;
  updatedBy?: Maybe<Scalars['uuid']>;
};

/** response of any mutation on the table "product.serviceConfig" */
export type Product_ServiceConfig_Mutation_Response = {
  __typename?: 'product_serviceConfig_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Product_ServiceConfig>;
};

/** input type for inserting object relation for remote table "product.serviceConfig" */
export type Product_ServiceConfig_Obj_Rel_Insert_Input = {
  data: Product_ServiceConfig_Insert_Input;
  /** on conflict condition */
  on_conflict?: Maybe<Product_ServiceConfig_On_Conflict>;
};

/** on conflict condition type for table "product.serviceConfig" */
export type Product_ServiceConfig_On_Conflict = {
  constraint: Product_ServiceConfig_Constraint;
  update_columns?: Array<Product_ServiceConfig_Update_Column>;
  where?: Maybe<Product_ServiceConfig_Bool_Exp>;
};

/** Ordering options when selecting data from "product.serviceConfig". */
export type Product_ServiceConfig_Order_By = {
  createdAt?: Maybe<Order_By>;
  createdBy?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  labelFactory?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  params?: Maybe<Order_By>;
  services_aggregate?: Maybe<Product_Service_Aggregate_Order_By>;
  updatedAt?: Maybe<Order_By>;
  updatedBy?: Maybe<Order_By>;
};

/** primary key columns input for table: product_serviceConfig */
export type Product_ServiceConfig_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** prepend existing jsonb value of filtered columns with new jsonb value */
export type Product_ServiceConfig_Prepend_Input = {
  params?: Maybe<Scalars['jsonb']>;
};

/** select columns of table "product.serviceConfig" */
export enum Product_ServiceConfig_Select_Column {
  /** column name */
  CreatedAt = 'createdAt',
  /** column name */
  CreatedBy = 'createdBy',
  /** column name */
  Id = 'id',
  /** column name */
  LabelFactory = 'labelFactory',
  /** column name */
  Name = 'name',
  /** column name */
  Params = 'params',
  /** column name */
  UpdatedAt = 'updatedAt',
  /** column name */
  UpdatedBy = 'updatedBy'
}

/** input type for updating data in table "product.serviceConfig" */
export type Product_ServiceConfig_Set_Input = {
  createdAt?: Maybe<Scalars['date']>;
  createdBy?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  labelFactory?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  params?: Maybe<Scalars['jsonb']>;
  updatedAt?: Maybe<Scalars['date']>;
  updatedBy?: Maybe<Scalars['uuid']>;
};

/** update columns of table "product.serviceConfig" */
export enum Product_ServiceConfig_Update_Column {
  /** column name */
  CreatedAt = 'createdAt',
  /** column name */
  CreatedBy = 'createdBy',
  /** column name */
  Id = 'id',
  /** column name */
  LabelFactory = 'labelFactory',
  /** column name */
  Name = 'name',
  /** column name */
  Params = 'params',
  /** column name */
  UpdatedAt = 'updatedAt',
  /** column name */
  UpdatedBy = 'updatedBy'
}

/** aggregated selection of "product.service" */
export type Product_Service_Aggregate = {
  __typename?: 'product_service_aggregate';
  aggregate?: Maybe<Product_Service_Aggregate_Fields>;
  nodes: Array<Product_Service>;
};

/** aggregate fields of "product.service" */
export type Product_Service_Aggregate_Fields = {
  __typename?: 'product_service_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Product_Service_Max_Fields>;
  min?: Maybe<Product_Service_Min_Fields>;
};


/** aggregate fields of "product.service" */
export type Product_Service_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Product_Service_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "product.service" */
export type Product_Service_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Product_Service_Max_Order_By>;
  min?: Maybe<Product_Service_Min_Order_By>;
};

/** append existing jsonb value of filtered columns with new jsonb value */
export type Product_Service_Append_Input = {
  paramValues?: Maybe<Scalars['jsonb']>;
};

/** input type for inserting array relation for remote table "product.service" */
export type Product_Service_Arr_Rel_Insert_Input = {
  data: Array<Product_Service_Insert_Input>;
  /** on conflict condition */
  on_conflict?: Maybe<Product_Service_On_Conflict>;
};

/** Boolean expression to filter rows from the table "product.service". All fields are combined with a logical 'AND'. */
export type Product_Service_Bool_Exp = {
  _and?: Maybe<Array<Product_Service_Bool_Exp>>;
  _not?: Maybe<Product_Service_Bool_Exp>;
  _or?: Maybe<Array<Product_Service_Bool_Exp>>;
  paramValues?: Maybe<Jsonb_Comparison_Exp>;
  product?: Maybe<Product_Product_Bool_Exp>;
  productcode?: Maybe<String_Comparison_Exp>;
  serviceConfig?: Maybe<Product_ServiceConfig_Bool_Exp>;
  serviceConfigid?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "product.service" */
export enum Product_Service_Constraint {
  /** unique or primary key constraint */
  ServicePkey = 'service_pkey',
  /** unique or primary key constraint */
  ServiceProductcodeKey = 'service_productcode_key'
}

/** columns and relationships of "product.service_consumable" */
export type Product_Service_Consumable = {
  __typename?: 'product_service_consumable';
  /** An object relationship */
  consumable: Product_Consumable;
  consumableid: Scalars['uuid'];
  quota: Scalars['Float'];
  serviceid: Scalars['uuid'];
};

/** aggregated selection of "product.service_consumable" */
export type Product_Service_Consumable_Aggregate = {
  __typename?: 'product_service_consumable_aggregate';
  aggregate?: Maybe<Product_Service_Consumable_Aggregate_Fields>;
  nodes: Array<Product_Service_Consumable>;
};

/** aggregate fields of "product.service_consumable" */
export type Product_Service_Consumable_Aggregate_Fields = {
  __typename?: 'product_service_consumable_aggregate_fields';
  avg?: Maybe<Product_Service_Consumable_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Product_Service_Consumable_Max_Fields>;
  min?: Maybe<Product_Service_Consumable_Min_Fields>;
  stddev?: Maybe<Product_Service_Consumable_Stddev_Fields>;
  stddev_pop?: Maybe<Product_Service_Consumable_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Product_Service_Consumable_Stddev_Samp_Fields>;
  sum?: Maybe<Product_Service_Consumable_Sum_Fields>;
  var_pop?: Maybe<Product_Service_Consumable_Var_Pop_Fields>;
  var_samp?: Maybe<Product_Service_Consumable_Var_Samp_Fields>;
  variance?: Maybe<Product_Service_Consumable_Variance_Fields>;
};


/** aggregate fields of "product.service_consumable" */
export type Product_Service_Consumable_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Product_Service_Consumable_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "product.service_consumable" */
export type Product_Service_Consumable_Aggregate_Order_By = {
  avg?: Maybe<Product_Service_Consumable_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Product_Service_Consumable_Max_Order_By>;
  min?: Maybe<Product_Service_Consumable_Min_Order_By>;
  stddev?: Maybe<Product_Service_Consumable_Stddev_Order_By>;
  stddev_pop?: Maybe<Product_Service_Consumable_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Product_Service_Consumable_Stddev_Samp_Order_By>;
  sum?: Maybe<Product_Service_Consumable_Sum_Order_By>;
  var_pop?: Maybe<Product_Service_Consumable_Var_Pop_Order_By>;
  var_samp?: Maybe<Product_Service_Consumable_Var_Samp_Order_By>;
  variance?: Maybe<Product_Service_Consumable_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "product.service_consumable" */
export type Product_Service_Consumable_Arr_Rel_Insert_Input = {
  data: Array<Product_Service_Consumable_Insert_Input>;
  /** on conflict condition */
  on_conflict?: Maybe<Product_Service_Consumable_On_Conflict>;
};

/** aggregate avg on columns */
export type Product_Service_Consumable_Avg_Fields = {
  __typename?: 'product_service_consumable_avg_fields';
  quota?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "product.service_consumable" */
export type Product_Service_Consumable_Avg_Order_By = {
  quota?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "product.service_consumable". All fields are combined with a logical 'AND'. */
export type Product_Service_Consumable_Bool_Exp = {
  _and?: Maybe<Array<Product_Service_Consumable_Bool_Exp>>;
  _not?: Maybe<Product_Service_Consumable_Bool_Exp>;
  _or?: Maybe<Array<Product_Service_Consumable_Bool_Exp>>;
  consumable?: Maybe<Product_Consumable_Bool_Exp>;
  consumableid?: Maybe<Uuid_Comparison_Exp>;
  quota?: Maybe<Float_Comparison_Exp>;
  serviceid?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "product.service_consumable" */
export enum Product_Service_Consumable_Constraint {
  /** unique or primary key constraint */
  ServiceConsumablePkey = 'service_consumable_pkey'
}

/** input type for incrementing numeric columns in table "product.service_consumable" */
export type Product_Service_Consumable_Inc_Input = {
  quota?: Maybe<Scalars['Float']>;
};

/** input type for inserting data into table "product.service_consumable" */
export type Product_Service_Consumable_Insert_Input = {
  consumable?: Maybe<Product_Consumable_Obj_Rel_Insert_Input>;
  consumableid?: Maybe<Scalars['uuid']>;
  quota?: Maybe<Scalars['Float']>;
  serviceid?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Product_Service_Consumable_Max_Fields = {
  __typename?: 'product_service_consumable_max_fields';
  consumableid?: Maybe<Scalars['uuid']>;
  quota?: Maybe<Scalars['Float']>;
  serviceid?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "product.service_consumable" */
export type Product_Service_Consumable_Max_Order_By = {
  consumableid?: Maybe<Order_By>;
  quota?: Maybe<Order_By>;
  serviceid?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Product_Service_Consumable_Min_Fields = {
  __typename?: 'product_service_consumable_min_fields';
  consumableid?: Maybe<Scalars['uuid']>;
  quota?: Maybe<Scalars['Float']>;
  serviceid?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "product.service_consumable" */
export type Product_Service_Consumable_Min_Order_By = {
  consumableid?: Maybe<Order_By>;
  quota?: Maybe<Order_By>;
  serviceid?: Maybe<Order_By>;
};

/** response of any mutation on the table "product.service_consumable" */
export type Product_Service_Consumable_Mutation_Response = {
  __typename?: 'product_service_consumable_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Product_Service_Consumable>;
};

/** on conflict condition type for table "product.service_consumable" */
export type Product_Service_Consumable_On_Conflict = {
  constraint: Product_Service_Consumable_Constraint;
  update_columns?: Array<Product_Service_Consumable_Update_Column>;
  where?: Maybe<Product_Service_Consumable_Bool_Exp>;
};

/** Ordering options when selecting data from "product.service_consumable". */
export type Product_Service_Consumable_Order_By = {
  consumable?: Maybe<Product_Consumable_Order_By>;
  consumableid?: Maybe<Order_By>;
  quota?: Maybe<Order_By>;
  serviceid?: Maybe<Order_By>;
};

/** primary key columns input for table: product_service_consumable */
export type Product_Service_Consumable_Pk_Columns_Input = {
  consumableid: Scalars['uuid'];
  serviceid: Scalars['uuid'];
};

/** select columns of table "product.service_consumable" */
export enum Product_Service_Consumable_Select_Column {
  /** column name */
  Consumableid = 'consumableid',
  /** column name */
  Quota = 'quota',
  /** column name */
  Serviceid = 'serviceid'
}

/** input type for updating data in table "product.service_consumable" */
export type Product_Service_Consumable_Set_Input = {
  consumableid?: Maybe<Scalars['uuid']>;
  quota?: Maybe<Scalars['Float']>;
  serviceid?: Maybe<Scalars['uuid']>;
};

/** aggregate stddev on columns */
export type Product_Service_Consumable_Stddev_Fields = {
  __typename?: 'product_service_consumable_stddev_fields';
  quota?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "product.service_consumable" */
export type Product_Service_Consumable_Stddev_Order_By = {
  quota?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Product_Service_Consumable_Stddev_Pop_Fields = {
  __typename?: 'product_service_consumable_stddev_pop_fields';
  quota?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "product.service_consumable" */
export type Product_Service_Consumable_Stddev_Pop_Order_By = {
  quota?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Product_Service_Consumable_Stddev_Samp_Fields = {
  __typename?: 'product_service_consumable_stddev_samp_fields';
  quota?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "product.service_consumable" */
export type Product_Service_Consumable_Stddev_Samp_Order_By = {
  quota?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Product_Service_Consumable_Sum_Fields = {
  __typename?: 'product_service_consumable_sum_fields';
  quota?: Maybe<Scalars['Float']>;
};

/** order by sum() on columns of table "product.service_consumable" */
export type Product_Service_Consumable_Sum_Order_By = {
  quota?: Maybe<Order_By>;
};

/** update columns of table "product.service_consumable" */
export enum Product_Service_Consumable_Update_Column {
  /** column name */
  Consumableid = 'consumableid',
  /** column name */
  Quota = 'quota',
  /** column name */
  Serviceid = 'serviceid'
}

/** aggregate var_pop on columns */
export type Product_Service_Consumable_Var_Pop_Fields = {
  __typename?: 'product_service_consumable_var_pop_fields';
  quota?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "product.service_consumable" */
export type Product_Service_Consumable_Var_Pop_Order_By = {
  quota?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Product_Service_Consumable_Var_Samp_Fields = {
  __typename?: 'product_service_consumable_var_samp_fields';
  quota?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "product.service_consumable" */
export type Product_Service_Consumable_Var_Samp_Order_By = {
  quota?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Product_Service_Consumable_Variance_Fields = {
  __typename?: 'product_service_consumable_variance_fields';
  quota?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "product.service_consumable" */
export type Product_Service_Consumable_Variance_Order_By = {
  quota?: Maybe<Order_By>;
};

/** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
export type Product_Service_Delete_At_Path_Input = {
  paramValues?: Maybe<Array<Scalars['String']>>;
};

/** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
export type Product_Service_Delete_Elem_Input = {
  paramValues?: Maybe<Scalars['Int']>;
};

/** delete key/value pair or string element. key/value pairs are matched based on their key value */
export type Product_Service_Delete_Key_Input = {
  paramValues?: Maybe<Scalars['String']>;
};

/** input type for inserting data into table "product.service" */
export type Product_Service_Insert_Input = {
  paramValues?: Maybe<Scalars['jsonb']>;
  product?: Maybe<Product_Product_Obj_Rel_Insert_Input>;
  productcode?: Maybe<Scalars['String']>;
  serviceConfig?: Maybe<Product_ServiceConfig_Obj_Rel_Insert_Input>;
  serviceConfigid?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Product_Service_Max_Fields = {
  __typename?: 'product_service_max_fields';
  productcode?: Maybe<Scalars['String']>;
  serviceConfigid?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "product.service" */
export type Product_Service_Max_Order_By = {
  productcode?: Maybe<Order_By>;
  serviceConfigid?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Product_Service_Min_Fields = {
  __typename?: 'product_service_min_fields';
  productcode?: Maybe<Scalars['String']>;
  serviceConfigid?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "product.service" */
export type Product_Service_Min_Order_By = {
  productcode?: Maybe<Order_By>;
  serviceConfigid?: Maybe<Order_By>;
};

/** response of any mutation on the table "product.service" */
export type Product_Service_Mutation_Response = {
  __typename?: 'product_service_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Product_Service>;
};

/** input type for inserting object relation for remote table "product.service" */
export type Product_Service_Obj_Rel_Insert_Input = {
  data: Product_Service_Insert_Input;
  /** on conflict condition */
  on_conflict?: Maybe<Product_Service_On_Conflict>;
};

/** on conflict condition type for table "product.service" */
export type Product_Service_On_Conflict = {
  constraint: Product_Service_Constraint;
  update_columns?: Array<Product_Service_Update_Column>;
  where?: Maybe<Product_Service_Bool_Exp>;
};

/** Ordering options when selecting data from "product.service". */
export type Product_Service_Order_By = {
  paramValues?: Maybe<Order_By>;
  product?: Maybe<Product_Product_Order_By>;
  productcode?: Maybe<Order_By>;
  serviceConfig?: Maybe<Product_ServiceConfig_Order_By>;
  serviceConfigid?: Maybe<Order_By>;
};

/** primary key columns input for table: product_service */
export type Product_Service_Pk_Columns_Input = {
  productcode: Scalars['String'];
};

/** prepend existing jsonb value of filtered columns with new jsonb value */
export type Product_Service_Prepend_Input = {
  paramValues?: Maybe<Scalars['jsonb']>;
};

/** select columns of table "product.service" */
export enum Product_Service_Select_Column {
  /** column name */
  ParamValues = 'paramValues',
  /** column name */
  Productcode = 'productcode',
  /** column name */
  ServiceConfigid = 'serviceConfigid'
}

/** input type for updating data in table "product.service" */
export type Product_Service_Set_Input = {
  paramValues?: Maybe<Scalars['jsonb']>;
  productcode?: Maybe<Scalars['String']>;
  serviceConfigid?: Maybe<Scalars['uuid']>;
};

/** update columns of table "product.service" */
export enum Product_Service_Update_Column {
  /** column name */
  ParamValues = 'paramValues',
  /** column name */
  Productcode = 'productcode',
  /** column name */
  ServiceConfigid = 'serviceConfigid'
}

/** columns and relationships of "product.substance" */
export type Product_Substance = {
  __typename?: 'product_substance';
  /** An object relationship */
  accessory?: Maybe<Product_Accessory>;
  /** An object relationship */
  consomable?: Maybe<Product_Consumable>;
  /** An array relationship */
  delivery_items: Array<Purchase_Delivery_Item>;
  /** An aggregate relationship */
  delivery_items_aggregate: Purchase_Delivery_Item_Aggregate;
  /** An object relationship */
  glass?: Maybe<Product_Glass>;
  id: Scalars['uuid'];
  /** An object relationship */
  productAccessory?: Maybe<Product_Product_Accessory_View>;
  /** An object relationship */
  productConsumable?: Maybe<Product_Product_Consumable_View>;
  /** An object relationship */
  productGlass?: Maybe<Product_Product_Glass_View>;
  /** An array relationship */
  providers: Array<Product_Substance_Providers_View>;
  /** An aggregate relationship */
  providers_aggregate: Product_Substance_Providers_View_Aggregate;
  /** An array relationship */
  substance_providers: Array<Product_Substance_Provider>;
  /** An aggregate relationship */
  substance_providers_aggregate: Product_Substance_Provider_Aggregate;
  /** An object relationship */
  substance_type: Product_Substance_Type;
  /** An object relationship */
  supply?: Maybe<Product_Supply>;
  /** An array relationship */
  transfer_order_items: Array<Stock_Order_Item>;
  /** An aggregate relationship */
  transfer_order_items_aggregate: Stock_Order_Item_Aggregate;
  type: Product_Substance_Type_Enum;
  /** An array relationship */
  warehouse_substances: Array<Stock_Warehouse_Substance>;
  /** An aggregate relationship */
  warehouse_substances_aggregate: Stock_Warehouse_Substance_Aggregate;
};


/** columns and relationships of "product.substance" */
export type Product_SubstanceDelivery_ItemsArgs = {
  distinct_on?: Maybe<Array<Purchase_Delivery_Item_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Purchase_Delivery_Item_Order_By>>;
  where?: Maybe<Purchase_Delivery_Item_Bool_Exp>;
};


/** columns and relationships of "product.substance" */
export type Product_SubstanceDelivery_Items_AggregateArgs = {
  distinct_on?: Maybe<Array<Purchase_Delivery_Item_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Purchase_Delivery_Item_Order_By>>;
  where?: Maybe<Purchase_Delivery_Item_Bool_Exp>;
};


/** columns and relationships of "product.substance" */
export type Product_SubstanceProvidersArgs = {
  distinct_on?: Maybe<Array<Product_Substance_Providers_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Substance_Providers_View_Order_By>>;
  where?: Maybe<Product_Substance_Providers_View_Bool_Exp>;
};


/** columns and relationships of "product.substance" */
export type Product_SubstanceProviders_AggregateArgs = {
  distinct_on?: Maybe<Array<Product_Substance_Providers_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Substance_Providers_View_Order_By>>;
  where?: Maybe<Product_Substance_Providers_View_Bool_Exp>;
};


/** columns and relationships of "product.substance" */
export type Product_SubstanceSubstance_ProvidersArgs = {
  distinct_on?: Maybe<Array<Product_Substance_Provider_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Substance_Provider_Order_By>>;
  where?: Maybe<Product_Substance_Provider_Bool_Exp>;
};


/** columns and relationships of "product.substance" */
export type Product_SubstanceSubstance_Providers_AggregateArgs = {
  distinct_on?: Maybe<Array<Product_Substance_Provider_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Substance_Provider_Order_By>>;
  where?: Maybe<Product_Substance_Provider_Bool_Exp>;
};


/** columns and relationships of "product.substance" */
export type Product_SubstanceTransfer_Order_ItemsArgs = {
  distinct_on?: Maybe<Array<Stock_Order_Item_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Order_Item_Order_By>>;
  where?: Maybe<Stock_Order_Item_Bool_Exp>;
};


/** columns and relationships of "product.substance" */
export type Product_SubstanceTransfer_Order_Items_AggregateArgs = {
  distinct_on?: Maybe<Array<Stock_Order_Item_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Order_Item_Order_By>>;
  where?: Maybe<Stock_Order_Item_Bool_Exp>;
};


/** columns and relationships of "product.substance" */
export type Product_SubstanceWarehouse_SubstancesArgs = {
  distinct_on?: Maybe<Array<Stock_Warehouse_Substance_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Warehouse_Substance_Order_By>>;
  where?: Maybe<Stock_Warehouse_Substance_Bool_Exp>;
};


/** columns and relationships of "product.substance" */
export type Product_SubstanceWarehouse_Substances_AggregateArgs = {
  distinct_on?: Maybe<Array<Stock_Warehouse_Substance_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Warehouse_Substance_Order_By>>;
  where?: Maybe<Stock_Warehouse_Substance_Bool_Exp>;
};

/** aggregated selection of "product.substance" */
export type Product_Substance_Aggregate = {
  __typename?: 'product_substance_aggregate';
  aggregate?: Maybe<Product_Substance_Aggregate_Fields>;
  nodes: Array<Product_Substance>;
};

/** aggregate fields of "product.substance" */
export type Product_Substance_Aggregate_Fields = {
  __typename?: 'product_substance_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Product_Substance_Max_Fields>;
  min?: Maybe<Product_Substance_Min_Fields>;
};


/** aggregate fields of "product.substance" */
export type Product_Substance_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Product_Substance_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "product.substance" */
export type Product_Substance_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Product_Substance_Max_Order_By>;
  min?: Maybe<Product_Substance_Min_Order_By>;
};

/** input type for inserting array relation for remote table "product.substance" */
export type Product_Substance_Arr_Rel_Insert_Input = {
  data: Array<Product_Substance_Insert_Input>;
  /** on conflict condition */
  on_conflict?: Maybe<Product_Substance_On_Conflict>;
};

/** Boolean expression to filter rows from the table "product.substance". All fields are combined with a logical 'AND'. */
export type Product_Substance_Bool_Exp = {
  _and?: Maybe<Array<Product_Substance_Bool_Exp>>;
  _not?: Maybe<Product_Substance_Bool_Exp>;
  _or?: Maybe<Array<Product_Substance_Bool_Exp>>;
  accessory?: Maybe<Product_Accessory_Bool_Exp>;
  consomable?: Maybe<Product_Consumable_Bool_Exp>;
  delivery_items?: Maybe<Purchase_Delivery_Item_Bool_Exp>;
  glass?: Maybe<Product_Glass_Bool_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  productAccessory?: Maybe<Product_Product_Accessory_View_Bool_Exp>;
  productConsumable?: Maybe<Product_Product_Consumable_View_Bool_Exp>;
  productGlass?: Maybe<Product_Product_Glass_View_Bool_Exp>;
  providers?: Maybe<Product_Substance_Providers_View_Bool_Exp>;
  substance_providers?: Maybe<Product_Substance_Provider_Bool_Exp>;
  substance_type?: Maybe<Product_Substance_Type_Bool_Exp>;
  supply?: Maybe<Product_Supply_Bool_Exp>;
  transfer_order_items?: Maybe<Stock_Order_Item_Bool_Exp>;
  type?: Maybe<Product_Substance_Type_Enum_Comparison_Exp>;
  warehouse_substances?: Maybe<Stock_Warehouse_Substance_Bool_Exp>;
};

/** unique or primary key constraints on table "product.substance" */
export enum Product_Substance_Constraint {
  /** unique or primary key constraint */
  SubstancePkey = 'substance_pkey'
}

/** input type for inserting data into table "product.substance" */
export type Product_Substance_Insert_Input = {
  accessory?: Maybe<Product_Accessory_Obj_Rel_Insert_Input>;
  consomable?: Maybe<Product_Consumable_Obj_Rel_Insert_Input>;
  delivery_items?: Maybe<Purchase_Delivery_Item_Arr_Rel_Insert_Input>;
  glass?: Maybe<Product_Glass_Obj_Rel_Insert_Input>;
  id?: Maybe<Scalars['uuid']>;
  productAccessory?: Maybe<Product_Product_Accessory_View_Obj_Rel_Insert_Input>;
  productConsumable?: Maybe<Product_Product_Consumable_View_Obj_Rel_Insert_Input>;
  productGlass?: Maybe<Product_Product_Glass_View_Obj_Rel_Insert_Input>;
  providers?: Maybe<Product_Substance_Providers_View_Arr_Rel_Insert_Input>;
  substance_providers?: Maybe<Product_Substance_Provider_Arr_Rel_Insert_Input>;
  substance_type?: Maybe<Product_Substance_Type_Obj_Rel_Insert_Input>;
  supply?: Maybe<Product_Supply_Obj_Rel_Insert_Input>;
  transfer_order_items?: Maybe<Stock_Order_Item_Arr_Rel_Insert_Input>;
  type?: Maybe<Product_Substance_Type_Enum>;
  warehouse_substances?: Maybe<Stock_Warehouse_Substance_Arr_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Product_Substance_Max_Fields = {
  __typename?: 'product_substance_max_fields';
  id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "product.substance" */
export type Product_Substance_Max_Order_By = {
  id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Product_Substance_Min_Fields = {
  __typename?: 'product_substance_min_fields';
  id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "product.substance" */
export type Product_Substance_Min_Order_By = {
  id?: Maybe<Order_By>;
};

/** response of any mutation on the table "product.substance" */
export type Product_Substance_Mutation_Response = {
  __typename?: 'product_substance_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Product_Substance>;
};

/** input type for inserting object relation for remote table "product.substance" */
export type Product_Substance_Obj_Rel_Insert_Input = {
  data: Product_Substance_Insert_Input;
  /** on conflict condition */
  on_conflict?: Maybe<Product_Substance_On_Conflict>;
};

/** on conflict condition type for table "product.substance" */
export type Product_Substance_On_Conflict = {
  constraint: Product_Substance_Constraint;
  update_columns?: Array<Product_Substance_Update_Column>;
  where?: Maybe<Product_Substance_Bool_Exp>;
};

/** Ordering options when selecting data from "product.substance". */
export type Product_Substance_Order_By = {
  accessory?: Maybe<Product_Accessory_Order_By>;
  consomable?: Maybe<Product_Consumable_Order_By>;
  delivery_items_aggregate?: Maybe<Purchase_Delivery_Item_Aggregate_Order_By>;
  glass?: Maybe<Product_Glass_Order_By>;
  id?: Maybe<Order_By>;
  productAccessory?: Maybe<Product_Product_Accessory_View_Order_By>;
  productConsumable?: Maybe<Product_Product_Consumable_View_Order_By>;
  productGlass?: Maybe<Product_Product_Glass_View_Order_By>;
  providers_aggregate?: Maybe<Product_Substance_Providers_View_Aggregate_Order_By>;
  substance_providers_aggregate?: Maybe<Product_Substance_Provider_Aggregate_Order_By>;
  substance_type?: Maybe<Product_Substance_Type_Order_By>;
  supply?: Maybe<Product_Supply_Order_By>;
  transfer_order_items_aggregate?: Maybe<Stock_Order_Item_Aggregate_Order_By>;
  type?: Maybe<Order_By>;
  warehouse_substances_aggregate?: Maybe<Stock_Warehouse_Substance_Aggregate_Order_By>;
};

/** primary key columns input for table: product_substance */
export type Product_Substance_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** columns and relationships of "product.substance_provider" */
export type Product_Substance_Provider = {
  __typename?: 'product_substance_provider';
  cost: Scalars['Float'];
  /** An object relationship */
  provider: Contact_Provider;
  providerid: Scalars['uuid'];
  /** An object relationship */
  substance: Product_Substance;
  substanceid: Scalars['uuid'];
};

/** aggregated selection of "product.substance_provider" */
export type Product_Substance_Provider_Aggregate = {
  __typename?: 'product_substance_provider_aggregate';
  aggregate?: Maybe<Product_Substance_Provider_Aggregate_Fields>;
  nodes: Array<Product_Substance_Provider>;
};

/** aggregate fields of "product.substance_provider" */
export type Product_Substance_Provider_Aggregate_Fields = {
  __typename?: 'product_substance_provider_aggregate_fields';
  avg?: Maybe<Product_Substance_Provider_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Product_Substance_Provider_Max_Fields>;
  min?: Maybe<Product_Substance_Provider_Min_Fields>;
  stddev?: Maybe<Product_Substance_Provider_Stddev_Fields>;
  stddev_pop?: Maybe<Product_Substance_Provider_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Product_Substance_Provider_Stddev_Samp_Fields>;
  sum?: Maybe<Product_Substance_Provider_Sum_Fields>;
  var_pop?: Maybe<Product_Substance_Provider_Var_Pop_Fields>;
  var_samp?: Maybe<Product_Substance_Provider_Var_Samp_Fields>;
  variance?: Maybe<Product_Substance_Provider_Variance_Fields>;
};


/** aggregate fields of "product.substance_provider" */
export type Product_Substance_Provider_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Product_Substance_Provider_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "product.substance_provider" */
export type Product_Substance_Provider_Aggregate_Order_By = {
  avg?: Maybe<Product_Substance_Provider_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Product_Substance_Provider_Max_Order_By>;
  min?: Maybe<Product_Substance_Provider_Min_Order_By>;
  stddev?: Maybe<Product_Substance_Provider_Stddev_Order_By>;
  stddev_pop?: Maybe<Product_Substance_Provider_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Product_Substance_Provider_Stddev_Samp_Order_By>;
  sum?: Maybe<Product_Substance_Provider_Sum_Order_By>;
  var_pop?: Maybe<Product_Substance_Provider_Var_Pop_Order_By>;
  var_samp?: Maybe<Product_Substance_Provider_Var_Samp_Order_By>;
  variance?: Maybe<Product_Substance_Provider_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "product.substance_provider" */
export type Product_Substance_Provider_Arr_Rel_Insert_Input = {
  data: Array<Product_Substance_Provider_Insert_Input>;
  /** on conflict condition */
  on_conflict?: Maybe<Product_Substance_Provider_On_Conflict>;
};

/** aggregate avg on columns */
export type Product_Substance_Provider_Avg_Fields = {
  __typename?: 'product_substance_provider_avg_fields';
  cost?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "product.substance_provider" */
export type Product_Substance_Provider_Avg_Order_By = {
  cost?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "product.substance_provider". All fields are combined with a logical 'AND'. */
export type Product_Substance_Provider_Bool_Exp = {
  _and?: Maybe<Array<Product_Substance_Provider_Bool_Exp>>;
  _not?: Maybe<Product_Substance_Provider_Bool_Exp>;
  _or?: Maybe<Array<Product_Substance_Provider_Bool_Exp>>;
  cost?: Maybe<Float_Comparison_Exp>;
  provider?: Maybe<Contact_Provider_Bool_Exp>;
  providerid?: Maybe<Uuid_Comparison_Exp>;
  substance?: Maybe<Product_Substance_Bool_Exp>;
  substanceid?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "product.substance_provider" */
export enum Product_Substance_Provider_Constraint {
  /** unique or primary key constraint */
  SubstanceProvidersPkey = 'substance_providers_pkey'
}

/** input type for incrementing numeric columns in table "product.substance_provider" */
export type Product_Substance_Provider_Inc_Input = {
  cost?: Maybe<Scalars['Float']>;
};

/** input type for inserting data into table "product.substance_provider" */
export type Product_Substance_Provider_Insert_Input = {
  cost?: Maybe<Scalars['Float']>;
  provider?: Maybe<Contact_Provider_Obj_Rel_Insert_Input>;
  providerid?: Maybe<Scalars['uuid']>;
  substance?: Maybe<Product_Substance_Obj_Rel_Insert_Input>;
  substanceid?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Product_Substance_Provider_Max_Fields = {
  __typename?: 'product_substance_provider_max_fields';
  cost?: Maybe<Scalars['Float']>;
  providerid?: Maybe<Scalars['uuid']>;
  substanceid?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "product.substance_provider" */
export type Product_Substance_Provider_Max_Order_By = {
  cost?: Maybe<Order_By>;
  providerid?: Maybe<Order_By>;
  substanceid?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Product_Substance_Provider_Min_Fields = {
  __typename?: 'product_substance_provider_min_fields';
  cost?: Maybe<Scalars['Float']>;
  providerid?: Maybe<Scalars['uuid']>;
  substanceid?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "product.substance_provider" */
export type Product_Substance_Provider_Min_Order_By = {
  cost?: Maybe<Order_By>;
  providerid?: Maybe<Order_By>;
  substanceid?: Maybe<Order_By>;
};

/** response of any mutation on the table "product.substance_provider" */
export type Product_Substance_Provider_Mutation_Response = {
  __typename?: 'product_substance_provider_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Product_Substance_Provider>;
};

/** on conflict condition type for table "product.substance_provider" */
export type Product_Substance_Provider_On_Conflict = {
  constraint: Product_Substance_Provider_Constraint;
  update_columns?: Array<Product_Substance_Provider_Update_Column>;
  where?: Maybe<Product_Substance_Provider_Bool_Exp>;
};

/** Ordering options when selecting data from "product.substance_provider". */
export type Product_Substance_Provider_Order_By = {
  cost?: Maybe<Order_By>;
  provider?: Maybe<Contact_Provider_Order_By>;
  providerid?: Maybe<Order_By>;
  substance?: Maybe<Product_Substance_Order_By>;
  substanceid?: Maybe<Order_By>;
};

/** primary key columns input for table: product_substance_provider */
export type Product_Substance_Provider_Pk_Columns_Input = {
  providerid: Scalars['uuid'];
  substanceid: Scalars['uuid'];
};

/** select columns of table "product.substance_provider" */
export enum Product_Substance_Provider_Select_Column {
  /** column name */
  Cost = 'cost',
  /** column name */
  Providerid = 'providerid',
  /** column name */
  Substanceid = 'substanceid'
}

/** input type for updating data in table "product.substance_provider" */
export type Product_Substance_Provider_Set_Input = {
  cost?: Maybe<Scalars['Float']>;
  providerid?: Maybe<Scalars['uuid']>;
  substanceid?: Maybe<Scalars['uuid']>;
};

/** aggregate stddev on columns */
export type Product_Substance_Provider_Stddev_Fields = {
  __typename?: 'product_substance_provider_stddev_fields';
  cost?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "product.substance_provider" */
export type Product_Substance_Provider_Stddev_Order_By = {
  cost?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Product_Substance_Provider_Stddev_Pop_Fields = {
  __typename?: 'product_substance_provider_stddev_pop_fields';
  cost?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "product.substance_provider" */
export type Product_Substance_Provider_Stddev_Pop_Order_By = {
  cost?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Product_Substance_Provider_Stddev_Samp_Fields = {
  __typename?: 'product_substance_provider_stddev_samp_fields';
  cost?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "product.substance_provider" */
export type Product_Substance_Provider_Stddev_Samp_Order_By = {
  cost?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Product_Substance_Provider_Sum_Fields = {
  __typename?: 'product_substance_provider_sum_fields';
  cost?: Maybe<Scalars['Float']>;
};

/** order by sum() on columns of table "product.substance_provider" */
export type Product_Substance_Provider_Sum_Order_By = {
  cost?: Maybe<Order_By>;
};

/** update columns of table "product.substance_provider" */
export enum Product_Substance_Provider_Update_Column {
  /** column name */
  Cost = 'cost',
  /** column name */
  Providerid = 'providerid',
  /** column name */
  Substanceid = 'substanceid'
}

/** aggregate var_pop on columns */
export type Product_Substance_Provider_Var_Pop_Fields = {
  __typename?: 'product_substance_provider_var_pop_fields';
  cost?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "product.substance_provider" */
export type Product_Substance_Provider_Var_Pop_Order_By = {
  cost?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Product_Substance_Provider_Var_Samp_Fields = {
  __typename?: 'product_substance_provider_var_samp_fields';
  cost?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "product.substance_provider" */
export type Product_Substance_Provider_Var_Samp_Order_By = {
  cost?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Product_Substance_Provider_Variance_Fields = {
  __typename?: 'product_substance_provider_variance_fields';
  cost?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "product.substance_provider" */
export type Product_Substance_Provider_Variance_Order_By = {
  cost?: Maybe<Order_By>;
};

/** columns and relationships of "product.substance_providers_view" */
export type Product_Substance_Providers_View = {
  __typename?: 'product_substance_providers_view';
  FAX?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  cost?: Maybe<Scalars['Float']>;
  createdAt?: Maybe<Scalars['date']>;
  createdBy?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  mail?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  note?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  substanceid?: Maybe<Scalars['uuid']>;
  updatedAt?: Maybe<Scalars['date']>;
  updatedBy?: Maybe<Scalars['uuid']>;
  website?: Maybe<Scalars['String']>;
};

/** aggregated selection of "product.substance_providers_view" */
export type Product_Substance_Providers_View_Aggregate = {
  __typename?: 'product_substance_providers_view_aggregate';
  aggregate?: Maybe<Product_Substance_Providers_View_Aggregate_Fields>;
  nodes: Array<Product_Substance_Providers_View>;
};

/** aggregate fields of "product.substance_providers_view" */
export type Product_Substance_Providers_View_Aggregate_Fields = {
  __typename?: 'product_substance_providers_view_aggregate_fields';
  avg?: Maybe<Product_Substance_Providers_View_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Product_Substance_Providers_View_Max_Fields>;
  min?: Maybe<Product_Substance_Providers_View_Min_Fields>;
  stddev?: Maybe<Product_Substance_Providers_View_Stddev_Fields>;
  stddev_pop?: Maybe<Product_Substance_Providers_View_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Product_Substance_Providers_View_Stddev_Samp_Fields>;
  sum?: Maybe<Product_Substance_Providers_View_Sum_Fields>;
  var_pop?: Maybe<Product_Substance_Providers_View_Var_Pop_Fields>;
  var_samp?: Maybe<Product_Substance_Providers_View_Var_Samp_Fields>;
  variance?: Maybe<Product_Substance_Providers_View_Variance_Fields>;
};


/** aggregate fields of "product.substance_providers_view" */
export type Product_Substance_Providers_View_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Product_Substance_Providers_View_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "product.substance_providers_view" */
export type Product_Substance_Providers_View_Aggregate_Order_By = {
  avg?: Maybe<Product_Substance_Providers_View_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Product_Substance_Providers_View_Max_Order_By>;
  min?: Maybe<Product_Substance_Providers_View_Min_Order_By>;
  stddev?: Maybe<Product_Substance_Providers_View_Stddev_Order_By>;
  stddev_pop?: Maybe<Product_Substance_Providers_View_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Product_Substance_Providers_View_Stddev_Samp_Order_By>;
  sum?: Maybe<Product_Substance_Providers_View_Sum_Order_By>;
  var_pop?: Maybe<Product_Substance_Providers_View_Var_Pop_Order_By>;
  var_samp?: Maybe<Product_Substance_Providers_View_Var_Samp_Order_By>;
  variance?: Maybe<Product_Substance_Providers_View_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "product.substance_providers_view" */
export type Product_Substance_Providers_View_Arr_Rel_Insert_Input = {
  data: Array<Product_Substance_Providers_View_Insert_Input>;
};

/** aggregate avg on columns */
export type Product_Substance_Providers_View_Avg_Fields = {
  __typename?: 'product_substance_providers_view_avg_fields';
  cost?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "product.substance_providers_view" */
export type Product_Substance_Providers_View_Avg_Order_By = {
  cost?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "product.substance_providers_view". All fields are combined with a logical 'AND'. */
export type Product_Substance_Providers_View_Bool_Exp = {
  FAX?: Maybe<String_Comparison_Exp>;
  _and?: Maybe<Array<Product_Substance_Providers_View_Bool_Exp>>;
  _not?: Maybe<Product_Substance_Providers_View_Bool_Exp>;
  _or?: Maybe<Array<Product_Substance_Providers_View_Bool_Exp>>;
  code?: Maybe<String_Comparison_Exp>;
  cost?: Maybe<Float_Comparison_Exp>;
  createdAt?: Maybe<Date_Comparison_Exp>;
  createdBy?: Maybe<Uuid_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  mail?: Maybe<String_Comparison_Exp>;
  name?: Maybe<String_Comparison_Exp>;
  note?: Maybe<String_Comparison_Exp>;
  phone?: Maybe<String_Comparison_Exp>;
  substanceid?: Maybe<Uuid_Comparison_Exp>;
  updatedAt?: Maybe<Date_Comparison_Exp>;
  updatedBy?: Maybe<Uuid_Comparison_Exp>;
  website?: Maybe<String_Comparison_Exp>;
};

/** input type for inserting data into table "product.substance_providers_view" */
export type Product_Substance_Providers_View_Insert_Input = {
  FAX?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  cost?: Maybe<Scalars['Float']>;
  createdAt?: Maybe<Scalars['date']>;
  createdBy?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  mail?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  note?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  substanceid?: Maybe<Scalars['uuid']>;
  updatedAt?: Maybe<Scalars['date']>;
  updatedBy?: Maybe<Scalars['uuid']>;
  website?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Product_Substance_Providers_View_Max_Fields = {
  __typename?: 'product_substance_providers_view_max_fields';
  FAX?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  cost?: Maybe<Scalars['Float']>;
  createdAt?: Maybe<Scalars['date']>;
  createdBy?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  mail?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  note?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  substanceid?: Maybe<Scalars['uuid']>;
  updatedAt?: Maybe<Scalars['date']>;
  updatedBy?: Maybe<Scalars['uuid']>;
  website?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "product.substance_providers_view" */
export type Product_Substance_Providers_View_Max_Order_By = {
  FAX?: Maybe<Order_By>;
  code?: Maybe<Order_By>;
  cost?: Maybe<Order_By>;
  createdAt?: Maybe<Order_By>;
  createdBy?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  mail?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  note?: Maybe<Order_By>;
  phone?: Maybe<Order_By>;
  substanceid?: Maybe<Order_By>;
  updatedAt?: Maybe<Order_By>;
  updatedBy?: Maybe<Order_By>;
  website?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Product_Substance_Providers_View_Min_Fields = {
  __typename?: 'product_substance_providers_view_min_fields';
  FAX?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  cost?: Maybe<Scalars['Float']>;
  createdAt?: Maybe<Scalars['date']>;
  createdBy?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  mail?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  note?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  substanceid?: Maybe<Scalars['uuid']>;
  updatedAt?: Maybe<Scalars['date']>;
  updatedBy?: Maybe<Scalars['uuid']>;
  website?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "product.substance_providers_view" */
export type Product_Substance_Providers_View_Min_Order_By = {
  FAX?: Maybe<Order_By>;
  code?: Maybe<Order_By>;
  cost?: Maybe<Order_By>;
  createdAt?: Maybe<Order_By>;
  createdBy?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  mail?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  note?: Maybe<Order_By>;
  phone?: Maybe<Order_By>;
  substanceid?: Maybe<Order_By>;
  updatedAt?: Maybe<Order_By>;
  updatedBy?: Maybe<Order_By>;
  website?: Maybe<Order_By>;
};

/** Ordering options when selecting data from "product.substance_providers_view". */
export type Product_Substance_Providers_View_Order_By = {
  FAX?: Maybe<Order_By>;
  code?: Maybe<Order_By>;
  cost?: Maybe<Order_By>;
  createdAt?: Maybe<Order_By>;
  createdBy?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  mail?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  note?: Maybe<Order_By>;
  phone?: Maybe<Order_By>;
  substanceid?: Maybe<Order_By>;
  updatedAt?: Maybe<Order_By>;
  updatedBy?: Maybe<Order_By>;
  website?: Maybe<Order_By>;
};

/** select columns of table "product.substance_providers_view" */
export enum Product_Substance_Providers_View_Select_Column {
  /** column name */
  Fax = 'FAX',
  /** column name */
  Code = 'code',
  /** column name */
  Cost = 'cost',
  /** column name */
  CreatedAt = 'createdAt',
  /** column name */
  CreatedBy = 'createdBy',
  /** column name */
  Id = 'id',
  /** column name */
  Mail = 'mail',
  /** column name */
  Name = 'name',
  /** column name */
  Note = 'note',
  /** column name */
  Phone = 'phone',
  /** column name */
  Substanceid = 'substanceid',
  /** column name */
  UpdatedAt = 'updatedAt',
  /** column name */
  UpdatedBy = 'updatedBy',
  /** column name */
  Website = 'website'
}

/** aggregate stddev on columns */
export type Product_Substance_Providers_View_Stddev_Fields = {
  __typename?: 'product_substance_providers_view_stddev_fields';
  cost?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "product.substance_providers_view" */
export type Product_Substance_Providers_View_Stddev_Order_By = {
  cost?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Product_Substance_Providers_View_Stddev_Pop_Fields = {
  __typename?: 'product_substance_providers_view_stddev_pop_fields';
  cost?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "product.substance_providers_view" */
export type Product_Substance_Providers_View_Stddev_Pop_Order_By = {
  cost?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Product_Substance_Providers_View_Stddev_Samp_Fields = {
  __typename?: 'product_substance_providers_view_stddev_samp_fields';
  cost?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "product.substance_providers_view" */
export type Product_Substance_Providers_View_Stddev_Samp_Order_By = {
  cost?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Product_Substance_Providers_View_Sum_Fields = {
  __typename?: 'product_substance_providers_view_sum_fields';
  cost?: Maybe<Scalars['Float']>;
};

/** order by sum() on columns of table "product.substance_providers_view" */
export type Product_Substance_Providers_View_Sum_Order_By = {
  cost?: Maybe<Order_By>;
};

/** aggregate var_pop on columns */
export type Product_Substance_Providers_View_Var_Pop_Fields = {
  __typename?: 'product_substance_providers_view_var_pop_fields';
  cost?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "product.substance_providers_view" */
export type Product_Substance_Providers_View_Var_Pop_Order_By = {
  cost?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Product_Substance_Providers_View_Var_Samp_Fields = {
  __typename?: 'product_substance_providers_view_var_samp_fields';
  cost?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "product.substance_providers_view" */
export type Product_Substance_Providers_View_Var_Samp_Order_By = {
  cost?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Product_Substance_Providers_View_Variance_Fields = {
  __typename?: 'product_substance_providers_view_variance_fields';
  cost?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "product.substance_providers_view" */
export type Product_Substance_Providers_View_Variance_Order_By = {
  cost?: Maybe<Order_By>;
};

/** select columns of table "product.substance" */
export enum Product_Substance_Select_Column {
  /** column name */
  Id = 'id',
  /** column name */
  Type = 'type'
}

/** input type for updating data in table "product.substance" */
export type Product_Substance_Set_Input = {
  id?: Maybe<Scalars['uuid']>;
  type?: Maybe<Product_Substance_Type_Enum>;
};

/** columns and relationships of "product.substance_type" */
export type Product_Substance_Type = {
  __typename?: 'product_substance_type';
  description: Scalars['String'];
  /** An array relationship */
  substances: Array<Product_Substance>;
  /** An aggregate relationship */
  substances_aggregate: Product_Substance_Aggregate;
  type: Scalars['String'];
};


/** columns and relationships of "product.substance_type" */
export type Product_Substance_TypeSubstancesArgs = {
  distinct_on?: Maybe<Array<Product_Substance_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Substance_Order_By>>;
  where?: Maybe<Product_Substance_Bool_Exp>;
};


/** columns and relationships of "product.substance_type" */
export type Product_Substance_TypeSubstances_AggregateArgs = {
  distinct_on?: Maybe<Array<Product_Substance_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Substance_Order_By>>;
  where?: Maybe<Product_Substance_Bool_Exp>;
};

/** aggregated selection of "product.substance_type" */
export type Product_Substance_Type_Aggregate = {
  __typename?: 'product_substance_type_aggregate';
  aggregate?: Maybe<Product_Substance_Type_Aggregate_Fields>;
  nodes: Array<Product_Substance_Type>;
};

/** aggregate fields of "product.substance_type" */
export type Product_Substance_Type_Aggregate_Fields = {
  __typename?: 'product_substance_type_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Product_Substance_Type_Max_Fields>;
  min?: Maybe<Product_Substance_Type_Min_Fields>;
};


/** aggregate fields of "product.substance_type" */
export type Product_Substance_Type_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Product_Substance_Type_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** Boolean expression to filter rows from the table "product.substance_type". All fields are combined with a logical 'AND'. */
export type Product_Substance_Type_Bool_Exp = {
  _and?: Maybe<Array<Product_Substance_Type_Bool_Exp>>;
  _not?: Maybe<Product_Substance_Type_Bool_Exp>;
  _or?: Maybe<Array<Product_Substance_Type_Bool_Exp>>;
  description?: Maybe<String_Comparison_Exp>;
  substances?: Maybe<Product_Substance_Bool_Exp>;
  type?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "product.substance_type" */
export enum Product_Substance_Type_Constraint {
  /** unique or primary key constraint */
  SubstanceCategoryPkey = 'substance_category_pkey'
}

export enum Product_Substance_Type_Enum {
  /** accessoire et systeme apparent */
  Accessory = 'accessory',
  /** consommables et matiére premiére */
  Consumable = 'consumable',
  /** Produit Stockable */
  Glass = 'glass',
  /** Fournitures */
  Supply = 'supply'
}

/** Boolean expression to compare columns of type "product_substance_type_enum". All fields are combined with logical 'AND'. */
export type Product_Substance_Type_Enum_Comparison_Exp = {
  _eq?: Maybe<Product_Substance_Type_Enum>;
  _in?: Maybe<Array<Product_Substance_Type_Enum>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _neq?: Maybe<Product_Substance_Type_Enum>;
  _nin?: Maybe<Array<Product_Substance_Type_Enum>>;
};

/** input type for inserting data into table "product.substance_type" */
export type Product_Substance_Type_Insert_Input = {
  description?: Maybe<Scalars['String']>;
  substances?: Maybe<Product_Substance_Arr_Rel_Insert_Input>;
  type?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Product_Substance_Type_Max_Fields = {
  __typename?: 'product_substance_type_max_fields';
  description?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type Product_Substance_Type_Min_Fields = {
  __typename?: 'product_substance_type_min_fields';
  description?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

/** response of any mutation on the table "product.substance_type" */
export type Product_Substance_Type_Mutation_Response = {
  __typename?: 'product_substance_type_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Product_Substance_Type>;
};

/** input type for inserting object relation for remote table "product.substance_type" */
export type Product_Substance_Type_Obj_Rel_Insert_Input = {
  data: Product_Substance_Type_Insert_Input;
  /** on conflict condition */
  on_conflict?: Maybe<Product_Substance_Type_On_Conflict>;
};

/** on conflict condition type for table "product.substance_type" */
export type Product_Substance_Type_On_Conflict = {
  constraint: Product_Substance_Type_Constraint;
  update_columns?: Array<Product_Substance_Type_Update_Column>;
  where?: Maybe<Product_Substance_Type_Bool_Exp>;
};

/** Ordering options when selecting data from "product.substance_type". */
export type Product_Substance_Type_Order_By = {
  description?: Maybe<Order_By>;
  substances_aggregate?: Maybe<Product_Substance_Aggregate_Order_By>;
  type?: Maybe<Order_By>;
};

/** primary key columns input for table: product_substance_type */
export type Product_Substance_Type_Pk_Columns_Input = {
  type: Scalars['String'];
};

/** select columns of table "product.substance_type" */
export enum Product_Substance_Type_Select_Column {
  /** column name */
  Description = 'description',
  /** column name */
  Type = 'type'
}

/** input type for updating data in table "product.substance_type" */
export type Product_Substance_Type_Set_Input = {
  description?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

/** update columns of table "product.substance_type" */
export enum Product_Substance_Type_Update_Column {
  /** column name */
  Description = 'description',
  /** column name */
  Type = 'type'
}

/** update columns of table "product.substance" */
export enum Product_Substance_Update_Column {
  /** column name */
  Id = 'id',
  /** column name */
  Type = 'type'
}

/** columns and relationships of "product.supply" */
export type Product_Supply = {
  __typename?: 'product_supply';
  code: Scalars['String'];
  is_recoverable: Scalars['Boolean'];
  label: Scalars['String'];
  /** An object relationship */
  substance: Product_Substance;
  substanceid: Scalars['uuid'];
  unit?: Maybe<Scalars['String']>;
};

/** aggregated selection of "product.supply" */
export type Product_Supply_Aggregate = {
  __typename?: 'product_supply_aggregate';
  aggregate?: Maybe<Product_Supply_Aggregate_Fields>;
  nodes: Array<Product_Supply>;
};

/** aggregate fields of "product.supply" */
export type Product_Supply_Aggregate_Fields = {
  __typename?: 'product_supply_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Product_Supply_Max_Fields>;
  min?: Maybe<Product_Supply_Min_Fields>;
};


/** aggregate fields of "product.supply" */
export type Product_Supply_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Product_Supply_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** Boolean expression to filter rows from the table "product.supply". All fields are combined with a logical 'AND'. */
export type Product_Supply_Bool_Exp = {
  _and?: Maybe<Array<Product_Supply_Bool_Exp>>;
  _not?: Maybe<Product_Supply_Bool_Exp>;
  _or?: Maybe<Array<Product_Supply_Bool_Exp>>;
  code?: Maybe<String_Comparison_Exp>;
  is_recoverable?: Maybe<Boolean_Comparison_Exp>;
  label?: Maybe<String_Comparison_Exp>;
  substance?: Maybe<Product_Substance_Bool_Exp>;
  substanceid?: Maybe<Uuid_Comparison_Exp>;
  unit?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "product.supply" */
export enum Product_Supply_Constraint {
  /** unique or primary key constraint */
  SupplyLabelKey = 'supply_label_key',
  /** unique or primary key constraint */
  SupplyPkey = 'supply_pkey',
  /** unique or primary key constraint */
  SupplySubstanceidKey = 'supply_substanceid_key'
}

/** input type for inserting data into table "product.supply" */
export type Product_Supply_Insert_Input = {
  code?: Maybe<Scalars['String']>;
  is_recoverable?: Maybe<Scalars['Boolean']>;
  label?: Maybe<Scalars['String']>;
  substance?: Maybe<Product_Substance_Obj_Rel_Insert_Input>;
  substanceid?: Maybe<Scalars['uuid']>;
  unit?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Product_Supply_Max_Fields = {
  __typename?: 'product_supply_max_fields';
  code?: Maybe<Scalars['String']>;
  label?: Maybe<Scalars['String']>;
  substanceid?: Maybe<Scalars['uuid']>;
  unit?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type Product_Supply_Min_Fields = {
  __typename?: 'product_supply_min_fields';
  code?: Maybe<Scalars['String']>;
  label?: Maybe<Scalars['String']>;
  substanceid?: Maybe<Scalars['uuid']>;
  unit?: Maybe<Scalars['String']>;
};

/** response of any mutation on the table "product.supply" */
export type Product_Supply_Mutation_Response = {
  __typename?: 'product_supply_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Product_Supply>;
};

/** input type for inserting object relation for remote table "product.supply" */
export type Product_Supply_Obj_Rel_Insert_Input = {
  data: Product_Supply_Insert_Input;
  /** on conflict condition */
  on_conflict?: Maybe<Product_Supply_On_Conflict>;
};

/** on conflict condition type for table "product.supply" */
export type Product_Supply_On_Conflict = {
  constraint: Product_Supply_Constraint;
  update_columns?: Array<Product_Supply_Update_Column>;
  where?: Maybe<Product_Supply_Bool_Exp>;
};

/** Ordering options when selecting data from "product.supply". */
export type Product_Supply_Order_By = {
  code?: Maybe<Order_By>;
  is_recoverable?: Maybe<Order_By>;
  label?: Maybe<Order_By>;
  substance?: Maybe<Product_Substance_Order_By>;
  substanceid?: Maybe<Order_By>;
  unit?: Maybe<Order_By>;
};

/** primary key columns input for table: product_supply */
export type Product_Supply_Pk_Columns_Input = {
  code: Scalars['String'];
};

/** select columns of table "product.supply" */
export enum Product_Supply_Select_Column {
  /** column name */
  Code = 'code',
  /** column name */
  IsRecoverable = 'is_recoverable',
  /** column name */
  Label = 'label',
  /** column name */
  Substanceid = 'substanceid',
  /** column name */
  Unit = 'unit'
}

/** input type for updating data in table "product.supply" */
export type Product_Supply_Set_Input = {
  code?: Maybe<Scalars['String']>;
  is_recoverable?: Maybe<Scalars['Boolean']>;
  label?: Maybe<Scalars['String']>;
  substanceid?: Maybe<Scalars['uuid']>;
  unit?: Maybe<Scalars['String']>;
};

/** update columns of table "product.supply" */
export enum Product_Supply_Update_Column {
  /** column name */
  Code = 'code',
  /** column name */
  IsRecoverable = 'is_recoverable',
  /** column name */
  Label = 'label',
  /** column name */
  Substanceid = 'substanceid',
  /** column name */
  Unit = 'unit'
}

/** columns and relationships of "purchase.delivery" */
export type Purchase_Delivery = {
  __typename?: 'purchase_delivery';
  date: Scalars['date'];
  /** An array relationship */
  delivery_items: Array<Purchase_Delivery_Item>;
  /** An aggregate relationship */
  delivery_items_aggregate: Purchase_Delivery_Item_Aggregate;
  id: Scalars['Int'];
  /** An object relationship */
  provider: Contact_Provider;
  provider_id: Scalars['uuid'];
  ref?: Maybe<Scalars['String']>;
};


/** columns and relationships of "purchase.delivery" */
export type Purchase_DeliveryDelivery_ItemsArgs = {
  distinct_on?: Maybe<Array<Purchase_Delivery_Item_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Purchase_Delivery_Item_Order_By>>;
  where?: Maybe<Purchase_Delivery_Item_Bool_Exp>;
};


/** columns and relationships of "purchase.delivery" */
export type Purchase_DeliveryDelivery_Items_AggregateArgs = {
  distinct_on?: Maybe<Array<Purchase_Delivery_Item_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Purchase_Delivery_Item_Order_By>>;
  where?: Maybe<Purchase_Delivery_Item_Bool_Exp>;
};

/** aggregated selection of "purchase.delivery" */
export type Purchase_Delivery_Aggregate = {
  __typename?: 'purchase_delivery_aggregate';
  aggregate?: Maybe<Purchase_Delivery_Aggregate_Fields>;
  nodes: Array<Purchase_Delivery>;
};

/** aggregate fields of "purchase.delivery" */
export type Purchase_Delivery_Aggregate_Fields = {
  __typename?: 'purchase_delivery_aggregate_fields';
  avg?: Maybe<Purchase_Delivery_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Purchase_Delivery_Max_Fields>;
  min?: Maybe<Purchase_Delivery_Min_Fields>;
  stddev?: Maybe<Purchase_Delivery_Stddev_Fields>;
  stddev_pop?: Maybe<Purchase_Delivery_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Purchase_Delivery_Stddev_Samp_Fields>;
  sum?: Maybe<Purchase_Delivery_Sum_Fields>;
  var_pop?: Maybe<Purchase_Delivery_Var_Pop_Fields>;
  var_samp?: Maybe<Purchase_Delivery_Var_Samp_Fields>;
  variance?: Maybe<Purchase_Delivery_Variance_Fields>;
};


/** aggregate fields of "purchase.delivery" */
export type Purchase_Delivery_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Purchase_Delivery_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "purchase.delivery" */
export type Purchase_Delivery_Aggregate_Order_By = {
  avg?: Maybe<Purchase_Delivery_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Purchase_Delivery_Max_Order_By>;
  min?: Maybe<Purchase_Delivery_Min_Order_By>;
  stddev?: Maybe<Purchase_Delivery_Stddev_Order_By>;
  stddev_pop?: Maybe<Purchase_Delivery_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Purchase_Delivery_Stddev_Samp_Order_By>;
  sum?: Maybe<Purchase_Delivery_Sum_Order_By>;
  var_pop?: Maybe<Purchase_Delivery_Var_Pop_Order_By>;
  var_samp?: Maybe<Purchase_Delivery_Var_Samp_Order_By>;
  variance?: Maybe<Purchase_Delivery_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "purchase.delivery" */
export type Purchase_Delivery_Arr_Rel_Insert_Input = {
  data: Array<Purchase_Delivery_Insert_Input>;
  /** on conflict condition */
  on_conflict?: Maybe<Purchase_Delivery_On_Conflict>;
};

/** aggregate avg on columns */
export type Purchase_Delivery_Avg_Fields = {
  __typename?: 'purchase_delivery_avg_fields';
  id?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "purchase.delivery" */
export type Purchase_Delivery_Avg_Order_By = {
  id?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "purchase.delivery". All fields are combined with a logical 'AND'. */
export type Purchase_Delivery_Bool_Exp = {
  _and?: Maybe<Array<Purchase_Delivery_Bool_Exp>>;
  _not?: Maybe<Purchase_Delivery_Bool_Exp>;
  _or?: Maybe<Array<Purchase_Delivery_Bool_Exp>>;
  date?: Maybe<Date_Comparison_Exp>;
  delivery_items?: Maybe<Purchase_Delivery_Item_Bool_Exp>;
  id?: Maybe<Int_Comparison_Exp>;
  provider?: Maybe<Contact_Provider_Bool_Exp>;
  provider_id?: Maybe<Uuid_Comparison_Exp>;
  ref?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "purchase.delivery" */
export enum Purchase_Delivery_Constraint {
  /** unique or primary key constraint */
  DeliveryPkey = 'delivery_pkey'
}

/** input type for incrementing numeric columns in table "purchase.delivery" */
export type Purchase_Delivery_Inc_Input = {
  id?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "purchase.delivery" */
export type Purchase_Delivery_Insert_Input = {
  date?: Maybe<Scalars['date']>;
  delivery_items?: Maybe<Purchase_Delivery_Item_Arr_Rel_Insert_Input>;
  id?: Maybe<Scalars['Int']>;
  provider?: Maybe<Contact_Provider_Obj_Rel_Insert_Input>;
  provider_id?: Maybe<Scalars['uuid']>;
  ref?: Maybe<Scalars['String']>;
};

/** columns and relationships of "purchase.delivery_item" */
export type Purchase_Delivery_Item = {
  __typename?: 'purchase_delivery_item';
  code: Scalars['String'];
  cost?: Maybe<Scalars['numeric']>;
  /** An object relationship */
  delivery: Purchase_Delivery;
  delivery_id: Scalars['Int'];
  id: Scalars['uuid'];
  label: Scalars['String'];
  quantity: Scalars['numeric'];
  /** An object relationship */
  substance: Product_Substance;
  substance_id: Scalars['uuid'];
  unit: Scalars['String'];
  /** An object relationship */
  warehouse: Stock_Warehouse;
  warehouse_id: Scalars['uuid'];
};

/** aggregated selection of "purchase.delivery_item" */
export type Purchase_Delivery_Item_Aggregate = {
  __typename?: 'purchase_delivery_item_aggregate';
  aggregate?: Maybe<Purchase_Delivery_Item_Aggregate_Fields>;
  nodes: Array<Purchase_Delivery_Item>;
};

/** aggregate fields of "purchase.delivery_item" */
export type Purchase_Delivery_Item_Aggregate_Fields = {
  __typename?: 'purchase_delivery_item_aggregate_fields';
  avg?: Maybe<Purchase_Delivery_Item_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Purchase_Delivery_Item_Max_Fields>;
  min?: Maybe<Purchase_Delivery_Item_Min_Fields>;
  stddev?: Maybe<Purchase_Delivery_Item_Stddev_Fields>;
  stddev_pop?: Maybe<Purchase_Delivery_Item_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Purchase_Delivery_Item_Stddev_Samp_Fields>;
  sum?: Maybe<Purchase_Delivery_Item_Sum_Fields>;
  var_pop?: Maybe<Purchase_Delivery_Item_Var_Pop_Fields>;
  var_samp?: Maybe<Purchase_Delivery_Item_Var_Samp_Fields>;
  variance?: Maybe<Purchase_Delivery_Item_Variance_Fields>;
};


/** aggregate fields of "purchase.delivery_item" */
export type Purchase_Delivery_Item_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Purchase_Delivery_Item_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "purchase.delivery_item" */
export type Purchase_Delivery_Item_Aggregate_Order_By = {
  avg?: Maybe<Purchase_Delivery_Item_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Purchase_Delivery_Item_Max_Order_By>;
  min?: Maybe<Purchase_Delivery_Item_Min_Order_By>;
  stddev?: Maybe<Purchase_Delivery_Item_Stddev_Order_By>;
  stddev_pop?: Maybe<Purchase_Delivery_Item_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Purchase_Delivery_Item_Stddev_Samp_Order_By>;
  sum?: Maybe<Purchase_Delivery_Item_Sum_Order_By>;
  var_pop?: Maybe<Purchase_Delivery_Item_Var_Pop_Order_By>;
  var_samp?: Maybe<Purchase_Delivery_Item_Var_Samp_Order_By>;
  variance?: Maybe<Purchase_Delivery_Item_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "purchase.delivery_item" */
export type Purchase_Delivery_Item_Arr_Rel_Insert_Input = {
  data: Array<Purchase_Delivery_Item_Insert_Input>;
  /** on conflict condition */
  on_conflict?: Maybe<Purchase_Delivery_Item_On_Conflict>;
};

/** aggregate avg on columns */
export type Purchase_Delivery_Item_Avg_Fields = {
  __typename?: 'purchase_delivery_item_avg_fields';
  cost?: Maybe<Scalars['Float']>;
  delivery_id?: Maybe<Scalars['Float']>;
  quantity?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "purchase.delivery_item" */
export type Purchase_Delivery_Item_Avg_Order_By = {
  cost?: Maybe<Order_By>;
  delivery_id?: Maybe<Order_By>;
  quantity?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "purchase.delivery_item". All fields are combined with a logical 'AND'. */
export type Purchase_Delivery_Item_Bool_Exp = {
  _and?: Maybe<Array<Purchase_Delivery_Item_Bool_Exp>>;
  _not?: Maybe<Purchase_Delivery_Item_Bool_Exp>;
  _or?: Maybe<Array<Purchase_Delivery_Item_Bool_Exp>>;
  code?: Maybe<String_Comparison_Exp>;
  cost?: Maybe<Numeric_Comparison_Exp>;
  delivery?: Maybe<Purchase_Delivery_Bool_Exp>;
  delivery_id?: Maybe<Int_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  label?: Maybe<String_Comparison_Exp>;
  quantity?: Maybe<Numeric_Comparison_Exp>;
  substance?: Maybe<Product_Substance_Bool_Exp>;
  substance_id?: Maybe<Uuid_Comparison_Exp>;
  unit?: Maybe<String_Comparison_Exp>;
  warehouse?: Maybe<Stock_Warehouse_Bool_Exp>;
  warehouse_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "purchase.delivery_item" */
export enum Purchase_Delivery_Item_Constraint {
  /** unique or primary key constraint */
  DeliveryItemPkey = 'delivery_item_pkey'
}

/** input type for incrementing numeric columns in table "purchase.delivery_item" */
export type Purchase_Delivery_Item_Inc_Input = {
  cost?: Maybe<Scalars['numeric']>;
  delivery_id?: Maybe<Scalars['Int']>;
  quantity?: Maybe<Scalars['numeric']>;
};

/** input type for inserting data into table "purchase.delivery_item" */
export type Purchase_Delivery_Item_Insert_Input = {
  code?: Maybe<Scalars['String']>;
  cost?: Maybe<Scalars['numeric']>;
  delivery?: Maybe<Purchase_Delivery_Obj_Rel_Insert_Input>;
  delivery_id?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['uuid']>;
  label?: Maybe<Scalars['String']>;
  quantity?: Maybe<Scalars['numeric']>;
  substance?: Maybe<Product_Substance_Obj_Rel_Insert_Input>;
  substance_id?: Maybe<Scalars['uuid']>;
  unit?: Maybe<Scalars['String']>;
  warehouse?: Maybe<Stock_Warehouse_Obj_Rel_Insert_Input>;
  warehouse_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Purchase_Delivery_Item_Max_Fields = {
  __typename?: 'purchase_delivery_item_max_fields';
  code?: Maybe<Scalars['String']>;
  cost?: Maybe<Scalars['numeric']>;
  delivery_id?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['uuid']>;
  label?: Maybe<Scalars['String']>;
  quantity?: Maybe<Scalars['numeric']>;
  substance_id?: Maybe<Scalars['uuid']>;
  unit?: Maybe<Scalars['String']>;
  warehouse_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "purchase.delivery_item" */
export type Purchase_Delivery_Item_Max_Order_By = {
  code?: Maybe<Order_By>;
  cost?: Maybe<Order_By>;
  delivery_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  label?: Maybe<Order_By>;
  quantity?: Maybe<Order_By>;
  substance_id?: Maybe<Order_By>;
  unit?: Maybe<Order_By>;
  warehouse_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Purchase_Delivery_Item_Min_Fields = {
  __typename?: 'purchase_delivery_item_min_fields';
  code?: Maybe<Scalars['String']>;
  cost?: Maybe<Scalars['numeric']>;
  delivery_id?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['uuid']>;
  label?: Maybe<Scalars['String']>;
  quantity?: Maybe<Scalars['numeric']>;
  substance_id?: Maybe<Scalars['uuid']>;
  unit?: Maybe<Scalars['String']>;
  warehouse_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "purchase.delivery_item" */
export type Purchase_Delivery_Item_Min_Order_By = {
  code?: Maybe<Order_By>;
  cost?: Maybe<Order_By>;
  delivery_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  label?: Maybe<Order_By>;
  quantity?: Maybe<Order_By>;
  substance_id?: Maybe<Order_By>;
  unit?: Maybe<Order_By>;
  warehouse_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "purchase.delivery_item" */
export type Purchase_Delivery_Item_Mutation_Response = {
  __typename?: 'purchase_delivery_item_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Purchase_Delivery_Item>;
};

/** on conflict condition type for table "purchase.delivery_item" */
export type Purchase_Delivery_Item_On_Conflict = {
  constraint: Purchase_Delivery_Item_Constraint;
  update_columns?: Array<Purchase_Delivery_Item_Update_Column>;
  where?: Maybe<Purchase_Delivery_Item_Bool_Exp>;
};

/** Ordering options when selecting data from "purchase.delivery_item". */
export type Purchase_Delivery_Item_Order_By = {
  code?: Maybe<Order_By>;
  cost?: Maybe<Order_By>;
  delivery?: Maybe<Purchase_Delivery_Order_By>;
  delivery_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  label?: Maybe<Order_By>;
  quantity?: Maybe<Order_By>;
  substance?: Maybe<Product_Substance_Order_By>;
  substance_id?: Maybe<Order_By>;
  unit?: Maybe<Order_By>;
  warehouse?: Maybe<Stock_Warehouse_Order_By>;
  warehouse_id?: Maybe<Order_By>;
};

/** primary key columns input for table: purchase_delivery_item */
export type Purchase_Delivery_Item_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "purchase.delivery_item" */
export enum Purchase_Delivery_Item_Select_Column {
  /** column name */
  Code = 'code',
  /** column name */
  Cost = 'cost',
  /** column name */
  DeliveryId = 'delivery_id',
  /** column name */
  Id = 'id',
  /** column name */
  Label = 'label',
  /** column name */
  Quantity = 'quantity',
  /** column name */
  SubstanceId = 'substance_id',
  /** column name */
  Unit = 'unit',
  /** column name */
  WarehouseId = 'warehouse_id'
}

/** input type for updating data in table "purchase.delivery_item" */
export type Purchase_Delivery_Item_Set_Input = {
  code?: Maybe<Scalars['String']>;
  cost?: Maybe<Scalars['numeric']>;
  delivery_id?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['uuid']>;
  label?: Maybe<Scalars['String']>;
  quantity?: Maybe<Scalars['numeric']>;
  substance_id?: Maybe<Scalars['uuid']>;
  unit?: Maybe<Scalars['String']>;
  warehouse_id?: Maybe<Scalars['uuid']>;
};

/** aggregate stddev on columns */
export type Purchase_Delivery_Item_Stddev_Fields = {
  __typename?: 'purchase_delivery_item_stddev_fields';
  cost?: Maybe<Scalars['Float']>;
  delivery_id?: Maybe<Scalars['Float']>;
  quantity?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "purchase.delivery_item" */
export type Purchase_Delivery_Item_Stddev_Order_By = {
  cost?: Maybe<Order_By>;
  delivery_id?: Maybe<Order_By>;
  quantity?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Purchase_Delivery_Item_Stddev_Pop_Fields = {
  __typename?: 'purchase_delivery_item_stddev_pop_fields';
  cost?: Maybe<Scalars['Float']>;
  delivery_id?: Maybe<Scalars['Float']>;
  quantity?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "purchase.delivery_item" */
export type Purchase_Delivery_Item_Stddev_Pop_Order_By = {
  cost?: Maybe<Order_By>;
  delivery_id?: Maybe<Order_By>;
  quantity?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Purchase_Delivery_Item_Stddev_Samp_Fields = {
  __typename?: 'purchase_delivery_item_stddev_samp_fields';
  cost?: Maybe<Scalars['Float']>;
  delivery_id?: Maybe<Scalars['Float']>;
  quantity?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "purchase.delivery_item" */
export type Purchase_Delivery_Item_Stddev_Samp_Order_By = {
  cost?: Maybe<Order_By>;
  delivery_id?: Maybe<Order_By>;
  quantity?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Purchase_Delivery_Item_Sum_Fields = {
  __typename?: 'purchase_delivery_item_sum_fields';
  cost?: Maybe<Scalars['numeric']>;
  delivery_id?: Maybe<Scalars['Int']>;
  quantity?: Maybe<Scalars['numeric']>;
};

/** order by sum() on columns of table "purchase.delivery_item" */
export type Purchase_Delivery_Item_Sum_Order_By = {
  cost?: Maybe<Order_By>;
  delivery_id?: Maybe<Order_By>;
  quantity?: Maybe<Order_By>;
};

/** update columns of table "purchase.delivery_item" */
export enum Purchase_Delivery_Item_Update_Column {
  /** column name */
  Code = 'code',
  /** column name */
  Cost = 'cost',
  /** column name */
  DeliveryId = 'delivery_id',
  /** column name */
  Id = 'id',
  /** column name */
  Label = 'label',
  /** column name */
  Quantity = 'quantity',
  /** column name */
  SubstanceId = 'substance_id',
  /** column name */
  Unit = 'unit',
  /** column name */
  WarehouseId = 'warehouse_id'
}

/** aggregate var_pop on columns */
export type Purchase_Delivery_Item_Var_Pop_Fields = {
  __typename?: 'purchase_delivery_item_var_pop_fields';
  cost?: Maybe<Scalars['Float']>;
  delivery_id?: Maybe<Scalars['Float']>;
  quantity?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "purchase.delivery_item" */
export type Purchase_Delivery_Item_Var_Pop_Order_By = {
  cost?: Maybe<Order_By>;
  delivery_id?: Maybe<Order_By>;
  quantity?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Purchase_Delivery_Item_Var_Samp_Fields = {
  __typename?: 'purchase_delivery_item_var_samp_fields';
  cost?: Maybe<Scalars['Float']>;
  delivery_id?: Maybe<Scalars['Float']>;
  quantity?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "purchase.delivery_item" */
export type Purchase_Delivery_Item_Var_Samp_Order_By = {
  cost?: Maybe<Order_By>;
  delivery_id?: Maybe<Order_By>;
  quantity?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Purchase_Delivery_Item_Variance_Fields = {
  __typename?: 'purchase_delivery_item_variance_fields';
  cost?: Maybe<Scalars['Float']>;
  delivery_id?: Maybe<Scalars['Float']>;
  quantity?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "purchase.delivery_item" */
export type Purchase_Delivery_Item_Variance_Order_By = {
  cost?: Maybe<Order_By>;
  delivery_id?: Maybe<Order_By>;
  quantity?: Maybe<Order_By>;
};

/** aggregate max on columns */
export type Purchase_Delivery_Max_Fields = {
  __typename?: 'purchase_delivery_max_fields';
  date?: Maybe<Scalars['date']>;
  id?: Maybe<Scalars['Int']>;
  provider_id?: Maybe<Scalars['uuid']>;
  ref?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "purchase.delivery" */
export type Purchase_Delivery_Max_Order_By = {
  date?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  provider_id?: Maybe<Order_By>;
  ref?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Purchase_Delivery_Min_Fields = {
  __typename?: 'purchase_delivery_min_fields';
  date?: Maybe<Scalars['date']>;
  id?: Maybe<Scalars['Int']>;
  provider_id?: Maybe<Scalars['uuid']>;
  ref?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "purchase.delivery" */
export type Purchase_Delivery_Min_Order_By = {
  date?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  provider_id?: Maybe<Order_By>;
  ref?: Maybe<Order_By>;
};

/** response of any mutation on the table "purchase.delivery" */
export type Purchase_Delivery_Mutation_Response = {
  __typename?: 'purchase_delivery_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Purchase_Delivery>;
};

/** input type for inserting object relation for remote table "purchase.delivery" */
export type Purchase_Delivery_Obj_Rel_Insert_Input = {
  data: Purchase_Delivery_Insert_Input;
  /** on conflict condition */
  on_conflict?: Maybe<Purchase_Delivery_On_Conflict>;
};

/** on conflict condition type for table "purchase.delivery" */
export type Purchase_Delivery_On_Conflict = {
  constraint: Purchase_Delivery_Constraint;
  update_columns?: Array<Purchase_Delivery_Update_Column>;
  where?: Maybe<Purchase_Delivery_Bool_Exp>;
};

/** Ordering options when selecting data from "purchase.delivery". */
export type Purchase_Delivery_Order_By = {
  date?: Maybe<Order_By>;
  delivery_items_aggregate?: Maybe<Purchase_Delivery_Item_Aggregate_Order_By>;
  id?: Maybe<Order_By>;
  provider?: Maybe<Contact_Provider_Order_By>;
  provider_id?: Maybe<Order_By>;
  ref?: Maybe<Order_By>;
};

/** primary key columns input for table: purchase_delivery */
export type Purchase_Delivery_Pk_Columns_Input = {
  id: Scalars['Int'];
};

/** select columns of table "purchase.delivery" */
export enum Purchase_Delivery_Select_Column {
  /** column name */
  Date = 'date',
  /** column name */
  Id = 'id',
  /** column name */
  ProviderId = 'provider_id',
  /** column name */
  Ref = 'ref'
}

/** input type for updating data in table "purchase.delivery" */
export type Purchase_Delivery_Set_Input = {
  date?: Maybe<Scalars['date']>;
  id?: Maybe<Scalars['Int']>;
  provider_id?: Maybe<Scalars['uuid']>;
  ref?: Maybe<Scalars['String']>;
};

/** aggregate stddev on columns */
export type Purchase_Delivery_Stddev_Fields = {
  __typename?: 'purchase_delivery_stddev_fields';
  id?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "purchase.delivery" */
export type Purchase_Delivery_Stddev_Order_By = {
  id?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Purchase_Delivery_Stddev_Pop_Fields = {
  __typename?: 'purchase_delivery_stddev_pop_fields';
  id?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "purchase.delivery" */
export type Purchase_Delivery_Stddev_Pop_Order_By = {
  id?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Purchase_Delivery_Stddev_Samp_Fields = {
  __typename?: 'purchase_delivery_stddev_samp_fields';
  id?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "purchase.delivery" */
export type Purchase_Delivery_Stddev_Samp_Order_By = {
  id?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Purchase_Delivery_Sum_Fields = {
  __typename?: 'purchase_delivery_sum_fields';
  id?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "purchase.delivery" */
export type Purchase_Delivery_Sum_Order_By = {
  id?: Maybe<Order_By>;
};

/** update columns of table "purchase.delivery" */
export enum Purchase_Delivery_Update_Column {
  /** column name */
  Date = 'date',
  /** column name */
  Id = 'id',
  /** column name */
  ProviderId = 'provider_id',
  /** column name */
  Ref = 'ref'
}

/** aggregate var_pop on columns */
export type Purchase_Delivery_Var_Pop_Fields = {
  __typename?: 'purchase_delivery_var_pop_fields';
  id?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "purchase.delivery" */
export type Purchase_Delivery_Var_Pop_Order_By = {
  id?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Purchase_Delivery_Var_Samp_Fields = {
  __typename?: 'purchase_delivery_var_samp_fields';
  id?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "purchase.delivery" */
export type Purchase_Delivery_Var_Samp_Order_By = {
  id?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Purchase_Delivery_Variance_Fields = {
  __typename?: 'purchase_delivery_variance_fields';
  id?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "purchase.delivery" */
export type Purchase_Delivery_Variance_Order_By = {
  id?: Maybe<Order_By>;
};

export type Query_Root = {
  __typename?: 'query_root';
  /** fetch data from the table: "cash_register.cash_box" */
  cash_register_cash_box: Array<Cash_Register_Cash_Box>;
  /** fetch aggregated fields from the table: "cash_register.cash_box" */
  cash_register_cash_box_aggregate: Cash_Register_Cash_Box_Aggregate;
  /** fetch data from the table: "cash_register.cash_box" using primary key columns */
  cash_register_cash_box_by_pk?: Maybe<Cash_Register_Cash_Box>;
  /** fetch data from the table: "cash_register.expense_category" */
  cash_register_expense_category: Array<Cash_Register_Expense_Category>;
  /** fetch aggregated fields from the table: "cash_register.expense_category" */
  cash_register_expense_category_aggregate: Cash_Register_Expense_Category_Aggregate;
  /** fetch data from the table: "cash_register.expense_category" using primary key columns */
  cash_register_expense_category_by_pk?: Maybe<Cash_Register_Expense_Category>;
  /** fetch data from the table: "cash_register.expenses" */
  cash_register_expenses: Array<Cash_Register_Expenses>;
  /** fetch aggregated fields from the table: "cash_register.expenses" */
  cash_register_expenses_aggregate: Cash_Register_Expenses_Aggregate;
  /** fetch data from the table: "cash_register.expenses" using primary key columns */
  cash_register_expenses_by_pk?: Maybe<Cash_Register_Expenses>;
  /** fetch data from the table: "contact.address" */
  contact_address: Array<Contact_Address>;
  /** fetch aggregated fields from the table: "contact.address" */
  contact_address_aggregate: Contact_Address_Aggregate;
  /** fetch data from the table: "contact.address" using primary key columns */
  contact_address_by_pk?: Maybe<Contact_Address>;
  /** fetch data from the table: "contact.contact" */
  contact_contact: Array<Contact_Contact>;
  /** fetch data from the table: "contact.contact_address" */
  contact_contact_address: Array<Contact_Contact_Address>;
  /** fetch aggregated fields from the table: "contact.contact_address" */
  contact_contact_address_aggregate: Contact_Contact_Address_Aggregate;
  /** fetch data from the table: "contact.contact_address" using primary key columns */
  contact_contact_address_by_pk?: Maybe<Contact_Contact_Address>;
  /** fetch data from the table: "contact.contact_addresses_view" */
  contact_contact_addresses_view: Array<Contact_Contact_Addresses_View>;
  /** fetch aggregated fields from the table: "contact.contact_addresses_view" */
  contact_contact_addresses_view_aggregate: Contact_Contact_Addresses_View_Aggregate;
  /** fetch aggregated fields from the table: "contact.contact" */
  contact_contact_aggregate: Contact_Contact_Aggregate;
  /** fetch data from the table: "contact.contact" using primary key columns */
  contact_contact_by_pk?: Maybe<Contact_Contact>;
  /** fetch data from the table: "contact.contact_customers_view" */
  contact_contact_customers_view: Array<Contact_Contact_Customers_View>;
  /** fetch aggregated fields from the table: "contact.contact_customers_view" */
  contact_contact_customers_view_aggregate: Contact_Contact_Customers_View_Aggregate;
  /** fetch data from the table: "contact.contact_providers_view" */
  contact_contact_providers_view: Array<Contact_Contact_Providers_View>;
  /** fetch aggregated fields from the table: "contact.contact_providers_view" */
  contact_contact_providers_view_aggregate: Contact_Contact_Providers_View_Aggregate;
  /** fetch data from the table: "contact.customer" */
  contact_customer: Array<Contact_Customer>;
  /** fetch data from the table: "contact.customer_address" */
  contact_customer_address: Array<Contact_Customer_Address>;
  /** fetch aggregated fields from the table: "contact.customer_address" */
  contact_customer_address_aggregate: Contact_Customer_Address_Aggregate;
  /** fetch data from the table: "contact.customer_address" using primary key columns */
  contact_customer_address_by_pk?: Maybe<Contact_Customer_Address>;
  /** fetch data from the table: "contact.customer_addresses_view" */
  contact_customer_addresses_view: Array<Contact_Customer_Addresses_View>;
  /** fetch aggregated fields from the table: "contact.customer_addresses_view" */
  contact_customer_addresses_view_aggregate: Contact_Customer_Addresses_View_Aggregate;
  /** fetch aggregated fields from the table: "contact.customer" */
  contact_customer_aggregate: Contact_Customer_Aggregate;
  /** fetch data from the table: "contact.customer" using primary key columns */
  contact_customer_by_pk?: Maybe<Contact_Customer>;
  /** fetch data from the table: "contact.customer_contact" */
  contact_customer_contact: Array<Contact_Customer_Contact>;
  /** fetch aggregated fields from the table: "contact.customer_contact" */
  contact_customer_contact_aggregate: Contact_Customer_Contact_Aggregate;
  /** fetch data from the table: "contact.customer_contact" using primary key columns */
  contact_customer_contact_by_pk?: Maybe<Contact_Customer_Contact>;
  /** fetch data from the table: "contact.customer_contacts_view" */
  contact_customer_contacts_view: Array<Contact_Customer_Contacts_View>;
  /** fetch aggregated fields from the table: "contact.customer_contacts_view" */
  contact_customer_contacts_view_aggregate: Contact_Customer_Contacts_View_Aggregate;
  /** fetch data from the table: "contact.provider" */
  contact_provider: Array<Contact_Provider>;
  /** fetch data from the table: "contact.provider_address" */
  contact_provider_address: Array<Contact_Provider_Address>;
  /** fetch aggregated fields from the table: "contact.provider_address" */
  contact_provider_address_aggregate: Contact_Provider_Address_Aggregate;
  /** fetch data from the table: "contact.provider_address" using primary key columns */
  contact_provider_address_by_pk?: Maybe<Contact_Provider_Address>;
  /** fetch data from the table: "contact.provider_addresses_view" */
  contact_provider_addresses_view: Array<Contact_Provider_Addresses_View>;
  /** fetch aggregated fields from the table: "contact.provider_addresses_view" */
  contact_provider_addresses_view_aggregate: Contact_Provider_Addresses_View_Aggregate;
  /** fetch aggregated fields from the table: "contact.provider" */
  contact_provider_aggregate: Contact_Provider_Aggregate;
  /** fetch data from the table: "contact.provider" using primary key columns */
  contact_provider_by_pk?: Maybe<Contact_Provider>;
  /** fetch data from the table: "contact.provider_contact" */
  contact_provider_contact: Array<Contact_Provider_Contact>;
  /** fetch aggregated fields from the table: "contact.provider_contact" */
  contact_provider_contact_aggregate: Contact_Provider_Contact_Aggregate;
  /** fetch data from the table: "contact.provider_contact" using primary key columns */
  contact_provider_contact_by_pk?: Maybe<Contact_Provider_Contact>;
  /** fetch data from the table: "contact.provider_contacts_view" */
  contact_provider_contacts_view: Array<Contact_Provider_Contacts_View>;
  /** fetch aggregated fields from the table: "contact.provider_contacts_view" */
  contact_provider_contacts_view_aggregate: Contact_Provider_Contacts_View_Aggregate;
  /** fetch data from the table: "customer_situation" */
  customer_situation: Array<Customer_Situation>;
  /** fetch aggregated fields from the table: "customer_situation" */
  customer_situation_aggregate: Customer_Situation_Aggregate;
  /** fetch data from the table: "management.company" */
  management_company: Array<Management_Company>;
  /** fetch aggregated fields from the table: "management.company" */
  management_company_aggregate: Management_Company_Aggregate;
  /** fetch data from the table: "management.company" using primary key columns */
  management_company_by_pk?: Maybe<Management_Company>;
  /** fetch data from the table: "management.salesPoint" */
  management_salesPoint: Array<Management_SalesPoint>;
  /** fetch aggregated fields from the table: "management.salesPoint" */
  management_salesPoint_aggregate: Management_SalesPoint_Aggregate;
  /** fetch data from the table: "management.salesPoint" using primary key columns */
  management_salesPoint_by_pk?: Maybe<Management_SalesPoint>;
  /** fetch data from the table: "management.userProfile" */
  management_userProfile: Array<Management_UserProfile>;
  /** fetch aggregated fields from the table: "management.userProfile" */
  management_userProfile_aggregate: Management_UserProfile_Aggregate;
  /** fetch data from the table: "management.userProfile" using primary key columns */
  management_userProfile_by_pk?: Maybe<Management_UserProfile>;
  /** fetch data from the table: "management.user_role" */
  management_user_role: Array<Management_User_Role>;
  /** fetch aggregated fields from the table: "management.user_role" */
  management_user_role_aggregate: Management_User_Role_Aggregate;
  /** fetch data from the table: "management.user_role" using primary key columns */
  management_user_role_by_pk?: Maybe<Management_User_Role>;
  /** fetch data from the table: "manufacturing.job_order" */
  manufacturing_job_order: Array<Manufacturing_Job_Order>;
  /** fetch aggregated fields from the table: "manufacturing.job_order" */
  manufacturing_job_order_aggregate: Manufacturing_Job_Order_Aggregate;
  /** fetch data from the table: "manufacturing.job_order" using primary key columns */
  manufacturing_job_order_by_pk?: Maybe<Manufacturing_Job_Order>;
  /** fetch data from the table: "manufacturing.job_status" */
  manufacturing_job_status: Array<Manufacturing_Job_Status>;
  /** fetch aggregated fields from the table: "manufacturing.job_status" */
  manufacturing_job_status_aggregate: Manufacturing_Job_Status_Aggregate;
  /** fetch data from the table: "manufacturing.job_status" using primary key columns */
  manufacturing_job_status_by_pk?: Maybe<Manufacturing_Job_Status>;
  /** fetch data from the table: "manufacturing.manufacturing_consumable" */
  manufacturing_manufacturing_consumable: Array<Manufacturing_Manufacturing_Consumable>;
  /** fetch aggregated fields from the table: "manufacturing.manufacturing_consumable" */
  manufacturing_manufacturing_consumable_aggregate: Manufacturing_Manufacturing_Consumable_Aggregate;
  /** fetch data from the table: "manufacturing.manufacturing_consumable" using primary key columns */
  manufacturing_manufacturing_consumable_by_pk?: Maybe<Manufacturing_Manufacturing_Consumable>;
  /** fetch data from the table: "manufacturing.manufacturing_line" */
  manufacturing_manufacturing_line: Array<Manufacturing_Manufacturing_Line>;
  /** fetch aggregated fields from the table: "manufacturing.manufacturing_line" */
  manufacturing_manufacturing_line_aggregate: Manufacturing_Manufacturing_Line_Aggregate;
  /** fetch data from the table: "manufacturing.manufacturing_line" using primary key columns */
  manufacturing_manufacturing_line_by_pk?: Maybe<Manufacturing_Manufacturing_Line>;
  /** fetch data from the table: "manufacturing.manufacturing_line_status" */
  manufacturing_manufacturing_line_status: Array<Manufacturing_Manufacturing_Line_Status>;
  /** fetch aggregated fields from the table: "manufacturing.manufacturing_line_status" */
  manufacturing_manufacturing_line_status_aggregate: Manufacturing_Manufacturing_Line_Status_Aggregate;
  /** fetch data from the table: "manufacturing.manufacturing_line_status" using primary key columns */
  manufacturing_manufacturing_line_status_by_pk?: Maybe<Manufacturing_Manufacturing_Line_Status>;
  /** fetch data from the table: "manufacturing.manufacturing_service" */
  manufacturing_manufacturing_service: Array<Manufacturing_Manufacturing_Service>;
  /** fetch aggregated fields from the table: "manufacturing.manufacturing_service" */
  manufacturing_manufacturing_service_aggregate: Manufacturing_Manufacturing_Service_Aggregate;
  /** fetch data from the table: "manufacturing.manufacturing_service" using primary key columns */
  manufacturing_manufacturing_service_by_pk?: Maybe<Manufacturing_Manufacturing_Service>;
  /** fetch data from the table: "notification.notification" */
  notification_notification: Array<Notification_Notification>;
  /** fetch aggregated fields from the table: "notification.notification" */
  notification_notification_aggregate: Notification_Notification_Aggregate;
  /** fetch data from the table: "notification.notification" using primary key columns */
  notification_notification_by_pk?: Maybe<Notification_Notification>;
  /** fetch data from the table: "notification.notification_priority" */
  notification_notification_priority: Array<Notification_Notification_Priority>;
  /** fetch aggregated fields from the table: "notification.notification_priority" */
  notification_notification_priority_aggregate: Notification_Notification_Priority_Aggregate;
  /** fetch data from the table: "notification.notification_priority" using primary key columns */
  notification_notification_priority_by_pk?: Maybe<Notification_Notification_Priority>;
  /** fetch data from the table: "notification.notification_status" */
  notification_notification_status: Array<Notification_Notification_Status>;
  /** fetch aggregated fields from the table: "notification.notification_status" */
  notification_notification_status_aggregate: Notification_Notification_Status_Aggregate;
  /** fetch data from the table: "notification.notification_status" using primary key columns */
  notification_notification_status_by_pk?: Maybe<Notification_Notification_Status>;
  /** fetch data from the table: "product.accessory" */
  product_accessory: Array<Product_Accessory>;
  /** fetch data from the table: "product.accessoryTypes" */
  product_accessoryTypes: Array<Product_AccessoryTypes>;
  /** fetch aggregated fields from the table: "product.accessoryTypes" */
  product_accessoryTypes_aggregate: Product_AccessoryTypes_Aggregate;
  /** fetch data from the table: "product.accessoryTypes" using primary key columns */
  product_accessoryTypes_by_pk?: Maybe<Product_AccessoryTypes>;
  /** fetch aggregated fields from the table: "product.accessory" */
  product_accessory_aggregate: Product_Accessory_Aggregate;
  /** fetch data from the table: "product.accessory" using primary key columns */
  product_accessory_by_pk?: Maybe<Product_Accessory>;
  /** fetch data from the table: "product.consumable" */
  product_consumable: Array<Product_Consumable>;
  /** fetch data from the table: "product.consumableCategory" */
  product_consumableCategory: Array<Product_ConsumableCategory>;
  /** fetch aggregated fields from the table: "product.consumableCategory" */
  product_consumableCategory_aggregate: Product_ConsumableCategory_Aggregate;
  /** fetch data from the table: "product.consumableCategory" using primary key columns */
  product_consumableCategory_by_pk?: Maybe<Product_ConsumableCategory>;
  /** fetch aggregated fields from the table: "product.consumable" */
  product_consumable_aggregate: Product_Consumable_Aggregate;
  /** fetch data from the table: "product.consumable" using primary key columns */
  product_consumable_by_pk?: Maybe<Product_Consumable>;
  /** fetch data from the table: "product.customer_product" */
  product_customer_product: Array<Product_Customer_Product>;
  /** fetch aggregated fields from the table: "product.customer_product" */
  product_customer_product_aggregate: Product_Customer_Product_Aggregate;
  /** fetch data from the table: "product.customer_product" using primary key columns */
  product_customer_product_by_pk?: Maybe<Product_Customer_Product>;
  /** fetch data from the table: "product.glass" */
  product_glass: Array<Product_Glass>;
  /** fetch data from the table: "product.glassColor" */
  product_glassColor: Array<Product_GlassColor>;
  /** fetch aggregated fields from the table: "product.glassColor" */
  product_glassColor_aggregate: Product_GlassColor_Aggregate;
  /** fetch data from the table: "product.glassColor" using primary key columns */
  product_glassColor_by_pk?: Maybe<Product_GlassColor>;
  /** fetch data from the table: "product.glassThickness" */
  product_glassThickness: Array<Product_GlassThickness>;
  /** fetch aggregated fields from the table: "product.glassThickness" */
  product_glassThickness_aggregate: Product_GlassThickness_Aggregate;
  /** fetch data from the table: "product.glassThickness" using primary key columns */
  product_glassThickness_by_pk?: Maybe<Product_GlassThickness>;
  /** fetch data from the table: "product.glassType" */
  product_glassType: Array<Product_GlassType>;
  /** fetch aggregated fields from the table: "product.glassType" */
  product_glassType_aggregate: Product_GlassType_Aggregate;
  /** fetch data from the table: "product.glassType" using primary key columns */
  product_glassType_by_pk?: Maybe<Product_GlassType>;
  /** fetch aggregated fields from the table: "product.glass" */
  product_glass_aggregate: Product_Glass_Aggregate;
  /** fetch data from the table: "product.glass" using primary key columns */
  product_glass_by_pk?: Maybe<Product_Glass>;
  /** fetch data from the table: "product.product" */
  product_product: Array<Product_Product>;
  /** fetch data from the table: "product.product_accessory_view" */
  product_product_accessory_view: Array<Product_Product_Accessory_View>;
  /** fetch aggregated fields from the table: "product.product_accessory_view" */
  product_product_accessory_view_aggregate: Product_Product_Accessory_View_Aggregate;
  /** fetch aggregated fields from the table: "product.product" */
  product_product_aggregate: Product_Product_Aggregate;
  /** fetch data from the table: "product.product" using primary key columns */
  product_product_by_pk?: Maybe<Product_Product>;
  /** fetch data from the table: "product.product_companies" */
  product_product_companies: Array<Product_Product_Companies>;
  /** fetch aggregated fields from the table: "product.product_companies" */
  product_product_companies_aggregate: Product_Product_Companies_Aggregate;
  /** fetch data from the table: "product.product_companies" using primary key columns */
  product_product_companies_by_pk?: Maybe<Product_Product_Companies>;
  /** fetch data from the table: "product.product_companies_view" */
  product_product_companies_view: Array<Product_Product_Companies_View>;
  /** fetch aggregated fields from the table: "product.product_companies_view" */
  product_product_companies_view_aggregate: Product_Product_Companies_View_Aggregate;
  /** fetch data from the table: "product.product_consumable_view" */
  product_product_consumable_view: Array<Product_Product_Consumable_View>;
  /** fetch aggregated fields from the table: "product.product_consumable_view" */
  product_product_consumable_view_aggregate: Product_Product_Consumable_View_Aggregate;
  /** fetch data from the table: "product.product_glass_view" */
  product_product_glass_view: Array<Product_Product_Glass_View>;
  /** fetch aggregated fields from the table: "product.product_glass_view" */
  product_product_glass_view_aggregate: Product_Product_Glass_View_Aggregate;
  /** fetch data from the table: "product.product_unit" */
  product_product_unit: Array<Product_Product_Unit>;
  /** fetch aggregated fields from the table: "product.product_unit" */
  product_product_unit_aggregate: Product_Product_Unit_Aggregate;
  /** fetch data from the table: "product.product_unit" using primary key columns */
  product_product_unit_by_pk?: Maybe<Product_Product_Unit>;
  /** fetch data from the table: "product.service" */
  product_service: Array<Product_Service>;
  /** fetch data from the table: "product.serviceConfig" */
  product_serviceConfig: Array<Product_ServiceConfig>;
  /** fetch aggregated fields from the table: "product.serviceConfig" */
  product_serviceConfig_aggregate: Product_ServiceConfig_Aggregate;
  /** fetch data from the table: "product.serviceConfig" using primary key columns */
  product_serviceConfig_by_pk?: Maybe<Product_ServiceConfig>;
  /** fetch aggregated fields from the table: "product.service" */
  product_service_aggregate: Product_Service_Aggregate;
  /** fetch data from the table: "product.service" using primary key columns */
  product_service_by_pk?: Maybe<Product_Service>;
  /** fetch data from the table: "product.service_consumable" */
  product_service_consumable: Array<Product_Service_Consumable>;
  /** fetch aggregated fields from the table: "product.service_consumable" */
  product_service_consumable_aggregate: Product_Service_Consumable_Aggregate;
  /** fetch data from the table: "product.service_consumable" using primary key columns */
  product_service_consumable_by_pk?: Maybe<Product_Service_Consumable>;
  /** fetch data from the table: "product.substance" */
  product_substance: Array<Product_Substance>;
  /** fetch aggregated fields from the table: "product.substance" */
  product_substance_aggregate: Product_Substance_Aggregate;
  /** fetch data from the table: "product.substance" using primary key columns */
  product_substance_by_pk?: Maybe<Product_Substance>;
  /** fetch data from the table: "product.substance_provider" */
  product_substance_provider: Array<Product_Substance_Provider>;
  /** fetch aggregated fields from the table: "product.substance_provider" */
  product_substance_provider_aggregate: Product_Substance_Provider_Aggregate;
  /** fetch data from the table: "product.substance_provider" using primary key columns */
  product_substance_provider_by_pk?: Maybe<Product_Substance_Provider>;
  /** fetch data from the table: "product.substance_providers_view" */
  product_substance_providers_view: Array<Product_Substance_Providers_View>;
  /** fetch aggregated fields from the table: "product.substance_providers_view" */
  product_substance_providers_view_aggregate: Product_Substance_Providers_View_Aggregate;
  /** fetch data from the table: "product.substance_type" */
  product_substance_type: Array<Product_Substance_Type>;
  /** fetch aggregated fields from the table: "product.substance_type" */
  product_substance_type_aggregate: Product_Substance_Type_Aggregate;
  /** fetch data from the table: "product.substance_type" using primary key columns */
  product_substance_type_by_pk?: Maybe<Product_Substance_Type>;
  /** fetch data from the table: "product.supply" */
  product_supply: Array<Product_Supply>;
  /** fetch aggregated fields from the table: "product.supply" */
  product_supply_aggregate: Product_Supply_Aggregate;
  /** fetch data from the table: "product.supply" using primary key columns */
  product_supply_by_pk?: Maybe<Product_Supply>;
  /** fetch data from the table: "purchase.delivery" */
  purchase_delivery: Array<Purchase_Delivery>;
  /** fetch aggregated fields from the table: "purchase.delivery" */
  purchase_delivery_aggregate: Purchase_Delivery_Aggregate;
  /** fetch data from the table: "purchase.delivery" using primary key columns */
  purchase_delivery_by_pk?: Maybe<Purchase_Delivery>;
  /** fetch data from the table: "purchase.delivery_item" */
  purchase_delivery_item: Array<Purchase_Delivery_Item>;
  /** fetch aggregated fields from the table: "purchase.delivery_item" */
  purchase_delivery_item_aggregate: Purchase_Delivery_Item_Aggregate;
  /** fetch data from the table: "purchase.delivery_item" using primary key columns */
  purchase_delivery_item_by_pk?: Maybe<Purchase_Delivery_Item>;
  /** fetch data from the table: "sales.accessory_draft" */
  sales_accessory_draft: Array<Sales_Accessory_Draft>;
  /** fetch aggregated fields from the table: "sales.accessory_draft" */
  sales_accessory_draft_aggregate: Sales_Accessory_Draft_Aggregate;
  /** fetch data from the table: "sales.accessory_draft" using primary key columns */
  sales_accessory_draft_by_pk?: Maybe<Sales_Accessory_Draft>;
  /** fetch data from the table: "sales.amount" */
  sales_amount: Array<Sales_Amount>;
  /** fetch aggregated fields from the table: "sales.amount" */
  sales_amount_aggregate: Sales_Amount_Aggregate;
  /** fetch data from the table: "sales.amount" using primary key columns */
  sales_amount_by_pk?: Maybe<Sales_Amount>;
  /** fetch data from the table: "sales.consumable_draft" */
  sales_consumable_draft: Array<Sales_Consumable_Draft>;
  /** fetch aggregated fields from the table: "sales.consumable_draft" */
  sales_consumable_draft_aggregate: Sales_Consumable_Draft_Aggregate;
  /** fetch data from the table: "sales.consumable_draft" using primary key columns */
  sales_consumable_draft_by_pk?: Maybe<Sales_Consumable_Draft>;
  /** fetch data from the table: "sales.delivery" */
  sales_delivery: Array<Sales_Delivery>;
  /** fetch aggregated fields from the table: "sales.delivery" */
  sales_delivery_aggregate: Sales_Delivery_Aggregate;
  /** fetch data from the table: "sales.delivery" using primary key columns */
  sales_delivery_by_pk?: Maybe<Sales_Delivery>;
  /** fetch data from the table: "sales.delivery_line" */
  sales_delivery_line: Array<Sales_Delivery_Line>;
  /** fetch aggregated fields from the table: "sales.delivery_line" */
  sales_delivery_line_aggregate: Sales_Delivery_Line_Aggregate;
  /** fetch data from the table: "sales.delivery_line" using primary key columns */
  sales_delivery_line_by_pk?: Maybe<Sales_Delivery_Line>;
  /** fetch data from the table: "sales.draft" */
  sales_draft: Array<Sales_Draft>;
  /** fetch aggregated fields from the table: "sales.draft" */
  sales_draft_aggregate: Sales_Draft_Aggregate;
  /** fetch data from the table: "sales.draft" using primary key columns */
  sales_draft_by_pk?: Maybe<Sales_Draft>;
  /** fetch data from the table: "sales.draft_status" */
  sales_draft_status: Array<Sales_Draft_Status>;
  /** fetch aggregated fields from the table: "sales.draft_status" */
  sales_draft_status_aggregate: Sales_Draft_Status_Aggregate;
  /** fetch data from the table: "sales.draft_status" using primary key columns */
  sales_draft_status_by_pk?: Maybe<Sales_Draft_Status>;
  /** fetch data from the table: "sales.glass_draft" */
  sales_glass_draft: Array<Sales_Glass_Draft>;
  /** fetch aggregated fields from the table: "sales.glass_draft" */
  sales_glass_draft_aggregate: Sales_Glass_Draft_Aggregate;
  /** fetch data from the table: "sales.glass_draft" using primary key columns */
  sales_glass_draft_by_pk?: Maybe<Sales_Glass_Draft>;
  /** fetch data from the table: "sales.invoice" */
  sales_invoice: Array<Sales_Invoice>;
  /** fetch aggregated fields from the table: "sales.invoice" */
  sales_invoice_aggregate: Sales_Invoice_Aggregate;
  /** fetch data from the table: "sales.invoice" using primary key columns */
  sales_invoice_by_pk?: Maybe<Sales_Invoice>;
  /** fetch data from the table: "sales.invoice_delivery" */
  sales_invoice_delivery: Array<Sales_Invoice_Delivery>;
  /** fetch aggregated fields from the table: "sales.invoice_delivery" */
  sales_invoice_delivery_aggregate: Sales_Invoice_Delivery_Aggregate;
  /** fetch data from the table: "sales.invoice_delivery" using primary key columns */
  sales_invoice_delivery_by_pk?: Maybe<Sales_Invoice_Delivery>;
  /** fetch data from the table: "sales.invoice_line" */
  sales_invoice_line: Array<Sales_Invoice_Line>;
  /** fetch aggregated fields from the table: "sales.invoice_line" */
  sales_invoice_line_aggregate: Sales_Invoice_Line_Aggregate;
  /** fetch data from the table: "sales.invoice_line" using primary key columns */
  sales_invoice_line_by_pk?: Maybe<Sales_Invoice_Line>;
  /** fetch data from the table: "sales.order" */
  sales_order: Array<Sales_Order>;
  /** fetch aggregated fields from the table: "sales.order" */
  sales_order_aggregate: Sales_Order_Aggregate;
  /** fetch data from the table: "sales.order" using primary key columns */
  sales_order_by_pk?: Maybe<Sales_Order>;
  /** fetch data from the table: "sales.order_delivery_status" */
  sales_order_delivery_status: Array<Sales_Order_Delivery_Status>;
  /** fetch aggregated fields from the table: "sales.order_delivery_status" */
  sales_order_delivery_status_aggregate: Sales_Order_Delivery_Status_Aggregate;
  /** fetch data from the table: "sales.order_delivery_status" using primary key columns */
  sales_order_delivery_status_by_pk?: Maybe<Sales_Order_Delivery_Status>;
  /** fetch data from the table: "sales.payment" */
  sales_payment: Array<Sales_Payment>;
  /** fetch aggregated fields from the table: "sales.payment" */
  sales_payment_aggregate: Sales_Payment_Aggregate;
  /** fetch data from the table: "sales.payment" using primary key columns */
  sales_payment_by_pk?: Maybe<Sales_Payment>;
  /** fetch data from the table: "sales.payment_method" */
  sales_payment_method: Array<Sales_Payment_Method>;
  /** fetch aggregated fields from the table: "sales.payment_method" */
  sales_payment_method_aggregate: Sales_Payment_Method_Aggregate;
  /** fetch data from the table: "sales.payment_method" using primary key columns */
  sales_payment_method_by_pk?: Maybe<Sales_Payment_Method>;
  /** fetch data from the table: "sales.payment_status" */
  sales_payment_status: Array<Sales_Payment_Status>;
  /** fetch aggregated fields from the table: "sales.payment_status" */
  sales_payment_status_aggregate: Sales_Payment_Status_Aggregate;
  /** fetch data from the table: "sales.payment_status" using primary key columns */
  sales_payment_status_by_pk?: Maybe<Sales_Payment_Status>;
  /** fetch data from the table: "sales.product_draft" */
  sales_product_draft: Array<Sales_Product_Draft>;
  /** fetch aggregated fields from the table: "sales.product_draft" */
  sales_product_draft_aggregate: Sales_Product_Draft_Aggregate;
  /** fetch data from the table: "sales.product_draft" using primary key columns */
  sales_product_draft_by_pk?: Maybe<Sales_Product_Draft>;
  /** fetch data from the table: "sales.product_type" */
  sales_product_type: Array<Sales_Product_Type>;
  /** fetch aggregated fields from the table: "sales.product_type" */
  sales_product_type_aggregate: Sales_Product_Type_Aggregate;
  /** fetch data from the table: "sales.product_type" using primary key columns */
  sales_product_type_by_pk?: Maybe<Sales_Product_Type>;
  /** fetch data from the table: "sales.quotation" */
  sales_quotation: Array<Sales_Quotation>;
  /** fetch aggregated fields from the table: "sales.quotation" */
  sales_quotation_aggregate: Sales_Quotation_Aggregate;
  /** fetch data from the table: "sales.quotation" using primary key columns */
  sales_quotation_by_pk?: Maybe<Sales_Quotation>;
  /** fetch data from the table: "sales.quotation_status" */
  sales_quotation_status: Array<Sales_Quotation_Status>;
  /** fetch aggregated fields from the table: "sales.quotation_status" */
  sales_quotation_status_aggregate: Sales_Quotation_Status_Aggregate;
  /** fetch data from the table: "sales.quotation_status" using primary key columns */
  sales_quotation_status_by_pk?: Maybe<Sales_Quotation_Status>;
  /** fetch data from the table: "sales.service_draft" */
  sales_service_draft: Array<Sales_Service_Draft>;
  /** fetch aggregated fields from the table: "sales.service_draft" */
  sales_service_draft_aggregate: Sales_Service_Draft_Aggregate;
  /** fetch data from the table: "sales.service_draft" using primary key columns */
  sales_service_draft_by_pk?: Maybe<Sales_Service_Draft>;
  /** fetch data from the table: "sales.test" */
  sales_test: Array<Sales_Test>;
  /** fetch aggregated fields from the table: "sales.test" */
  sales_test_aggregate: Sales_Test_Aggregate;
  /** fetch data from the table: "sales.test" using primary key columns */
  sales_test_by_pk?: Maybe<Sales_Test>;
  /** fetch data from the table: "stock.adjustment_reasons" */
  stock_adjustment_reasons: Array<Stock_Adjustment_Reasons>;
  /** fetch aggregated fields from the table: "stock.adjustment_reasons" */
  stock_adjustment_reasons_aggregate: Stock_Adjustment_Reasons_Aggregate;
  /** fetch data from the table: "stock.adjustment_reasons" using primary key columns */
  stock_adjustment_reasons_by_pk?: Maybe<Stock_Adjustment_Reasons>;
  /** fetch data from the table: "stock.item_tranfer" */
  stock_item_tranfer: Array<Stock_Item_Tranfer>;
  /** fetch aggregated fields from the table: "stock.item_tranfer" */
  stock_item_tranfer_aggregate: Stock_Item_Tranfer_Aggregate;
  /** fetch data from the table: "stock.item_tranfer" using primary key columns */
  stock_item_tranfer_by_pk?: Maybe<Stock_Item_Tranfer>;
  /** fetch data from the table: "stock.item_transfer_status" */
  stock_item_transfer_status: Array<Stock_Item_Transfer_Status>;
  /** fetch aggregated fields from the table: "stock.item_transfer_status" */
  stock_item_transfer_status_aggregate: Stock_Item_Transfer_Status_Aggregate;
  /** fetch data from the table: "stock.item_transfer_status" using primary key columns */
  stock_item_transfer_status_by_pk?: Maybe<Stock_Item_Transfer_Status>;
  /** fetch data from the table: "stock.order_item" */
  stock_order_item: Array<Stock_Order_Item>;
  /** fetch aggregated fields from the table: "stock.order_item" */
  stock_order_item_aggregate: Stock_Order_Item_Aggregate;
  /** fetch data from the table: "stock.order_item" using primary key columns */
  stock_order_item_by_pk?: Maybe<Stock_Order_Item>;
  /** fetch data from the table: "stock.order_item_status" */
  stock_order_item_status: Array<Stock_Order_Item_Status>;
  /** fetch aggregated fields from the table: "stock.order_item_status" */
  stock_order_item_status_aggregate: Stock_Order_Item_Status_Aggregate;
  /** fetch data from the table: "stock.order_item_status" using primary key columns */
  stock_order_item_status_by_pk?: Maybe<Stock_Order_Item_Status>;
  /** fetch data from the table: "stock.stock_adjustment" */
  stock_stock_adjustment: Array<Stock_Stock_Adjustment>;
  /** fetch aggregated fields from the table: "stock.stock_adjustment" */
  stock_stock_adjustment_aggregate: Stock_Stock_Adjustment_Aggregate;
  /** fetch data from the table: "stock.stock_adjustment" using primary key columns */
  stock_stock_adjustment_by_pk?: Maybe<Stock_Stock_Adjustment>;
  /** fetch data from the table: "stock.transfer_order" */
  stock_transfer_order: Array<Stock_Transfer_Order>;
  /** fetch aggregated fields from the table: "stock.transfer_order" */
  stock_transfer_order_aggregate: Stock_Transfer_Order_Aggregate;
  /** fetch data from the table: "stock.transfer_order" using primary key columns */
  stock_transfer_order_by_pk?: Maybe<Stock_Transfer_Order>;
  /** fetch data from the table: "stock.transfer_order_status" */
  stock_transfer_order_status: Array<Stock_Transfer_Order_Status>;
  /** fetch aggregated fields from the table: "stock.transfer_order_status" */
  stock_transfer_order_status_aggregate: Stock_Transfer_Order_Status_Aggregate;
  /** fetch data from the table: "stock.transfer_order_status" using primary key columns */
  stock_transfer_order_status_by_pk?: Maybe<Stock_Transfer_Order_Status>;
  /** fetch data from the table: "stock.warehouse" */
  stock_warehouse: Array<Stock_Warehouse>;
  /** fetch aggregated fields from the table: "stock.warehouse" */
  stock_warehouse_aggregate: Stock_Warehouse_Aggregate;
  /** fetch data from the table: "stock.warehouse" using primary key columns */
  stock_warehouse_by_pk?: Maybe<Stock_Warehouse>;
  /** fetch data from the table: "stock.warehouse_order_view" */
  stock_warehouse_order_view: Array<Stock_Warehouse_Order_View>;
  /** fetch aggregated fields from the table: "stock.warehouse_order_view" */
  stock_warehouse_order_view_aggregate: Stock_Warehouse_Order_View_Aggregate;
  /** fetch data from the table: "stock.warehouse_substance" */
  stock_warehouse_substance: Array<Stock_Warehouse_Substance>;
  /** fetch aggregated fields from the table: "stock.warehouse_substance" */
  stock_warehouse_substance_aggregate: Stock_Warehouse_Substance_Aggregate;
  /** fetch data from the table: "stock.warehouse_substance" using primary key columns */
  stock_warehouse_substance_by_pk?: Maybe<Stock_Warehouse_Substance>;
};


export type Query_RootCash_Register_Cash_BoxArgs = {
  distinct_on?: Maybe<Array<Cash_Register_Cash_Box_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Cash_Register_Cash_Box_Order_By>>;
  where?: Maybe<Cash_Register_Cash_Box_Bool_Exp>;
};


export type Query_RootCash_Register_Cash_Box_AggregateArgs = {
  distinct_on?: Maybe<Array<Cash_Register_Cash_Box_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Cash_Register_Cash_Box_Order_By>>;
  where?: Maybe<Cash_Register_Cash_Box_Bool_Exp>;
};


export type Query_RootCash_Register_Cash_Box_By_PkArgs = {
  id: Scalars['Int'];
};


export type Query_RootCash_Register_Expense_CategoryArgs = {
  distinct_on?: Maybe<Array<Cash_Register_Expense_Category_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Cash_Register_Expense_Category_Order_By>>;
  where?: Maybe<Cash_Register_Expense_Category_Bool_Exp>;
};


export type Query_RootCash_Register_Expense_Category_AggregateArgs = {
  distinct_on?: Maybe<Array<Cash_Register_Expense_Category_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Cash_Register_Expense_Category_Order_By>>;
  where?: Maybe<Cash_Register_Expense_Category_Bool_Exp>;
};


export type Query_RootCash_Register_Expense_Category_By_PkArgs = {
  key: Scalars['String'];
};


export type Query_RootCash_Register_ExpensesArgs = {
  distinct_on?: Maybe<Array<Cash_Register_Expenses_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Cash_Register_Expenses_Order_By>>;
  where?: Maybe<Cash_Register_Expenses_Bool_Exp>;
};


export type Query_RootCash_Register_Expenses_AggregateArgs = {
  distinct_on?: Maybe<Array<Cash_Register_Expenses_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Cash_Register_Expenses_Order_By>>;
  where?: Maybe<Cash_Register_Expenses_Bool_Exp>;
};


export type Query_RootCash_Register_Expenses_By_PkArgs = {
  id: Scalars['Int'];
};


export type Query_RootContact_AddressArgs = {
  distinct_on?: Maybe<Array<Contact_Address_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Address_Order_By>>;
  where?: Maybe<Contact_Address_Bool_Exp>;
};


export type Query_RootContact_Address_AggregateArgs = {
  distinct_on?: Maybe<Array<Contact_Address_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Address_Order_By>>;
  where?: Maybe<Contact_Address_Bool_Exp>;
};


export type Query_RootContact_Address_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Query_RootContact_ContactArgs = {
  distinct_on?: Maybe<Array<Contact_Contact_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Contact_Order_By>>;
  where?: Maybe<Contact_Contact_Bool_Exp>;
};


export type Query_RootContact_Contact_AddressArgs = {
  distinct_on?: Maybe<Array<Contact_Contact_Address_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Contact_Address_Order_By>>;
  where?: Maybe<Contact_Contact_Address_Bool_Exp>;
};


export type Query_RootContact_Contact_Address_AggregateArgs = {
  distinct_on?: Maybe<Array<Contact_Contact_Address_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Contact_Address_Order_By>>;
  where?: Maybe<Contact_Contact_Address_Bool_Exp>;
};


export type Query_RootContact_Contact_Address_By_PkArgs = {
  addressid: Scalars['uuid'];
  contactid: Scalars['uuid'];
};


export type Query_RootContact_Contact_Addresses_ViewArgs = {
  distinct_on?: Maybe<Array<Contact_Contact_Addresses_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Contact_Addresses_View_Order_By>>;
  where?: Maybe<Contact_Contact_Addresses_View_Bool_Exp>;
};


export type Query_RootContact_Contact_Addresses_View_AggregateArgs = {
  distinct_on?: Maybe<Array<Contact_Contact_Addresses_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Contact_Addresses_View_Order_By>>;
  where?: Maybe<Contact_Contact_Addresses_View_Bool_Exp>;
};


export type Query_RootContact_Contact_AggregateArgs = {
  distinct_on?: Maybe<Array<Contact_Contact_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Contact_Order_By>>;
  where?: Maybe<Contact_Contact_Bool_Exp>;
};


export type Query_RootContact_Contact_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Query_RootContact_Contact_Customers_ViewArgs = {
  distinct_on?: Maybe<Array<Contact_Contact_Customers_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Contact_Customers_View_Order_By>>;
  where?: Maybe<Contact_Contact_Customers_View_Bool_Exp>;
};


export type Query_RootContact_Contact_Customers_View_AggregateArgs = {
  distinct_on?: Maybe<Array<Contact_Contact_Customers_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Contact_Customers_View_Order_By>>;
  where?: Maybe<Contact_Contact_Customers_View_Bool_Exp>;
};


export type Query_RootContact_Contact_Providers_ViewArgs = {
  distinct_on?: Maybe<Array<Contact_Contact_Providers_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Contact_Providers_View_Order_By>>;
  where?: Maybe<Contact_Contact_Providers_View_Bool_Exp>;
};


export type Query_RootContact_Contact_Providers_View_AggregateArgs = {
  distinct_on?: Maybe<Array<Contact_Contact_Providers_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Contact_Providers_View_Order_By>>;
  where?: Maybe<Contact_Contact_Providers_View_Bool_Exp>;
};


export type Query_RootContact_CustomerArgs = {
  distinct_on?: Maybe<Array<Contact_Customer_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Customer_Order_By>>;
  where?: Maybe<Contact_Customer_Bool_Exp>;
};


export type Query_RootContact_Customer_AddressArgs = {
  distinct_on?: Maybe<Array<Contact_Customer_Address_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Customer_Address_Order_By>>;
  where?: Maybe<Contact_Customer_Address_Bool_Exp>;
};


export type Query_RootContact_Customer_Address_AggregateArgs = {
  distinct_on?: Maybe<Array<Contact_Customer_Address_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Customer_Address_Order_By>>;
  where?: Maybe<Contact_Customer_Address_Bool_Exp>;
};


export type Query_RootContact_Customer_Address_By_PkArgs = {
  addressid: Scalars['uuid'];
  customerid: Scalars['uuid'];
};


export type Query_RootContact_Customer_Addresses_ViewArgs = {
  distinct_on?: Maybe<Array<Contact_Customer_Addresses_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Customer_Addresses_View_Order_By>>;
  where?: Maybe<Contact_Customer_Addresses_View_Bool_Exp>;
};


export type Query_RootContact_Customer_Addresses_View_AggregateArgs = {
  distinct_on?: Maybe<Array<Contact_Customer_Addresses_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Customer_Addresses_View_Order_By>>;
  where?: Maybe<Contact_Customer_Addresses_View_Bool_Exp>;
};


export type Query_RootContact_Customer_AggregateArgs = {
  distinct_on?: Maybe<Array<Contact_Customer_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Customer_Order_By>>;
  where?: Maybe<Contact_Customer_Bool_Exp>;
};


export type Query_RootContact_Customer_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Query_RootContact_Customer_ContactArgs = {
  distinct_on?: Maybe<Array<Contact_Customer_Contact_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Customer_Contact_Order_By>>;
  where?: Maybe<Contact_Customer_Contact_Bool_Exp>;
};


export type Query_RootContact_Customer_Contact_AggregateArgs = {
  distinct_on?: Maybe<Array<Contact_Customer_Contact_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Customer_Contact_Order_By>>;
  where?: Maybe<Contact_Customer_Contact_Bool_Exp>;
};


export type Query_RootContact_Customer_Contact_By_PkArgs = {
  contactid: Scalars['uuid'];
  customerid: Scalars['uuid'];
};


export type Query_RootContact_Customer_Contacts_ViewArgs = {
  distinct_on?: Maybe<Array<Contact_Customer_Contacts_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Customer_Contacts_View_Order_By>>;
  where?: Maybe<Contact_Customer_Contacts_View_Bool_Exp>;
};


export type Query_RootContact_Customer_Contacts_View_AggregateArgs = {
  distinct_on?: Maybe<Array<Contact_Customer_Contacts_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Customer_Contacts_View_Order_By>>;
  where?: Maybe<Contact_Customer_Contacts_View_Bool_Exp>;
};


export type Query_RootContact_ProviderArgs = {
  distinct_on?: Maybe<Array<Contact_Provider_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Provider_Order_By>>;
  where?: Maybe<Contact_Provider_Bool_Exp>;
};


export type Query_RootContact_Provider_AddressArgs = {
  distinct_on?: Maybe<Array<Contact_Provider_Address_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Provider_Address_Order_By>>;
  where?: Maybe<Contact_Provider_Address_Bool_Exp>;
};


export type Query_RootContact_Provider_Address_AggregateArgs = {
  distinct_on?: Maybe<Array<Contact_Provider_Address_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Provider_Address_Order_By>>;
  where?: Maybe<Contact_Provider_Address_Bool_Exp>;
};


export type Query_RootContact_Provider_Address_By_PkArgs = {
  addressid: Scalars['uuid'];
  providerid: Scalars['uuid'];
};


export type Query_RootContact_Provider_Addresses_ViewArgs = {
  distinct_on?: Maybe<Array<Contact_Provider_Addresses_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Provider_Addresses_View_Order_By>>;
  where?: Maybe<Contact_Provider_Addresses_View_Bool_Exp>;
};


export type Query_RootContact_Provider_Addresses_View_AggregateArgs = {
  distinct_on?: Maybe<Array<Contact_Provider_Addresses_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Provider_Addresses_View_Order_By>>;
  where?: Maybe<Contact_Provider_Addresses_View_Bool_Exp>;
};


export type Query_RootContact_Provider_AggregateArgs = {
  distinct_on?: Maybe<Array<Contact_Provider_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Provider_Order_By>>;
  where?: Maybe<Contact_Provider_Bool_Exp>;
};


export type Query_RootContact_Provider_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Query_RootContact_Provider_ContactArgs = {
  distinct_on?: Maybe<Array<Contact_Provider_Contact_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Provider_Contact_Order_By>>;
  where?: Maybe<Contact_Provider_Contact_Bool_Exp>;
};


export type Query_RootContact_Provider_Contact_AggregateArgs = {
  distinct_on?: Maybe<Array<Contact_Provider_Contact_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Provider_Contact_Order_By>>;
  where?: Maybe<Contact_Provider_Contact_Bool_Exp>;
};


export type Query_RootContact_Provider_Contact_By_PkArgs = {
  contactid: Scalars['uuid'];
  providerid: Scalars['uuid'];
};


export type Query_RootContact_Provider_Contacts_ViewArgs = {
  distinct_on?: Maybe<Array<Contact_Provider_Contacts_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Provider_Contacts_View_Order_By>>;
  where?: Maybe<Contact_Provider_Contacts_View_Bool_Exp>;
};


export type Query_RootContact_Provider_Contacts_View_AggregateArgs = {
  distinct_on?: Maybe<Array<Contact_Provider_Contacts_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Provider_Contacts_View_Order_By>>;
  where?: Maybe<Contact_Provider_Contacts_View_Bool_Exp>;
};


export type Query_RootCustomer_SituationArgs = {
  distinct_on?: Maybe<Array<Customer_Situation_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Customer_Situation_Order_By>>;
  where?: Maybe<Customer_Situation_Bool_Exp>;
};


export type Query_RootCustomer_Situation_AggregateArgs = {
  distinct_on?: Maybe<Array<Customer_Situation_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Customer_Situation_Order_By>>;
  where?: Maybe<Customer_Situation_Bool_Exp>;
};


export type Query_RootManagement_CompanyArgs = {
  distinct_on?: Maybe<Array<Management_Company_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Management_Company_Order_By>>;
  where?: Maybe<Management_Company_Bool_Exp>;
};


export type Query_RootManagement_Company_AggregateArgs = {
  distinct_on?: Maybe<Array<Management_Company_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Management_Company_Order_By>>;
  where?: Maybe<Management_Company_Bool_Exp>;
};


export type Query_RootManagement_Company_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Query_RootManagement_SalesPointArgs = {
  distinct_on?: Maybe<Array<Management_SalesPoint_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Management_SalesPoint_Order_By>>;
  where?: Maybe<Management_SalesPoint_Bool_Exp>;
};


export type Query_RootManagement_SalesPoint_AggregateArgs = {
  distinct_on?: Maybe<Array<Management_SalesPoint_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Management_SalesPoint_Order_By>>;
  where?: Maybe<Management_SalesPoint_Bool_Exp>;
};


export type Query_RootManagement_SalesPoint_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Query_RootManagement_UserProfileArgs = {
  distinct_on?: Maybe<Array<Management_UserProfile_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Management_UserProfile_Order_By>>;
  where?: Maybe<Management_UserProfile_Bool_Exp>;
};


export type Query_RootManagement_UserProfile_AggregateArgs = {
  distinct_on?: Maybe<Array<Management_UserProfile_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Management_UserProfile_Order_By>>;
  where?: Maybe<Management_UserProfile_Bool_Exp>;
};


export type Query_RootManagement_UserProfile_By_PkArgs = {
  id: Scalars['String'];
};


export type Query_RootManagement_User_RoleArgs = {
  distinct_on?: Maybe<Array<Management_User_Role_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Management_User_Role_Order_By>>;
  where?: Maybe<Management_User_Role_Bool_Exp>;
};


export type Query_RootManagement_User_Role_AggregateArgs = {
  distinct_on?: Maybe<Array<Management_User_Role_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Management_User_Role_Order_By>>;
  where?: Maybe<Management_User_Role_Bool_Exp>;
};


export type Query_RootManagement_User_Role_By_PkArgs = {
  name: Scalars['String'];
};


export type Query_RootManufacturing_Job_OrderArgs = {
  distinct_on?: Maybe<Array<Manufacturing_Job_Order_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Manufacturing_Job_Order_Order_By>>;
  where?: Maybe<Manufacturing_Job_Order_Bool_Exp>;
};


export type Query_RootManufacturing_Job_Order_AggregateArgs = {
  distinct_on?: Maybe<Array<Manufacturing_Job_Order_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Manufacturing_Job_Order_Order_By>>;
  where?: Maybe<Manufacturing_Job_Order_Bool_Exp>;
};


export type Query_RootManufacturing_Job_Order_By_PkArgs = {
  id: Scalars['Int'];
};


export type Query_RootManufacturing_Job_StatusArgs = {
  distinct_on?: Maybe<Array<Manufacturing_Job_Status_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Manufacturing_Job_Status_Order_By>>;
  where?: Maybe<Manufacturing_Job_Status_Bool_Exp>;
};


export type Query_RootManufacturing_Job_Status_AggregateArgs = {
  distinct_on?: Maybe<Array<Manufacturing_Job_Status_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Manufacturing_Job_Status_Order_By>>;
  where?: Maybe<Manufacturing_Job_Status_Bool_Exp>;
};


export type Query_RootManufacturing_Job_Status_By_PkArgs = {
  key: Scalars['String'];
};


export type Query_RootManufacturing_Manufacturing_ConsumableArgs = {
  distinct_on?: Maybe<Array<Manufacturing_Manufacturing_Consumable_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Manufacturing_Manufacturing_Consumable_Order_By>>;
  where?: Maybe<Manufacturing_Manufacturing_Consumable_Bool_Exp>;
};


export type Query_RootManufacturing_Manufacturing_Consumable_AggregateArgs = {
  distinct_on?: Maybe<Array<Manufacturing_Manufacturing_Consumable_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Manufacturing_Manufacturing_Consumable_Order_By>>;
  where?: Maybe<Manufacturing_Manufacturing_Consumable_Bool_Exp>;
};


export type Query_RootManufacturing_Manufacturing_Consumable_By_PkArgs = {
  consumable_draft_id: Scalars['uuid'];
  manufacturing_line_id: Scalars['Int'];
};


export type Query_RootManufacturing_Manufacturing_LineArgs = {
  distinct_on?: Maybe<Array<Manufacturing_Manufacturing_Line_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Manufacturing_Manufacturing_Line_Order_By>>;
  where?: Maybe<Manufacturing_Manufacturing_Line_Bool_Exp>;
};


export type Query_RootManufacturing_Manufacturing_Line_AggregateArgs = {
  distinct_on?: Maybe<Array<Manufacturing_Manufacturing_Line_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Manufacturing_Manufacturing_Line_Order_By>>;
  where?: Maybe<Manufacturing_Manufacturing_Line_Bool_Exp>;
};


export type Query_RootManufacturing_Manufacturing_Line_By_PkArgs = {
  id: Scalars['Int'];
};


export type Query_RootManufacturing_Manufacturing_Line_StatusArgs = {
  distinct_on?: Maybe<Array<Manufacturing_Manufacturing_Line_Status_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Manufacturing_Manufacturing_Line_Status_Order_By>>;
  where?: Maybe<Manufacturing_Manufacturing_Line_Status_Bool_Exp>;
};


export type Query_RootManufacturing_Manufacturing_Line_Status_AggregateArgs = {
  distinct_on?: Maybe<Array<Manufacturing_Manufacturing_Line_Status_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Manufacturing_Manufacturing_Line_Status_Order_By>>;
  where?: Maybe<Manufacturing_Manufacturing_Line_Status_Bool_Exp>;
};


export type Query_RootManufacturing_Manufacturing_Line_Status_By_PkArgs = {
  status: Scalars['String'];
};


export type Query_RootManufacturing_Manufacturing_ServiceArgs = {
  distinct_on?: Maybe<Array<Manufacturing_Manufacturing_Service_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Manufacturing_Manufacturing_Service_Order_By>>;
  where?: Maybe<Manufacturing_Manufacturing_Service_Bool_Exp>;
};


export type Query_RootManufacturing_Manufacturing_Service_AggregateArgs = {
  distinct_on?: Maybe<Array<Manufacturing_Manufacturing_Service_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Manufacturing_Manufacturing_Service_Order_By>>;
  where?: Maybe<Manufacturing_Manufacturing_Service_Bool_Exp>;
};


export type Query_RootManufacturing_Manufacturing_Service_By_PkArgs = {
  manufacturing_line_id: Scalars['Int'];
  service_draft_id: Scalars['uuid'];
};


export type Query_RootNotification_NotificationArgs = {
  distinct_on?: Maybe<Array<Notification_Notification_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Notification_Notification_Order_By>>;
  where?: Maybe<Notification_Notification_Bool_Exp>;
};


export type Query_RootNotification_Notification_AggregateArgs = {
  distinct_on?: Maybe<Array<Notification_Notification_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Notification_Notification_Order_By>>;
  where?: Maybe<Notification_Notification_Bool_Exp>;
};


export type Query_RootNotification_Notification_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Query_RootNotification_Notification_PriorityArgs = {
  distinct_on?: Maybe<Array<Notification_Notification_Priority_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Notification_Notification_Priority_Order_By>>;
  where?: Maybe<Notification_Notification_Priority_Bool_Exp>;
};


export type Query_RootNotification_Notification_Priority_AggregateArgs = {
  distinct_on?: Maybe<Array<Notification_Notification_Priority_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Notification_Notification_Priority_Order_By>>;
  where?: Maybe<Notification_Notification_Priority_Bool_Exp>;
};


export type Query_RootNotification_Notification_Priority_By_PkArgs = {
  key: Scalars['String'];
};


export type Query_RootNotification_Notification_StatusArgs = {
  distinct_on?: Maybe<Array<Notification_Notification_Status_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Notification_Notification_Status_Order_By>>;
  where?: Maybe<Notification_Notification_Status_Bool_Exp>;
};


export type Query_RootNotification_Notification_Status_AggregateArgs = {
  distinct_on?: Maybe<Array<Notification_Notification_Status_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Notification_Notification_Status_Order_By>>;
  where?: Maybe<Notification_Notification_Status_Bool_Exp>;
};


export type Query_RootNotification_Notification_Status_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Query_RootProduct_AccessoryArgs = {
  distinct_on?: Maybe<Array<Product_Accessory_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Accessory_Order_By>>;
  where?: Maybe<Product_Accessory_Bool_Exp>;
};


export type Query_RootProduct_AccessoryTypesArgs = {
  distinct_on?: Maybe<Array<Product_AccessoryTypes_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_AccessoryTypes_Order_By>>;
  where?: Maybe<Product_AccessoryTypes_Bool_Exp>;
};


export type Query_RootProduct_AccessoryTypes_AggregateArgs = {
  distinct_on?: Maybe<Array<Product_AccessoryTypes_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_AccessoryTypes_Order_By>>;
  where?: Maybe<Product_AccessoryTypes_Bool_Exp>;
};


export type Query_RootProduct_AccessoryTypes_By_PkArgs = {
  type: Scalars['String'];
};


export type Query_RootProduct_Accessory_AggregateArgs = {
  distinct_on?: Maybe<Array<Product_Accessory_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Accessory_Order_By>>;
  where?: Maybe<Product_Accessory_Bool_Exp>;
};


export type Query_RootProduct_Accessory_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Query_RootProduct_ConsumableArgs = {
  distinct_on?: Maybe<Array<Product_Consumable_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Consumable_Order_By>>;
  where?: Maybe<Product_Consumable_Bool_Exp>;
};


export type Query_RootProduct_ConsumableCategoryArgs = {
  distinct_on?: Maybe<Array<Product_ConsumableCategory_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_ConsumableCategory_Order_By>>;
  where?: Maybe<Product_ConsumableCategory_Bool_Exp>;
};


export type Query_RootProduct_ConsumableCategory_AggregateArgs = {
  distinct_on?: Maybe<Array<Product_ConsumableCategory_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_ConsumableCategory_Order_By>>;
  where?: Maybe<Product_ConsumableCategory_Bool_Exp>;
};


export type Query_RootProduct_ConsumableCategory_By_PkArgs = {
  category: Scalars['String'];
};


export type Query_RootProduct_Consumable_AggregateArgs = {
  distinct_on?: Maybe<Array<Product_Consumable_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Consumable_Order_By>>;
  where?: Maybe<Product_Consumable_Bool_Exp>;
};


export type Query_RootProduct_Consumable_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Query_RootProduct_Customer_ProductArgs = {
  distinct_on?: Maybe<Array<Product_Customer_Product_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Customer_Product_Order_By>>;
  where?: Maybe<Product_Customer_Product_Bool_Exp>;
};


export type Query_RootProduct_Customer_Product_AggregateArgs = {
  distinct_on?: Maybe<Array<Product_Customer_Product_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Customer_Product_Order_By>>;
  where?: Maybe<Product_Customer_Product_Bool_Exp>;
};


export type Query_RootProduct_Customer_Product_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Query_RootProduct_GlassArgs = {
  distinct_on?: Maybe<Array<Product_Glass_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Glass_Order_By>>;
  where?: Maybe<Product_Glass_Bool_Exp>;
};


export type Query_RootProduct_GlassColorArgs = {
  distinct_on?: Maybe<Array<Product_GlassColor_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_GlassColor_Order_By>>;
  where?: Maybe<Product_GlassColor_Bool_Exp>;
};


export type Query_RootProduct_GlassColor_AggregateArgs = {
  distinct_on?: Maybe<Array<Product_GlassColor_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_GlassColor_Order_By>>;
  where?: Maybe<Product_GlassColor_Bool_Exp>;
};


export type Query_RootProduct_GlassColor_By_PkArgs = {
  color: Scalars['String'];
};


export type Query_RootProduct_GlassThicknessArgs = {
  distinct_on?: Maybe<Array<Product_GlassThickness_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_GlassThickness_Order_By>>;
  where?: Maybe<Product_GlassThickness_Bool_Exp>;
};


export type Query_RootProduct_GlassThickness_AggregateArgs = {
  distinct_on?: Maybe<Array<Product_GlassThickness_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_GlassThickness_Order_By>>;
  where?: Maybe<Product_GlassThickness_Bool_Exp>;
};


export type Query_RootProduct_GlassThickness_By_PkArgs = {
  thickness: Scalars['String'];
};


export type Query_RootProduct_GlassTypeArgs = {
  distinct_on?: Maybe<Array<Product_GlassType_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_GlassType_Order_By>>;
  where?: Maybe<Product_GlassType_Bool_Exp>;
};


export type Query_RootProduct_GlassType_AggregateArgs = {
  distinct_on?: Maybe<Array<Product_GlassType_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_GlassType_Order_By>>;
  where?: Maybe<Product_GlassType_Bool_Exp>;
};


export type Query_RootProduct_GlassType_By_PkArgs = {
  type: Scalars['String'];
};


export type Query_RootProduct_Glass_AggregateArgs = {
  distinct_on?: Maybe<Array<Product_Glass_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Glass_Order_By>>;
  where?: Maybe<Product_Glass_Bool_Exp>;
};


export type Query_RootProduct_Glass_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Query_RootProduct_ProductArgs = {
  distinct_on?: Maybe<Array<Product_Product_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Product_Order_By>>;
  where?: Maybe<Product_Product_Bool_Exp>;
};


export type Query_RootProduct_Product_Accessory_ViewArgs = {
  distinct_on?: Maybe<Array<Product_Product_Accessory_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Product_Accessory_View_Order_By>>;
  where?: Maybe<Product_Product_Accessory_View_Bool_Exp>;
};


export type Query_RootProduct_Product_Accessory_View_AggregateArgs = {
  distinct_on?: Maybe<Array<Product_Product_Accessory_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Product_Accessory_View_Order_By>>;
  where?: Maybe<Product_Product_Accessory_View_Bool_Exp>;
};


export type Query_RootProduct_Product_AggregateArgs = {
  distinct_on?: Maybe<Array<Product_Product_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Product_Order_By>>;
  where?: Maybe<Product_Product_Bool_Exp>;
};


export type Query_RootProduct_Product_By_PkArgs = {
  code: Scalars['String'];
};


export type Query_RootProduct_Product_CompaniesArgs = {
  distinct_on?: Maybe<Array<Product_Product_Companies_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Product_Companies_Order_By>>;
  where?: Maybe<Product_Product_Companies_Bool_Exp>;
};


export type Query_RootProduct_Product_Companies_AggregateArgs = {
  distinct_on?: Maybe<Array<Product_Product_Companies_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Product_Companies_Order_By>>;
  where?: Maybe<Product_Product_Companies_Bool_Exp>;
};


export type Query_RootProduct_Product_Companies_By_PkArgs = {
  companyid: Scalars['uuid'];
  productcode: Scalars['String'];
};


export type Query_RootProduct_Product_Companies_ViewArgs = {
  distinct_on?: Maybe<Array<Product_Product_Companies_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Product_Companies_View_Order_By>>;
  where?: Maybe<Product_Product_Companies_View_Bool_Exp>;
};


export type Query_RootProduct_Product_Companies_View_AggregateArgs = {
  distinct_on?: Maybe<Array<Product_Product_Companies_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Product_Companies_View_Order_By>>;
  where?: Maybe<Product_Product_Companies_View_Bool_Exp>;
};


export type Query_RootProduct_Product_Consumable_ViewArgs = {
  distinct_on?: Maybe<Array<Product_Product_Consumable_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Product_Consumable_View_Order_By>>;
  where?: Maybe<Product_Product_Consumable_View_Bool_Exp>;
};


export type Query_RootProduct_Product_Consumable_View_AggregateArgs = {
  distinct_on?: Maybe<Array<Product_Product_Consumable_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Product_Consumable_View_Order_By>>;
  where?: Maybe<Product_Product_Consumable_View_Bool_Exp>;
};


export type Query_RootProduct_Product_Glass_ViewArgs = {
  distinct_on?: Maybe<Array<Product_Product_Glass_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Product_Glass_View_Order_By>>;
  where?: Maybe<Product_Product_Glass_View_Bool_Exp>;
};


export type Query_RootProduct_Product_Glass_View_AggregateArgs = {
  distinct_on?: Maybe<Array<Product_Product_Glass_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Product_Glass_View_Order_By>>;
  where?: Maybe<Product_Product_Glass_View_Bool_Exp>;
};


export type Query_RootProduct_Product_UnitArgs = {
  distinct_on?: Maybe<Array<Product_Product_Unit_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Product_Unit_Order_By>>;
  where?: Maybe<Product_Product_Unit_Bool_Exp>;
};


export type Query_RootProduct_Product_Unit_AggregateArgs = {
  distinct_on?: Maybe<Array<Product_Product_Unit_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Product_Unit_Order_By>>;
  where?: Maybe<Product_Product_Unit_Bool_Exp>;
};


export type Query_RootProduct_Product_Unit_By_PkArgs = {
  unit: Scalars['String'];
};


export type Query_RootProduct_ServiceArgs = {
  distinct_on?: Maybe<Array<Product_Service_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Service_Order_By>>;
  where?: Maybe<Product_Service_Bool_Exp>;
};


export type Query_RootProduct_ServiceConfigArgs = {
  distinct_on?: Maybe<Array<Product_ServiceConfig_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_ServiceConfig_Order_By>>;
  where?: Maybe<Product_ServiceConfig_Bool_Exp>;
};


export type Query_RootProduct_ServiceConfig_AggregateArgs = {
  distinct_on?: Maybe<Array<Product_ServiceConfig_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_ServiceConfig_Order_By>>;
  where?: Maybe<Product_ServiceConfig_Bool_Exp>;
};


export type Query_RootProduct_ServiceConfig_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Query_RootProduct_Service_AggregateArgs = {
  distinct_on?: Maybe<Array<Product_Service_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Service_Order_By>>;
  where?: Maybe<Product_Service_Bool_Exp>;
};


export type Query_RootProduct_Service_By_PkArgs = {
  productcode: Scalars['String'];
};


export type Query_RootProduct_Service_ConsumableArgs = {
  distinct_on?: Maybe<Array<Product_Service_Consumable_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Service_Consumable_Order_By>>;
  where?: Maybe<Product_Service_Consumable_Bool_Exp>;
};


export type Query_RootProduct_Service_Consumable_AggregateArgs = {
  distinct_on?: Maybe<Array<Product_Service_Consumable_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Service_Consumable_Order_By>>;
  where?: Maybe<Product_Service_Consumable_Bool_Exp>;
};


export type Query_RootProduct_Service_Consumable_By_PkArgs = {
  consumableid: Scalars['uuid'];
  serviceid: Scalars['uuid'];
};


export type Query_RootProduct_SubstanceArgs = {
  distinct_on?: Maybe<Array<Product_Substance_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Substance_Order_By>>;
  where?: Maybe<Product_Substance_Bool_Exp>;
};


export type Query_RootProduct_Substance_AggregateArgs = {
  distinct_on?: Maybe<Array<Product_Substance_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Substance_Order_By>>;
  where?: Maybe<Product_Substance_Bool_Exp>;
};


export type Query_RootProduct_Substance_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Query_RootProduct_Substance_ProviderArgs = {
  distinct_on?: Maybe<Array<Product_Substance_Provider_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Substance_Provider_Order_By>>;
  where?: Maybe<Product_Substance_Provider_Bool_Exp>;
};


export type Query_RootProduct_Substance_Provider_AggregateArgs = {
  distinct_on?: Maybe<Array<Product_Substance_Provider_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Substance_Provider_Order_By>>;
  where?: Maybe<Product_Substance_Provider_Bool_Exp>;
};


export type Query_RootProduct_Substance_Provider_By_PkArgs = {
  providerid: Scalars['uuid'];
  substanceid: Scalars['uuid'];
};


export type Query_RootProduct_Substance_Providers_ViewArgs = {
  distinct_on?: Maybe<Array<Product_Substance_Providers_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Substance_Providers_View_Order_By>>;
  where?: Maybe<Product_Substance_Providers_View_Bool_Exp>;
};


export type Query_RootProduct_Substance_Providers_View_AggregateArgs = {
  distinct_on?: Maybe<Array<Product_Substance_Providers_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Substance_Providers_View_Order_By>>;
  where?: Maybe<Product_Substance_Providers_View_Bool_Exp>;
};


export type Query_RootProduct_Substance_TypeArgs = {
  distinct_on?: Maybe<Array<Product_Substance_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Substance_Type_Order_By>>;
  where?: Maybe<Product_Substance_Type_Bool_Exp>;
};


export type Query_RootProduct_Substance_Type_AggregateArgs = {
  distinct_on?: Maybe<Array<Product_Substance_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Substance_Type_Order_By>>;
  where?: Maybe<Product_Substance_Type_Bool_Exp>;
};


export type Query_RootProduct_Substance_Type_By_PkArgs = {
  type: Scalars['String'];
};


export type Query_RootProduct_SupplyArgs = {
  distinct_on?: Maybe<Array<Product_Supply_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Supply_Order_By>>;
  where?: Maybe<Product_Supply_Bool_Exp>;
};


export type Query_RootProduct_Supply_AggregateArgs = {
  distinct_on?: Maybe<Array<Product_Supply_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Supply_Order_By>>;
  where?: Maybe<Product_Supply_Bool_Exp>;
};


export type Query_RootProduct_Supply_By_PkArgs = {
  code: Scalars['String'];
};


export type Query_RootPurchase_DeliveryArgs = {
  distinct_on?: Maybe<Array<Purchase_Delivery_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Purchase_Delivery_Order_By>>;
  where?: Maybe<Purchase_Delivery_Bool_Exp>;
};


export type Query_RootPurchase_Delivery_AggregateArgs = {
  distinct_on?: Maybe<Array<Purchase_Delivery_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Purchase_Delivery_Order_By>>;
  where?: Maybe<Purchase_Delivery_Bool_Exp>;
};


export type Query_RootPurchase_Delivery_By_PkArgs = {
  id: Scalars['Int'];
};


export type Query_RootPurchase_Delivery_ItemArgs = {
  distinct_on?: Maybe<Array<Purchase_Delivery_Item_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Purchase_Delivery_Item_Order_By>>;
  where?: Maybe<Purchase_Delivery_Item_Bool_Exp>;
};


export type Query_RootPurchase_Delivery_Item_AggregateArgs = {
  distinct_on?: Maybe<Array<Purchase_Delivery_Item_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Purchase_Delivery_Item_Order_By>>;
  where?: Maybe<Purchase_Delivery_Item_Bool_Exp>;
};


export type Query_RootPurchase_Delivery_Item_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Query_RootSales_Accessory_DraftArgs = {
  distinct_on?: Maybe<Array<Sales_Accessory_Draft_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Accessory_Draft_Order_By>>;
  where?: Maybe<Sales_Accessory_Draft_Bool_Exp>;
};


export type Query_RootSales_Accessory_Draft_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Accessory_Draft_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Accessory_Draft_Order_By>>;
  where?: Maybe<Sales_Accessory_Draft_Bool_Exp>;
};


export type Query_RootSales_Accessory_Draft_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Query_RootSales_AmountArgs = {
  distinct_on?: Maybe<Array<Sales_Amount_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Amount_Order_By>>;
  where?: Maybe<Sales_Amount_Bool_Exp>;
};


export type Query_RootSales_Amount_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Amount_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Amount_Order_By>>;
  where?: Maybe<Sales_Amount_Bool_Exp>;
};


export type Query_RootSales_Amount_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Query_RootSales_Consumable_DraftArgs = {
  distinct_on?: Maybe<Array<Sales_Consumable_Draft_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Consumable_Draft_Order_By>>;
  where?: Maybe<Sales_Consumable_Draft_Bool_Exp>;
};


export type Query_RootSales_Consumable_Draft_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Consumable_Draft_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Consumable_Draft_Order_By>>;
  where?: Maybe<Sales_Consumable_Draft_Bool_Exp>;
};


export type Query_RootSales_Consumable_Draft_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Query_RootSales_DeliveryArgs = {
  distinct_on?: Maybe<Array<Sales_Delivery_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Delivery_Order_By>>;
  where?: Maybe<Sales_Delivery_Bool_Exp>;
};


export type Query_RootSales_Delivery_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Delivery_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Delivery_Order_By>>;
  where?: Maybe<Sales_Delivery_Bool_Exp>;
};


export type Query_RootSales_Delivery_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Query_RootSales_Delivery_LineArgs = {
  distinct_on?: Maybe<Array<Sales_Delivery_Line_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Delivery_Line_Order_By>>;
  where?: Maybe<Sales_Delivery_Line_Bool_Exp>;
};


export type Query_RootSales_Delivery_Line_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Delivery_Line_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Delivery_Line_Order_By>>;
  where?: Maybe<Sales_Delivery_Line_Bool_Exp>;
};


export type Query_RootSales_Delivery_Line_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Query_RootSales_DraftArgs = {
  distinct_on?: Maybe<Array<Sales_Draft_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Draft_Order_By>>;
  where?: Maybe<Sales_Draft_Bool_Exp>;
};


export type Query_RootSales_Draft_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Draft_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Draft_Order_By>>;
  where?: Maybe<Sales_Draft_Bool_Exp>;
};


export type Query_RootSales_Draft_By_PkArgs = {
  id: Scalars['Int'];
};


export type Query_RootSales_Draft_StatusArgs = {
  distinct_on?: Maybe<Array<Sales_Draft_Status_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Draft_Status_Order_By>>;
  where?: Maybe<Sales_Draft_Status_Bool_Exp>;
};


export type Query_RootSales_Draft_Status_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Draft_Status_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Draft_Status_Order_By>>;
  where?: Maybe<Sales_Draft_Status_Bool_Exp>;
};


export type Query_RootSales_Draft_Status_By_PkArgs = {
  status: Scalars['String'];
};


export type Query_RootSales_Glass_DraftArgs = {
  distinct_on?: Maybe<Array<Sales_Glass_Draft_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Glass_Draft_Order_By>>;
  where?: Maybe<Sales_Glass_Draft_Bool_Exp>;
};


export type Query_RootSales_Glass_Draft_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Glass_Draft_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Glass_Draft_Order_By>>;
  where?: Maybe<Sales_Glass_Draft_Bool_Exp>;
};


export type Query_RootSales_Glass_Draft_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Query_RootSales_InvoiceArgs = {
  distinct_on?: Maybe<Array<Sales_Invoice_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Invoice_Order_By>>;
  where?: Maybe<Sales_Invoice_Bool_Exp>;
};


export type Query_RootSales_Invoice_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Invoice_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Invoice_Order_By>>;
  where?: Maybe<Sales_Invoice_Bool_Exp>;
};


export type Query_RootSales_Invoice_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Query_RootSales_Invoice_DeliveryArgs = {
  distinct_on?: Maybe<Array<Sales_Invoice_Delivery_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Invoice_Delivery_Order_By>>;
  where?: Maybe<Sales_Invoice_Delivery_Bool_Exp>;
};


export type Query_RootSales_Invoice_Delivery_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Invoice_Delivery_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Invoice_Delivery_Order_By>>;
  where?: Maybe<Sales_Invoice_Delivery_Bool_Exp>;
};


export type Query_RootSales_Invoice_Delivery_By_PkArgs = {
  delivery_id: Scalars['uuid'];
  invoice_id: Scalars['uuid'];
};


export type Query_RootSales_Invoice_LineArgs = {
  distinct_on?: Maybe<Array<Sales_Invoice_Line_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Invoice_Line_Order_By>>;
  where?: Maybe<Sales_Invoice_Line_Bool_Exp>;
};


export type Query_RootSales_Invoice_Line_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Invoice_Line_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Invoice_Line_Order_By>>;
  where?: Maybe<Sales_Invoice_Line_Bool_Exp>;
};


export type Query_RootSales_Invoice_Line_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Query_RootSales_OrderArgs = {
  distinct_on?: Maybe<Array<Sales_Order_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Order_Order_By>>;
  where?: Maybe<Sales_Order_Bool_Exp>;
};


export type Query_RootSales_Order_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Order_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Order_Order_By>>;
  where?: Maybe<Sales_Order_Bool_Exp>;
};


export type Query_RootSales_Order_By_PkArgs = {
  id: Scalars['Int'];
};


export type Query_RootSales_Order_Delivery_StatusArgs = {
  distinct_on?: Maybe<Array<Sales_Order_Delivery_Status_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Order_Delivery_Status_Order_By>>;
  where?: Maybe<Sales_Order_Delivery_Status_Bool_Exp>;
};


export type Query_RootSales_Order_Delivery_Status_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Order_Delivery_Status_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Order_Delivery_Status_Order_By>>;
  where?: Maybe<Sales_Order_Delivery_Status_Bool_Exp>;
};


export type Query_RootSales_Order_Delivery_Status_By_PkArgs = {
  key: Scalars['String'];
};


export type Query_RootSales_PaymentArgs = {
  distinct_on?: Maybe<Array<Sales_Payment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Payment_Order_By>>;
  where?: Maybe<Sales_Payment_Bool_Exp>;
};


export type Query_RootSales_Payment_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Payment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Payment_Order_By>>;
  where?: Maybe<Sales_Payment_Bool_Exp>;
};


export type Query_RootSales_Payment_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Query_RootSales_Payment_MethodArgs = {
  distinct_on?: Maybe<Array<Sales_Payment_Method_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Payment_Method_Order_By>>;
  where?: Maybe<Sales_Payment_Method_Bool_Exp>;
};


export type Query_RootSales_Payment_Method_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Payment_Method_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Payment_Method_Order_By>>;
  where?: Maybe<Sales_Payment_Method_Bool_Exp>;
};


export type Query_RootSales_Payment_Method_By_PkArgs = {
  key: Scalars['String'];
};


export type Query_RootSales_Payment_StatusArgs = {
  distinct_on?: Maybe<Array<Sales_Payment_Status_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Payment_Status_Order_By>>;
  where?: Maybe<Sales_Payment_Status_Bool_Exp>;
};


export type Query_RootSales_Payment_Status_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Payment_Status_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Payment_Status_Order_By>>;
  where?: Maybe<Sales_Payment_Status_Bool_Exp>;
};


export type Query_RootSales_Payment_Status_By_PkArgs = {
  key: Scalars['String'];
};


export type Query_RootSales_Product_DraftArgs = {
  distinct_on?: Maybe<Array<Sales_Product_Draft_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Product_Draft_Order_By>>;
  where?: Maybe<Sales_Product_Draft_Bool_Exp>;
};


export type Query_RootSales_Product_Draft_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Product_Draft_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Product_Draft_Order_By>>;
  where?: Maybe<Sales_Product_Draft_Bool_Exp>;
};


export type Query_RootSales_Product_Draft_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Query_RootSales_Product_TypeArgs = {
  distinct_on?: Maybe<Array<Sales_Product_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Product_Type_Order_By>>;
  where?: Maybe<Sales_Product_Type_Bool_Exp>;
};


export type Query_RootSales_Product_Type_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Product_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Product_Type_Order_By>>;
  where?: Maybe<Sales_Product_Type_Bool_Exp>;
};


export type Query_RootSales_Product_Type_By_PkArgs = {
  type: Scalars['String'];
};


export type Query_RootSales_QuotationArgs = {
  distinct_on?: Maybe<Array<Sales_Quotation_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Quotation_Order_By>>;
  where?: Maybe<Sales_Quotation_Bool_Exp>;
};


export type Query_RootSales_Quotation_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Quotation_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Quotation_Order_By>>;
  where?: Maybe<Sales_Quotation_Bool_Exp>;
};


export type Query_RootSales_Quotation_By_PkArgs = {
  id: Scalars['Int'];
};


export type Query_RootSales_Quotation_StatusArgs = {
  distinct_on?: Maybe<Array<Sales_Quotation_Status_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Quotation_Status_Order_By>>;
  where?: Maybe<Sales_Quotation_Status_Bool_Exp>;
};


export type Query_RootSales_Quotation_Status_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Quotation_Status_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Quotation_Status_Order_By>>;
  where?: Maybe<Sales_Quotation_Status_Bool_Exp>;
};


export type Query_RootSales_Quotation_Status_By_PkArgs = {
  key: Scalars['String'];
};


export type Query_RootSales_Service_DraftArgs = {
  distinct_on?: Maybe<Array<Sales_Service_Draft_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Service_Draft_Order_By>>;
  where?: Maybe<Sales_Service_Draft_Bool_Exp>;
};


export type Query_RootSales_Service_Draft_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Service_Draft_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Service_Draft_Order_By>>;
  where?: Maybe<Sales_Service_Draft_Bool_Exp>;
};


export type Query_RootSales_Service_Draft_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Query_RootSales_TestArgs = {
  distinct_on?: Maybe<Array<Sales_Test_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Test_Order_By>>;
  where?: Maybe<Sales_Test_Bool_Exp>;
};


export type Query_RootSales_Test_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Test_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Test_Order_By>>;
  where?: Maybe<Sales_Test_Bool_Exp>;
};


export type Query_RootSales_Test_By_PkArgs = {
  id: Scalars['Int'];
};


export type Query_RootStock_Adjustment_ReasonsArgs = {
  distinct_on?: Maybe<Array<Stock_Adjustment_Reasons_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Adjustment_Reasons_Order_By>>;
  where?: Maybe<Stock_Adjustment_Reasons_Bool_Exp>;
};


export type Query_RootStock_Adjustment_Reasons_AggregateArgs = {
  distinct_on?: Maybe<Array<Stock_Adjustment_Reasons_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Adjustment_Reasons_Order_By>>;
  where?: Maybe<Stock_Adjustment_Reasons_Bool_Exp>;
};


export type Query_RootStock_Adjustment_Reasons_By_PkArgs = {
  value: Scalars['String'];
};


export type Query_RootStock_Item_TranferArgs = {
  distinct_on?: Maybe<Array<Stock_Item_Tranfer_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Item_Tranfer_Order_By>>;
  where?: Maybe<Stock_Item_Tranfer_Bool_Exp>;
};


export type Query_RootStock_Item_Tranfer_AggregateArgs = {
  distinct_on?: Maybe<Array<Stock_Item_Tranfer_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Item_Tranfer_Order_By>>;
  where?: Maybe<Stock_Item_Tranfer_Bool_Exp>;
};


export type Query_RootStock_Item_Tranfer_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Query_RootStock_Item_Transfer_StatusArgs = {
  distinct_on?: Maybe<Array<Stock_Item_Transfer_Status_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Item_Transfer_Status_Order_By>>;
  where?: Maybe<Stock_Item_Transfer_Status_Bool_Exp>;
};


export type Query_RootStock_Item_Transfer_Status_AggregateArgs = {
  distinct_on?: Maybe<Array<Stock_Item_Transfer_Status_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Item_Transfer_Status_Order_By>>;
  where?: Maybe<Stock_Item_Transfer_Status_Bool_Exp>;
};


export type Query_RootStock_Item_Transfer_Status_By_PkArgs = {
  key: Scalars['String'];
};


export type Query_RootStock_Order_ItemArgs = {
  distinct_on?: Maybe<Array<Stock_Order_Item_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Order_Item_Order_By>>;
  where?: Maybe<Stock_Order_Item_Bool_Exp>;
};


export type Query_RootStock_Order_Item_AggregateArgs = {
  distinct_on?: Maybe<Array<Stock_Order_Item_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Order_Item_Order_By>>;
  where?: Maybe<Stock_Order_Item_Bool_Exp>;
};


export type Query_RootStock_Order_Item_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Query_RootStock_Order_Item_StatusArgs = {
  distinct_on?: Maybe<Array<Stock_Order_Item_Status_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Order_Item_Status_Order_By>>;
  where?: Maybe<Stock_Order_Item_Status_Bool_Exp>;
};


export type Query_RootStock_Order_Item_Status_AggregateArgs = {
  distinct_on?: Maybe<Array<Stock_Order_Item_Status_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Order_Item_Status_Order_By>>;
  where?: Maybe<Stock_Order_Item_Status_Bool_Exp>;
};


export type Query_RootStock_Order_Item_Status_By_PkArgs = {
  key: Scalars['String'];
};


export type Query_RootStock_Stock_AdjustmentArgs = {
  distinct_on?: Maybe<Array<Stock_Stock_Adjustment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Stock_Adjustment_Order_By>>;
  where?: Maybe<Stock_Stock_Adjustment_Bool_Exp>;
};


export type Query_RootStock_Stock_Adjustment_AggregateArgs = {
  distinct_on?: Maybe<Array<Stock_Stock_Adjustment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Stock_Adjustment_Order_By>>;
  where?: Maybe<Stock_Stock_Adjustment_Bool_Exp>;
};


export type Query_RootStock_Stock_Adjustment_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Query_RootStock_Transfer_OrderArgs = {
  distinct_on?: Maybe<Array<Stock_Transfer_Order_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Transfer_Order_Order_By>>;
  where?: Maybe<Stock_Transfer_Order_Bool_Exp>;
};


export type Query_RootStock_Transfer_Order_AggregateArgs = {
  distinct_on?: Maybe<Array<Stock_Transfer_Order_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Transfer_Order_Order_By>>;
  where?: Maybe<Stock_Transfer_Order_Bool_Exp>;
};


export type Query_RootStock_Transfer_Order_By_PkArgs = {
  id: Scalars['Int'];
};


export type Query_RootStock_Transfer_Order_StatusArgs = {
  distinct_on?: Maybe<Array<Stock_Transfer_Order_Status_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Transfer_Order_Status_Order_By>>;
  where?: Maybe<Stock_Transfer_Order_Status_Bool_Exp>;
};


export type Query_RootStock_Transfer_Order_Status_AggregateArgs = {
  distinct_on?: Maybe<Array<Stock_Transfer_Order_Status_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Transfer_Order_Status_Order_By>>;
  where?: Maybe<Stock_Transfer_Order_Status_Bool_Exp>;
};


export type Query_RootStock_Transfer_Order_Status_By_PkArgs = {
  key: Scalars['String'];
};


export type Query_RootStock_WarehouseArgs = {
  distinct_on?: Maybe<Array<Stock_Warehouse_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Warehouse_Order_By>>;
  where?: Maybe<Stock_Warehouse_Bool_Exp>;
};


export type Query_RootStock_Warehouse_AggregateArgs = {
  distinct_on?: Maybe<Array<Stock_Warehouse_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Warehouse_Order_By>>;
  where?: Maybe<Stock_Warehouse_Bool_Exp>;
};


export type Query_RootStock_Warehouse_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Query_RootStock_Warehouse_Order_ViewArgs = {
  distinct_on?: Maybe<Array<Stock_Warehouse_Order_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Warehouse_Order_View_Order_By>>;
  where?: Maybe<Stock_Warehouse_Order_View_Bool_Exp>;
};


export type Query_RootStock_Warehouse_Order_View_AggregateArgs = {
  distinct_on?: Maybe<Array<Stock_Warehouse_Order_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Warehouse_Order_View_Order_By>>;
  where?: Maybe<Stock_Warehouse_Order_View_Bool_Exp>;
};


export type Query_RootStock_Warehouse_SubstanceArgs = {
  distinct_on?: Maybe<Array<Stock_Warehouse_Substance_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Warehouse_Substance_Order_By>>;
  where?: Maybe<Stock_Warehouse_Substance_Bool_Exp>;
};


export type Query_RootStock_Warehouse_Substance_AggregateArgs = {
  distinct_on?: Maybe<Array<Stock_Warehouse_Substance_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Warehouse_Substance_Order_By>>;
  where?: Maybe<Stock_Warehouse_Substance_Bool_Exp>;
};


export type Query_RootStock_Warehouse_Substance_By_PkArgs = {
  substanceid: Scalars['uuid'];
  warehouseid: Scalars['uuid'];
};

/** columns and relationships of "sales.accessory_draft" */
export type Sales_Accessory_Draft = {
  __typename?: 'sales_accessory_draft';
  id: Scalars['uuid'];
  /** An object relationship */
  product_draft: Sales_Product_Draft;
  productdraft_id: Scalars['uuid'];
};

/** aggregated selection of "sales.accessory_draft" */
export type Sales_Accessory_Draft_Aggregate = {
  __typename?: 'sales_accessory_draft_aggregate';
  aggregate?: Maybe<Sales_Accessory_Draft_Aggregate_Fields>;
  nodes: Array<Sales_Accessory_Draft>;
};

/** aggregate fields of "sales.accessory_draft" */
export type Sales_Accessory_Draft_Aggregate_Fields = {
  __typename?: 'sales_accessory_draft_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Sales_Accessory_Draft_Max_Fields>;
  min?: Maybe<Sales_Accessory_Draft_Min_Fields>;
};


/** aggregate fields of "sales.accessory_draft" */
export type Sales_Accessory_Draft_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Sales_Accessory_Draft_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** Boolean expression to filter rows from the table "sales.accessory_draft". All fields are combined with a logical 'AND'. */
export type Sales_Accessory_Draft_Bool_Exp = {
  _and?: Maybe<Array<Sales_Accessory_Draft_Bool_Exp>>;
  _not?: Maybe<Sales_Accessory_Draft_Bool_Exp>;
  _or?: Maybe<Array<Sales_Accessory_Draft_Bool_Exp>>;
  id?: Maybe<Uuid_Comparison_Exp>;
  product_draft?: Maybe<Sales_Product_Draft_Bool_Exp>;
  productdraft_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "sales.accessory_draft" */
export enum Sales_Accessory_Draft_Constraint {
  /** unique or primary key constraint */
  AccessoryDraftIdKey = 'accessory_draft_ID_key',
  /** unique or primary key constraint */
  AccessoryDraftPkey = 'accessory_draft_pkey',
  /** unique or primary key constraint */
  AccessoryDraftProductdraftIdKey = 'accessory_draft_productdraft_id_key'
}

/** input type for inserting data into table "sales.accessory_draft" */
export type Sales_Accessory_Draft_Insert_Input = {
  id?: Maybe<Scalars['uuid']>;
  product_draft?: Maybe<Sales_Product_Draft_Obj_Rel_Insert_Input>;
  productdraft_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Sales_Accessory_Draft_Max_Fields = {
  __typename?: 'sales_accessory_draft_max_fields';
  id?: Maybe<Scalars['uuid']>;
  productdraft_id?: Maybe<Scalars['uuid']>;
};

/** aggregate min on columns */
export type Sales_Accessory_Draft_Min_Fields = {
  __typename?: 'sales_accessory_draft_min_fields';
  id?: Maybe<Scalars['uuid']>;
  productdraft_id?: Maybe<Scalars['uuid']>;
};

/** response of any mutation on the table "sales.accessory_draft" */
export type Sales_Accessory_Draft_Mutation_Response = {
  __typename?: 'sales_accessory_draft_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Sales_Accessory_Draft>;
};

/** input type for inserting object relation for remote table "sales.accessory_draft" */
export type Sales_Accessory_Draft_Obj_Rel_Insert_Input = {
  data: Sales_Accessory_Draft_Insert_Input;
  /** on conflict condition */
  on_conflict?: Maybe<Sales_Accessory_Draft_On_Conflict>;
};

/** on conflict condition type for table "sales.accessory_draft" */
export type Sales_Accessory_Draft_On_Conflict = {
  constraint: Sales_Accessory_Draft_Constraint;
  update_columns?: Array<Sales_Accessory_Draft_Update_Column>;
  where?: Maybe<Sales_Accessory_Draft_Bool_Exp>;
};

/** Ordering options when selecting data from "sales.accessory_draft". */
export type Sales_Accessory_Draft_Order_By = {
  id?: Maybe<Order_By>;
  product_draft?: Maybe<Sales_Product_Draft_Order_By>;
  productdraft_id?: Maybe<Order_By>;
};

/** primary key columns input for table: sales_accessory_draft */
export type Sales_Accessory_Draft_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "sales.accessory_draft" */
export enum Sales_Accessory_Draft_Select_Column {
  /** column name */
  Id = 'id',
  /** column name */
  ProductdraftId = 'productdraft_id'
}

/** input type for updating data in table "sales.accessory_draft" */
export type Sales_Accessory_Draft_Set_Input = {
  id?: Maybe<Scalars['uuid']>;
  productdraft_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "sales.accessory_draft" */
export enum Sales_Accessory_Draft_Update_Column {
  /** column name */
  Id = 'id',
  /** column name */
  ProductdraftId = 'productdraft_id'
}

/** columns and relationships of "sales.amount" */
export type Sales_Amount = {
  __typename?: 'sales_amount';
  /** An object relationship */
  company: Management_Company;
  company_name: Scalars['String'];
  /** An object relationship */
  draft: Sales_Draft;
  draft_id: Scalars['Int'];
  id: Scalars['uuid'];
  total_ht: Scalars['numeric'];
  total_tax: Scalars['numeric'];
  total_ttc: Scalars['numeric'];
};

/** aggregated selection of "sales.amount" */
export type Sales_Amount_Aggregate = {
  __typename?: 'sales_amount_aggregate';
  aggregate?: Maybe<Sales_Amount_Aggregate_Fields>;
  nodes: Array<Sales_Amount>;
};

/** aggregate fields of "sales.amount" */
export type Sales_Amount_Aggregate_Fields = {
  __typename?: 'sales_amount_aggregate_fields';
  avg?: Maybe<Sales_Amount_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Sales_Amount_Max_Fields>;
  min?: Maybe<Sales_Amount_Min_Fields>;
  stddev?: Maybe<Sales_Amount_Stddev_Fields>;
  stddev_pop?: Maybe<Sales_Amount_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Sales_Amount_Stddev_Samp_Fields>;
  sum?: Maybe<Sales_Amount_Sum_Fields>;
  var_pop?: Maybe<Sales_Amount_Var_Pop_Fields>;
  var_samp?: Maybe<Sales_Amount_Var_Samp_Fields>;
  variance?: Maybe<Sales_Amount_Variance_Fields>;
};


/** aggregate fields of "sales.amount" */
export type Sales_Amount_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Sales_Amount_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "sales.amount" */
export type Sales_Amount_Aggregate_Order_By = {
  avg?: Maybe<Sales_Amount_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Sales_Amount_Max_Order_By>;
  min?: Maybe<Sales_Amount_Min_Order_By>;
  stddev?: Maybe<Sales_Amount_Stddev_Order_By>;
  stddev_pop?: Maybe<Sales_Amount_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Sales_Amount_Stddev_Samp_Order_By>;
  sum?: Maybe<Sales_Amount_Sum_Order_By>;
  var_pop?: Maybe<Sales_Amount_Var_Pop_Order_By>;
  var_samp?: Maybe<Sales_Amount_Var_Samp_Order_By>;
  variance?: Maybe<Sales_Amount_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "sales.amount" */
export type Sales_Amount_Arr_Rel_Insert_Input = {
  data: Array<Sales_Amount_Insert_Input>;
  /** on conflict condition */
  on_conflict?: Maybe<Sales_Amount_On_Conflict>;
};

/** aggregate avg on columns */
export type Sales_Amount_Avg_Fields = {
  __typename?: 'sales_amount_avg_fields';
  draft_id?: Maybe<Scalars['Float']>;
  total_ht?: Maybe<Scalars['Float']>;
  total_tax?: Maybe<Scalars['Float']>;
  total_ttc?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "sales.amount" */
export type Sales_Amount_Avg_Order_By = {
  draft_id?: Maybe<Order_By>;
  total_ht?: Maybe<Order_By>;
  total_tax?: Maybe<Order_By>;
  total_ttc?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "sales.amount". All fields are combined with a logical 'AND'. */
export type Sales_Amount_Bool_Exp = {
  _and?: Maybe<Array<Sales_Amount_Bool_Exp>>;
  _not?: Maybe<Sales_Amount_Bool_Exp>;
  _or?: Maybe<Array<Sales_Amount_Bool_Exp>>;
  company?: Maybe<Management_Company_Bool_Exp>;
  company_name?: Maybe<String_Comparison_Exp>;
  draft?: Maybe<Sales_Draft_Bool_Exp>;
  draft_id?: Maybe<Int_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  total_ht?: Maybe<Numeric_Comparison_Exp>;
  total_tax?: Maybe<Numeric_Comparison_Exp>;
  total_ttc?: Maybe<Numeric_Comparison_Exp>;
};

/** unique or primary key constraints on table "sales.amount" */
export enum Sales_Amount_Constraint {
  /** unique or primary key constraint */
  AmountPkey = 'amount_pkey'
}

/** input type for incrementing numeric columns in table "sales.amount" */
export type Sales_Amount_Inc_Input = {
  draft_id?: Maybe<Scalars['Int']>;
  total_ht?: Maybe<Scalars['numeric']>;
  total_tax?: Maybe<Scalars['numeric']>;
  total_ttc?: Maybe<Scalars['numeric']>;
};

/** input type for inserting data into table "sales.amount" */
export type Sales_Amount_Insert_Input = {
  company?: Maybe<Management_Company_Obj_Rel_Insert_Input>;
  company_name?: Maybe<Scalars['String']>;
  draft?: Maybe<Sales_Draft_Obj_Rel_Insert_Input>;
  draft_id?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['uuid']>;
  total_ht?: Maybe<Scalars['numeric']>;
  total_tax?: Maybe<Scalars['numeric']>;
  total_ttc?: Maybe<Scalars['numeric']>;
};

/** aggregate max on columns */
export type Sales_Amount_Max_Fields = {
  __typename?: 'sales_amount_max_fields';
  company_name?: Maybe<Scalars['String']>;
  draft_id?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['uuid']>;
  total_ht?: Maybe<Scalars['numeric']>;
  total_tax?: Maybe<Scalars['numeric']>;
  total_ttc?: Maybe<Scalars['numeric']>;
};

/** order by max() on columns of table "sales.amount" */
export type Sales_Amount_Max_Order_By = {
  company_name?: Maybe<Order_By>;
  draft_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  total_ht?: Maybe<Order_By>;
  total_tax?: Maybe<Order_By>;
  total_ttc?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Sales_Amount_Min_Fields = {
  __typename?: 'sales_amount_min_fields';
  company_name?: Maybe<Scalars['String']>;
  draft_id?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['uuid']>;
  total_ht?: Maybe<Scalars['numeric']>;
  total_tax?: Maybe<Scalars['numeric']>;
  total_ttc?: Maybe<Scalars['numeric']>;
};

/** order by min() on columns of table "sales.amount" */
export type Sales_Amount_Min_Order_By = {
  company_name?: Maybe<Order_By>;
  draft_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  total_ht?: Maybe<Order_By>;
  total_tax?: Maybe<Order_By>;
  total_ttc?: Maybe<Order_By>;
};

/** response of any mutation on the table "sales.amount" */
export type Sales_Amount_Mutation_Response = {
  __typename?: 'sales_amount_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Sales_Amount>;
};

/** on conflict condition type for table "sales.amount" */
export type Sales_Amount_On_Conflict = {
  constraint: Sales_Amount_Constraint;
  update_columns?: Array<Sales_Amount_Update_Column>;
  where?: Maybe<Sales_Amount_Bool_Exp>;
};

/** Ordering options when selecting data from "sales.amount". */
export type Sales_Amount_Order_By = {
  company?: Maybe<Management_Company_Order_By>;
  company_name?: Maybe<Order_By>;
  draft?: Maybe<Sales_Draft_Order_By>;
  draft_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  total_ht?: Maybe<Order_By>;
  total_tax?: Maybe<Order_By>;
  total_ttc?: Maybe<Order_By>;
};

/** primary key columns input for table: sales_amount */
export type Sales_Amount_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "sales.amount" */
export enum Sales_Amount_Select_Column {
  /** column name */
  CompanyName = 'company_name',
  /** column name */
  DraftId = 'draft_id',
  /** column name */
  Id = 'id',
  /** column name */
  TotalHt = 'total_ht',
  /** column name */
  TotalTax = 'total_tax',
  /** column name */
  TotalTtc = 'total_ttc'
}

/** input type for updating data in table "sales.amount" */
export type Sales_Amount_Set_Input = {
  company_name?: Maybe<Scalars['String']>;
  draft_id?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['uuid']>;
  total_ht?: Maybe<Scalars['numeric']>;
  total_tax?: Maybe<Scalars['numeric']>;
  total_ttc?: Maybe<Scalars['numeric']>;
};

/** aggregate stddev on columns */
export type Sales_Amount_Stddev_Fields = {
  __typename?: 'sales_amount_stddev_fields';
  draft_id?: Maybe<Scalars['Float']>;
  total_ht?: Maybe<Scalars['Float']>;
  total_tax?: Maybe<Scalars['Float']>;
  total_ttc?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "sales.amount" */
export type Sales_Amount_Stddev_Order_By = {
  draft_id?: Maybe<Order_By>;
  total_ht?: Maybe<Order_By>;
  total_tax?: Maybe<Order_By>;
  total_ttc?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Sales_Amount_Stddev_Pop_Fields = {
  __typename?: 'sales_amount_stddev_pop_fields';
  draft_id?: Maybe<Scalars['Float']>;
  total_ht?: Maybe<Scalars['Float']>;
  total_tax?: Maybe<Scalars['Float']>;
  total_ttc?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "sales.amount" */
export type Sales_Amount_Stddev_Pop_Order_By = {
  draft_id?: Maybe<Order_By>;
  total_ht?: Maybe<Order_By>;
  total_tax?: Maybe<Order_By>;
  total_ttc?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Sales_Amount_Stddev_Samp_Fields = {
  __typename?: 'sales_amount_stddev_samp_fields';
  draft_id?: Maybe<Scalars['Float']>;
  total_ht?: Maybe<Scalars['Float']>;
  total_tax?: Maybe<Scalars['Float']>;
  total_ttc?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "sales.amount" */
export type Sales_Amount_Stddev_Samp_Order_By = {
  draft_id?: Maybe<Order_By>;
  total_ht?: Maybe<Order_By>;
  total_tax?: Maybe<Order_By>;
  total_ttc?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Sales_Amount_Sum_Fields = {
  __typename?: 'sales_amount_sum_fields';
  draft_id?: Maybe<Scalars['Int']>;
  total_ht?: Maybe<Scalars['numeric']>;
  total_tax?: Maybe<Scalars['numeric']>;
  total_ttc?: Maybe<Scalars['numeric']>;
};

/** order by sum() on columns of table "sales.amount" */
export type Sales_Amount_Sum_Order_By = {
  draft_id?: Maybe<Order_By>;
  total_ht?: Maybe<Order_By>;
  total_tax?: Maybe<Order_By>;
  total_ttc?: Maybe<Order_By>;
};

/** update columns of table "sales.amount" */
export enum Sales_Amount_Update_Column {
  /** column name */
  CompanyName = 'company_name',
  /** column name */
  DraftId = 'draft_id',
  /** column name */
  Id = 'id',
  /** column name */
  TotalHt = 'total_ht',
  /** column name */
  TotalTax = 'total_tax',
  /** column name */
  TotalTtc = 'total_ttc'
}

/** aggregate var_pop on columns */
export type Sales_Amount_Var_Pop_Fields = {
  __typename?: 'sales_amount_var_pop_fields';
  draft_id?: Maybe<Scalars['Float']>;
  total_ht?: Maybe<Scalars['Float']>;
  total_tax?: Maybe<Scalars['Float']>;
  total_ttc?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "sales.amount" */
export type Sales_Amount_Var_Pop_Order_By = {
  draft_id?: Maybe<Order_By>;
  total_ht?: Maybe<Order_By>;
  total_tax?: Maybe<Order_By>;
  total_ttc?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Sales_Amount_Var_Samp_Fields = {
  __typename?: 'sales_amount_var_samp_fields';
  draft_id?: Maybe<Scalars['Float']>;
  total_ht?: Maybe<Scalars['Float']>;
  total_tax?: Maybe<Scalars['Float']>;
  total_ttc?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "sales.amount" */
export type Sales_Amount_Var_Samp_Order_By = {
  draft_id?: Maybe<Order_By>;
  total_ht?: Maybe<Order_By>;
  total_tax?: Maybe<Order_By>;
  total_ttc?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Sales_Amount_Variance_Fields = {
  __typename?: 'sales_amount_variance_fields';
  draft_id?: Maybe<Scalars['Float']>;
  total_ht?: Maybe<Scalars['Float']>;
  total_tax?: Maybe<Scalars['Float']>;
  total_ttc?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "sales.amount" */
export type Sales_Amount_Variance_Order_By = {
  draft_id?: Maybe<Order_By>;
  total_ht?: Maybe<Order_By>;
  total_tax?: Maybe<Order_By>;
  total_ttc?: Maybe<Order_By>;
};

/** columns and relationships of "sales.consumable_draft" */
export type Sales_Consumable_Draft = {
  __typename?: 'sales_consumable_draft';
  dependent_id?: Maybe<Scalars['uuid']>;
  /** An object relationship */
  glass_draft?: Maybe<Sales_Glass_Draft>;
  id: Scalars['uuid'];
  labelFactory?: Maybe<Scalars['String']>;
  /** An array relationship */
  manufacturing_consumables: Array<Manufacturing_Manufacturing_Consumable>;
  /** An aggregate relationship */
  manufacturing_consumables_aggregate: Manufacturing_Manufacturing_Consumable_Aggregate;
  /** An object relationship */
  product_draft: Sales_Product_Draft;
  productdraft_id: Scalars['uuid'];
};


/** columns and relationships of "sales.consumable_draft" */
export type Sales_Consumable_DraftManufacturing_ConsumablesArgs = {
  distinct_on?: Maybe<Array<Manufacturing_Manufacturing_Consumable_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Manufacturing_Manufacturing_Consumable_Order_By>>;
  where?: Maybe<Manufacturing_Manufacturing_Consumable_Bool_Exp>;
};


/** columns and relationships of "sales.consumable_draft" */
export type Sales_Consumable_DraftManufacturing_Consumables_AggregateArgs = {
  distinct_on?: Maybe<Array<Manufacturing_Manufacturing_Consumable_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Manufacturing_Manufacturing_Consumable_Order_By>>;
  where?: Maybe<Manufacturing_Manufacturing_Consumable_Bool_Exp>;
};

/** aggregated selection of "sales.consumable_draft" */
export type Sales_Consumable_Draft_Aggregate = {
  __typename?: 'sales_consumable_draft_aggregate';
  aggregate?: Maybe<Sales_Consumable_Draft_Aggregate_Fields>;
  nodes: Array<Sales_Consumable_Draft>;
};

/** aggregate fields of "sales.consumable_draft" */
export type Sales_Consumable_Draft_Aggregate_Fields = {
  __typename?: 'sales_consumable_draft_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Sales_Consumable_Draft_Max_Fields>;
  min?: Maybe<Sales_Consumable_Draft_Min_Fields>;
};


/** aggregate fields of "sales.consumable_draft" */
export type Sales_Consumable_Draft_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Sales_Consumable_Draft_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "sales.consumable_draft" */
export type Sales_Consumable_Draft_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Sales_Consumable_Draft_Max_Order_By>;
  min?: Maybe<Sales_Consumable_Draft_Min_Order_By>;
};

/** input type for inserting array relation for remote table "sales.consumable_draft" */
export type Sales_Consumable_Draft_Arr_Rel_Insert_Input = {
  data: Array<Sales_Consumable_Draft_Insert_Input>;
  /** on conflict condition */
  on_conflict?: Maybe<Sales_Consumable_Draft_On_Conflict>;
};

/** Boolean expression to filter rows from the table "sales.consumable_draft". All fields are combined with a logical 'AND'. */
export type Sales_Consumable_Draft_Bool_Exp = {
  _and?: Maybe<Array<Sales_Consumable_Draft_Bool_Exp>>;
  _not?: Maybe<Sales_Consumable_Draft_Bool_Exp>;
  _or?: Maybe<Array<Sales_Consumable_Draft_Bool_Exp>>;
  dependent_id?: Maybe<Uuid_Comparison_Exp>;
  glass_draft?: Maybe<Sales_Glass_Draft_Bool_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  labelFactory?: Maybe<String_Comparison_Exp>;
  manufacturing_consumables?: Maybe<Manufacturing_Manufacturing_Consumable_Bool_Exp>;
  product_draft?: Maybe<Sales_Product_Draft_Bool_Exp>;
  productdraft_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "sales.consumable_draft" */
export enum Sales_Consumable_Draft_Constraint {
  /** unique or primary key constraint */
  ConsumableDraftPkey = 'consumable_draft_pkey',
  /** unique or primary key constraint */
  ConsumableDraftProductdraftIdKey = 'consumable_draft_productdraft_id_key'
}

/** input type for inserting data into table "sales.consumable_draft" */
export type Sales_Consumable_Draft_Insert_Input = {
  dependent_id?: Maybe<Scalars['uuid']>;
  glass_draft?: Maybe<Sales_Glass_Draft_Obj_Rel_Insert_Input>;
  id?: Maybe<Scalars['uuid']>;
  labelFactory?: Maybe<Scalars['String']>;
  manufacturing_consumables?: Maybe<Manufacturing_Manufacturing_Consumable_Arr_Rel_Insert_Input>;
  product_draft?: Maybe<Sales_Product_Draft_Obj_Rel_Insert_Input>;
  productdraft_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Sales_Consumable_Draft_Max_Fields = {
  __typename?: 'sales_consumable_draft_max_fields';
  dependent_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  labelFactory?: Maybe<Scalars['String']>;
  productdraft_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "sales.consumable_draft" */
export type Sales_Consumable_Draft_Max_Order_By = {
  dependent_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  labelFactory?: Maybe<Order_By>;
  productdraft_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Sales_Consumable_Draft_Min_Fields = {
  __typename?: 'sales_consumable_draft_min_fields';
  dependent_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  labelFactory?: Maybe<Scalars['String']>;
  productdraft_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "sales.consumable_draft" */
export type Sales_Consumable_Draft_Min_Order_By = {
  dependent_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  labelFactory?: Maybe<Order_By>;
  productdraft_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "sales.consumable_draft" */
export type Sales_Consumable_Draft_Mutation_Response = {
  __typename?: 'sales_consumable_draft_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Sales_Consumable_Draft>;
};

/** input type for inserting object relation for remote table "sales.consumable_draft" */
export type Sales_Consumable_Draft_Obj_Rel_Insert_Input = {
  data: Sales_Consumable_Draft_Insert_Input;
  /** on conflict condition */
  on_conflict?: Maybe<Sales_Consumable_Draft_On_Conflict>;
};

/** on conflict condition type for table "sales.consumable_draft" */
export type Sales_Consumable_Draft_On_Conflict = {
  constraint: Sales_Consumable_Draft_Constraint;
  update_columns?: Array<Sales_Consumable_Draft_Update_Column>;
  where?: Maybe<Sales_Consumable_Draft_Bool_Exp>;
};

/** Ordering options when selecting data from "sales.consumable_draft". */
export type Sales_Consumable_Draft_Order_By = {
  dependent_id?: Maybe<Order_By>;
  glass_draft?: Maybe<Sales_Glass_Draft_Order_By>;
  id?: Maybe<Order_By>;
  labelFactory?: Maybe<Order_By>;
  manufacturing_consumables_aggregate?: Maybe<Manufacturing_Manufacturing_Consumable_Aggregate_Order_By>;
  product_draft?: Maybe<Sales_Product_Draft_Order_By>;
  productdraft_id?: Maybe<Order_By>;
};

/** primary key columns input for table: sales_consumable_draft */
export type Sales_Consumable_Draft_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "sales.consumable_draft" */
export enum Sales_Consumable_Draft_Select_Column {
  /** column name */
  DependentId = 'dependent_id',
  /** column name */
  Id = 'id',
  /** column name */
  LabelFactory = 'labelFactory',
  /** column name */
  ProductdraftId = 'productdraft_id'
}

/** input type for updating data in table "sales.consumable_draft" */
export type Sales_Consumable_Draft_Set_Input = {
  dependent_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  labelFactory?: Maybe<Scalars['String']>;
  productdraft_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "sales.consumable_draft" */
export enum Sales_Consumable_Draft_Update_Column {
  /** column name */
  DependentId = 'dependent_id',
  /** column name */
  Id = 'id',
  /** column name */
  LabelFactory = 'labelFactory',
  /** column name */
  ProductdraftId = 'productdraft_id'
}

/** columns and relationships of "sales.delivery" */
export type Sales_Delivery = {
  __typename?: 'sales_delivery';
  amount_ht: Scalars['numeric'];
  amount_ttc: Scalars['numeric'];
  amount_tva: Scalars['numeric'];
  /** An object relationship */
  client: Contact_Customer;
  client_id: Scalars['uuid'];
  /** An object relationship */
  company: Management_Company;
  company_id: Scalars['uuid'];
  /** An object relationship */
  contact?: Maybe<Contact_Contact>;
  contact_id?: Maybe<Scalars['uuid']>;
  createdAt: Scalars['date'];
  /** An array relationship */
  delivery_lines: Array<Sales_Delivery_Line>;
  /** An aggregate relationship */
  delivery_lines_aggregate: Sales_Delivery_Line_Aggregate;
  id: Scalars['uuid'];
  /** An array relationship */
  invoice_deliveries: Array<Sales_Invoice_Delivery>;
  /** An aggregate relationship */
  invoice_deliveries_aggregate: Sales_Invoice_Delivery_Aggregate;
  isReturned: Scalars['Boolean'];
  /** An object relationship */
  order: Sales_Order;
  order_id: Scalars['Int'];
  payment_method: Scalars['String'];
  predicted_date: Scalars['date'];
  ref?: Maybe<Scalars['String']>;
  ref_num?: Maybe<Scalars['Int']>;
  status: Scalars['String'];
  updated_at?: Maybe<Scalars['timestamptz']>;
};


/** columns and relationships of "sales.delivery" */
export type Sales_DeliveryDelivery_LinesArgs = {
  distinct_on?: Maybe<Array<Sales_Delivery_Line_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Delivery_Line_Order_By>>;
  where?: Maybe<Sales_Delivery_Line_Bool_Exp>;
};


/** columns and relationships of "sales.delivery" */
export type Sales_DeliveryDelivery_Lines_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Delivery_Line_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Delivery_Line_Order_By>>;
  where?: Maybe<Sales_Delivery_Line_Bool_Exp>;
};


/** columns and relationships of "sales.delivery" */
export type Sales_DeliveryInvoice_DeliveriesArgs = {
  distinct_on?: Maybe<Array<Sales_Invoice_Delivery_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Invoice_Delivery_Order_By>>;
  where?: Maybe<Sales_Invoice_Delivery_Bool_Exp>;
};


/** columns and relationships of "sales.delivery" */
export type Sales_DeliveryInvoice_Deliveries_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Invoice_Delivery_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Invoice_Delivery_Order_By>>;
  where?: Maybe<Sales_Invoice_Delivery_Bool_Exp>;
};

/** aggregated selection of "sales.delivery" */
export type Sales_Delivery_Aggregate = {
  __typename?: 'sales_delivery_aggregate';
  aggregate?: Maybe<Sales_Delivery_Aggregate_Fields>;
  nodes: Array<Sales_Delivery>;
};

/** aggregate fields of "sales.delivery" */
export type Sales_Delivery_Aggregate_Fields = {
  __typename?: 'sales_delivery_aggregate_fields';
  avg?: Maybe<Sales_Delivery_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Sales_Delivery_Max_Fields>;
  min?: Maybe<Sales_Delivery_Min_Fields>;
  stddev?: Maybe<Sales_Delivery_Stddev_Fields>;
  stddev_pop?: Maybe<Sales_Delivery_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Sales_Delivery_Stddev_Samp_Fields>;
  sum?: Maybe<Sales_Delivery_Sum_Fields>;
  var_pop?: Maybe<Sales_Delivery_Var_Pop_Fields>;
  var_samp?: Maybe<Sales_Delivery_Var_Samp_Fields>;
  variance?: Maybe<Sales_Delivery_Variance_Fields>;
};


/** aggregate fields of "sales.delivery" */
export type Sales_Delivery_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Sales_Delivery_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "sales.delivery" */
export type Sales_Delivery_Aggregate_Order_By = {
  avg?: Maybe<Sales_Delivery_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Sales_Delivery_Max_Order_By>;
  min?: Maybe<Sales_Delivery_Min_Order_By>;
  stddev?: Maybe<Sales_Delivery_Stddev_Order_By>;
  stddev_pop?: Maybe<Sales_Delivery_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Sales_Delivery_Stddev_Samp_Order_By>;
  sum?: Maybe<Sales_Delivery_Sum_Order_By>;
  var_pop?: Maybe<Sales_Delivery_Var_Pop_Order_By>;
  var_samp?: Maybe<Sales_Delivery_Var_Samp_Order_By>;
  variance?: Maybe<Sales_Delivery_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "sales.delivery" */
export type Sales_Delivery_Arr_Rel_Insert_Input = {
  data: Array<Sales_Delivery_Insert_Input>;
  /** on conflict condition */
  on_conflict?: Maybe<Sales_Delivery_On_Conflict>;
};

/** aggregate avg on columns */
export type Sales_Delivery_Avg_Fields = {
  __typename?: 'sales_delivery_avg_fields';
  amount_ht?: Maybe<Scalars['Float']>;
  amount_ttc?: Maybe<Scalars['Float']>;
  amount_tva?: Maybe<Scalars['Float']>;
  order_id?: Maybe<Scalars['Float']>;
  ref_num?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "sales.delivery" */
export type Sales_Delivery_Avg_Order_By = {
  amount_ht?: Maybe<Order_By>;
  amount_ttc?: Maybe<Order_By>;
  amount_tva?: Maybe<Order_By>;
  order_id?: Maybe<Order_By>;
  ref_num?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "sales.delivery". All fields are combined with a logical 'AND'. */
export type Sales_Delivery_Bool_Exp = {
  _and?: Maybe<Array<Sales_Delivery_Bool_Exp>>;
  _not?: Maybe<Sales_Delivery_Bool_Exp>;
  _or?: Maybe<Array<Sales_Delivery_Bool_Exp>>;
  amount_ht?: Maybe<Numeric_Comparison_Exp>;
  amount_ttc?: Maybe<Numeric_Comparison_Exp>;
  amount_tva?: Maybe<Numeric_Comparison_Exp>;
  client?: Maybe<Contact_Customer_Bool_Exp>;
  client_id?: Maybe<Uuid_Comparison_Exp>;
  company?: Maybe<Management_Company_Bool_Exp>;
  company_id?: Maybe<Uuid_Comparison_Exp>;
  contact?: Maybe<Contact_Contact_Bool_Exp>;
  contact_id?: Maybe<Uuid_Comparison_Exp>;
  createdAt?: Maybe<Date_Comparison_Exp>;
  delivery_lines?: Maybe<Sales_Delivery_Line_Bool_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  invoice_deliveries?: Maybe<Sales_Invoice_Delivery_Bool_Exp>;
  isReturned?: Maybe<Boolean_Comparison_Exp>;
  order?: Maybe<Sales_Order_Bool_Exp>;
  order_id?: Maybe<Int_Comparison_Exp>;
  payment_method?: Maybe<String_Comparison_Exp>;
  predicted_date?: Maybe<Date_Comparison_Exp>;
  ref?: Maybe<String_Comparison_Exp>;
  ref_num?: Maybe<Int_Comparison_Exp>;
  status?: Maybe<String_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "sales.delivery" */
export enum Sales_Delivery_Constraint {
  /** unique or primary key constraint */
  DeliveryPkey = 'delivery_pkey'
}

/** input type for incrementing numeric columns in table "sales.delivery" */
export type Sales_Delivery_Inc_Input = {
  amount_ht?: Maybe<Scalars['numeric']>;
  amount_ttc?: Maybe<Scalars['numeric']>;
  amount_tva?: Maybe<Scalars['numeric']>;
  order_id?: Maybe<Scalars['Int']>;
  ref_num?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "sales.delivery" */
export type Sales_Delivery_Insert_Input = {
  amount_ht?: Maybe<Scalars['numeric']>;
  amount_ttc?: Maybe<Scalars['numeric']>;
  amount_tva?: Maybe<Scalars['numeric']>;
  client?: Maybe<Contact_Customer_Obj_Rel_Insert_Input>;
  client_id?: Maybe<Scalars['uuid']>;
  company?: Maybe<Management_Company_Obj_Rel_Insert_Input>;
  company_id?: Maybe<Scalars['uuid']>;
  contact?: Maybe<Contact_Contact_Obj_Rel_Insert_Input>;
  contact_id?: Maybe<Scalars['uuid']>;
  createdAt?: Maybe<Scalars['date']>;
  delivery_lines?: Maybe<Sales_Delivery_Line_Arr_Rel_Insert_Input>;
  id?: Maybe<Scalars['uuid']>;
  invoice_deliveries?: Maybe<Sales_Invoice_Delivery_Arr_Rel_Insert_Input>;
  isReturned?: Maybe<Scalars['Boolean']>;
  order?: Maybe<Sales_Order_Obj_Rel_Insert_Input>;
  order_id?: Maybe<Scalars['Int']>;
  payment_method?: Maybe<Scalars['String']>;
  predicted_date?: Maybe<Scalars['date']>;
  ref?: Maybe<Scalars['String']>;
  ref_num?: Maybe<Scalars['Int']>;
  status?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** columns and relationships of "sales.delivery_line" */
export type Sales_Delivery_Line = {
  __typename?: 'sales_delivery_line';
  amount: Scalars['numeric'];
  delivered: Scalars['numeric'];
  delivery: Scalars['uuid'];
  /** An object relationship */
  deliveryByDelivery: Sales_Delivery;
  id: Scalars['uuid'];
  /** An object relationship */
  product_draft: Sales_Product_Draft;
  product_draft_id: Scalars['uuid'];
};

/** aggregated selection of "sales.delivery_line" */
export type Sales_Delivery_Line_Aggregate = {
  __typename?: 'sales_delivery_line_aggregate';
  aggregate?: Maybe<Sales_Delivery_Line_Aggregate_Fields>;
  nodes: Array<Sales_Delivery_Line>;
};

/** aggregate fields of "sales.delivery_line" */
export type Sales_Delivery_Line_Aggregate_Fields = {
  __typename?: 'sales_delivery_line_aggregate_fields';
  avg?: Maybe<Sales_Delivery_Line_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Sales_Delivery_Line_Max_Fields>;
  min?: Maybe<Sales_Delivery_Line_Min_Fields>;
  stddev?: Maybe<Sales_Delivery_Line_Stddev_Fields>;
  stddev_pop?: Maybe<Sales_Delivery_Line_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Sales_Delivery_Line_Stddev_Samp_Fields>;
  sum?: Maybe<Sales_Delivery_Line_Sum_Fields>;
  var_pop?: Maybe<Sales_Delivery_Line_Var_Pop_Fields>;
  var_samp?: Maybe<Sales_Delivery_Line_Var_Samp_Fields>;
  variance?: Maybe<Sales_Delivery_Line_Variance_Fields>;
};


/** aggregate fields of "sales.delivery_line" */
export type Sales_Delivery_Line_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Sales_Delivery_Line_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "sales.delivery_line" */
export type Sales_Delivery_Line_Aggregate_Order_By = {
  avg?: Maybe<Sales_Delivery_Line_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Sales_Delivery_Line_Max_Order_By>;
  min?: Maybe<Sales_Delivery_Line_Min_Order_By>;
  stddev?: Maybe<Sales_Delivery_Line_Stddev_Order_By>;
  stddev_pop?: Maybe<Sales_Delivery_Line_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Sales_Delivery_Line_Stddev_Samp_Order_By>;
  sum?: Maybe<Sales_Delivery_Line_Sum_Order_By>;
  var_pop?: Maybe<Sales_Delivery_Line_Var_Pop_Order_By>;
  var_samp?: Maybe<Sales_Delivery_Line_Var_Samp_Order_By>;
  variance?: Maybe<Sales_Delivery_Line_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "sales.delivery_line" */
export type Sales_Delivery_Line_Arr_Rel_Insert_Input = {
  data: Array<Sales_Delivery_Line_Insert_Input>;
  /** on conflict condition */
  on_conflict?: Maybe<Sales_Delivery_Line_On_Conflict>;
};

/** aggregate avg on columns */
export type Sales_Delivery_Line_Avg_Fields = {
  __typename?: 'sales_delivery_line_avg_fields';
  amount?: Maybe<Scalars['Float']>;
  delivered?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "sales.delivery_line" */
export type Sales_Delivery_Line_Avg_Order_By = {
  amount?: Maybe<Order_By>;
  delivered?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "sales.delivery_line". All fields are combined with a logical 'AND'. */
export type Sales_Delivery_Line_Bool_Exp = {
  _and?: Maybe<Array<Sales_Delivery_Line_Bool_Exp>>;
  _not?: Maybe<Sales_Delivery_Line_Bool_Exp>;
  _or?: Maybe<Array<Sales_Delivery_Line_Bool_Exp>>;
  amount?: Maybe<Numeric_Comparison_Exp>;
  delivered?: Maybe<Numeric_Comparison_Exp>;
  delivery?: Maybe<Uuid_Comparison_Exp>;
  deliveryByDelivery?: Maybe<Sales_Delivery_Bool_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  product_draft?: Maybe<Sales_Product_Draft_Bool_Exp>;
  product_draft_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "sales.delivery_line" */
export enum Sales_Delivery_Line_Constraint {
  /** unique or primary key constraint */
  DeliveryLinePkey = 'delivery_line_pkey'
}

/** input type for incrementing numeric columns in table "sales.delivery_line" */
export type Sales_Delivery_Line_Inc_Input = {
  amount?: Maybe<Scalars['numeric']>;
  delivered?: Maybe<Scalars['numeric']>;
};

/** input type for inserting data into table "sales.delivery_line" */
export type Sales_Delivery_Line_Insert_Input = {
  amount?: Maybe<Scalars['numeric']>;
  delivered?: Maybe<Scalars['numeric']>;
  delivery?: Maybe<Scalars['uuid']>;
  deliveryByDelivery?: Maybe<Sales_Delivery_Obj_Rel_Insert_Input>;
  id?: Maybe<Scalars['uuid']>;
  product_draft?: Maybe<Sales_Product_Draft_Obj_Rel_Insert_Input>;
  product_draft_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Sales_Delivery_Line_Max_Fields = {
  __typename?: 'sales_delivery_line_max_fields';
  amount?: Maybe<Scalars['numeric']>;
  delivered?: Maybe<Scalars['numeric']>;
  delivery?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  product_draft_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "sales.delivery_line" */
export type Sales_Delivery_Line_Max_Order_By = {
  amount?: Maybe<Order_By>;
  delivered?: Maybe<Order_By>;
  delivery?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  product_draft_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Sales_Delivery_Line_Min_Fields = {
  __typename?: 'sales_delivery_line_min_fields';
  amount?: Maybe<Scalars['numeric']>;
  delivered?: Maybe<Scalars['numeric']>;
  delivery?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  product_draft_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "sales.delivery_line" */
export type Sales_Delivery_Line_Min_Order_By = {
  amount?: Maybe<Order_By>;
  delivered?: Maybe<Order_By>;
  delivery?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  product_draft_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "sales.delivery_line" */
export type Sales_Delivery_Line_Mutation_Response = {
  __typename?: 'sales_delivery_line_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Sales_Delivery_Line>;
};

/** on conflict condition type for table "sales.delivery_line" */
export type Sales_Delivery_Line_On_Conflict = {
  constraint: Sales_Delivery_Line_Constraint;
  update_columns?: Array<Sales_Delivery_Line_Update_Column>;
  where?: Maybe<Sales_Delivery_Line_Bool_Exp>;
};

/** Ordering options when selecting data from "sales.delivery_line". */
export type Sales_Delivery_Line_Order_By = {
  amount?: Maybe<Order_By>;
  delivered?: Maybe<Order_By>;
  delivery?: Maybe<Order_By>;
  deliveryByDelivery?: Maybe<Sales_Delivery_Order_By>;
  id?: Maybe<Order_By>;
  product_draft?: Maybe<Sales_Product_Draft_Order_By>;
  product_draft_id?: Maybe<Order_By>;
};

/** primary key columns input for table: sales_delivery_line */
export type Sales_Delivery_Line_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "sales.delivery_line" */
export enum Sales_Delivery_Line_Select_Column {
  /** column name */
  Amount = 'amount',
  /** column name */
  Delivered = 'delivered',
  /** column name */
  Delivery = 'delivery',
  /** column name */
  Id = 'id',
  /** column name */
  ProductDraftId = 'product_draft_id'
}

/** input type for updating data in table "sales.delivery_line" */
export type Sales_Delivery_Line_Set_Input = {
  amount?: Maybe<Scalars['numeric']>;
  delivered?: Maybe<Scalars['numeric']>;
  delivery?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  product_draft_id?: Maybe<Scalars['uuid']>;
};

/** aggregate stddev on columns */
export type Sales_Delivery_Line_Stddev_Fields = {
  __typename?: 'sales_delivery_line_stddev_fields';
  amount?: Maybe<Scalars['Float']>;
  delivered?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "sales.delivery_line" */
export type Sales_Delivery_Line_Stddev_Order_By = {
  amount?: Maybe<Order_By>;
  delivered?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Sales_Delivery_Line_Stddev_Pop_Fields = {
  __typename?: 'sales_delivery_line_stddev_pop_fields';
  amount?: Maybe<Scalars['Float']>;
  delivered?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "sales.delivery_line" */
export type Sales_Delivery_Line_Stddev_Pop_Order_By = {
  amount?: Maybe<Order_By>;
  delivered?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Sales_Delivery_Line_Stddev_Samp_Fields = {
  __typename?: 'sales_delivery_line_stddev_samp_fields';
  amount?: Maybe<Scalars['Float']>;
  delivered?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "sales.delivery_line" */
export type Sales_Delivery_Line_Stddev_Samp_Order_By = {
  amount?: Maybe<Order_By>;
  delivered?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Sales_Delivery_Line_Sum_Fields = {
  __typename?: 'sales_delivery_line_sum_fields';
  amount?: Maybe<Scalars['numeric']>;
  delivered?: Maybe<Scalars['numeric']>;
};

/** order by sum() on columns of table "sales.delivery_line" */
export type Sales_Delivery_Line_Sum_Order_By = {
  amount?: Maybe<Order_By>;
  delivered?: Maybe<Order_By>;
};

/** update columns of table "sales.delivery_line" */
export enum Sales_Delivery_Line_Update_Column {
  /** column name */
  Amount = 'amount',
  /** column name */
  Delivered = 'delivered',
  /** column name */
  Delivery = 'delivery',
  /** column name */
  Id = 'id',
  /** column name */
  ProductDraftId = 'product_draft_id'
}

/** aggregate var_pop on columns */
export type Sales_Delivery_Line_Var_Pop_Fields = {
  __typename?: 'sales_delivery_line_var_pop_fields';
  amount?: Maybe<Scalars['Float']>;
  delivered?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "sales.delivery_line" */
export type Sales_Delivery_Line_Var_Pop_Order_By = {
  amount?: Maybe<Order_By>;
  delivered?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Sales_Delivery_Line_Var_Samp_Fields = {
  __typename?: 'sales_delivery_line_var_samp_fields';
  amount?: Maybe<Scalars['Float']>;
  delivered?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "sales.delivery_line" */
export type Sales_Delivery_Line_Var_Samp_Order_By = {
  amount?: Maybe<Order_By>;
  delivered?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Sales_Delivery_Line_Variance_Fields = {
  __typename?: 'sales_delivery_line_variance_fields';
  amount?: Maybe<Scalars['Float']>;
  delivered?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "sales.delivery_line" */
export type Sales_Delivery_Line_Variance_Order_By = {
  amount?: Maybe<Order_By>;
  delivered?: Maybe<Order_By>;
};

/** aggregate max on columns */
export type Sales_Delivery_Max_Fields = {
  __typename?: 'sales_delivery_max_fields';
  amount_ht?: Maybe<Scalars['numeric']>;
  amount_ttc?: Maybe<Scalars['numeric']>;
  amount_tva?: Maybe<Scalars['numeric']>;
  client_id?: Maybe<Scalars['uuid']>;
  company_id?: Maybe<Scalars['uuid']>;
  contact_id?: Maybe<Scalars['uuid']>;
  createdAt?: Maybe<Scalars['date']>;
  id?: Maybe<Scalars['uuid']>;
  order_id?: Maybe<Scalars['Int']>;
  payment_method?: Maybe<Scalars['String']>;
  predicted_date?: Maybe<Scalars['date']>;
  ref?: Maybe<Scalars['String']>;
  ref_num?: Maybe<Scalars['Int']>;
  status?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** order by max() on columns of table "sales.delivery" */
export type Sales_Delivery_Max_Order_By = {
  amount_ht?: Maybe<Order_By>;
  amount_ttc?: Maybe<Order_By>;
  amount_tva?: Maybe<Order_By>;
  client_id?: Maybe<Order_By>;
  company_id?: Maybe<Order_By>;
  contact_id?: Maybe<Order_By>;
  createdAt?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  order_id?: Maybe<Order_By>;
  payment_method?: Maybe<Order_By>;
  predicted_date?: Maybe<Order_By>;
  ref?: Maybe<Order_By>;
  ref_num?: Maybe<Order_By>;
  status?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Sales_Delivery_Min_Fields = {
  __typename?: 'sales_delivery_min_fields';
  amount_ht?: Maybe<Scalars['numeric']>;
  amount_ttc?: Maybe<Scalars['numeric']>;
  amount_tva?: Maybe<Scalars['numeric']>;
  client_id?: Maybe<Scalars['uuid']>;
  company_id?: Maybe<Scalars['uuid']>;
  contact_id?: Maybe<Scalars['uuid']>;
  createdAt?: Maybe<Scalars['date']>;
  id?: Maybe<Scalars['uuid']>;
  order_id?: Maybe<Scalars['Int']>;
  payment_method?: Maybe<Scalars['String']>;
  predicted_date?: Maybe<Scalars['date']>;
  ref?: Maybe<Scalars['String']>;
  ref_num?: Maybe<Scalars['Int']>;
  status?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** order by min() on columns of table "sales.delivery" */
export type Sales_Delivery_Min_Order_By = {
  amount_ht?: Maybe<Order_By>;
  amount_ttc?: Maybe<Order_By>;
  amount_tva?: Maybe<Order_By>;
  client_id?: Maybe<Order_By>;
  company_id?: Maybe<Order_By>;
  contact_id?: Maybe<Order_By>;
  createdAt?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  order_id?: Maybe<Order_By>;
  payment_method?: Maybe<Order_By>;
  predicted_date?: Maybe<Order_By>;
  ref?: Maybe<Order_By>;
  ref_num?: Maybe<Order_By>;
  status?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** response of any mutation on the table "sales.delivery" */
export type Sales_Delivery_Mutation_Response = {
  __typename?: 'sales_delivery_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Sales_Delivery>;
};

/** input type for inserting object relation for remote table "sales.delivery" */
export type Sales_Delivery_Obj_Rel_Insert_Input = {
  data: Sales_Delivery_Insert_Input;
  /** on conflict condition */
  on_conflict?: Maybe<Sales_Delivery_On_Conflict>;
};

/** on conflict condition type for table "sales.delivery" */
export type Sales_Delivery_On_Conflict = {
  constraint: Sales_Delivery_Constraint;
  update_columns?: Array<Sales_Delivery_Update_Column>;
  where?: Maybe<Sales_Delivery_Bool_Exp>;
};

/** Ordering options when selecting data from "sales.delivery". */
export type Sales_Delivery_Order_By = {
  amount_ht?: Maybe<Order_By>;
  amount_ttc?: Maybe<Order_By>;
  amount_tva?: Maybe<Order_By>;
  client?: Maybe<Contact_Customer_Order_By>;
  client_id?: Maybe<Order_By>;
  company?: Maybe<Management_Company_Order_By>;
  company_id?: Maybe<Order_By>;
  contact?: Maybe<Contact_Contact_Order_By>;
  contact_id?: Maybe<Order_By>;
  createdAt?: Maybe<Order_By>;
  delivery_lines_aggregate?: Maybe<Sales_Delivery_Line_Aggregate_Order_By>;
  id?: Maybe<Order_By>;
  invoice_deliveries_aggregate?: Maybe<Sales_Invoice_Delivery_Aggregate_Order_By>;
  isReturned?: Maybe<Order_By>;
  order?: Maybe<Sales_Order_Order_By>;
  order_id?: Maybe<Order_By>;
  payment_method?: Maybe<Order_By>;
  predicted_date?: Maybe<Order_By>;
  ref?: Maybe<Order_By>;
  ref_num?: Maybe<Order_By>;
  status?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** primary key columns input for table: sales_delivery */
export type Sales_Delivery_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "sales.delivery" */
export enum Sales_Delivery_Select_Column {
  /** column name */
  AmountHt = 'amount_ht',
  /** column name */
  AmountTtc = 'amount_ttc',
  /** column name */
  AmountTva = 'amount_tva',
  /** column name */
  ClientId = 'client_id',
  /** column name */
  CompanyId = 'company_id',
  /** column name */
  ContactId = 'contact_id',
  /** column name */
  CreatedAt = 'createdAt',
  /** column name */
  Id = 'id',
  /** column name */
  IsReturned = 'isReturned',
  /** column name */
  OrderId = 'order_id',
  /** column name */
  PaymentMethod = 'payment_method',
  /** column name */
  PredictedDate = 'predicted_date',
  /** column name */
  Ref = 'ref',
  /** column name */
  RefNum = 'ref_num',
  /** column name */
  Status = 'status',
  /** column name */
  UpdatedAt = 'updated_at'
}

/** input type for updating data in table "sales.delivery" */
export type Sales_Delivery_Set_Input = {
  amount_ht?: Maybe<Scalars['numeric']>;
  amount_ttc?: Maybe<Scalars['numeric']>;
  amount_tva?: Maybe<Scalars['numeric']>;
  client_id?: Maybe<Scalars['uuid']>;
  company_id?: Maybe<Scalars['uuid']>;
  contact_id?: Maybe<Scalars['uuid']>;
  createdAt?: Maybe<Scalars['date']>;
  id?: Maybe<Scalars['uuid']>;
  isReturned?: Maybe<Scalars['Boolean']>;
  order_id?: Maybe<Scalars['Int']>;
  payment_method?: Maybe<Scalars['String']>;
  predicted_date?: Maybe<Scalars['date']>;
  ref?: Maybe<Scalars['String']>;
  ref_num?: Maybe<Scalars['Int']>;
  status?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate stddev on columns */
export type Sales_Delivery_Stddev_Fields = {
  __typename?: 'sales_delivery_stddev_fields';
  amount_ht?: Maybe<Scalars['Float']>;
  amount_ttc?: Maybe<Scalars['Float']>;
  amount_tva?: Maybe<Scalars['Float']>;
  order_id?: Maybe<Scalars['Float']>;
  ref_num?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "sales.delivery" */
export type Sales_Delivery_Stddev_Order_By = {
  amount_ht?: Maybe<Order_By>;
  amount_ttc?: Maybe<Order_By>;
  amount_tva?: Maybe<Order_By>;
  order_id?: Maybe<Order_By>;
  ref_num?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Sales_Delivery_Stddev_Pop_Fields = {
  __typename?: 'sales_delivery_stddev_pop_fields';
  amount_ht?: Maybe<Scalars['Float']>;
  amount_ttc?: Maybe<Scalars['Float']>;
  amount_tva?: Maybe<Scalars['Float']>;
  order_id?: Maybe<Scalars['Float']>;
  ref_num?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "sales.delivery" */
export type Sales_Delivery_Stddev_Pop_Order_By = {
  amount_ht?: Maybe<Order_By>;
  amount_ttc?: Maybe<Order_By>;
  amount_tva?: Maybe<Order_By>;
  order_id?: Maybe<Order_By>;
  ref_num?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Sales_Delivery_Stddev_Samp_Fields = {
  __typename?: 'sales_delivery_stddev_samp_fields';
  amount_ht?: Maybe<Scalars['Float']>;
  amount_ttc?: Maybe<Scalars['Float']>;
  amount_tva?: Maybe<Scalars['Float']>;
  order_id?: Maybe<Scalars['Float']>;
  ref_num?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "sales.delivery" */
export type Sales_Delivery_Stddev_Samp_Order_By = {
  amount_ht?: Maybe<Order_By>;
  amount_ttc?: Maybe<Order_By>;
  amount_tva?: Maybe<Order_By>;
  order_id?: Maybe<Order_By>;
  ref_num?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Sales_Delivery_Sum_Fields = {
  __typename?: 'sales_delivery_sum_fields';
  amount_ht?: Maybe<Scalars['numeric']>;
  amount_ttc?: Maybe<Scalars['numeric']>;
  amount_tva?: Maybe<Scalars['numeric']>;
  order_id?: Maybe<Scalars['Int']>;
  ref_num?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "sales.delivery" */
export type Sales_Delivery_Sum_Order_By = {
  amount_ht?: Maybe<Order_By>;
  amount_ttc?: Maybe<Order_By>;
  amount_tva?: Maybe<Order_By>;
  order_id?: Maybe<Order_By>;
  ref_num?: Maybe<Order_By>;
};

/** update columns of table "sales.delivery" */
export enum Sales_Delivery_Update_Column {
  /** column name */
  AmountHt = 'amount_ht',
  /** column name */
  AmountTtc = 'amount_ttc',
  /** column name */
  AmountTva = 'amount_tva',
  /** column name */
  ClientId = 'client_id',
  /** column name */
  CompanyId = 'company_id',
  /** column name */
  ContactId = 'contact_id',
  /** column name */
  CreatedAt = 'createdAt',
  /** column name */
  Id = 'id',
  /** column name */
  IsReturned = 'isReturned',
  /** column name */
  OrderId = 'order_id',
  /** column name */
  PaymentMethod = 'payment_method',
  /** column name */
  PredictedDate = 'predicted_date',
  /** column name */
  Ref = 'ref',
  /** column name */
  RefNum = 'ref_num',
  /** column name */
  Status = 'status',
  /** column name */
  UpdatedAt = 'updated_at'
}

/** aggregate var_pop on columns */
export type Sales_Delivery_Var_Pop_Fields = {
  __typename?: 'sales_delivery_var_pop_fields';
  amount_ht?: Maybe<Scalars['Float']>;
  amount_ttc?: Maybe<Scalars['Float']>;
  amount_tva?: Maybe<Scalars['Float']>;
  order_id?: Maybe<Scalars['Float']>;
  ref_num?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "sales.delivery" */
export type Sales_Delivery_Var_Pop_Order_By = {
  amount_ht?: Maybe<Order_By>;
  amount_ttc?: Maybe<Order_By>;
  amount_tva?: Maybe<Order_By>;
  order_id?: Maybe<Order_By>;
  ref_num?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Sales_Delivery_Var_Samp_Fields = {
  __typename?: 'sales_delivery_var_samp_fields';
  amount_ht?: Maybe<Scalars['Float']>;
  amount_ttc?: Maybe<Scalars['Float']>;
  amount_tva?: Maybe<Scalars['Float']>;
  order_id?: Maybe<Scalars['Float']>;
  ref_num?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "sales.delivery" */
export type Sales_Delivery_Var_Samp_Order_By = {
  amount_ht?: Maybe<Order_By>;
  amount_ttc?: Maybe<Order_By>;
  amount_tva?: Maybe<Order_By>;
  order_id?: Maybe<Order_By>;
  ref_num?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Sales_Delivery_Variance_Fields = {
  __typename?: 'sales_delivery_variance_fields';
  amount_ht?: Maybe<Scalars['Float']>;
  amount_ttc?: Maybe<Scalars['Float']>;
  amount_tva?: Maybe<Scalars['Float']>;
  order_id?: Maybe<Scalars['Float']>;
  ref_num?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "sales.delivery" */
export type Sales_Delivery_Variance_Order_By = {
  amount_ht?: Maybe<Order_By>;
  amount_ttc?: Maybe<Order_By>;
  amount_tva?: Maybe<Order_By>;
  order_id?: Maybe<Order_By>;
  ref_num?: Maybe<Order_By>;
};

/** columns and relationships of "sales.draft" */
export type Sales_Draft = {
  __typename?: 'sales_draft';
  /** An array relationship */
  amounts: Array<Sales_Amount>;
  /** An aggregate relationship */
  amounts_aggregate: Sales_Amount_Aggregate;
  date: Scalars['date'];
  /** An object relationship */
  draft_status: Sales_Draft_Status;
  id: Scalars['Int'];
  /** An object relationship */
  order?: Maybe<Sales_Order>;
  /** An array relationship */
  product_drafts: Array<Sales_Product_Draft>;
  /** An aggregate relationship */
  product_drafts_aggregate: Sales_Product_Draft_Aggregate;
  status: Sales_Draft_Status_Enum;
};


/** columns and relationships of "sales.draft" */
export type Sales_DraftAmountsArgs = {
  distinct_on?: Maybe<Array<Sales_Amount_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Amount_Order_By>>;
  where?: Maybe<Sales_Amount_Bool_Exp>;
};


/** columns and relationships of "sales.draft" */
export type Sales_DraftAmounts_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Amount_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Amount_Order_By>>;
  where?: Maybe<Sales_Amount_Bool_Exp>;
};


/** columns and relationships of "sales.draft" */
export type Sales_DraftProduct_DraftsArgs = {
  distinct_on?: Maybe<Array<Sales_Product_Draft_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Product_Draft_Order_By>>;
  where?: Maybe<Sales_Product_Draft_Bool_Exp>;
};


/** columns and relationships of "sales.draft" */
export type Sales_DraftProduct_Drafts_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Product_Draft_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Product_Draft_Order_By>>;
  where?: Maybe<Sales_Product_Draft_Bool_Exp>;
};

/** aggregated selection of "sales.draft" */
export type Sales_Draft_Aggregate = {
  __typename?: 'sales_draft_aggregate';
  aggregate?: Maybe<Sales_Draft_Aggregate_Fields>;
  nodes: Array<Sales_Draft>;
};

/** aggregate fields of "sales.draft" */
export type Sales_Draft_Aggregate_Fields = {
  __typename?: 'sales_draft_aggregate_fields';
  avg?: Maybe<Sales_Draft_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Sales_Draft_Max_Fields>;
  min?: Maybe<Sales_Draft_Min_Fields>;
  stddev?: Maybe<Sales_Draft_Stddev_Fields>;
  stddev_pop?: Maybe<Sales_Draft_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Sales_Draft_Stddev_Samp_Fields>;
  sum?: Maybe<Sales_Draft_Sum_Fields>;
  var_pop?: Maybe<Sales_Draft_Var_Pop_Fields>;
  var_samp?: Maybe<Sales_Draft_Var_Samp_Fields>;
  variance?: Maybe<Sales_Draft_Variance_Fields>;
};


/** aggregate fields of "sales.draft" */
export type Sales_Draft_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Sales_Draft_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "sales.draft" */
export type Sales_Draft_Aggregate_Order_By = {
  avg?: Maybe<Sales_Draft_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Sales_Draft_Max_Order_By>;
  min?: Maybe<Sales_Draft_Min_Order_By>;
  stddev?: Maybe<Sales_Draft_Stddev_Order_By>;
  stddev_pop?: Maybe<Sales_Draft_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Sales_Draft_Stddev_Samp_Order_By>;
  sum?: Maybe<Sales_Draft_Sum_Order_By>;
  var_pop?: Maybe<Sales_Draft_Var_Pop_Order_By>;
  var_samp?: Maybe<Sales_Draft_Var_Samp_Order_By>;
  variance?: Maybe<Sales_Draft_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "sales.draft" */
export type Sales_Draft_Arr_Rel_Insert_Input = {
  data: Array<Sales_Draft_Insert_Input>;
  /** on conflict condition */
  on_conflict?: Maybe<Sales_Draft_On_Conflict>;
};

/** aggregate avg on columns */
export type Sales_Draft_Avg_Fields = {
  __typename?: 'sales_draft_avg_fields';
  id?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "sales.draft" */
export type Sales_Draft_Avg_Order_By = {
  id?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "sales.draft". All fields are combined with a logical 'AND'. */
export type Sales_Draft_Bool_Exp = {
  _and?: Maybe<Array<Sales_Draft_Bool_Exp>>;
  _not?: Maybe<Sales_Draft_Bool_Exp>;
  _or?: Maybe<Array<Sales_Draft_Bool_Exp>>;
  amounts?: Maybe<Sales_Amount_Bool_Exp>;
  date?: Maybe<Date_Comparison_Exp>;
  draft_status?: Maybe<Sales_Draft_Status_Bool_Exp>;
  id?: Maybe<Int_Comparison_Exp>;
  order?: Maybe<Sales_Order_Bool_Exp>;
  product_drafts?: Maybe<Sales_Product_Draft_Bool_Exp>;
  status?: Maybe<Sales_Draft_Status_Enum_Comparison_Exp>;
};

/** unique or primary key constraints on table "sales.draft" */
export enum Sales_Draft_Constraint {
  /** unique or primary key constraint */
  DraftPkey = 'draft_pkey'
}

/** input type for incrementing numeric columns in table "sales.draft" */
export type Sales_Draft_Inc_Input = {
  id?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "sales.draft" */
export type Sales_Draft_Insert_Input = {
  amounts?: Maybe<Sales_Amount_Arr_Rel_Insert_Input>;
  date?: Maybe<Scalars['date']>;
  draft_status?: Maybe<Sales_Draft_Status_Obj_Rel_Insert_Input>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Sales_Order_Obj_Rel_Insert_Input>;
  product_drafts?: Maybe<Sales_Product_Draft_Arr_Rel_Insert_Input>;
  status?: Maybe<Sales_Draft_Status_Enum>;
};

/** aggregate max on columns */
export type Sales_Draft_Max_Fields = {
  __typename?: 'sales_draft_max_fields';
  date?: Maybe<Scalars['date']>;
  id?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "sales.draft" */
export type Sales_Draft_Max_Order_By = {
  date?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Sales_Draft_Min_Fields = {
  __typename?: 'sales_draft_min_fields';
  date?: Maybe<Scalars['date']>;
  id?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "sales.draft" */
export type Sales_Draft_Min_Order_By = {
  date?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
};

/** response of any mutation on the table "sales.draft" */
export type Sales_Draft_Mutation_Response = {
  __typename?: 'sales_draft_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Sales_Draft>;
};

/** input type for inserting object relation for remote table "sales.draft" */
export type Sales_Draft_Obj_Rel_Insert_Input = {
  data: Sales_Draft_Insert_Input;
  /** on conflict condition */
  on_conflict?: Maybe<Sales_Draft_On_Conflict>;
};

/** on conflict condition type for table "sales.draft" */
export type Sales_Draft_On_Conflict = {
  constraint: Sales_Draft_Constraint;
  update_columns?: Array<Sales_Draft_Update_Column>;
  where?: Maybe<Sales_Draft_Bool_Exp>;
};

/** Ordering options when selecting data from "sales.draft". */
export type Sales_Draft_Order_By = {
  amounts_aggregate?: Maybe<Sales_Amount_Aggregate_Order_By>;
  date?: Maybe<Order_By>;
  draft_status?: Maybe<Sales_Draft_Status_Order_By>;
  id?: Maybe<Order_By>;
  order?: Maybe<Sales_Order_Order_By>;
  product_drafts_aggregate?: Maybe<Sales_Product_Draft_Aggregate_Order_By>;
  status?: Maybe<Order_By>;
};

/** primary key columns input for table: sales_draft */
export type Sales_Draft_Pk_Columns_Input = {
  id: Scalars['Int'];
};

/** select columns of table "sales.draft" */
export enum Sales_Draft_Select_Column {
  /** column name */
  Date = 'date',
  /** column name */
  Id = 'id',
  /** column name */
  Status = 'status'
}

/** input type for updating data in table "sales.draft" */
export type Sales_Draft_Set_Input = {
  date?: Maybe<Scalars['date']>;
  id?: Maybe<Scalars['Int']>;
  status?: Maybe<Sales_Draft_Status_Enum>;
};

/** columns and relationships of "sales.draft_status" */
export type Sales_Draft_Status = {
  __typename?: 'sales_draft_status';
  /** An array relationship */
  drafts: Array<Sales_Draft>;
  /** An aggregate relationship */
  drafts_aggregate: Sales_Draft_Aggregate;
  status: Scalars['String'];
};


/** columns and relationships of "sales.draft_status" */
export type Sales_Draft_StatusDraftsArgs = {
  distinct_on?: Maybe<Array<Sales_Draft_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Draft_Order_By>>;
  where?: Maybe<Sales_Draft_Bool_Exp>;
};


/** columns and relationships of "sales.draft_status" */
export type Sales_Draft_StatusDrafts_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Draft_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Draft_Order_By>>;
  where?: Maybe<Sales_Draft_Bool_Exp>;
};

/** aggregated selection of "sales.draft_status" */
export type Sales_Draft_Status_Aggregate = {
  __typename?: 'sales_draft_status_aggregate';
  aggregate?: Maybe<Sales_Draft_Status_Aggregate_Fields>;
  nodes: Array<Sales_Draft_Status>;
};

/** aggregate fields of "sales.draft_status" */
export type Sales_Draft_Status_Aggregate_Fields = {
  __typename?: 'sales_draft_status_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Sales_Draft_Status_Max_Fields>;
  min?: Maybe<Sales_Draft_Status_Min_Fields>;
};


/** aggregate fields of "sales.draft_status" */
export type Sales_Draft_Status_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Sales_Draft_Status_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** Boolean expression to filter rows from the table "sales.draft_status". All fields are combined with a logical 'AND'. */
export type Sales_Draft_Status_Bool_Exp = {
  _and?: Maybe<Array<Sales_Draft_Status_Bool_Exp>>;
  _not?: Maybe<Sales_Draft_Status_Bool_Exp>;
  _or?: Maybe<Array<Sales_Draft_Status_Bool_Exp>>;
  drafts?: Maybe<Sales_Draft_Bool_Exp>;
  status?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "sales.draft_status" */
export enum Sales_Draft_Status_Constraint {
  /** unique or primary key constraint */
  DraftStatusPkey = 'draft_status_pkey'
}

export enum Sales_Draft_Status_Enum {
  Commande = 'commande',
  Devis = 'devis',
  Draft = 'draft',
  Lance = 'lance'
}

/** Boolean expression to compare columns of type "sales_draft_status_enum". All fields are combined with logical 'AND'. */
export type Sales_Draft_Status_Enum_Comparison_Exp = {
  _eq?: Maybe<Sales_Draft_Status_Enum>;
  _in?: Maybe<Array<Sales_Draft_Status_Enum>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _neq?: Maybe<Sales_Draft_Status_Enum>;
  _nin?: Maybe<Array<Sales_Draft_Status_Enum>>;
};

/** input type for inserting data into table "sales.draft_status" */
export type Sales_Draft_Status_Insert_Input = {
  drafts?: Maybe<Sales_Draft_Arr_Rel_Insert_Input>;
  status?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Sales_Draft_Status_Max_Fields = {
  __typename?: 'sales_draft_status_max_fields';
  status?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type Sales_Draft_Status_Min_Fields = {
  __typename?: 'sales_draft_status_min_fields';
  status?: Maybe<Scalars['String']>;
};

/** response of any mutation on the table "sales.draft_status" */
export type Sales_Draft_Status_Mutation_Response = {
  __typename?: 'sales_draft_status_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Sales_Draft_Status>;
};

/** input type for inserting object relation for remote table "sales.draft_status" */
export type Sales_Draft_Status_Obj_Rel_Insert_Input = {
  data: Sales_Draft_Status_Insert_Input;
  /** on conflict condition */
  on_conflict?: Maybe<Sales_Draft_Status_On_Conflict>;
};

/** on conflict condition type for table "sales.draft_status" */
export type Sales_Draft_Status_On_Conflict = {
  constraint: Sales_Draft_Status_Constraint;
  update_columns?: Array<Sales_Draft_Status_Update_Column>;
  where?: Maybe<Sales_Draft_Status_Bool_Exp>;
};

/** Ordering options when selecting data from "sales.draft_status". */
export type Sales_Draft_Status_Order_By = {
  drafts_aggregate?: Maybe<Sales_Draft_Aggregate_Order_By>;
  status?: Maybe<Order_By>;
};

/** primary key columns input for table: sales_draft_status */
export type Sales_Draft_Status_Pk_Columns_Input = {
  status: Scalars['String'];
};

/** select columns of table "sales.draft_status" */
export enum Sales_Draft_Status_Select_Column {
  /** column name */
  Status = 'status'
}

/** input type for updating data in table "sales.draft_status" */
export type Sales_Draft_Status_Set_Input = {
  status?: Maybe<Scalars['String']>;
};

/** update columns of table "sales.draft_status" */
export enum Sales_Draft_Status_Update_Column {
  /** column name */
  Status = 'status'
}

/** aggregate stddev on columns */
export type Sales_Draft_Stddev_Fields = {
  __typename?: 'sales_draft_stddev_fields';
  id?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "sales.draft" */
export type Sales_Draft_Stddev_Order_By = {
  id?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Sales_Draft_Stddev_Pop_Fields = {
  __typename?: 'sales_draft_stddev_pop_fields';
  id?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "sales.draft" */
export type Sales_Draft_Stddev_Pop_Order_By = {
  id?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Sales_Draft_Stddev_Samp_Fields = {
  __typename?: 'sales_draft_stddev_samp_fields';
  id?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "sales.draft" */
export type Sales_Draft_Stddev_Samp_Order_By = {
  id?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Sales_Draft_Sum_Fields = {
  __typename?: 'sales_draft_sum_fields';
  id?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "sales.draft" */
export type Sales_Draft_Sum_Order_By = {
  id?: Maybe<Order_By>;
};

/** update columns of table "sales.draft" */
export enum Sales_Draft_Update_Column {
  /** column name */
  Date = 'date',
  /** column name */
  Id = 'id',
  /** column name */
  Status = 'status'
}

/** aggregate var_pop on columns */
export type Sales_Draft_Var_Pop_Fields = {
  __typename?: 'sales_draft_var_pop_fields';
  id?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "sales.draft" */
export type Sales_Draft_Var_Pop_Order_By = {
  id?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Sales_Draft_Var_Samp_Fields = {
  __typename?: 'sales_draft_var_samp_fields';
  id?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "sales.draft" */
export type Sales_Draft_Var_Samp_Order_By = {
  id?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Sales_Draft_Variance_Fields = {
  __typename?: 'sales_draft_variance_fields';
  id?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "sales.draft" */
export type Sales_Draft_Variance_Order_By = {
  id?: Maybe<Order_By>;
};

/** columns and relationships of "sales.glass_draft" */
export type Sales_Glass_Draft = {
  __typename?: 'sales_glass_draft';
  /** An array relationship */
  consumable_drafts: Array<Sales_Consumable_Draft>;
  /** An aggregate relationship */
  consumable_drafts_aggregate: Sales_Consumable_Draft_Aggregate;
  id: Scalars['uuid'];
  /** An object relationship */
  job_order?: Maybe<Manufacturing_Job_Order>;
  job_order_id?: Maybe<Scalars['Int']>;
  /** An array relationship */
  manufacturing_lines: Array<Manufacturing_Manufacturing_Line>;
  /** An aggregate relationship */
  manufacturing_lines_aggregate: Manufacturing_Manufacturing_Line_Aggregate;
  /** An object relationship */
  product_draft?: Maybe<Sales_Product_Draft>;
  productdraft_id?: Maybe<Scalars['uuid']>;
  /** An array relationship */
  service_drafts: Array<Sales_Service_Draft>;
  /** An aggregate relationship */
  service_drafts_aggregate: Sales_Service_Draft_Aggregate;
};


/** columns and relationships of "sales.glass_draft" */
export type Sales_Glass_DraftConsumable_DraftsArgs = {
  distinct_on?: Maybe<Array<Sales_Consumable_Draft_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Consumable_Draft_Order_By>>;
  where?: Maybe<Sales_Consumable_Draft_Bool_Exp>;
};


/** columns and relationships of "sales.glass_draft" */
export type Sales_Glass_DraftConsumable_Drafts_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Consumable_Draft_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Consumable_Draft_Order_By>>;
  where?: Maybe<Sales_Consumable_Draft_Bool_Exp>;
};


/** columns and relationships of "sales.glass_draft" */
export type Sales_Glass_DraftManufacturing_LinesArgs = {
  distinct_on?: Maybe<Array<Manufacturing_Manufacturing_Line_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Manufacturing_Manufacturing_Line_Order_By>>;
  where?: Maybe<Manufacturing_Manufacturing_Line_Bool_Exp>;
};


/** columns and relationships of "sales.glass_draft" */
export type Sales_Glass_DraftManufacturing_Lines_AggregateArgs = {
  distinct_on?: Maybe<Array<Manufacturing_Manufacturing_Line_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Manufacturing_Manufacturing_Line_Order_By>>;
  where?: Maybe<Manufacturing_Manufacturing_Line_Bool_Exp>;
};


/** columns and relationships of "sales.glass_draft" */
export type Sales_Glass_DraftService_DraftsArgs = {
  distinct_on?: Maybe<Array<Sales_Service_Draft_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Service_Draft_Order_By>>;
  where?: Maybe<Sales_Service_Draft_Bool_Exp>;
};


/** columns and relationships of "sales.glass_draft" */
export type Sales_Glass_DraftService_Drafts_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Service_Draft_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Service_Draft_Order_By>>;
  where?: Maybe<Sales_Service_Draft_Bool_Exp>;
};

/** aggregated selection of "sales.glass_draft" */
export type Sales_Glass_Draft_Aggregate = {
  __typename?: 'sales_glass_draft_aggregate';
  aggregate?: Maybe<Sales_Glass_Draft_Aggregate_Fields>;
  nodes: Array<Sales_Glass_Draft>;
};

/** aggregate fields of "sales.glass_draft" */
export type Sales_Glass_Draft_Aggregate_Fields = {
  __typename?: 'sales_glass_draft_aggregate_fields';
  avg?: Maybe<Sales_Glass_Draft_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Sales_Glass_Draft_Max_Fields>;
  min?: Maybe<Sales_Glass_Draft_Min_Fields>;
  stddev?: Maybe<Sales_Glass_Draft_Stddev_Fields>;
  stddev_pop?: Maybe<Sales_Glass_Draft_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Sales_Glass_Draft_Stddev_Samp_Fields>;
  sum?: Maybe<Sales_Glass_Draft_Sum_Fields>;
  var_pop?: Maybe<Sales_Glass_Draft_Var_Pop_Fields>;
  var_samp?: Maybe<Sales_Glass_Draft_Var_Samp_Fields>;
  variance?: Maybe<Sales_Glass_Draft_Variance_Fields>;
};


/** aggregate fields of "sales.glass_draft" */
export type Sales_Glass_Draft_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Sales_Glass_Draft_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "sales.glass_draft" */
export type Sales_Glass_Draft_Aggregate_Order_By = {
  avg?: Maybe<Sales_Glass_Draft_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Sales_Glass_Draft_Max_Order_By>;
  min?: Maybe<Sales_Glass_Draft_Min_Order_By>;
  stddev?: Maybe<Sales_Glass_Draft_Stddev_Order_By>;
  stddev_pop?: Maybe<Sales_Glass_Draft_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Sales_Glass_Draft_Stddev_Samp_Order_By>;
  sum?: Maybe<Sales_Glass_Draft_Sum_Order_By>;
  var_pop?: Maybe<Sales_Glass_Draft_Var_Pop_Order_By>;
  var_samp?: Maybe<Sales_Glass_Draft_Var_Samp_Order_By>;
  variance?: Maybe<Sales_Glass_Draft_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "sales.glass_draft" */
export type Sales_Glass_Draft_Arr_Rel_Insert_Input = {
  data: Array<Sales_Glass_Draft_Insert_Input>;
  /** on conflict condition */
  on_conflict?: Maybe<Sales_Glass_Draft_On_Conflict>;
};

/** aggregate avg on columns */
export type Sales_Glass_Draft_Avg_Fields = {
  __typename?: 'sales_glass_draft_avg_fields';
  job_order_id?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "sales.glass_draft" */
export type Sales_Glass_Draft_Avg_Order_By = {
  job_order_id?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "sales.glass_draft". All fields are combined with a logical 'AND'. */
export type Sales_Glass_Draft_Bool_Exp = {
  _and?: Maybe<Array<Sales_Glass_Draft_Bool_Exp>>;
  _not?: Maybe<Sales_Glass_Draft_Bool_Exp>;
  _or?: Maybe<Array<Sales_Glass_Draft_Bool_Exp>>;
  consumable_drafts?: Maybe<Sales_Consumable_Draft_Bool_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  job_order?: Maybe<Manufacturing_Job_Order_Bool_Exp>;
  job_order_id?: Maybe<Int_Comparison_Exp>;
  manufacturing_lines?: Maybe<Manufacturing_Manufacturing_Line_Bool_Exp>;
  product_draft?: Maybe<Sales_Product_Draft_Bool_Exp>;
  productdraft_id?: Maybe<Uuid_Comparison_Exp>;
  service_drafts?: Maybe<Sales_Service_Draft_Bool_Exp>;
};

/** unique or primary key constraints on table "sales.glass_draft" */
export enum Sales_Glass_Draft_Constraint {
  /** unique or primary key constraint */
  GlassDraftPkey = 'glass_draft_pkey',
  /** unique or primary key constraint */
  GlassDraftProductdraftIdKey = 'glass_draft_productdraft_id_key'
}

/** input type for incrementing numeric columns in table "sales.glass_draft" */
export type Sales_Glass_Draft_Inc_Input = {
  job_order_id?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "sales.glass_draft" */
export type Sales_Glass_Draft_Insert_Input = {
  consumable_drafts?: Maybe<Sales_Consumable_Draft_Arr_Rel_Insert_Input>;
  id?: Maybe<Scalars['uuid']>;
  job_order?: Maybe<Manufacturing_Job_Order_Obj_Rel_Insert_Input>;
  job_order_id?: Maybe<Scalars['Int']>;
  manufacturing_lines?: Maybe<Manufacturing_Manufacturing_Line_Arr_Rel_Insert_Input>;
  product_draft?: Maybe<Sales_Product_Draft_Obj_Rel_Insert_Input>;
  productdraft_id?: Maybe<Scalars['uuid']>;
  service_drafts?: Maybe<Sales_Service_Draft_Arr_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Sales_Glass_Draft_Max_Fields = {
  __typename?: 'sales_glass_draft_max_fields';
  id?: Maybe<Scalars['uuid']>;
  job_order_id?: Maybe<Scalars['Int']>;
  productdraft_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "sales.glass_draft" */
export type Sales_Glass_Draft_Max_Order_By = {
  id?: Maybe<Order_By>;
  job_order_id?: Maybe<Order_By>;
  productdraft_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Sales_Glass_Draft_Min_Fields = {
  __typename?: 'sales_glass_draft_min_fields';
  id?: Maybe<Scalars['uuid']>;
  job_order_id?: Maybe<Scalars['Int']>;
  productdraft_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "sales.glass_draft" */
export type Sales_Glass_Draft_Min_Order_By = {
  id?: Maybe<Order_By>;
  job_order_id?: Maybe<Order_By>;
  productdraft_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "sales.glass_draft" */
export type Sales_Glass_Draft_Mutation_Response = {
  __typename?: 'sales_glass_draft_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Sales_Glass_Draft>;
};

/** input type for inserting object relation for remote table "sales.glass_draft" */
export type Sales_Glass_Draft_Obj_Rel_Insert_Input = {
  data: Sales_Glass_Draft_Insert_Input;
  /** on conflict condition */
  on_conflict?: Maybe<Sales_Glass_Draft_On_Conflict>;
};

/** on conflict condition type for table "sales.glass_draft" */
export type Sales_Glass_Draft_On_Conflict = {
  constraint: Sales_Glass_Draft_Constraint;
  update_columns?: Array<Sales_Glass_Draft_Update_Column>;
  where?: Maybe<Sales_Glass_Draft_Bool_Exp>;
};

/** Ordering options when selecting data from "sales.glass_draft". */
export type Sales_Glass_Draft_Order_By = {
  consumable_drafts_aggregate?: Maybe<Sales_Consumable_Draft_Aggregate_Order_By>;
  id?: Maybe<Order_By>;
  job_order?: Maybe<Manufacturing_Job_Order_Order_By>;
  job_order_id?: Maybe<Order_By>;
  manufacturing_lines_aggregate?: Maybe<Manufacturing_Manufacturing_Line_Aggregate_Order_By>;
  product_draft?: Maybe<Sales_Product_Draft_Order_By>;
  productdraft_id?: Maybe<Order_By>;
  service_drafts_aggregate?: Maybe<Sales_Service_Draft_Aggregate_Order_By>;
};

/** primary key columns input for table: sales_glass_draft */
export type Sales_Glass_Draft_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "sales.glass_draft" */
export enum Sales_Glass_Draft_Select_Column {
  /** column name */
  Id = 'id',
  /** column name */
  JobOrderId = 'job_order_id',
  /** column name */
  ProductdraftId = 'productdraft_id'
}

/** input type for updating data in table "sales.glass_draft" */
export type Sales_Glass_Draft_Set_Input = {
  id?: Maybe<Scalars['uuid']>;
  job_order_id?: Maybe<Scalars['Int']>;
  productdraft_id?: Maybe<Scalars['uuid']>;
};

/** aggregate stddev on columns */
export type Sales_Glass_Draft_Stddev_Fields = {
  __typename?: 'sales_glass_draft_stddev_fields';
  job_order_id?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "sales.glass_draft" */
export type Sales_Glass_Draft_Stddev_Order_By = {
  job_order_id?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Sales_Glass_Draft_Stddev_Pop_Fields = {
  __typename?: 'sales_glass_draft_stddev_pop_fields';
  job_order_id?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "sales.glass_draft" */
export type Sales_Glass_Draft_Stddev_Pop_Order_By = {
  job_order_id?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Sales_Glass_Draft_Stddev_Samp_Fields = {
  __typename?: 'sales_glass_draft_stddev_samp_fields';
  job_order_id?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "sales.glass_draft" */
export type Sales_Glass_Draft_Stddev_Samp_Order_By = {
  job_order_id?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Sales_Glass_Draft_Sum_Fields = {
  __typename?: 'sales_glass_draft_sum_fields';
  job_order_id?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "sales.glass_draft" */
export type Sales_Glass_Draft_Sum_Order_By = {
  job_order_id?: Maybe<Order_By>;
};

/** update columns of table "sales.glass_draft" */
export enum Sales_Glass_Draft_Update_Column {
  /** column name */
  Id = 'id',
  /** column name */
  JobOrderId = 'job_order_id',
  /** column name */
  ProductdraftId = 'productdraft_id'
}

/** aggregate var_pop on columns */
export type Sales_Glass_Draft_Var_Pop_Fields = {
  __typename?: 'sales_glass_draft_var_pop_fields';
  job_order_id?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "sales.glass_draft" */
export type Sales_Glass_Draft_Var_Pop_Order_By = {
  job_order_id?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Sales_Glass_Draft_Var_Samp_Fields = {
  __typename?: 'sales_glass_draft_var_samp_fields';
  job_order_id?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "sales.glass_draft" */
export type Sales_Glass_Draft_Var_Samp_Order_By = {
  job_order_id?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Sales_Glass_Draft_Variance_Fields = {
  __typename?: 'sales_glass_draft_variance_fields';
  job_order_id?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "sales.glass_draft" */
export type Sales_Glass_Draft_Variance_Order_By = {
  job_order_id?: Maybe<Order_By>;
};

/** columns and relationships of "sales.invoice" */
export type Sales_Invoice = {
  __typename?: 'sales_invoice';
  amount_ht: Scalars['numeric'];
  amount_ttc: Scalars['numeric'];
  amount_tva: Scalars['numeric'];
  /** An object relationship */
  client: Contact_Customer;
  client_id: Scalars['uuid'];
  /** An object relationship */
  company: Management_Company;
  company_id: Scalars['uuid'];
  /** An object relationship */
  contact?: Maybe<Contact_Contact>;
  contact_id?: Maybe<Scalars['uuid']>;
  createdAt?: Maybe<Scalars['timestamptz']>;
  date: Scalars['date'];
  /** An array relationship */
  deliveries: Array<Sales_Invoice_Delivery>;
  /** An aggregate relationship */
  deliveries_aggregate: Sales_Invoice_Delivery_Aggregate;
  id: Scalars['uuid'];
  /** An array relationship */
  invoice_lines: Array<Sales_Invoice_Line>;
  /** An aggregate relationship */
  invoice_lines_aggregate: Sales_Invoice_Line_Aggregate;
  payment_method: Scalars['String'];
  ref?: Maybe<Scalars['String']>;
  ref_num?: Maybe<Scalars['Int']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};


/** columns and relationships of "sales.invoice" */
export type Sales_InvoiceDeliveriesArgs = {
  distinct_on?: Maybe<Array<Sales_Invoice_Delivery_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Invoice_Delivery_Order_By>>;
  where?: Maybe<Sales_Invoice_Delivery_Bool_Exp>;
};


/** columns and relationships of "sales.invoice" */
export type Sales_InvoiceDeliveries_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Invoice_Delivery_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Invoice_Delivery_Order_By>>;
  where?: Maybe<Sales_Invoice_Delivery_Bool_Exp>;
};


/** columns and relationships of "sales.invoice" */
export type Sales_InvoiceInvoice_LinesArgs = {
  distinct_on?: Maybe<Array<Sales_Invoice_Line_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Invoice_Line_Order_By>>;
  where?: Maybe<Sales_Invoice_Line_Bool_Exp>;
};


/** columns and relationships of "sales.invoice" */
export type Sales_InvoiceInvoice_Lines_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Invoice_Line_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Invoice_Line_Order_By>>;
  where?: Maybe<Sales_Invoice_Line_Bool_Exp>;
};

/** aggregated selection of "sales.invoice" */
export type Sales_Invoice_Aggregate = {
  __typename?: 'sales_invoice_aggregate';
  aggregate?: Maybe<Sales_Invoice_Aggregate_Fields>;
  nodes: Array<Sales_Invoice>;
};

/** aggregate fields of "sales.invoice" */
export type Sales_Invoice_Aggregate_Fields = {
  __typename?: 'sales_invoice_aggregate_fields';
  avg?: Maybe<Sales_Invoice_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Sales_Invoice_Max_Fields>;
  min?: Maybe<Sales_Invoice_Min_Fields>;
  stddev?: Maybe<Sales_Invoice_Stddev_Fields>;
  stddev_pop?: Maybe<Sales_Invoice_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Sales_Invoice_Stddev_Samp_Fields>;
  sum?: Maybe<Sales_Invoice_Sum_Fields>;
  var_pop?: Maybe<Sales_Invoice_Var_Pop_Fields>;
  var_samp?: Maybe<Sales_Invoice_Var_Samp_Fields>;
  variance?: Maybe<Sales_Invoice_Variance_Fields>;
};


/** aggregate fields of "sales.invoice" */
export type Sales_Invoice_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Sales_Invoice_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "sales.invoice" */
export type Sales_Invoice_Aggregate_Order_By = {
  avg?: Maybe<Sales_Invoice_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Sales_Invoice_Max_Order_By>;
  min?: Maybe<Sales_Invoice_Min_Order_By>;
  stddev?: Maybe<Sales_Invoice_Stddev_Order_By>;
  stddev_pop?: Maybe<Sales_Invoice_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Sales_Invoice_Stddev_Samp_Order_By>;
  sum?: Maybe<Sales_Invoice_Sum_Order_By>;
  var_pop?: Maybe<Sales_Invoice_Var_Pop_Order_By>;
  var_samp?: Maybe<Sales_Invoice_Var_Samp_Order_By>;
  variance?: Maybe<Sales_Invoice_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "sales.invoice" */
export type Sales_Invoice_Arr_Rel_Insert_Input = {
  data: Array<Sales_Invoice_Insert_Input>;
  /** on conflict condition */
  on_conflict?: Maybe<Sales_Invoice_On_Conflict>;
};

/** aggregate avg on columns */
export type Sales_Invoice_Avg_Fields = {
  __typename?: 'sales_invoice_avg_fields';
  amount_ht?: Maybe<Scalars['Float']>;
  amount_ttc?: Maybe<Scalars['Float']>;
  amount_tva?: Maybe<Scalars['Float']>;
  ref_num?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "sales.invoice" */
export type Sales_Invoice_Avg_Order_By = {
  amount_ht?: Maybe<Order_By>;
  amount_ttc?: Maybe<Order_By>;
  amount_tva?: Maybe<Order_By>;
  ref_num?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "sales.invoice". All fields are combined with a logical 'AND'. */
export type Sales_Invoice_Bool_Exp = {
  _and?: Maybe<Array<Sales_Invoice_Bool_Exp>>;
  _not?: Maybe<Sales_Invoice_Bool_Exp>;
  _or?: Maybe<Array<Sales_Invoice_Bool_Exp>>;
  amount_ht?: Maybe<Numeric_Comparison_Exp>;
  amount_ttc?: Maybe<Numeric_Comparison_Exp>;
  amount_tva?: Maybe<Numeric_Comparison_Exp>;
  client?: Maybe<Contact_Customer_Bool_Exp>;
  client_id?: Maybe<Uuid_Comparison_Exp>;
  company?: Maybe<Management_Company_Bool_Exp>;
  company_id?: Maybe<Uuid_Comparison_Exp>;
  contact?: Maybe<Contact_Contact_Bool_Exp>;
  contact_id?: Maybe<Uuid_Comparison_Exp>;
  createdAt?: Maybe<Timestamptz_Comparison_Exp>;
  date?: Maybe<Date_Comparison_Exp>;
  deliveries?: Maybe<Sales_Invoice_Delivery_Bool_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  invoice_lines?: Maybe<Sales_Invoice_Line_Bool_Exp>;
  payment_method?: Maybe<String_Comparison_Exp>;
  ref?: Maybe<String_Comparison_Exp>;
  ref_num?: Maybe<Int_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "sales.invoice" */
export enum Sales_Invoice_Constraint {
  /** unique or primary key constraint */
  InvoicePkey = 'invoice_pkey'
}

/** columns and relationships of "sales.invoice_delivery" */
export type Sales_Invoice_Delivery = {
  __typename?: 'sales_invoice_delivery';
  /** An object relationship */
  delivery: Sales_Delivery;
  delivery_id: Scalars['uuid'];
  /** An object relationship */
  invoice: Sales_Invoice;
  invoice_id: Scalars['uuid'];
};

/** aggregated selection of "sales.invoice_delivery" */
export type Sales_Invoice_Delivery_Aggregate = {
  __typename?: 'sales_invoice_delivery_aggregate';
  aggregate?: Maybe<Sales_Invoice_Delivery_Aggregate_Fields>;
  nodes: Array<Sales_Invoice_Delivery>;
};

/** aggregate fields of "sales.invoice_delivery" */
export type Sales_Invoice_Delivery_Aggregate_Fields = {
  __typename?: 'sales_invoice_delivery_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Sales_Invoice_Delivery_Max_Fields>;
  min?: Maybe<Sales_Invoice_Delivery_Min_Fields>;
};


/** aggregate fields of "sales.invoice_delivery" */
export type Sales_Invoice_Delivery_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Sales_Invoice_Delivery_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "sales.invoice_delivery" */
export type Sales_Invoice_Delivery_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Sales_Invoice_Delivery_Max_Order_By>;
  min?: Maybe<Sales_Invoice_Delivery_Min_Order_By>;
};

/** input type for inserting array relation for remote table "sales.invoice_delivery" */
export type Sales_Invoice_Delivery_Arr_Rel_Insert_Input = {
  data: Array<Sales_Invoice_Delivery_Insert_Input>;
  /** on conflict condition */
  on_conflict?: Maybe<Sales_Invoice_Delivery_On_Conflict>;
};

/** Boolean expression to filter rows from the table "sales.invoice_delivery". All fields are combined with a logical 'AND'. */
export type Sales_Invoice_Delivery_Bool_Exp = {
  _and?: Maybe<Array<Sales_Invoice_Delivery_Bool_Exp>>;
  _not?: Maybe<Sales_Invoice_Delivery_Bool_Exp>;
  _or?: Maybe<Array<Sales_Invoice_Delivery_Bool_Exp>>;
  delivery?: Maybe<Sales_Delivery_Bool_Exp>;
  delivery_id?: Maybe<Uuid_Comparison_Exp>;
  invoice?: Maybe<Sales_Invoice_Bool_Exp>;
  invoice_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "sales.invoice_delivery" */
export enum Sales_Invoice_Delivery_Constraint {
  /** unique or primary key constraint */
  InvoiceDeliveryPkey = 'invoice_delivery_pkey'
}

/** input type for inserting data into table "sales.invoice_delivery" */
export type Sales_Invoice_Delivery_Insert_Input = {
  delivery?: Maybe<Sales_Delivery_Obj_Rel_Insert_Input>;
  delivery_id?: Maybe<Scalars['uuid']>;
  invoice?: Maybe<Sales_Invoice_Obj_Rel_Insert_Input>;
  invoice_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Sales_Invoice_Delivery_Max_Fields = {
  __typename?: 'sales_invoice_delivery_max_fields';
  delivery_id?: Maybe<Scalars['uuid']>;
  invoice_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "sales.invoice_delivery" */
export type Sales_Invoice_Delivery_Max_Order_By = {
  delivery_id?: Maybe<Order_By>;
  invoice_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Sales_Invoice_Delivery_Min_Fields = {
  __typename?: 'sales_invoice_delivery_min_fields';
  delivery_id?: Maybe<Scalars['uuid']>;
  invoice_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "sales.invoice_delivery" */
export type Sales_Invoice_Delivery_Min_Order_By = {
  delivery_id?: Maybe<Order_By>;
  invoice_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "sales.invoice_delivery" */
export type Sales_Invoice_Delivery_Mutation_Response = {
  __typename?: 'sales_invoice_delivery_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Sales_Invoice_Delivery>;
};

/** on conflict condition type for table "sales.invoice_delivery" */
export type Sales_Invoice_Delivery_On_Conflict = {
  constraint: Sales_Invoice_Delivery_Constraint;
  update_columns?: Array<Sales_Invoice_Delivery_Update_Column>;
  where?: Maybe<Sales_Invoice_Delivery_Bool_Exp>;
};

/** Ordering options when selecting data from "sales.invoice_delivery". */
export type Sales_Invoice_Delivery_Order_By = {
  delivery?: Maybe<Sales_Delivery_Order_By>;
  delivery_id?: Maybe<Order_By>;
  invoice?: Maybe<Sales_Invoice_Order_By>;
  invoice_id?: Maybe<Order_By>;
};

/** primary key columns input for table: sales_invoice_delivery */
export type Sales_Invoice_Delivery_Pk_Columns_Input = {
  delivery_id: Scalars['uuid'];
  invoice_id: Scalars['uuid'];
};

/** select columns of table "sales.invoice_delivery" */
export enum Sales_Invoice_Delivery_Select_Column {
  /** column name */
  DeliveryId = 'delivery_id',
  /** column name */
  InvoiceId = 'invoice_id'
}

/** input type for updating data in table "sales.invoice_delivery" */
export type Sales_Invoice_Delivery_Set_Input = {
  delivery_id?: Maybe<Scalars['uuid']>;
  invoice_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "sales.invoice_delivery" */
export enum Sales_Invoice_Delivery_Update_Column {
  /** column name */
  DeliveryId = 'delivery_id',
  /** column name */
  InvoiceId = 'invoice_id'
}

/** input type for incrementing numeric columns in table "sales.invoice" */
export type Sales_Invoice_Inc_Input = {
  amount_ht?: Maybe<Scalars['numeric']>;
  amount_ttc?: Maybe<Scalars['numeric']>;
  amount_tva?: Maybe<Scalars['numeric']>;
  ref_num?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "sales.invoice" */
export type Sales_Invoice_Insert_Input = {
  amount_ht?: Maybe<Scalars['numeric']>;
  amount_ttc?: Maybe<Scalars['numeric']>;
  amount_tva?: Maybe<Scalars['numeric']>;
  client?: Maybe<Contact_Customer_Obj_Rel_Insert_Input>;
  client_id?: Maybe<Scalars['uuid']>;
  company?: Maybe<Management_Company_Obj_Rel_Insert_Input>;
  company_id?: Maybe<Scalars['uuid']>;
  contact?: Maybe<Contact_Contact_Obj_Rel_Insert_Input>;
  contact_id?: Maybe<Scalars['uuid']>;
  createdAt?: Maybe<Scalars['timestamptz']>;
  date?: Maybe<Scalars['date']>;
  deliveries?: Maybe<Sales_Invoice_Delivery_Arr_Rel_Insert_Input>;
  id?: Maybe<Scalars['uuid']>;
  invoice_lines?: Maybe<Sales_Invoice_Line_Arr_Rel_Insert_Input>;
  payment_method?: Maybe<Scalars['String']>;
  ref?: Maybe<Scalars['String']>;
  ref_num?: Maybe<Scalars['Int']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** columns and relationships of "sales.invoice_line" */
export type Sales_Invoice_Line = {
  __typename?: 'sales_invoice_line';
  id: Scalars['uuid'];
  /** An object relationship */
  invoice: Sales_Invoice;
  invoice_id: Scalars['uuid'];
  product_code: Scalars['String'];
  product_label: Scalars['String'];
  product_type: Scalars['String'];
  quantity: Scalars['numeric'];
  total: Scalars['numeric'];
  unit_price: Scalars['numeric'];
};

/** aggregated selection of "sales.invoice_line" */
export type Sales_Invoice_Line_Aggregate = {
  __typename?: 'sales_invoice_line_aggregate';
  aggregate?: Maybe<Sales_Invoice_Line_Aggregate_Fields>;
  nodes: Array<Sales_Invoice_Line>;
};

/** aggregate fields of "sales.invoice_line" */
export type Sales_Invoice_Line_Aggregate_Fields = {
  __typename?: 'sales_invoice_line_aggregate_fields';
  avg?: Maybe<Sales_Invoice_Line_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Sales_Invoice_Line_Max_Fields>;
  min?: Maybe<Sales_Invoice_Line_Min_Fields>;
  stddev?: Maybe<Sales_Invoice_Line_Stddev_Fields>;
  stddev_pop?: Maybe<Sales_Invoice_Line_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Sales_Invoice_Line_Stddev_Samp_Fields>;
  sum?: Maybe<Sales_Invoice_Line_Sum_Fields>;
  var_pop?: Maybe<Sales_Invoice_Line_Var_Pop_Fields>;
  var_samp?: Maybe<Sales_Invoice_Line_Var_Samp_Fields>;
  variance?: Maybe<Sales_Invoice_Line_Variance_Fields>;
};


/** aggregate fields of "sales.invoice_line" */
export type Sales_Invoice_Line_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Sales_Invoice_Line_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "sales.invoice_line" */
export type Sales_Invoice_Line_Aggregate_Order_By = {
  avg?: Maybe<Sales_Invoice_Line_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Sales_Invoice_Line_Max_Order_By>;
  min?: Maybe<Sales_Invoice_Line_Min_Order_By>;
  stddev?: Maybe<Sales_Invoice_Line_Stddev_Order_By>;
  stddev_pop?: Maybe<Sales_Invoice_Line_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Sales_Invoice_Line_Stddev_Samp_Order_By>;
  sum?: Maybe<Sales_Invoice_Line_Sum_Order_By>;
  var_pop?: Maybe<Sales_Invoice_Line_Var_Pop_Order_By>;
  var_samp?: Maybe<Sales_Invoice_Line_Var_Samp_Order_By>;
  variance?: Maybe<Sales_Invoice_Line_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "sales.invoice_line" */
export type Sales_Invoice_Line_Arr_Rel_Insert_Input = {
  data: Array<Sales_Invoice_Line_Insert_Input>;
  /** on conflict condition */
  on_conflict?: Maybe<Sales_Invoice_Line_On_Conflict>;
};

/** aggregate avg on columns */
export type Sales_Invoice_Line_Avg_Fields = {
  __typename?: 'sales_invoice_line_avg_fields';
  quantity?: Maybe<Scalars['Float']>;
  total?: Maybe<Scalars['Float']>;
  unit_price?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "sales.invoice_line" */
export type Sales_Invoice_Line_Avg_Order_By = {
  quantity?: Maybe<Order_By>;
  total?: Maybe<Order_By>;
  unit_price?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "sales.invoice_line". All fields are combined with a logical 'AND'. */
export type Sales_Invoice_Line_Bool_Exp = {
  _and?: Maybe<Array<Sales_Invoice_Line_Bool_Exp>>;
  _not?: Maybe<Sales_Invoice_Line_Bool_Exp>;
  _or?: Maybe<Array<Sales_Invoice_Line_Bool_Exp>>;
  id?: Maybe<Uuid_Comparison_Exp>;
  invoice?: Maybe<Sales_Invoice_Bool_Exp>;
  invoice_id?: Maybe<Uuid_Comparison_Exp>;
  product_code?: Maybe<String_Comparison_Exp>;
  product_label?: Maybe<String_Comparison_Exp>;
  product_type?: Maybe<String_Comparison_Exp>;
  quantity?: Maybe<Numeric_Comparison_Exp>;
  total?: Maybe<Numeric_Comparison_Exp>;
  unit_price?: Maybe<Numeric_Comparison_Exp>;
};

/** unique or primary key constraints on table "sales.invoice_line" */
export enum Sales_Invoice_Line_Constraint {
  /** unique or primary key constraint */
  InvoiceLinePkey = 'invoice_line_pkey'
}

/** input type for incrementing numeric columns in table "sales.invoice_line" */
export type Sales_Invoice_Line_Inc_Input = {
  quantity?: Maybe<Scalars['numeric']>;
  total?: Maybe<Scalars['numeric']>;
  unit_price?: Maybe<Scalars['numeric']>;
};

/** input type for inserting data into table "sales.invoice_line" */
export type Sales_Invoice_Line_Insert_Input = {
  id?: Maybe<Scalars['uuid']>;
  invoice?: Maybe<Sales_Invoice_Obj_Rel_Insert_Input>;
  invoice_id?: Maybe<Scalars['uuid']>;
  product_code?: Maybe<Scalars['String']>;
  product_label?: Maybe<Scalars['String']>;
  product_type?: Maybe<Scalars['String']>;
  quantity?: Maybe<Scalars['numeric']>;
  total?: Maybe<Scalars['numeric']>;
  unit_price?: Maybe<Scalars['numeric']>;
};

/** aggregate max on columns */
export type Sales_Invoice_Line_Max_Fields = {
  __typename?: 'sales_invoice_line_max_fields';
  id?: Maybe<Scalars['uuid']>;
  invoice_id?: Maybe<Scalars['uuid']>;
  product_code?: Maybe<Scalars['String']>;
  product_label?: Maybe<Scalars['String']>;
  product_type?: Maybe<Scalars['String']>;
  quantity?: Maybe<Scalars['numeric']>;
  total?: Maybe<Scalars['numeric']>;
  unit_price?: Maybe<Scalars['numeric']>;
};

/** order by max() on columns of table "sales.invoice_line" */
export type Sales_Invoice_Line_Max_Order_By = {
  id?: Maybe<Order_By>;
  invoice_id?: Maybe<Order_By>;
  product_code?: Maybe<Order_By>;
  product_label?: Maybe<Order_By>;
  product_type?: Maybe<Order_By>;
  quantity?: Maybe<Order_By>;
  total?: Maybe<Order_By>;
  unit_price?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Sales_Invoice_Line_Min_Fields = {
  __typename?: 'sales_invoice_line_min_fields';
  id?: Maybe<Scalars['uuid']>;
  invoice_id?: Maybe<Scalars['uuid']>;
  product_code?: Maybe<Scalars['String']>;
  product_label?: Maybe<Scalars['String']>;
  product_type?: Maybe<Scalars['String']>;
  quantity?: Maybe<Scalars['numeric']>;
  total?: Maybe<Scalars['numeric']>;
  unit_price?: Maybe<Scalars['numeric']>;
};

/** order by min() on columns of table "sales.invoice_line" */
export type Sales_Invoice_Line_Min_Order_By = {
  id?: Maybe<Order_By>;
  invoice_id?: Maybe<Order_By>;
  product_code?: Maybe<Order_By>;
  product_label?: Maybe<Order_By>;
  product_type?: Maybe<Order_By>;
  quantity?: Maybe<Order_By>;
  total?: Maybe<Order_By>;
  unit_price?: Maybe<Order_By>;
};

/** response of any mutation on the table "sales.invoice_line" */
export type Sales_Invoice_Line_Mutation_Response = {
  __typename?: 'sales_invoice_line_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Sales_Invoice_Line>;
};

/** on conflict condition type for table "sales.invoice_line" */
export type Sales_Invoice_Line_On_Conflict = {
  constraint: Sales_Invoice_Line_Constraint;
  update_columns?: Array<Sales_Invoice_Line_Update_Column>;
  where?: Maybe<Sales_Invoice_Line_Bool_Exp>;
};

/** Ordering options when selecting data from "sales.invoice_line". */
export type Sales_Invoice_Line_Order_By = {
  id?: Maybe<Order_By>;
  invoice?: Maybe<Sales_Invoice_Order_By>;
  invoice_id?: Maybe<Order_By>;
  product_code?: Maybe<Order_By>;
  product_label?: Maybe<Order_By>;
  product_type?: Maybe<Order_By>;
  quantity?: Maybe<Order_By>;
  total?: Maybe<Order_By>;
  unit_price?: Maybe<Order_By>;
};

/** primary key columns input for table: sales_invoice_line */
export type Sales_Invoice_Line_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "sales.invoice_line" */
export enum Sales_Invoice_Line_Select_Column {
  /** column name */
  Id = 'id',
  /** column name */
  InvoiceId = 'invoice_id',
  /** column name */
  ProductCode = 'product_code',
  /** column name */
  ProductLabel = 'product_label',
  /** column name */
  ProductType = 'product_type',
  /** column name */
  Quantity = 'quantity',
  /** column name */
  Total = 'total',
  /** column name */
  UnitPrice = 'unit_price'
}

/** input type for updating data in table "sales.invoice_line" */
export type Sales_Invoice_Line_Set_Input = {
  id?: Maybe<Scalars['uuid']>;
  invoice_id?: Maybe<Scalars['uuid']>;
  product_code?: Maybe<Scalars['String']>;
  product_label?: Maybe<Scalars['String']>;
  product_type?: Maybe<Scalars['String']>;
  quantity?: Maybe<Scalars['numeric']>;
  total?: Maybe<Scalars['numeric']>;
  unit_price?: Maybe<Scalars['numeric']>;
};

/** aggregate stddev on columns */
export type Sales_Invoice_Line_Stddev_Fields = {
  __typename?: 'sales_invoice_line_stddev_fields';
  quantity?: Maybe<Scalars['Float']>;
  total?: Maybe<Scalars['Float']>;
  unit_price?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "sales.invoice_line" */
export type Sales_Invoice_Line_Stddev_Order_By = {
  quantity?: Maybe<Order_By>;
  total?: Maybe<Order_By>;
  unit_price?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Sales_Invoice_Line_Stddev_Pop_Fields = {
  __typename?: 'sales_invoice_line_stddev_pop_fields';
  quantity?: Maybe<Scalars['Float']>;
  total?: Maybe<Scalars['Float']>;
  unit_price?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "sales.invoice_line" */
export type Sales_Invoice_Line_Stddev_Pop_Order_By = {
  quantity?: Maybe<Order_By>;
  total?: Maybe<Order_By>;
  unit_price?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Sales_Invoice_Line_Stddev_Samp_Fields = {
  __typename?: 'sales_invoice_line_stddev_samp_fields';
  quantity?: Maybe<Scalars['Float']>;
  total?: Maybe<Scalars['Float']>;
  unit_price?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "sales.invoice_line" */
export type Sales_Invoice_Line_Stddev_Samp_Order_By = {
  quantity?: Maybe<Order_By>;
  total?: Maybe<Order_By>;
  unit_price?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Sales_Invoice_Line_Sum_Fields = {
  __typename?: 'sales_invoice_line_sum_fields';
  quantity?: Maybe<Scalars['numeric']>;
  total?: Maybe<Scalars['numeric']>;
  unit_price?: Maybe<Scalars['numeric']>;
};

/** order by sum() on columns of table "sales.invoice_line" */
export type Sales_Invoice_Line_Sum_Order_By = {
  quantity?: Maybe<Order_By>;
  total?: Maybe<Order_By>;
  unit_price?: Maybe<Order_By>;
};

/** update columns of table "sales.invoice_line" */
export enum Sales_Invoice_Line_Update_Column {
  /** column name */
  Id = 'id',
  /** column name */
  InvoiceId = 'invoice_id',
  /** column name */
  ProductCode = 'product_code',
  /** column name */
  ProductLabel = 'product_label',
  /** column name */
  ProductType = 'product_type',
  /** column name */
  Quantity = 'quantity',
  /** column name */
  Total = 'total',
  /** column name */
  UnitPrice = 'unit_price'
}

/** aggregate var_pop on columns */
export type Sales_Invoice_Line_Var_Pop_Fields = {
  __typename?: 'sales_invoice_line_var_pop_fields';
  quantity?: Maybe<Scalars['Float']>;
  total?: Maybe<Scalars['Float']>;
  unit_price?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "sales.invoice_line" */
export type Sales_Invoice_Line_Var_Pop_Order_By = {
  quantity?: Maybe<Order_By>;
  total?: Maybe<Order_By>;
  unit_price?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Sales_Invoice_Line_Var_Samp_Fields = {
  __typename?: 'sales_invoice_line_var_samp_fields';
  quantity?: Maybe<Scalars['Float']>;
  total?: Maybe<Scalars['Float']>;
  unit_price?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "sales.invoice_line" */
export type Sales_Invoice_Line_Var_Samp_Order_By = {
  quantity?: Maybe<Order_By>;
  total?: Maybe<Order_By>;
  unit_price?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Sales_Invoice_Line_Variance_Fields = {
  __typename?: 'sales_invoice_line_variance_fields';
  quantity?: Maybe<Scalars['Float']>;
  total?: Maybe<Scalars['Float']>;
  unit_price?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "sales.invoice_line" */
export type Sales_Invoice_Line_Variance_Order_By = {
  quantity?: Maybe<Order_By>;
  total?: Maybe<Order_By>;
  unit_price?: Maybe<Order_By>;
};

/** aggregate max on columns */
export type Sales_Invoice_Max_Fields = {
  __typename?: 'sales_invoice_max_fields';
  amount_ht?: Maybe<Scalars['numeric']>;
  amount_ttc?: Maybe<Scalars['numeric']>;
  amount_tva?: Maybe<Scalars['numeric']>;
  client_id?: Maybe<Scalars['uuid']>;
  company_id?: Maybe<Scalars['uuid']>;
  contact_id?: Maybe<Scalars['uuid']>;
  createdAt?: Maybe<Scalars['timestamptz']>;
  date?: Maybe<Scalars['date']>;
  id?: Maybe<Scalars['uuid']>;
  payment_method?: Maybe<Scalars['String']>;
  ref?: Maybe<Scalars['String']>;
  ref_num?: Maybe<Scalars['Int']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** order by max() on columns of table "sales.invoice" */
export type Sales_Invoice_Max_Order_By = {
  amount_ht?: Maybe<Order_By>;
  amount_ttc?: Maybe<Order_By>;
  amount_tva?: Maybe<Order_By>;
  client_id?: Maybe<Order_By>;
  company_id?: Maybe<Order_By>;
  contact_id?: Maybe<Order_By>;
  createdAt?: Maybe<Order_By>;
  date?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  payment_method?: Maybe<Order_By>;
  ref?: Maybe<Order_By>;
  ref_num?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Sales_Invoice_Min_Fields = {
  __typename?: 'sales_invoice_min_fields';
  amount_ht?: Maybe<Scalars['numeric']>;
  amount_ttc?: Maybe<Scalars['numeric']>;
  amount_tva?: Maybe<Scalars['numeric']>;
  client_id?: Maybe<Scalars['uuid']>;
  company_id?: Maybe<Scalars['uuid']>;
  contact_id?: Maybe<Scalars['uuid']>;
  createdAt?: Maybe<Scalars['timestamptz']>;
  date?: Maybe<Scalars['date']>;
  id?: Maybe<Scalars['uuid']>;
  payment_method?: Maybe<Scalars['String']>;
  ref?: Maybe<Scalars['String']>;
  ref_num?: Maybe<Scalars['Int']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** order by min() on columns of table "sales.invoice" */
export type Sales_Invoice_Min_Order_By = {
  amount_ht?: Maybe<Order_By>;
  amount_ttc?: Maybe<Order_By>;
  amount_tva?: Maybe<Order_By>;
  client_id?: Maybe<Order_By>;
  company_id?: Maybe<Order_By>;
  contact_id?: Maybe<Order_By>;
  createdAt?: Maybe<Order_By>;
  date?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  payment_method?: Maybe<Order_By>;
  ref?: Maybe<Order_By>;
  ref_num?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** response of any mutation on the table "sales.invoice" */
export type Sales_Invoice_Mutation_Response = {
  __typename?: 'sales_invoice_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Sales_Invoice>;
};

/** input type for inserting object relation for remote table "sales.invoice" */
export type Sales_Invoice_Obj_Rel_Insert_Input = {
  data: Sales_Invoice_Insert_Input;
  /** on conflict condition */
  on_conflict?: Maybe<Sales_Invoice_On_Conflict>;
};

/** on conflict condition type for table "sales.invoice" */
export type Sales_Invoice_On_Conflict = {
  constraint: Sales_Invoice_Constraint;
  update_columns?: Array<Sales_Invoice_Update_Column>;
  where?: Maybe<Sales_Invoice_Bool_Exp>;
};

/** Ordering options when selecting data from "sales.invoice". */
export type Sales_Invoice_Order_By = {
  amount_ht?: Maybe<Order_By>;
  amount_ttc?: Maybe<Order_By>;
  amount_tva?: Maybe<Order_By>;
  client?: Maybe<Contact_Customer_Order_By>;
  client_id?: Maybe<Order_By>;
  company?: Maybe<Management_Company_Order_By>;
  company_id?: Maybe<Order_By>;
  contact?: Maybe<Contact_Contact_Order_By>;
  contact_id?: Maybe<Order_By>;
  createdAt?: Maybe<Order_By>;
  date?: Maybe<Order_By>;
  deliveries_aggregate?: Maybe<Sales_Invoice_Delivery_Aggregate_Order_By>;
  id?: Maybe<Order_By>;
  invoice_lines_aggregate?: Maybe<Sales_Invoice_Line_Aggregate_Order_By>;
  payment_method?: Maybe<Order_By>;
  ref?: Maybe<Order_By>;
  ref_num?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** primary key columns input for table: sales_invoice */
export type Sales_Invoice_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "sales.invoice" */
export enum Sales_Invoice_Select_Column {
  /** column name */
  AmountHt = 'amount_ht',
  /** column name */
  AmountTtc = 'amount_ttc',
  /** column name */
  AmountTva = 'amount_tva',
  /** column name */
  ClientId = 'client_id',
  /** column name */
  CompanyId = 'company_id',
  /** column name */
  ContactId = 'contact_id',
  /** column name */
  CreatedAt = 'createdAt',
  /** column name */
  Date = 'date',
  /** column name */
  Id = 'id',
  /** column name */
  PaymentMethod = 'payment_method',
  /** column name */
  Ref = 'ref',
  /** column name */
  RefNum = 'ref_num',
  /** column name */
  UpdatedAt = 'updated_at'
}

/** input type for updating data in table "sales.invoice" */
export type Sales_Invoice_Set_Input = {
  amount_ht?: Maybe<Scalars['numeric']>;
  amount_ttc?: Maybe<Scalars['numeric']>;
  amount_tva?: Maybe<Scalars['numeric']>;
  client_id?: Maybe<Scalars['uuid']>;
  company_id?: Maybe<Scalars['uuid']>;
  contact_id?: Maybe<Scalars['uuid']>;
  createdAt?: Maybe<Scalars['timestamptz']>;
  date?: Maybe<Scalars['date']>;
  id?: Maybe<Scalars['uuid']>;
  payment_method?: Maybe<Scalars['String']>;
  ref?: Maybe<Scalars['String']>;
  ref_num?: Maybe<Scalars['Int']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate stddev on columns */
export type Sales_Invoice_Stddev_Fields = {
  __typename?: 'sales_invoice_stddev_fields';
  amount_ht?: Maybe<Scalars['Float']>;
  amount_ttc?: Maybe<Scalars['Float']>;
  amount_tva?: Maybe<Scalars['Float']>;
  ref_num?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "sales.invoice" */
export type Sales_Invoice_Stddev_Order_By = {
  amount_ht?: Maybe<Order_By>;
  amount_ttc?: Maybe<Order_By>;
  amount_tva?: Maybe<Order_By>;
  ref_num?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Sales_Invoice_Stddev_Pop_Fields = {
  __typename?: 'sales_invoice_stddev_pop_fields';
  amount_ht?: Maybe<Scalars['Float']>;
  amount_ttc?: Maybe<Scalars['Float']>;
  amount_tva?: Maybe<Scalars['Float']>;
  ref_num?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "sales.invoice" */
export type Sales_Invoice_Stddev_Pop_Order_By = {
  amount_ht?: Maybe<Order_By>;
  amount_ttc?: Maybe<Order_By>;
  amount_tva?: Maybe<Order_By>;
  ref_num?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Sales_Invoice_Stddev_Samp_Fields = {
  __typename?: 'sales_invoice_stddev_samp_fields';
  amount_ht?: Maybe<Scalars['Float']>;
  amount_ttc?: Maybe<Scalars['Float']>;
  amount_tva?: Maybe<Scalars['Float']>;
  ref_num?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "sales.invoice" */
export type Sales_Invoice_Stddev_Samp_Order_By = {
  amount_ht?: Maybe<Order_By>;
  amount_ttc?: Maybe<Order_By>;
  amount_tva?: Maybe<Order_By>;
  ref_num?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Sales_Invoice_Sum_Fields = {
  __typename?: 'sales_invoice_sum_fields';
  amount_ht?: Maybe<Scalars['numeric']>;
  amount_ttc?: Maybe<Scalars['numeric']>;
  amount_tva?: Maybe<Scalars['numeric']>;
  ref_num?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "sales.invoice" */
export type Sales_Invoice_Sum_Order_By = {
  amount_ht?: Maybe<Order_By>;
  amount_ttc?: Maybe<Order_By>;
  amount_tva?: Maybe<Order_By>;
  ref_num?: Maybe<Order_By>;
};

/** update columns of table "sales.invoice" */
export enum Sales_Invoice_Update_Column {
  /** column name */
  AmountHt = 'amount_ht',
  /** column name */
  AmountTtc = 'amount_ttc',
  /** column name */
  AmountTva = 'amount_tva',
  /** column name */
  ClientId = 'client_id',
  /** column name */
  CompanyId = 'company_id',
  /** column name */
  ContactId = 'contact_id',
  /** column name */
  CreatedAt = 'createdAt',
  /** column name */
  Date = 'date',
  /** column name */
  Id = 'id',
  /** column name */
  PaymentMethod = 'payment_method',
  /** column name */
  Ref = 'ref',
  /** column name */
  RefNum = 'ref_num',
  /** column name */
  UpdatedAt = 'updated_at'
}

/** aggregate var_pop on columns */
export type Sales_Invoice_Var_Pop_Fields = {
  __typename?: 'sales_invoice_var_pop_fields';
  amount_ht?: Maybe<Scalars['Float']>;
  amount_ttc?: Maybe<Scalars['Float']>;
  amount_tva?: Maybe<Scalars['Float']>;
  ref_num?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "sales.invoice" */
export type Sales_Invoice_Var_Pop_Order_By = {
  amount_ht?: Maybe<Order_By>;
  amount_ttc?: Maybe<Order_By>;
  amount_tva?: Maybe<Order_By>;
  ref_num?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Sales_Invoice_Var_Samp_Fields = {
  __typename?: 'sales_invoice_var_samp_fields';
  amount_ht?: Maybe<Scalars['Float']>;
  amount_ttc?: Maybe<Scalars['Float']>;
  amount_tva?: Maybe<Scalars['Float']>;
  ref_num?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "sales.invoice" */
export type Sales_Invoice_Var_Samp_Order_By = {
  amount_ht?: Maybe<Order_By>;
  amount_ttc?: Maybe<Order_By>;
  amount_tva?: Maybe<Order_By>;
  ref_num?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Sales_Invoice_Variance_Fields = {
  __typename?: 'sales_invoice_variance_fields';
  amount_ht?: Maybe<Scalars['Float']>;
  amount_ttc?: Maybe<Scalars['Float']>;
  amount_tva?: Maybe<Scalars['Float']>;
  ref_num?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "sales.invoice" */
export type Sales_Invoice_Variance_Order_By = {
  amount_ht?: Maybe<Order_By>;
  amount_ttc?: Maybe<Order_By>;
  amount_tva?: Maybe<Order_By>;
  ref_num?: Maybe<Order_By>;
};

/** columns and relationships of "sales.order" */
export type Sales_Order = {
  __typename?: 'sales_order';
  /** An object relationship */
  company: Management_Company;
  company_id: Scalars['uuid'];
  /** An object relationship */
  contact?: Maybe<Contact_Contact>;
  contact_id?: Maybe<Scalars['uuid']>;
  /** An object relationship */
  customer: Contact_Customer;
  customer_id: Scalars['uuid'];
  date: Scalars['date'];
  deadline: Scalars['date'];
  /** An array relationship */
  deliveries: Array<Sales_Delivery>;
  /** An aggregate relationship */
  deliveries_aggregate: Sales_Delivery_Aggregate;
  delivery_status: Scalars['String'];
  /** An object relationship */
  draft: Sales_Draft;
  draft_id: Scalars['Int'];
  id: Scalars['Int'];
  /** An object relationship */
  order_delivery_status: Sales_Order_Delivery_Status;
  /** An object relationship */
  paymentStatusByPaymentStatus: Sales_Payment_Status;
  payment_status: Scalars['String'];
  /** An array relationship */
  payments: Array<Sales_Payment>;
  /** An aggregate relationship */
  payments_aggregate: Sales_Payment_Aggregate;
  /** An object relationship */
  quotation?: Maybe<Sales_Quotation>;
  ref?: Maybe<Scalars['String']>;
  ref_num?: Maybe<Scalars['Int']>;
  /** An object relationship */
  salepoint: Management_SalesPoint;
  salepoint_id: Scalars['uuid'];
  total_ht: Scalars['numeric'];
  total_tax: Scalars['numeric'];
  total_ttc: Scalars['numeric'];
};


/** columns and relationships of "sales.order" */
export type Sales_OrderDeliveriesArgs = {
  distinct_on?: Maybe<Array<Sales_Delivery_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Delivery_Order_By>>;
  where?: Maybe<Sales_Delivery_Bool_Exp>;
};


/** columns and relationships of "sales.order" */
export type Sales_OrderDeliveries_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Delivery_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Delivery_Order_By>>;
  where?: Maybe<Sales_Delivery_Bool_Exp>;
};


/** columns and relationships of "sales.order" */
export type Sales_OrderPaymentsArgs = {
  distinct_on?: Maybe<Array<Sales_Payment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Payment_Order_By>>;
  where?: Maybe<Sales_Payment_Bool_Exp>;
};


/** columns and relationships of "sales.order" */
export type Sales_OrderPayments_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Payment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Payment_Order_By>>;
  where?: Maybe<Sales_Payment_Bool_Exp>;
};

/** aggregated selection of "sales.order" */
export type Sales_Order_Aggregate = {
  __typename?: 'sales_order_aggregate';
  aggregate?: Maybe<Sales_Order_Aggregate_Fields>;
  nodes: Array<Sales_Order>;
};

/** aggregate fields of "sales.order" */
export type Sales_Order_Aggregate_Fields = {
  __typename?: 'sales_order_aggregate_fields';
  avg?: Maybe<Sales_Order_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Sales_Order_Max_Fields>;
  min?: Maybe<Sales_Order_Min_Fields>;
  stddev?: Maybe<Sales_Order_Stddev_Fields>;
  stddev_pop?: Maybe<Sales_Order_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Sales_Order_Stddev_Samp_Fields>;
  sum?: Maybe<Sales_Order_Sum_Fields>;
  var_pop?: Maybe<Sales_Order_Var_Pop_Fields>;
  var_samp?: Maybe<Sales_Order_Var_Samp_Fields>;
  variance?: Maybe<Sales_Order_Variance_Fields>;
};


/** aggregate fields of "sales.order" */
export type Sales_Order_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Sales_Order_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "sales.order" */
export type Sales_Order_Aggregate_Order_By = {
  avg?: Maybe<Sales_Order_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Sales_Order_Max_Order_By>;
  min?: Maybe<Sales_Order_Min_Order_By>;
  stddev?: Maybe<Sales_Order_Stddev_Order_By>;
  stddev_pop?: Maybe<Sales_Order_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Sales_Order_Stddev_Samp_Order_By>;
  sum?: Maybe<Sales_Order_Sum_Order_By>;
  var_pop?: Maybe<Sales_Order_Var_Pop_Order_By>;
  var_samp?: Maybe<Sales_Order_Var_Samp_Order_By>;
  variance?: Maybe<Sales_Order_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "sales.order" */
export type Sales_Order_Arr_Rel_Insert_Input = {
  data: Array<Sales_Order_Insert_Input>;
  /** on conflict condition */
  on_conflict?: Maybe<Sales_Order_On_Conflict>;
};

/** aggregate avg on columns */
export type Sales_Order_Avg_Fields = {
  __typename?: 'sales_order_avg_fields';
  draft_id?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  ref_num?: Maybe<Scalars['Float']>;
  total_ht?: Maybe<Scalars['Float']>;
  total_tax?: Maybe<Scalars['Float']>;
  total_ttc?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "sales.order" */
export type Sales_Order_Avg_Order_By = {
  draft_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  ref_num?: Maybe<Order_By>;
  total_ht?: Maybe<Order_By>;
  total_tax?: Maybe<Order_By>;
  total_ttc?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "sales.order". All fields are combined with a logical 'AND'. */
export type Sales_Order_Bool_Exp = {
  _and?: Maybe<Array<Sales_Order_Bool_Exp>>;
  _not?: Maybe<Sales_Order_Bool_Exp>;
  _or?: Maybe<Array<Sales_Order_Bool_Exp>>;
  company?: Maybe<Management_Company_Bool_Exp>;
  company_id?: Maybe<Uuid_Comparison_Exp>;
  contact?: Maybe<Contact_Contact_Bool_Exp>;
  contact_id?: Maybe<Uuid_Comparison_Exp>;
  customer?: Maybe<Contact_Customer_Bool_Exp>;
  customer_id?: Maybe<Uuid_Comparison_Exp>;
  date?: Maybe<Date_Comparison_Exp>;
  deadline?: Maybe<Date_Comparison_Exp>;
  deliveries?: Maybe<Sales_Delivery_Bool_Exp>;
  delivery_status?: Maybe<String_Comparison_Exp>;
  draft?: Maybe<Sales_Draft_Bool_Exp>;
  draft_id?: Maybe<Int_Comparison_Exp>;
  id?: Maybe<Int_Comparison_Exp>;
  order_delivery_status?: Maybe<Sales_Order_Delivery_Status_Bool_Exp>;
  paymentStatusByPaymentStatus?: Maybe<Sales_Payment_Status_Bool_Exp>;
  payment_status?: Maybe<String_Comparison_Exp>;
  payments?: Maybe<Sales_Payment_Bool_Exp>;
  quotation?: Maybe<Sales_Quotation_Bool_Exp>;
  ref?: Maybe<String_Comparison_Exp>;
  ref_num?: Maybe<Int_Comparison_Exp>;
  salepoint?: Maybe<Management_SalesPoint_Bool_Exp>;
  salepoint_id?: Maybe<Uuid_Comparison_Exp>;
  total_ht?: Maybe<Numeric_Comparison_Exp>;
  total_tax?: Maybe<Numeric_Comparison_Exp>;
  total_ttc?: Maybe<Numeric_Comparison_Exp>;
};

/** unique or primary key constraints on table "sales.order" */
export enum Sales_Order_Constraint {
  /** unique or primary key constraint */
  OrderDraftIdKey = 'order_draft_id_key',
  /** unique or primary key constraint */
  OrderPkey = 'order_pkey'
}

/** columns and relationships of "sales.order_delivery_status" */
export type Sales_Order_Delivery_Status = {
  __typename?: 'sales_order_delivery_status';
  key: Scalars['String'];
  /** An array relationship */
  orders: Array<Sales_Order>;
  /** An aggregate relationship */
  orders_aggregate: Sales_Order_Aggregate;
  /** An array relationship */
  product_drafts: Array<Sales_Product_Draft>;
  /** An aggregate relationship */
  product_drafts_aggregate: Sales_Product_Draft_Aggregate;
  value: Scalars['String'];
};


/** columns and relationships of "sales.order_delivery_status" */
export type Sales_Order_Delivery_StatusOrdersArgs = {
  distinct_on?: Maybe<Array<Sales_Order_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Order_Order_By>>;
  where?: Maybe<Sales_Order_Bool_Exp>;
};


/** columns and relationships of "sales.order_delivery_status" */
export type Sales_Order_Delivery_StatusOrders_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Order_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Order_Order_By>>;
  where?: Maybe<Sales_Order_Bool_Exp>;
};


/** columns and relationships of "sales.order_delivery_status" */
export type Sales_Order_Delivery_StatusProduct_DraftsArgs = {
  distinct_on?: Maybe<Array<Sales_Product_Draft_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Product_Draft_Order_By>>;
  where?: Maybe<Sales_Product_Draft_Bool_Exp>;
};


/** columns and relationships of "sales.order_delivery_status" */
export type Sales_Order_Delivery_StatusProduct_Drafts_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Product_Draft_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Product_Draft_Order_By>>;
  where?: Maybe<Sales_Product_Draft_Bool_Exp>;
};

/** aggregated selection of "sales.order_delivery_status" */
export type Sales_Order_Delivery_Status_Aggregate = {
  __typename?: 'sales_order_delivery_status_aggregate';
  aggregate?: Maybe<Sales_Order_Delivery_Status_Aggregate_Fields>;
  nodes: Array<Sales_Order_Delivery_Status>;
};

/** aggregate fields of "sales.order_delivery_status" */
export type Sales_Order_Delivery_Status_Aggregate_Fields = {
  __typename?: 'sales_order_delivery_status_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Sales_Order_Delivery_Status_Max_Fields>;
  min?: Maybe<Sales_Order_Delivery_Status_Min_Fields>;
};


/** aggregate fields of "sales.order_delivery_status" */
export type Sales_Order_Delivery_Status_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Sales_Order_Delivery_Status_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** Boolean expression to filter rows from the table "sales.order_delivery_status". All fields are combined with a logical 'AND'. */
export type Sales_Order_Delivery_Status_Bool_Exp = {
  _and?: Maybe<Array<Sales_Order_Delivery_Status_Bool_Exp>>;
  _not?: Maybe<Sales_Order_Delivery_Status_Bool_Exp>;
  _or?: Maybe<Array<Sales_Order_Delivery_Status_Bool_Exp>>;
  key?: Maybe<String_Comparison_Exp>;
  orders?: Maybe<Sales_Order_Bool_Exp>;
  product_drafts?: Maybe<Sales_Product_Draft_Bool_Exp>;
  value?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "sales.order_delivery_status" */
export enum Sales_Order_Delivery_Status_Constraint {
  /** unique or primary key constraint */
  OrderDeliveryStatusValueKey = 'order_delivery_status_value_key',
  /** unique or primary key constraint */
  ProductStatusPkey = 'product_status_pkey'
}

/** input type for inserting data into table "sales.order_delivery_status" */
export type Sales_Order_Delivery_Status_Insert_Input = {
  key?: Maybe<Scalars['String']>;
  orders?: Maybe<Sales_Order_Arr_Rel_Insert_Input>;
  product_drafts?: Maybe<Sales_Product_Draft_Arr_Rel_Insert_Input>;
  value?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Sales_Order_Delivery_Status_Max_Fields = {
  __typename?: 'sales_order_delivery_status_max_fields';
  key?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type Sales_Order_Delivery_Status_Min_Fields = {
  __typename?: 'sales_order_delivery_status_min_fields';
  key?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/** response of any mutation on the table "sales.order_delivery_status" */
export type Sales_Order_Delivery_Status_Mutation_Response = {
  __typename?: 'sales_order_delivery_status_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Sales_Order_Delivery_Status>;
};

/** input type for inserting object relation for remote table "sales.order_delivery_status" */
export type Sales_Order_Delivery_Status_Obj_Rel_Insert_Input = {
  data: Sales_Order_Delivery_Status_Insert_Input;
  /** on conflict condition */
  on_conflict?: Maybe<Sales_Order_Delivery_Status_On_Conflict>;
};

/** on conflict condition type for table "sales.order_delivery_status" */
export type Sales_Order_Delivery_Status_On_Conflict = {
  constraint: Sales_Order_Delivery_Status_Constraint;
  update_columns?: Array<Sales_Order_Delivery_Status_Update_Column>;
  where?: Maybe<Sales_Order_Delivery_Status_Bool_Exp>;
};

/** Ordering options when selecting data from "sales.order_delivery_status". */
export type Sales_Order_Delivery_Status_Order_By = {
  key?: Maybe<Order_By>;
  orders_aggregate?: Maybe<Sales_Order_Aggregate_Order_By>;
  product_drafts_aggregate?: Maybe<Sales_Product_Draft_Aggregate_Order_By>;
  value?: Maybe<Order_By>;
};

/** primary key columns input for table: sales_order_delivery_status */
export type Sales_Order_Delivery_Status_Pk_Columns_Input = {
  key: Scalars['String'];
};

/** select columns of table "sales.order_delivery_status" */
export enum Sales_Order_Delivery_Status_Select_Column {
  /** column name */
  Key = 'key',
  /** column name */
  Value = 'value'
}

/** input type for updating data in table "sales.order_delivery_status" */
export type Sales_Order_Delivery_Status_Set_Input = {
  key?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/** update columns of table "sales.order_delivery_status" */
export enum Sales_Order_Delivery_Status_Update_Column {
  /** column name */
  Key = 'key',
  /** column name */
  Value = 'value'
}

/** input type for incrementing numeric columns in table "sales.order" */
export type Sales_Order_Inc_Input = {
  draft_id?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['Int']>;
  ref_num?: Maybe<Scalars['Int']>;
  total_ht?: Maybe<Scalars['numeric']>;
  total_tax?: Maybe<Scalars['numeric']>;
  total_ttc?: Maybe<Scalars['numeric']>;
};

/** input type for inserting data into table "sales.order" */
export type Sales_Order_Insert_Input = {
  company?: Maybe<Management_Company_Obj_Rel_Insert_Input>;
  company_id?: Maybe<Scalars['uuid']>;
  contact?: Maybe<Contact_Contact_Obj_Rel_Insert_Input>;
  contact_id?: Maybe<Scalars['uuid']>;
  customer?: Maybe<Contact_Customer_Obj_Rel_Insert_Input>;
  customer_id?: Maybe<Scalars['uuid']>;
  date?: Maybe<Scalars['date']>;
  deadline?: Maybe<Scalars['date']>;
  deliveries?: Maybe<Sales_Delivery_Arr_Rel_Insert_Input>;
  delivery_status?: Maybe<Scalars['String']>;
  draft?: Maybe<Sales_Draft_Obj_Rel_Insert_Input>;
  draft_id?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['Int']>;
  order_delivery_status?: Maybe<Sales_Order_Delivery_Status_Obj_Rel_Insert_Input>;
  paymentStatusByPaymentStatus?: Maybe<Sales_Payment_Status_Obj_Rel_Insert_Input>;
  payment_status?: Maybe<Scalars['String']>;
  payments?: Maybe<Sales_Payment_Arr_Rel_Insert_Input>;
  quotation?: Maybe<Sales_Quotation_Obj_Rel_Insert_Input>;
  ref?: Maybe<Scalars['String']>;
  ref_num?: Maybe<Scalars['Int']>;
  salepoint?: Maybe<Management_SalesPoint_Obj_Rel_Insert_Input>;
  salepoint_id?: Maybe<Scalars['uuid']>;
  total_ht?: Maybe<Scalars['numeric']>;
  total_tax?: Maybe<Scalars['numeric']>;
  total_ttc?: Maybe<Scalars['numeric']>;
};

/** aggregate max on columns */
export type Sales_Order_Max_Fields = {
  __typename?: 'sales_order_max_fields';
  company_id?: Maybe<Scalars['uuid']>;
  contact_id?: Maybe<Scalars['uuid']>;
  customer_id?: Maybe<Scalars['uuid']>;
  date?: Maybe<Scalars['date']>;
  deadline?: Maybe<Scalars['date']>;
  delivery_status?: Maybe<Scalars['String']>;
  draft_id?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['Int']>;
  payment_status?: Maybe<Scalars['String']>;
  ref?: Maybe<Scalars['String']>;
  ref_num?: Maybe<Scalars['Int']>;
  salepoint_id?: Maybe<Scalars['uuid']>;
  total_ht?: Maybe<Scalars['numeric']>;
  total_tax?: Maybe<Scalars['numeric']>;
  total_ttc?: Maybe<Scalars['numeric']>;
};

/** order by max() on columns of table "sales.order" */
export type Sales_Order_Max_Order_By = {
  company_id?: Maybe<Order_By>;
  contact_id?: Maybe<Order_By>;
  customer_id?: Maybe<Order_By>;
  date?: Maybe<Order_By>;
  deadline?: Maybe<Order_By>;
  delivery_status?: Maybe<Order_By>;
  draft_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  payment_status?: Maybe<Order_By>;
  ref?: Maybe<Order_By>;
  ref_num?: Maybe<Order_By>;
  salepoint_id?: Maybe<Order_By>;
  total_ht?: Maybe<Order_By>;
  total_tax?: Maybe<Order_By>;
  total_ttc?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Sales_Order_Min_Fields = {
  __typename?: 'sales_order_min_fields';
  company_id?: Maybe<Scalars['uuid']>;
  contact_id?: Maybe<Scalars['uuid']>;
  customer_id?: Maybe<Scalars['uuid']>;
  date?: Maybe<Scalars['date']>;
  deadline?: Maybe<Scalars['date']>;
  delivery_status?: Maybe<Scalars['String']>;
  draft_id?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['Int']>;
  payment_status?: Maybe<Scalars['String']>;
  ref?: Maybe<Scalars['String']>;
  ref_num?: Maybe<Scalars['Int']>;
  salepoint_id?: Maybe<Scalars['uuid']>;
  total_ht?: Maybe<Scalars['numeric']>;
  total_tax?: Maybe<Scalars['numeric']>;
  total_ttc?: Maybe<Scalars['numeric']>;
};

/** order by min() on columns of table "sales.order" */
export type Sales_Order_Min_Order_By = {
  company_id?: Maybe<Order_By>;
  contact_id?: Maybe<Order_By>;
  customer_id?: Maybe<Order_By>;
  date?: Maybe<Order_By>;
  deadline?: Maybe<Order_By>;
  delivery_status?: Maybe<Order_By>;
  draft_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  payment_status?: Maybe<Order_By>;
  ref?: Maybe<Order_By>;
  ref_num?: Maybe<Order_By>;
  salepoint_id?: Maybe<Order_By>;
  total_ht?: Maybe<Order_By>;
  total_tax?: Maybe<Order_By>;
  total_ttc?: Maybe<Order_By>;
};

/** response of any mutation on the table "sales.order" */
export type Sales_Order_Mutation_Response = {
  __typename?: 'sales_order_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Sales_Order>;
};

/** input type for inserting object relation for remote table "sales.order" */
export type Sales_Order_Obj_Rel_Insert_Input = {
  data: Sales_Order_Insert_Input;
  /** on conflict condition */
  on_conflict?: Maybe<Sales_Order_On_Conflict>;
};

/** on conflict condition type for table "sales.order" */
export type Sales_Order_On_Conflict = {
  constraint: Sales_Order_Constraint;
  update_columns?: Array<Sales_Order_Update_Column>;
  where?: Maybe<Sales_Order_Bool_Exp>;
};

/** Ordering options when selecting data from "sales.order". */
export type Sales_Order_Order_By = {
  company?: Maybe<Management_Company_Order_By>;
  company_id?: Maybe<Order_By>;
  contact?: Maybe<Contact_Contact_Order_By>;
  contact_id?: Maybe<Order_By>;
  customer?: Maybe<Contact_Customer_Order_By>;
  customer_id?: Maybe<Order_By>;
  date?: Maybe<Order_By>;
  deadline?: Maybe<Order_By>;
  deliveries_aggregate?: Maybe<Sales_Delivery_Aggregate_Order_By>;
  delivery_status?: Maybe<Order_By>;
  draft?: Maybe<Sales_Draft_Order_By>;
  draft_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  order_delivery_status?: Maybe<Sales_Order_Delivery_Status_Order_By>;
  paymentStatusByPaymentStatus?: Maybe<Sales_Payment_Status_Order_By>;
  payment_status?: Maybe<Order_By>;
  payments_aggregate?: Maybe<Sales_Payment_Aggregate_Order_By>;
  quotation?: Maybe<Sales_Quotation_Order_By>;
  ref?: Maybe<Order_By>;
  ref_num?: Maybe<Order_By>;
  salepoint?: Maybe<Management_SalesPoint_Order_By>;
  salepoint_id?: Maybe<Order_By>;
  total_ht?: Maybe<Order_By>;
  total_tax?: Maybe<Order_By>;
  total_ttc?: Maybe<Order_By>;
};

/** primary key columns input for table: sales_order */
export type Sales_Order_Pk_Columns_Input = {
  id: Scalars['Int'];
};

/** select columns of table "sales.order" */
export enum Sales_Order_Select_Column {
  /** column name */
  CompanyId = 'company_id',
  /** column name */
  ContactId = 'contact_id',
  /** column name */
  CustomerId = 'customer_id',
  /** column name */
  Date = 'date',
  /** column name */
  Deadline = 'deadline',
  /** column name */
  DeliveryStatus = 'delivery_status',
  /** column name */
  DraftId = 'draft_id',
  /** column name */
  Id = 'id',
  /** column name */
  PaymentStatus = 'payment_status',
  /** column name */
  Ref = 'ref',
  /** column name */
  RefNum = 'ref_num',
  /** column name */
  SalepointId = 'salepoint_id',
  /** column name */
  TotalHt = 'total_ht',
  /** column name */
  TotalTax = 'total_tax',
  /** column name */
  TotalTtc = 'total_ttc'
}

/** input type for updating data in table "sales.order" */
export type Sales_Order_Set_Input = {
  company_id?: Maybe<Scalars['uuid']>;
  contact_id?: Maybe<Scalars['uuid']>;
  customer_id?: Maybe<Scalars['uuid']>;
  date?: Maybe<Scalars['date']>;
  deadline?: Maybe<Scalars['date']>;
  delivery_status?: Maybe<Scalars['String']>;
  draft_id?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['Int']>;
  payment_status?: Maybe<Scalars['String']>;
  ref?: Maybe<Scalars['String']>;
  ref_num?: Maybe<Scalars['Int']>;
  salepoint_id?: Maybe<Scalars['uuid']>;
  total_ht?: Maybe<Scalars['numeric']>;
  total_tax?: Maybe<Scalars['numeric']>;
  total_ttc?: Maybe<Scalars['numeric']>;
};

/** aggregate stddev on columns */
export type Sales_Order_Stddev_Fields = {
  __typename?: 'sales_order_stddev_fields';
  draft_id?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  ref_num?: Maybe<Scalars['Float']>;
  total_ht?: Maybe<Scalars['Float']>;
  total_tax?: Maybe<Scalars['Float']>;
  total_ttc?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "sales.order" */
export type Sales_Order_Stddev_Order_By = {
  draft_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  ref_num?: Maybe<Order_By>;
  total_ht?: Maybe<Order_By>;
  total_tax?: Maybe<Order_By>;
  total_ttc?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Sales_Order_Stddev_Pop_Fields = {
  __typename?: 'sales_order_stddev_pop_fields';
  draft_id?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  ref_num?: Maybe<Scalars['Float']>;
  total_ht?: Maybe<Scalars['Float']>;
  total_tax?: Maybe<Scalars['Float']>;
  total_ttc?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "sales.order" */
export type Sales_Order_Stddev_Pop_Order_By = {
  draft_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  ref_num?: Maybe<Order_By>;
  total_ht?: Maybe<Order_By>;
  total_tax?: Maybe<Order_By>;
  total_ttc?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Sales_Order_Stddev_Samp_Fields = {
  __typename?: 'sales_order_stddev_samp_fields';
  draft_id?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  ref_num?: Maybe<Scalars['Float']>;
  total_ht?: Maybe<Scalars['Float']>;
  total_tax?: Maybe<Scalars['Float']>;
  total_ttc?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "sales.order" */
export type Sales_Order_Stddev_Samp_Order_By = {
  draft_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  ref_num?: Maybe<Order_By>;
  total_ht?: Maybe<Order_By>;
  total_tax?: Maybe<Order_By>;
  total_ttc?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Sales_Order_Sum_Fields = {
  __typename?: 'sales_order_sum_fields';
  draft_id?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['Int']>;
  ref_num?: Maybe<Scalars['Int']>;
  total_ht?: Maybe<Scalars['numeric']>;
  total_tax?: Maybe<Scalars['numeric']>;
  total_ttc?: Maybe<Scalars['numeric']>;
};

/** order by sum() on columns of table "sales.order" */
export type Sales_Order_Sum_Order_By = {
  draft_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  ref_num?: Maybe<Order_By>;
  total_ht?: Maybe<Order_By>;
  total_tax?: Maybe<Order_By>;
  total_ttc?: Maybe<Order_By>;
};

/** update columns of table "sales.order" */
export enum Sales_Order_Update_Column {
  /** column name */
  CompanyId = 'company_id',
  /** column name */
  ContactId = 'contact_id',
  /** column name */
  CustomerId = 'customer_id',
  /** column name */
  Date = 'date',
  /** column name */
  Deadline = 'deadline',
  /** column name */
  DeliveryStatus = 'delivery_status',
  /** column name */
  DraftId = 'draft_id',
  /** column name */
  Id = 'id',
  /** column name */
  PaymentStatus = 'payment_status',
  /** column name */
  Ref = 'ref',
  /** column name */
  RefNum = 'ref_num',
  /** column name */
  SalepointId = 'salepoint_id',
  /** column name */
  TotalHt = 'total_ht',
  /** column name */
  TotalTax = 'total_tax',
  /** column name */
  TotalTtc = 'total_ttc'
}

/** aggregate var_pop on columns */
export type Sales_Order_Var_Pop_Fields = {
  __typename?: 'sales_order_var_pop_fields';
  draft_id?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  ref_num?: Maybe<Scalars['Float']>;
  total_ht?: Maybe<Scalars['Float']>;
  total_tax?: Maybe<Scalars['Float']>;
  total_ttc?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "sales.order" */
export type Sales_Order_Var_Pop_Order_By = {
  draft_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  ref_num?: Maybe<Order_By>;
  total_ht?: Maybe<Order_By>;
  total_tax?: Maybe<Order_By>;
  total_ttc?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Sales_Order_Var_Samp_Fields = {
  __typename?: 'sales_order_var_samp_fields';
  draft_id?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  ref_num?: Maybe<Scalars['Float']>;
  total_ht?: Maybe<Scalars['Float']>;
  total_tax?: Maybe<Scalars['Float']>;
  total_ttc?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "sales.order" */
export type Sales_Order_Var_Samp_Order_By = {
  draft_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  ref_num?: Maybe<Order_By>;
  total_ht?: Maybe<Order_By>;
  total_tax?: Maybe<Order_By>;
  total_ttc?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Sales_Order_Variance_Fields = {
  __typename?: 'sales_order_variance_fields';
  draft_id?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  ref_num?: Maybe<Scalars['Float']>;
  total_ht?: Maybe<Scalars['Float']>;
  total_tax?: Maybe<Scalars['Float']>;
  total_ttc?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "sales.order" */
export type Sales_Order_Variance_Order_By = {
  draft_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  ref_num?: Maybe<Order_By>;
  total_ht?: Maybe<Order_By>;
  total_tax?: Maybe<Order_By>;
  total_ttc?: Maybe<Order_By>;
};

/** columns and relationships of "sales.payment" */
export type Sales_Payment = {
  __typename?: 'sales_payment';
  amount: Scalars['numeric'];
  comment?: Maybe<Scalars['String']>;
  /** An object relationship */
  company: Management_Company;
  company_id: Scalars['uuid'];
  /** An object relationship */
  customer: Contact_Customer;
  customer_id: Scalars['uuid'];
  date: Scalars['date'];
  deadline?: Maybe<Scalars['date']>;
  id: Scalars['uuid'];
  /** An object relationship */
  order: Sales_Order;
  order_id: Scalars['Int'];
  paper_ref?: Maybe<Scalars['String']>;
  /** An object relationship */
  paymentMethod: Sales_Payment_Method;
  payment_method: Scalars['String'];
};

/** aggregated selection of "sales.payment" */
export type Sales_Payment_Aggregate = {
  __typename?: 'sales_payment_aggregate';
  aggregate?: Maybe<Sales_Payment_Aggregate_Fields>;
  nodes: Array<Sales_Payment>;
};

/** aggregate fields of "sales.payment" */
export type Sales_Payment_Aggregate_Fields = {
  __typename?: 'sales_payment_aggregate_fields';
  avg?: Maybe<Sales_Payment_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Sales_Payment_Max_Fields>;
  min?: Maybe<Sales_Payment_Min_Fields>;
  stddev?: Maybe<Sales_Payment_Stddev_Fields>;
  stddev_pop?: Maybe<Sales_Payment_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Sales_Payment_Stddev_Samp_Fields>;
  sum?: Maybe<Sales_Payment_Sum_Fields>;
  var_pop?: Maybe<Sales_Payment_Var_Pop_Fields>;
  var_samp?: Maybe<Sales_Payment_Var_Samp_Fields>;
  variance?: Maybe<Sales_Payment_Variance_Fields>;
};


/** aggregate fields of "sales.payment" */
export type Sales_Payment_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Sales_Payment_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "sales.payment" */
export type Sales_Payment_Aggregate_Order_By = {
  avg?: Maybe<Sales_Payment_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Sales_Payment_Max_Order_By>;
  min?: Maybe<Sales_Payment_Min_Order_By>;
  stddev?: Maybe<Sales_Payment_Stddev_Order_By>;
  stddev_pop?: Maybe<Sales_Payment_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Sales_Payment_Stddev_Samp_Order_By>;
  sum?: Maybe<Sales_Payment_Sum_Order_By>;
  var_pop?: Maybe<Sales_Payment_Var_Pop_Order_By>;
  var_samp?: Maybe<Sales_Payment_Var_Samp_Order_By>;
  variance?: Maybe<Sales_Payment_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "sales.payment" */
export type Sales_Payment_Arr_Rel_Insert_Input = {
  data: Array<Sales_Payment_Insert_Input>;
  /** on conflict condition */
  on_conflict?: Maybe<Sales_Payment_On_Conflict>;
};

/** aggregate avg on columns */
export type Sales_Payment_Avg_Fields = {
  __typename?: 'sales_payment_avg_fields';
  amount?: Maybe<Scalars['Float']>;
  order_id?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "sales.payment" */
export type Sales_Payment_Avg_Order_By = {
  amount?: Maybe<Order_By>;
  order_id?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "sales.payment". All fields are combined with a logical 'AND'. */
export type Sales_Payment_Bool_Exp = {
  _and?: Maybe<Array<Sales_Payment_Bool_Exp>>;
  _not?: Maybe<Sales_Payment_Bool_Exp>;
  _or?: Maybe<Array<Sales_Payment_Bool_Exp>>;
  amount?: Maybe<Numeric_Comparison_Exp>;
  comment?: Maybe<String_Comparison_Exp>;
  company?: Maybe<Management_Company_Bool_Exp>;
  company_id?: Maybe<Uuid_Comparison_Exp>;
  customer?: Maybe<Contact_Customer_Bool_Exp>;
  customer_id?: Maybe<Uuid_Comparison_Exp>;
  date?: Maybe<Date_Comparison_Exp>;
  deadline?: Maybe<Date_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  order?: Maybe<Sales_Order_Bool_Exp>;
  order_id?: Maybe<Int_Comparison_Exp>;
  paper_ref?: Maybe<String_Comparison_Exp>;
  paymentMethod?: Maybe<Sales_Payment_Method_Bool_Exp>;
  payment_method?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "sales.payment" */
export enum Sales_Payment_Constraint {
  /** unique or primary key constraint */
  PaymentPkey = 'payment_pkey'
}

/** input type for incrementing numeric columns in table "sales.payment" */
export type Sales_Payment_Inc_Input = {
  amount?: Maybe<Scalars['numeric']>;
  order_id?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "sales.payment" */
export type Sales_Payment_Insert_Input = {
  amount?: Maybe<Scalars['numeric']>;
  comment?: Maybe<Scalars['String']>;
  company?: Maybe<Management_Company_Obj_Rel_Insert_Input>;
  company_id?: Maybe<Scalars['uuid']>;
  customer?: Maybe<Contact_Customer_Obj_Rel_Insert_Input>;
  customer_id?: Maybe<Scalars['uuid']>;
  date?: Maybe<Scalars['date']>;
  deadline?: Maybe<Scalars['date']>;
  id?: Maybe<Scalars['uuid']>;
  order?: Maybe<Sales_Order_Obj_Rel_Insert_Input>;
  order_id?: Maybe<Scalars['Int']>;
  paper_ref?: Maybe<Scalars['String']>;
  paymentMethod?: Maybe<Sales_Payment_Method_Obj_Rel_Insert_Input>;
  payment_method?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Sales_Payment_Max_Fields = {
  __typename?: 'sales_payment_max_fields';
  amount?: Maybe<Scalars['numeric']>;
  comment?: Maybe<Scalars['String']>;
  company_id?: Maybe<Scalars['uuid']>;
  customer_id?: Maybe<Scalars['uuid']>;
  date?: Maybe<Scalars['date']>;
  deadline?: Maybe<Scalars['date']>;
  id?: Maybe<Scalars['uuid']>;
  order_id?: Maybe<Scalars['Int']>;
  paper_ref?: Maybe<Scalars['String']>;
  payment_method?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "sales.payment" */
export type Sales_Payment_Max_Order_By = {
  amount?: Maybe<Order_By>;
  comment?: Maybe<Order_By>;
  company_id?: Maybe<Order_By>;
  customer_id?: Maybe<Order_By>;
  date?: Maybe<Order_By>;
  deadline?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  order_id?: Maybe<Order_By>;
  paper_ref?: Maybe<Order_By>;
  payment_method?: Maybe<Order_By>;
};

/** columns and relationships of "sales.payment_method" */
export type Sales_Payment_Method = {
  __typename?: 'sales_payment_method';
  key: Scalars['String'];
  /** An array relationship */
  payments: Array<Sales_Payment>;
  /** An aggregate relationship */
  payments_aggregate: Sales_Payment_Aggregate;
  value: Scalars['String'];
};


/** columns and relationships of "sales.payment_method" */
export type Sales_Payment_MethodPaymentsArgs = {
  distinct_on?: Maybe<Array<Sales_Payment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Payment_Order_By>>;
  where?: Maybe<Sales_Payment_Bool_Exp>;
};


/** columns and relationships of "sales.payment_method" */
export type Sales_Payment_MethodPayments_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Payment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Payment_Order_By>>;
  where?: Maybe<Sales_Payment_Bool_Exp>;
};

/** aggregated selection of "sales.payment_method" */
export type Sales_Payment_Method_Aggregate = {
  __typename?: 'sales_payment_method_aggregate';
  aggregate?: Maybe<Sales_Payment_Method_Aggregate_Fields>;
  nodes: Array<Sales_Payment_Method>;
};

/** aggregate fields of "sales.payment_method" */
export type Sales_Payment_Method_Aggregate_Fields = {
  __typename?: 'sales_payment_method_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Sales_Payment_Method_Max_Fields>;
  min?: Maybe<Sales_Payment_Method_Min_Fields>;
};


/** aggregate fields of "sales.payment_method" */
export type Sales_Payment_Method_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Sales_Payment_Method_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** Boolean expression to filter rows from the table "sales.payment_method". All fields are combined with a logical 'AND'. */
export type Sales_Payment_Method_Bool_Exp = {
  _and?: Maybe<Array<Sales_Payment_Method_Bool_Exp>>;
  _not?: Maybe<Sales_Payment_Method_Bool_Exp>;
  _or?: Maybe<Array<Sales_Payment_Method_Bool_Exp>>;
  key?: Maybe<String_Comparison_Exp>;
  payments?: Maybe<Sales_Payment_Bool_Exp>;
  value?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "sales.payment_method" */
export enum Sales_Payment_Method_Constraint {
  /** unique or primary key constraint */
  PaymentMethodsPkey = 'payment_methods_pkey',
  /** unique or primary key constraint */
  PaymentMethodsValueKey = 'payment_methods_value_key'
}

/** input type for inserting data into table "sales.payment_method" */
export type Sales_Payment_Method_Insert_Input = {
  key?: Maybe<Scalars['String']>;
  payments?: Maybe<Sales_Payment_Arr_Rel_Insert_Input>;
  value?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Sales_Payment_Method_Max_Fields = {
  __typename?: 'sales_payment_method_max_fields';
  key?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type Sales_Payment_Method_Min_Fields = {
  __typename?: 'sales_payment_method_min_fields';
  key?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/** response of any mutation on the table "sales.payment_method" */
export type Sales_Payment_Method_Mutation_Response = {
  __typename?: 'sales_payment_method_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Sales_Payment_Method>;
};

/** input type for inserting object relation for remote table "sales.payment_method" */
export type Sales_Payment_Method_Obj_Rel_Insert_Input = {
  data: Sales_Payment_Method_Insert_Input;
  /** on conflict condition */
  on_conflict?: Maybe<Sales_Payment_Method_On_Conflict>;
};

/** on conflict condition type for table "sales.payment_method" */
export type Sales_Payment_Method_On_Conflict = {
  constraint: Sales_Payment_Method_Constraint;
  update_columns?: Array<Sales_Payment_Method_Update_Column>;
  where?: Maybe<Sales_Payment_Method_Bool_Exp>;
};

/** Ordering options when selecting data from "sales.payment_method". */
export type Sales_Payment_Method_Order_By = {
  key?: Maybe<Order_By>;
  payments_aggregate?: Maybe<Sales_Payment_Aggregate_Order_By>;
  value?: Maybe<Order_By>;
};

/** primary key columns input for table: sales_payment_method */
export type Sales_Payment_Method_Pk_Columns_Input = {
  key: Scalars['String'];
};

/** select columns of table "sales.payment_method" */
export enum Sales_Payment_Method_Select_Column {
  /** column name */
  Key = 'key',
  /** column name */
  Value = 'value'
}

/** input type for updating data in table "sales.payment_method" */
export type Sales_Payment_Method_Set_Input = {
  key?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/** update columns of table "sales.payment_method" */
export enum Sales_Payment_Method_Update_Column {
  /** column name */
  Key = 'key',
  /** column name */
  Value = 'value'
}

/** aggregate min on columns */
export type Sales_Payment_Min_Fields = {
  __typename?: 'sales_payment_min_fields';
  amount?: Maybe<Scalars['numeric']>;
  comment?: Maybe<Scalars['String']>;
  company_id?: Maybe<Scalars['uuid']>;
  customer_id?: Maybe<Scalars['uuid']>;
  date?: Maybe<Scalars['date']>;
  deadline?: Maybe<Scalars['date']>;
  id?: Maybe<Scalars['uuid']>;
  order_id?: Maybe<Scalars['Int']>;
  paper_ref?: Maybe<Scalars['String']>;
  payment_method?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "sales.payment" */
export type Sales_Payment_Min_Order_By = {
  amount?: Maybe<Order_By>;
  comment?: Maybe<Order_By>;
  company_id?: Maybe<Order_By>;
  customer_id?: Maybe<Order_By>;
  date?: Maybe<Order_By>;
  deadline?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  order_id?: Maybe<Order_By>;
  paper_ref?: Maybe<Order_By>;
  payment_method?: Maybe<Order_By>;
};

/** response of any mutation on the table "sales.payment" */
export type Sales_Payment_Mutation_Response = {
  __typename?: 'sales_payment_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Sales_Payment>;
};

/** on conflict condition type for table "sales.payment" */
export type Sales_Payment_On_Conflict = {
  constraint: Sales_Payment_Constraint;
  update_columns?: Array<Sales_Payment_Update_Column>;
  where?: Maybe<Sales_Payment_Bool_Exp>;
};

/** Ordering options when selecting data from "sales.payment". */
export type Sales_Payment_Order_By = {
  amount?: Maybe<Order_By>;
  comment?: Maybe<Order_By>;
  company?: Maybe<Management_Company_Order_By>;
  company_id?: Maybe<Order_By>;
  customer?: Maybe<Contact_Customer_Order_By>;
  customer_id?: Maybe<Order_By>;
  date?: Maybe<Order_By>;
  deadline?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  order?: Maybe<Sales_Order_Order_By>;
  order_id?: Maybe<Order_By>;
  paper_ref?: Maybe<Order_By>;
  paymentMethod?: Maybe<Sales_Payment_Method_Order_By>;
  payment_method?: Maybe<Order_By>;
};

/** primary key columns input for table: sales_payment */
export type Sales_Payment_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "sales.payment" */
export enum Sales_Payment_Select_Column {
  /** column name */
  Amount = 'amount',
  /** column name */
  Comment = 'comment',
  /** column name */
  CompanyId = 'company_id',
  /** column name */
  CustomerId = 'customer_id',
  /** column name */
  Date = 'date',
  /** column name */
  Deadline = 'deadline',
  /** column name */
  Id = 'id',
  /** column name */
  OrderId = 'order_id',
  /** column name */
  PaperRef = 'paper_ref',
  /** column name */
  PaymentMethod = 'payment_method'
}

/** input type for updating data in table "sales.payment" */
export type Sales_Payment_Set_Input = {
  amount?: Maybe<Scalars['numeric']>;
  comment?: Maybe<Scalars['String']>;
  company_id?: Maybe<Scalars['uuid']>;
  customer_id?: Maybe<Scalars['uuid']>;
  date?: Maybe<Scalars['date']>;
  deadline?: Maybe<Scalars['date']>;
  id?: Maybe<Scalars['uuid']>;
  order_id?: Maybe<Scalars['Int']>;
  paper_ref?: Maybe<Scalars['String']>;
  payment_method?: Maybe<Scalars['String']>;
};

/** columns and relationships of "sales.payment_status" */
export type Sales_Payment_Status = {
  __typename?: 'sales_payment_status';
  key: Scalars['String'];
  /** An array relationship */
  orders: Array<Sales_Order>;
  /** An aggregate relationship */
  orders_aggregate: Sales_Order_Aggregate;
  value: Scalars['String'];
};


/** columns and relationships of "sales.payment_status" */
export type Sales_Payment_StatusOrdersArgs = {
  distinct_on?: Maybe<Array<Sales_Order_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Order_Order_By>>;
  where?: Maybe<Sales_Order_Bool_Exp>;
};


/** columns and relationships of "sales.payment_status" */
export type Sales_Payment_StatusOrders_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Order_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Order_Order_By>>;
  where?: Maybe<Sales_Order_Bool_Exp>;
};

/** aggregated selection of "sales.payment_status" */
export type Sales_Payment_Status_Aggregate = {
  __typename?: 'sales_payment_status_aggregate';
  aggregate?: Maybe<Sales_Payment_Status_Aggregate_Fields>;
  nodes: Array<Sales_Payment_Status>;
};

/** aggregate fields of "sales.payment_status" */
export type Sales_Payment_Status_Aggregate_Fields = {
  __typename?: 'sales_payment_status_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Sales_Payment_Status_Max_Fields>;
  min?: Maybe<Sales_Payment_Status_Min_Fields>;
};


/** aggregate fields of "sales.payment_status" */
export type Sales_Payment_Status_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Sales_Payment_Status_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** Boolean expression to filter rows from the table "sales.payment_status". All fields are combined with a logical 'AND'. */
export type Sales_Payment_Status_Bool_Exp = {
  _and?: Maybe<Array<Sales_Payment_Status_Bool_Exp>>;
  _not?: Maybe<Sales_Payment_Status_Bool_Exp>;
  _or?: Maybe<Array<Sales_Payment_Status_Bool_Exp>>;
  key?: Maybe<String_Comparison_Exp>;
  orders?: Maybe<Sales_Order_Bool_Exp>;
  value?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "sales.payment_status" */
export enum Sales_Payment_Status_Constraint {
  /** unique or primary key constraint */
  PaymentStatusPkey = 'payment_status_pkey',
  /** unique or primary key constraint */
  PaymentStatusValueKey = 'payment_status_value_key'
}

/** input type for inserting data into table "sales.payment_status" */
export type Sales_Payment_Status_Insert_Input = {
  key?: Maybe<Scalars['String']>;
  orders?: Maybe<Sales_Order_Arr_Rel_Insert_Input>;
  value?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Sales_Payment_Status_Max_Fields = {
  __typename?: 'sales_payment_status_max_fields';
  key?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type Sales_Payment_Status_Min_Fields = {
  __typename?: 'sales_payment_status_min_fields';
  key?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/** response of any mutation on the table "sales.payment_status" */
export type Sales_Payment_Status_Mutation_Response = {
  __typename?: 'sales_payment_status_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Sales_Payment_Status>;
};

/** input type for inserting object relation for remote table "sales.payment_status" */
export type Sales_Payment_Status_Obj_Rel_Insert_Input = {
  data: Sales_Payment_Status_Insert_Input;
  /** on conflict condition */
  on_conflict?: Maybe<Sales_Payment_Status_On_Conflict>;
};

/** on conflict condition type for table "sales.payment_status" */
export type Sales_Payment_Status_On_Conflict = {
  constraint: Sales_Payment_Status_Constraint;
  update_columns?: Array<Sales_Payment_Status_Update_Column>;
  where?: Maybe<Sales_Payment_Status_Bool_Exp>;
};

/** Ordering options when selecting data from "sales.payment_status". */
export type Sales_Payment_Status_Order_By = {
  key?: Maybe<Order_By>;
  orders_aggregate?: Maybe<Sales_Order_Aggregate_Order_By>;
  value?: Maybe<Order_By>;
};

/** primary key columns input for table: sales_payment_status */
export type Sales_Payment_Status_Pk_Columns_Input = {
  key: Scalars['String'];
};

/** select columns of table "sales.payment_status" */
export enum Sales_Payment_Status_Select_Column {
  /** column name */
  Key = 'key',
  /** column name */
  Value = 'value'
}

/** input type for updating data in table "sales.payment_status" */
export type Sales_Payment_Status_Set_Input = {
  key?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/** update columns of table "sales.payment_status" */
export enum Sales_Payment_Status_Update_Column {
  /** column name */
  Key = 'key',
  /** column name */
  Value = 'value'
}

/** aggregate stddev on columns */
export type Sales_Payment_Stddev_Fields = {
  __typename?: 'sales_payment_stddev_fields';
  amount?: Maybe<Scalars['Float']>;
  order_id?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "sales.payment" */
export type Sales_Payment_Stddev_Order_By = {
  amount?: Maybe<Order_By>;
  order_id?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Sales_Payment_Stddev_Pop_Fields = {
  __typename?: 'sales_payment_stddev_pop_fields';
  amount?: Maybe<Scalars['Float']>;
  order_id?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "sales.payment" */
export type Sales_Payment_Stddev_Pop_Order_By = {
  amount?: Maybe<Order_By>;
  order_id?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Sales_Payment_Stddev_Samp_Fields = {
  __typename?: 'sales_payment_stddev_samp_fields';
  amount?: Maybe<Scalars['Float']>;
  order_id?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "sales.payment" */
export type Sales_Payment_Stddev_Samp_Order_By = {
  amount?: Maybe<Order_By>;
  order_id?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Sales_Payment_Sum_Fields = {
  __typename?: 'sales_payment_sum_fields';
  amount?: Maybe<Scalars['numeric']>;
  order_id?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "sales.payment" */
export type Sales_Payment_Sum_Order_By = {
  amount?: Maybe<Order_By>;
  order_id?: Maybe<Order_By>;
};

/** update columns of table "sales.payment" */
export enum Sales_Payment_Update_Column {
  /** column name */
  Amount = 'amount',
  /** column name */
  Comment = 'comment',
  /** column name */
  CompanyId = 'company_id',
  /** column name */
  CustomerId = 'customer_id',
  /** column name */
  Date = 'date',
  /** column name */
  Deadline = 'deadline',
  /** column name */
  Id = 'id',
  /** column name */
  OrderId = 'order_id',
  /** column name */
  PaperRef = 'paper_ref',
  /** column name */
  PaymentMethod = 'payment_method'
}

/** aggregate var_pop on columns */
export type Sales_Payment_Var_Pop_Fields = {
  __typename?: 'sales_payment_var_pop_fields';
  amount?: Maybe<Scalars['Float']>;
  order_id?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "sales.payment" */
export type Sales_Payment_Var_Pop_Order_By = {
  amount?: Maybe<Order_By>;
  order_id?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Sales_Payment_Var_Samp_Fields = {
  __typename?: 'sales_payment_var_samp_fields';
  amount?: Maybe<Scalars['Float']>;
  order_id?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "sales.payment" */
export type Sales_Payment_Var_Samp_Order_By = {
  amount?: Maybe<Order_By>;
  order_id?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Sales_Payment_Variance_Fields = {
  __typename?: 'sales_payment_variance_fields';
  amount?: Maybe<Scalars['Float']>;
  order_id?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "sales.payment" */
export type Sales_Payment_Variance_Order_By = {
  amount?: Maybe<Order_By>;
  order_id?: Maybe<Order_By>;
};

/** columns and relationships of "sales.product_draft" */
export type Sales_Product_Draft = {
  __typename?: 'sales_product_draft';
  /** An object relationship */
  accessory_draft?: Maybe<Sales_Accessory_Draft>;
  /** An object relationship */
  company?: Maybe<Management_Company>;
  company_id?: Maybe<Scalars['uuid']>;
  company_name?: Maybe<Scalars['String']>;
  /** An object relationship */
  consumable_draft?: Maybe<Sales_Consumable_Draft>;
  count?: Maybe<Scalars['numeric']>;
  delivered: Scalars['numeric'];
  /** An array relationship */
  delivery_lines: Array<Sales_Delivery_Line>;
  /** An aggregate relationship */
  delivery_lines_aggregate: Sales_Delivery_Line_Aggregate;
  /** An object relationship */
  draft: Sales_Draft;
  draft_id: Scalars['Int'];
  /** An object relationship */
  glass_draft?: Maybe<Sales_Glass_Draft>;
  heigth?: Maybe<Scalars['numeric']>;
  id: Scalars['uuid'];
  isLaunched?: Maybe<Scalars['Boolean']>;
  isRepeated?: Maybe<Scalars['Boolean']>;
  label: Scalars['String'];
  m2?: Maybe<Scalars['numeric']>;
  ml?: Maybe<Scalars['numeric']>;
  /** An object relationship */
  order_delivery_status: Sales_Order_Delivery_Status;
  price?: Maybe<Scalars['numeric']>;
  /** An object relationship */
  product: Product_Product;
  product_code: Scalars['String'];
  /** An object relationship */
  product_type?: Maybe<Sales_Product_Type>;
  quantity?: Maybe<Scalars['numeric']>;
  /** An object relationship */
  service_draft?: Maybe<Sales_Service_Draft>;
  status: Scalars['String'];
  substance_id?: Maybe<Scalars['uuid']>;
  total_price?: Maybe<Scalars['numeric']>;
  type?: Maybe<Sales_Product_Type_Enum>;
  unit?: Maybe<Scalars['String']>;
  warehouse_id?: Maybe<Scalars['uuid']>;
  width?: Maybe<Scalars['numeric']>;
};


/** columns and relationships of "sales.product_draft" */
export type Sales_Product_DraftDelivery_LinesArgs = {
  distinct_on?: Maybe<Array<Sales_Delivery_Line_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Delivery_Line_Order_By>>;
  where?: Maybe<Sales_Delivery_Line_Bool_Exp>;
};


/** columns and relationships of "sales.product_draft" */
export type Sales_Product_DraftDelivery_Lines_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Delivery_Line_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Delivery_Line_Order_By>>;
  where?: Maybe<Sales_Delivery_Line_Bool_Exp>;
};

/** aggregated selection of "sales.product_draft" */
export type Sales_Product_Draft_Aggregate = {
  __typename?: 'sales_product_draft_aggregate';
  aggregate?: Maybe<Sales_Product_Draft_Aggregate_Fields>;
  nodes: Array<Sales_Product_Draft>;
};

/** aggregate fields of "sales.product_draft" */
export type Sales_Product_Draft_Aggregate_Fields = {
  __typename?: 'sales_product_draft_aggregate_fields';
  avg?: Maybe<Sales_Product_Draft_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Sales_Product_Draft_Max_Fields>;
  min?: Maybe<Sales_Product_Draft_Min_Fields>;
  stddev?: Maybe<Sales_Product_Draft_Stddev_Fields>;
  stddev_pop?: Maybe<Sales_Product_Draft_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Sales_Product_Draft_Stddev_Samp_Fields>;
  sum?: Maybe<Sales_Product_Draft_Sum_Fields>;
  var_pop?: Maybe<Sales_Product_Draft_Var_Pop_Fields>;
  var_samp?: Maybe<Sales_Product_Draft_Var_Samp_Fields>;
  variance?: Maybe<Sales_Product_Draft_Variance_Fields>;
};


/** aggregate fields of "sales.product_draft" */
export type Sales_Product_Draft_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Sales_Product_Draft_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "sales.product_draft" */
export type Sales_Product_Draft_Aggregate_Order_By = {
  avg?: Maybe<Sales_Product_Draft_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Sales_Product_Draft_Max_Order_By>;
  min?: Maybe<Sales_Product_Draft_Min_Order_By>;
  stddev?: Maybe<Sales_Product_Draft_Stddev_Order_By>;
  stddev_pop?: Maybe<Sales_Product_Draft_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Sales_Product_Draft_Stddev_Samp_Order_By>;
  sum?: Maybe<Sales_Product_Draft_Sum_Order_By>;
  var_pop?: Maybe<Sales_Product_Draft_Var_Pop_Order_By>;
  var_samp?: Maybe<Sales_Product_Draft_Var_Samp_Order_By>;
  variance?: Maybe<Sales_Product_Draft_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "sales.product_draft" */
export type Sales_Product_Draft_Arr_Rel_Insert_Input = {
  data: Array<Sales_Product_Draft_Insert_Input>;
  /** on conflict condition */
  on_conflict?: Maybe<Sales_Product_Draft_On_Conflict>;
};

/** aggregate avg on columns */
export type Sales_Product_Draft_Avg_Fields = {
  __typename?: 'sales_product_draft_avg_fields';
  count?: Maybe<Scalars['Float']>;
  delivered?: Maybe<Scalars['Float']>;
  draft_id?: Maybe<Scalars['Float']>;
  heigth?: Maybe<Scalars['Float']>;
  m2?: Maybe<Scalars['Float']>;
  ml?: Maybe<Scalars['Float']>;
  price?: Maybe<Scalars['Float']>;
  quantity?: Maybe<Scalars['Float']>;
  total_price?: Maybe<Scalars['Float']>;
  width?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "sales.product_draft" */
export type Sales_Product_Draft_Avg_Order_By = {
  count?: Maybe<Order_By>;
  delivered?: Maybe<Order_By>;
  draft_id?: Maybe<Order_By>;
  heigth?: Maybe<Order_By>;
  m2?: Maybe<Order_By>;
  ml?: Maybe<Order_By>;
  price?: Maybe<Order_By>;
  quantity?: Maybe<Order_By>;
  total_price?: Maybe<Order_By>;
  width?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "sales.product_draft". All fields are combined with a logical 'AND'. */
export type Sales_Product_Draft_Bool_Exp = {
  _and?: Maybe<Array<Sales_Product_Draft_Bool_Exp>>;
  _not?: Maybe<Sales_Product_Draft_Bool_Exp>;
  _or?: Maybe<Array<Sales_Product_Draft_Bool_Exp>>;
  accessory_draft?: Maybe<Sales_Accessory_Draft_Bool_Exp>;
  company?: Maybe<Management_Company_Bool_Exp>;
  company_id?: Maybe<Uuid_Comparison_Exp>;
  company_name?: Maybe<String_Comparison_Exp>;
  consumable_draft?: Maybe<Sales_Consumable_Draft_Bool_Exp>;
  count?: Maybe<Numeric_Comparison_Exp>;
  delivered?: Maybe<Numeric_Comparison_Exp>;
  delivery_lines?: Maybe<Sales_Delivery_Line_Bool_Exp>;
  draft?: Maybe<Sales_Draft_Bool_Exp>;
  draft_id?: Maybe<Int_Comparison_Exp>;
  glass_draft?: Maybe<Sales_Glass_Draft_Bool_Exp>;
  heigth?: Maybe<Numeric_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  isLaunched?: Maybe<Boolean_Comparison_Exp>;
  isRepeated?: Maybe<Boolean_Comparison_Exp>;
  label?: Maybe<String_Comparison_Exp>;
  m2?: Maybe<Numeric_Comparison_Exp>;
  ml?: Maybe<Numeric_Comparison_Exp>;
  order_delivery_status?: Maybe<Sales_Order_Delivery_Status_Bool_Exp>;
  price?: Maybe<Numeric_Comparison_Exp>;
  product?: Maybe<Product_Product_Bool_Exp>;
  product_code?: Maybe<String_Comparison_Exp>;
  product_type?: Maybe<Sales_Product_Type_Bool_Exp>;
  quantity?: Maybe<Numeric_Comparison_Exp>;
  service_draft?: Maybe<Sales_Service_Draft_Bool_Exp>;
  status?: Maybe<String_Comparison_Exp>;
  substance_id?: Maybe<Uuid_Comparison_Exp>;
  total_price?: Maybe<Numeric_Comparison_Exp>;
  type?: Maybe<Sales_Product_Type_Enum_Comparison_Exp>;
  unit?: Maybe<String_Comparison_Exp>;
  warehouse_id?: Maybe<Uuid_Comparison_Exp>;
  width?: Maybe<Numeric_Comparison_Exp>;
};

/** unique or primary key constraints on table "sales.product_draft" */
export enum Sales_Product_Draft_Constraint {
  /** unique or primary key constraint */
  ProductDraftPkey = 'product_draft_pkey'
}

/** input type for incrementing numeric columns in table "sales.product_draft" */
export type Sales_Product_Draft_Inc_Input = {
  count?: Maybe<Scalars['numeric']>;
  delivered?: Maybe<Scalars['numeric']>;
  draft_id?: Maybe<Scalars['Int']>;
  heigth?: Maybe<Scalars['numeric']>;
  m2?: Maybe<Scalars['numeric']>;
  ml?: Maybe<Scalars['numeric']>;
  price?: Maybe<Scalars['numeric']>;
  quantity?: Maybe<Scalars['numeric']>;
  total_price?: Maybe<Scalars['numeric']>;
  width?: Maybe<Scalars['numeric']>;
};

/** input type for inserting data into table "sales.product_draft" */
export type Sales_Product_Draft_Insert_Input = {
  accessory_draft?: Maybe<Sales_Accessory_Draft_Obj_Rel_Insert_Input>;
  company?: Maybe<Management_Company_Obj_Rel_Insert_Input>;
  company_id?: Maybe<Scalars['uuid']>;
  company_name?: Maybe<Scalars['String']>;
  consumable_draft?: Maybe<Sales_Consumable_Draft_Obj_Rel_Insert_Input>;
  count?: Maybe<Scalars['numeric']>;
  delivered?: Maybe<Scalars['numeric']>;
  delivery_lines?: Maybe<Sales_Delivery_Line_Arr_Rel_Insert_Input>;
  draft?: Maybe<Sales_Draft_Obj_Rel_Insert_Input>;
  draft_id?: Maybe<Scalars['Int']>;
  glass_draft?: Maybe<Sales_Glass_Draft_Obj_Rel_Insert_Input>;
  heigth?: Maybe<Scalars['numeric']>;
  id?: Maybe<Scalars['uuid']>;
  isLaunched?: Maybe<Scalars['Boolean']>;
  isRepeated?: Maybe<Scalars['Boolean']>;
  label?: Maybe<Scalars['String']>;
  m2?: Maybe<Scalars['numeric']>;
  ml?: Maybe<Scalars['numeric']>;
  order_delivery_status?: Maybe<Sales_Order_Delivery_Status_Obj_Rel_Insert_Input>;
  price?: Maybe<Scalars['numeric']>;
  product?: Maybe<Product_Product_Obj_Rel_Insert_Input>;
  product_code?: Maybe<Scalars['String']>;
  product_type?: Maybe<Sales_Product_Type_Obj_Rel_Insert_Input>;
  quantity?: Maybe<Scalars['numeric']>;
  service_draft?: Maybe<Sales_Service_Draft_Obj_Rel_Insert_Input>;
  status?: Maybe<Scalars['String']>;
  substance_id?: Maybe<Scalars['uuid']>;
  total_price?: Maybe<Scalars['numeric']>;
  type?: Maybe<Sales_Product_Type_Enum>;
  unit?: Maybe<Scalars['String']>;
  warehouse_id?: Maybe<Scalars['uuid']>;
  width?: Maybe<Scalars['numeric']>;
};

/** aggregate max on columns */
export type Sales_Product_Draft_Max_Fields = {
  __typename?: 'sales_product_draft_max_fields';
  company_id?: Maybe<Scalars['uuid']>;
  company_name?: Maybe<Scalars['String']>;
  count?: Maybe<Scalars['numeric']>;
  delivered?: Maybe<Scalars['numeric']>;
  draft_id?: Maybe<Scalars['Int']>;
  heigth?: Maybe<Scalars['numeric']>;
  id?: Maybe<Scalars['uuid']>;
  label?: Maybe<Scalars['String']>;
  m2?: Maybe<Scalars['numeric']>;
  ml?: Maybe<Scalars['numeric']>;
  price?: Maybe<Scalars['numeric']>;
  product_code?: Maybe<Scalars['String']>;
  quantity?: Maybe<Scalars['numeric']>;
  status?: Maybe<Scalars['String']>;
  substance_id?: Maybe<Scalars['uuid']>;
  total_price?: Maybe<Scalars['numeric']>;
  unit?: Maybe<Scalars['String']>;
  warehouse_id?: Maybe<Scalars['uuid']>;
  width?: Maybe<Scalars['numeric']>;
};

/** order by max() on columns of table "sales.product_draft" */
export type Sales_Product_Draft_Max_Order_By = {
  company_id?: Maybe<Order_By>;
  company_name?: Maybe<Order_By>;
  count?: Maybe<Order_By>;
  delivered?: Maybe<Order_By>;
  draft_id?: Maybe<Order_By>;
  heigth?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  label?: Maybe<Order_By>;
  m2?: Maybe<Order_By>;
  ml?: Maybe<Order_By>;
  price?: Maybe<Order_By>;
  product_code?: Maybe<Order_By>;
  quantity?: Maybe<Order_By>;
  status?: Maybe<Order_By>;
  substance_id?: Maybe<Order_By>;
  total_price?: Maybe<Order_By>;
  unit?: Maybe<Order_By>;
  warehouse_id?: Maybe<Order_By>;
  width?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Sales_Product_Draft_Min_Fields = {
  __typename?: 'sales_product_draft_min_fields';
  company_id?: Maybe<Scalars['uuid']>;
  company_name?: Maybe<Scalars['String']>;
  count?: Maybe<Scalars['numeric']>;
  delivered?: Maybe<Scalars['numeric']>;
  draft_id?: Maybe<Scalars['Int']>;
  heigth?: Maybe<Scalars['numeric']>;
  id?: Maybe<Scalars['uuid']>;
  label?: Maybe<Scalars['String']>;
  m2?: Maybe<Scalars['numeric']>;
  ml?: Maybe<Scalars['numeric']>;
  price?: Maybe<Scalars['numeric']>;
  product_code?: Maybe<Scalars['String']>;
  quantity?: Maybe<Scalars['numeric']>;
  status?: Maybe<Scalars['String']>;
  substance_id?: Maybe<Scalars['uuid']>;
  total_price?: Maybe<Scalars['numeric']>;
  unit?: Maybe<Scalars['String']>;
  warehouse_id?: Maybe<Scalars['uuid']>;
  width?: Maybe<Scalars['numeric']>;
};

/** order by min() on columns of table "sales.product_draft" */
export type Sales_Product_Draft_Min_Order_By = {
  company_id?: Maybe<Order_By>;
  company_name?: Maybe<Order_By>;
  count?: Maybe<Order_By>;
  delivered?: Maybe<Order_By>;
  draft_id?: Maybe<Order_By>;
  heigth?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  label?: Maybe<Order_By>;
  m2?: Maybe<Order_By>;
  ml?: Maybe<Order_By>;
  price?: Maybe<Order_By>;
  product_code?: Maybe<Order_By>;
  quantity?: Maybe<Order_By>;
  status?: Maybe<Order_By>;
  substance_id?: Maybe<Order_By>;
  total_price?: Maybe<Order_By>;
  unit?: Maybe<Order_By>;
  warehouse_id?: Maybe<Order_By>;
  width?: Maybe<Order_By>;
};

/** response of any mutation on the table "sales.product_draft" */
export type Sales_Product_Draft_Mutation_Response = {
  __typename?: 'sales_product_draft_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Sales_Product_Draft>;
};

/** input type for inserting object relation for remote table "sales.product_draft" */
export type Sales_Product_Draft_Obj_Rel_Insert_Input = {
  data: Sales_Product_Draft_Insert_Input;
  /** on conflict condition */
  on_conflict?: Maybe<Sales_Product_Draft_On_Conflict>;
};

/** on conflict condition type for table "sales.product_draft" */
export type Sales_Product_Draft_On_Conflict = {
  constraint: Sales_Product_Draft_Constraint;
  update_columns?: Array<Sales_Product_Draft_Update_Column>;
  where?: Maybe<Sales_Product_Draft_Bool_Exp>;
};

/** Ordering options when selecting data from "sales.product_draft". */
export type Sales_Product_Draft_Order_By = {
  accessory_draft?: Maybe<Sales_Accessory_Draft_Order_By>;
  company?: Maybe<Management_Company_Order_By>;
  company_id?: Maybe<Order_By>;
  company_name?: Maybe<Order_By>;
  consumable_draft?: Maybe<Sales_Consumable_Draft_Order_By>;
  count?: Maybe<Order_By>;
  delivered?: Maybe<Order_By>;
  delivery_lines_aggregate?: Maybe<Sales_Delivery_Line_Aggregate_Order_By>;
  draft?: Maybe<Sales_Draft_Order_By>;
  draft_id?: Maybe<Order_By>;
  glass_draft?: Maybe<Sales_Glass_Draft_Order_By>;
  heigth?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  isLaunched?: Maybe<Order_By>;
  isRepeated?: Maybe<Order_By>;
  label?: Maybe<Order_By>;
  m2?: Maybe<Order_By>;
  ml?: Maybe<Order_By>;
  order_delivery_status?: Maybe<Sales_Order_Delivery_Status_Order_By>;
  price?: Maybe<Order_By>;
  product?: Maybe<Product_Product_Order_By>;
  product_code?: Maybe<Order_By>;
  product_type?: Maybe<Sales_Product_Type_Order_By>;
  quantity?: Maybe<Order_By>;
  service_draft?: Maybe<Sales_Service_Draft_Order_By>;
  status?: Maybe<Order_By>;
  substance_id?: Maybe<Order_By>;
  total_price?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
  unit?: Maybe<Order_By>;
  warehouse_id?: Maybe<Order_By>;
  width?: Maybe<Order_By>;
};

/** primary key columns input for table: sales_product_draft */
export type Sales_Product_Draft_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "sales.product_draft" */
export enum Sales_Product_Draft_Select_Column {
  /** column name */
  CompanyId = 'company_id',
  /** column name */
  CompanyName = 'company_name',
  /** column name */
  Count = 'count',
  /** column name */
  Delivered = 'delivered',
  /** column name */
  DraftId = 'draft_id',
  /** column name */
  Heigth = 'heigth',
  /** column name */
  Id = 'id',
  /** column name */
  IsLaunched = 'isLaunched',
  /** column name */
  IsRepeated = 'isRepeated',
  /** column name */
  Label = 'label',
  /** column name */
  M2 = 'm2',
  /** column name */
  Ml = 'ml',
  /** column name */
  Price = 'price',
  /** column name */
  ProductCode = 'product_code',
  /** column name */
  Quantity = 'quantity',
  /** column name */
  Status = 'status',
  /** column name */
  SubstanceId = 'substance_id',
  /** column name */
  TotalPrice = 'total_price',
  /** column name */
  Type = 'type',
  /** column name */
  Unit = 'unit',
  /** column name */
  WarehouseId = 'warehouse_id',
  /** column name */
  Width = 'width'
}

/** input type for updating data in table "sales.product_draft" */
export type Sales_Product_Draft_Set_Input = {
  company_id?: Maybe<Scalars['uuid']>;
  company_name?: Maybe<Scalars['String']>;
  count?: Maybe<Scalars['numeric']>;
  delivered?: Maybe<Scalars['numeric']>;
  draft_id?: Maybe<Scalars['Int']>;
  heigth?: Maybe<Scalars['numeric']>;
  id?: Maybe<Scalars['uuid']>;
  isLaunched?: Maybe<Scalars['Boolean']>;
  isRepeated?: Maybe<Scalars['Boolean']>;
  label?: Maybe<Scalars['String']>;
  m2?: Maybe<Scalars['numeric']>;
  ml?: Maybe<Scalars['numeric']>;
  price?: Maybe<Scalars['numeric']>;
  product_code?: Maybe<Scalars['String']>;
  quantity?: Maybe<Scalars['numeric']>;
  status?: Maybe<Scalars['String']>;
  substance_id?: Maybe<Scalars['uuid']>;
  total_price?: Maybe<Scalars['numeric']>;
  type?: Maybe<Sales_Product_Type_Enum>;
  unit?: Maybe<Scalars['String']>;
  warehouse_id?: Maybe<Scalars['uuid']>;
  width?: Maybe<Scalars['numeric']>;
};

/** aggregate stddev on columns */
export type Sales_Product_Draft_Stddev_Fields = {
  __typename?: 'sales_product_draft_stddev_fields';
  count?: Maybe<Scalars['Float']>;
  delivered?: Maybe<Scalars['Float']>;
  draft_id?: Maybe<Scalars['Float']>;
  heigth?: Maybe<Scalars['Float']>;
  m2?: Maybe<Scalars['Float']>;
  ml?: Maybe<Scalars['Float']>;
  price?: Maybe<Scalars['Float']>;
  quantity?: Maybe<Scalars['Float']>;
  total_price?: Maybe<Scalars['Float']>;
  width?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "sales.product_draft" */
export type Sales_Product_Draft_Stddev_Order_By = {
  count?: Maybe<Order_By>;
  delivered?: Maybe<Order_By>;
  draft_id?: Maybe<Order_By>;
  heigth?: Maybe<Order_By>;
  m2?: Maybe<Order_By>;
  ml?: Maybe<Order_By>;
  price?: Maybe<Order_By>;
  quantity?: Maybe<Order_By>;
  total_price?: Maybe<Order_By>;
  width?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Sales_Product_Draft_Stddev_Pop_Fields = {
  __typename?: 'sales_product_draft_stddev_pop_fields';
  count?: Maybe<Scalars['Float']>;
  delivered?: Maybe<Scalars['Float']>;
  draft_id?: Maybe<Scalars['Float']>;
  heigth?: Maybe<Scalars['Float']>;
  m2?: Maybe<Scalars['Float']>;
  ml?: Maybe<Scalars['Float']>;
  price?: Maybe<Scalars['Float']>;
  quantity?: Maybe<Scalars['Float']>;
  total_price?: Maybe<Scalars['Float']>;
  width?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "sales.product_draft" */
export type Sales_Product_Draft_Stddev_Pop_Order_By = {
  count?: Maybe<Order_By>;
  delivered?: Maybe<Order_By>;
  draft_id?: Maybe<Order_By>;
  heigth?: Maybe<Order_By>;
  m2?: Maybe<Order_By>;
  ml?: Maybe<Order_By>;
  price?: Maybe<Order_By>;
  quantity?: Maybe<Order_By>;
  total_price?: Maybe<Order_By>;
  width?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Sales_Product_Draft_Stddev_Samp_Fields = {
  __typename?: 'sales_product_draft_stddev_samp_fields';
  count?: Maybe<Scalars['Float']>;
  delivered?: Maybe<Scalars['Float']>;
  draft_id?: Maybe<Scalars['Float']>;
  heigth?: Maybe<Scalars['Float']>;
  m2?: Maybe<Scalars['Float']>;
  ml?: Maybe<Scalars['Float']>;
  price?: Maybe<Scalars['Float']>;
  quantity?: Maybe<Scalars['Float']>;
  total_price?: Maybe<Scalars['Float']>;
  width?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "sales.product_draft" */
export type Sales_Product_Draft_Stddev_Samp_Order_By = {
  count?: Maybe<Order_By>;
  delivered?: Maybe<Order_By>;
  draft_id?: Maybe<Order_By>;
  heigth?: Maybe<Order_By>;
  m2?: Maybe<Order_By>;
  ml?: Maybe<Order_By>;
  price?: Maybe<Order_By>;
  quantity?: Maybe<Order_By>;
  total_price?: Maybe<Order_By>;
  width?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Sales_Product_Draft_Sum_Fields = {
  __typename?: 'sales_product_draft_sum_fields';
  count?: Maybe<Scalars['numeric']>;
  delivered?: Maybe<Scalars['numeric']>;
  draft_id?: Maybe<Scalars['Int']>;
  heigth?: Maybe<Scalars['numeric']>;
  m2?: Maybe<Scalars['numeric']>;
  ml?: Maybe<Scalars['numeric']>;
  price?: Maybe<Scalars['numeric']>;
  quantity?: Maybe<Scalars['numeric']>;
  total_price?: Maybe<Scalars['numeric']>;
  width?: Maybe<Scalars['numeric']>;
};

/** order by sum() on columns of table "sales.product_draft" */
export type Sales_Product_Draft_Sum_Order_By = {
  count?: Maybe<Order_By>;
  delivered?: Maybe<Order_By>;
  draft_id?: Maybe<Order_By>;
  heigth?: Maybe<Order_By>;
  m2?: Maybe<Order_By>;
  ml?: Maybe<Order_By>;
  price?: Maybe<Order_By>;
  quantity?: Maybe<Order_By>;
  total_price?: Maybe<Order_By>;
  width?: Maybe<Order_By>;
};

/** update columns of table "sales.product_draft" */
export enum Sales_Product_Draft_Update_Column {
  /** column name */
  CompanyId = 'company_id',
  /** column name */
  CompanyName = 'company_name',
  /** column name */
  Count = 'count',
  /** column name */
  Delivered = 'delivered',
  /** column name */
  DraftId = 'draft_id',
  /** column name */
  Heigth = 'heigth',
  /** column name */
  Id = 'id',
  /** column name */
  IsLaunched = 'isLaunched',
  /** column name */
  IsRepeated = 'isRepeated',
  /** column name */
  Label = 'label',
  /** column name */
  M2 = 'm2',
  /** column name */
  Ml = 'ml',
  /** column name */
  Price = 'price',
  /** column name */
  ProductCode = 'product_code',
  /** column name */
  Quantity = 'quantity',
  /** column name */
  Status = 'status',
  /** column name */
  SubstanceId = 'substance_id',
  /** column name */
  TotalPrice = 'total_price',
  /** column name */
  Type = 'type',
  /** column name */
  Unit = 'unit',
  /** column name */
  WarehouseId = 'warehouse_id',
  /** column name */
  Width = 'width'
}

/** aggregate var_pop on columns */
export type Sales_Product_Draft_Var_Pop_Fields = {
  __typename?: 'sales_product_draft_var_pop_fields';
  count?: Maybe<Scalars['Float']>;
  delivered?: Maybe<Scalars['Float']>;
  draft_id?: Maybe<Scalars['Float']>;
  heigth?: Maybe<Scalars['Float']>;
  m2?: Maybe<Scalars['Float']>;
  ml?: Maybe<Scalars['Float']>;
  price?: Maybe<Scalars['Float']>;
  quantity?: Maybe<Scalars['Float']>;
  total_price?: Maybe<Scalars['Float']>;
  width?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "sales.product_draft" */
export type Sales_Product_Draft_Var_Pop_Order_By = {
  count?: Maybe<Order_By>;
  delivered?: Maybe<Order_By>;
  draft_id?: Maybe<Order_By>;
  heigth?: Maybe<Order_By>;
  m2?: Maybe<Order_By>;
  ml?: Maybe<Order_By>;
  price?: Maybe<Order_By>;
  quantity?: Maybe<Order_By>;
  total_price?: Maybe<Order_By>;
  width?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Sales_Product_Draft_Var_Samp_Fields = {
  __typename?: 'sales_product_draft_var_samp_fields';
  count?: Maybe<Scalars['Float']>;
  delivered?: Maybe<Scalars['Float']>;
  draft_id?: Maybe<Scalars['Float']>;
  heigth?: Maybe<Scalars['Float']>;
  m2?: Maybe<Scalars['Float']>;
  ml?: Maybe<Scalars['Float']>;
  price?: Maybe<Scalars['Float']>;
  quantity?: Maybe<Scalars['Float']>;
  total_price?: Maybe<Scalars['Float']>;
  width?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "sales.product_draft" */
export type Sales_Product_Draft_Var_Samp_Order_By = {
  count?: Maybe<Order_By>;
  delivered?: Maybe<Order_By>;
  draft_id?: Maybe<Order_By>;
  heigth?: Maybe<Order_By>;
  m2?: Maybe<Order_By>;
  ml?: Maybe<Order_By>;
  price?: Maybe<Order_By>;
  quantity?: Maybe<Order_By>;
  total_price?: Maybe<Order_By>;
  width?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Sales_Product_Draft_Variance_Fields = {
  __typename?: 'sales_product_draft_variance_fields';
  count?: Maybe<Scalars['Float']>;
  delivered?: Maybe<Scalars['Float']>;
  draft_id?: Maybe<Scalars['Float']>;
  heigth?: Maybe<Scalars['Float']>;
  m2?: Maybe<Scalars['Float']>;
  ml?: Maybe<Scalars['Float']>;
  price?: Maybe<Scalars['Float']>;
  quantity?: Maybe<Scalars['Float']>;
  total_price?: Maybe<Scalars['Float']>;
  width?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "sales.product_draft" */
export type Sales_Product_Draft_Variance_Order_By = {
  count?: Maybe<Order_By>;
  delivered?: Maybe<Order_By>;
  draft_id?: Maybe<Order_By>;
  heigth?: Maybe<Order_By>;
  m2?: Maybe<Order_By>;
  ml?: Maybe<Order_By>;
  price?: Maybe<Order_By>;
  quantity?: Maybe<Order_By>;
  total_price?: Maybe<Order_By>;
  width?: Maybe<Order_By>;
};

/** columns and relationships of "sales.product_type" */
export type Sales_Product_Type = {
  __typename?: 'sales_product_type';
  key: Scalars['String'];
  /** An array relationship */
  product_drafts: Array<Sales_Product_Draft>;
  /** An aggregate relationship */
  product_drafts_aggregate: Sales_Product_Draft_Aggregate;
  type: Scalars['String'];
};


/** columns and relationships of "sales.product_type" */
export type Sales_Product_TypeProduct_DraftsArgs = {
  distinct_on?: Maybe<Array<Sales_Product_Draft_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Product_Draft_Order_By>>;
  where?: Maybe<Sales_Product_Draft_Bool_Exp>;
};


/** columns and relationships of "sales.product_type" */
export type Sales_Product_TypeProduct_Drafts_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Product_Draft_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Product_Draft_Order_By>>;
  where?: Maybe<Sales_Product_Draft_Bool_Exp>;
};

/** aggregated selection of "sales.product_type" */
export type Sales_Product_Type_Aggregate = {
  __typename?: 'sales_product_type_aggregate';
  aggregate?: Maybe<Sales_Product_Type_Aggregate_Fields>;
  nodes: Array<Sales_Product_Type>;
};

/** aggregate fields of "sales.product_type" */
export type Sales_Product_Type_Aggregate_Fields = {
  __typename?: 'sales_product_type_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Sales_Product_Type_Max_Fields>;
  min?: Maybe<Sales_Product_Type_Min_Fields>;
};


/** aggregate fields of "sales.product_type" */
export type Sales_Product_Type_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Sales_Product_Type_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** Boolean expression to filter rows from the table "sales.product_type". All fields are combined with a logical 'AND'. */
export type Sales_Product_Type_Bool_Exp = {
  _and?: Maybe<Array<Sales_Product_Type_Bool_Exp>>;
  _not?: Maybe<Sales_Product_Type_Bool_Exp>;
  _or?: Maybe<Array<Sales_Product_Type_Bool_Exp>>;
  key?: Maybe<String_Comparison_Exp>;
  product_drafts?: Maybe<Sales_Product_Draft_Bool_Exp>;
  type?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "sales.product_type" */
export enum Sales_Product_Type_Constraint {
  /** unique or primary key constraint */
  ProductTypeKeyKey = 'product_type_key_key',
  /** unique or primary key constraint */
  ProductTypePkey = 'product_type_pkey'
}

export enum Sales_Product_Type_Enum {
  /** accessory */
  Accessoire = 'Accessoire',
  /** customerProduct */
  ArticleClient = 'Article_Client',
  /** consumable */
  Consommable = 'Consommable',
  /** service */
  Service = 'Service',
  /** glass */
  Verre = 'Verre'
}

/** Boolean expression to compare columns of type "sales_product_type_enum". All fields are combined with logical 'AND'. */
export type Sales_Product_Type_Enum_Comparison_Exp = {
  _eq?: Maybe<Sales_Product_Type_Enum>;
  _in?: Maybe<Array<Sales_Product_Type_Enum>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _neq?: Maybe<Sales_Product_Type_Enum>;
  _nin?: Maybe<Array<Sales_Product_Type_Enum>>;
};

/** input type for inserting data into table "sales.product_type" */
export type Sales_Product_Type_Insert_Input = {
  key?: Maybe<Scalars['String']>;
  product_drafts?: Maybe<Sales_Product_Draft_Arr_Rel_Insert_Input>;
  type?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Sales_Product_Type_Max_Fields = {
  __typename?: 'sales_product_type_max_fields';
  key?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type Sales_Product_Type_Min_Fields = {
  __typename?: 'sales_product_type_min_fields';
  key?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

/** response of any mutation on the table "sales.product_type" */
export type Sales_Product_Type_Mutation_Response = {
  __typename?: 'sales_product_type_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Sales_Product_Type>;
};

/** input type for inserting object relation for remote table "sales.product_type" */
export type Sales_Product_Type_Obj_Rel_Insert_Input = {
  data: Sales_Product_Type_Insert_Input;
  /** on conflict condition */
  on_conflict?: Maybe<Sales_Product_Type_On_Conflict>;
};

/** on conflict condition type for table "sales.product_type" */
export type Sales_Product_Type_On_Conflict = {
  constraint: Sales_Product_Type_Constraint;
  update_columns?: Array<Sales_Product_Type_Update_Column>;
  where?: Maybe<Sales_Product_Type_Bool_Exp>;
};

/** Ordering options when selecting data from "sales.product_type". */
export type Sales_Product_Type_Order_By = {
  key?: Maybe<Order_By>;
  product_drafts_aggregate?: Maybe<Sales_Product_Draft_Aggregate_Order_By>;
  type?: Maybe<Order_By>;
};

/** primary key columns input for table: sales_product_type */
export type Sales_Product_Type_Pk_Columns_Input = {
  type: Scalars['String'];
};

/** select columns of table "sales.product_type" */
export enum Sales_Product_Type_Select_Column {
  /** column name */
  Key = 'key',
  /** column name */
  Type = 'type'
}

/** input type for updating data in table "sales.product_type" */
export type Sales_Product_Type_Set_Input = {
  key?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

/** update columns of table "sales.product_type" */
export enum Sales_Product_Type_Update_Column {
  /** column name */
  Key = 'key',
  /** column name */
  Type = 'type'
}

/** columns and relationships of "sales.quotation" */
export type Sales_Quotation = {
  __typename?: 'sales_quotation';
  /** An object relationship */
  company: Management_Company;
  company_id: Scalars['uuid'];
  contact_id?: Maybe<Scalars['uuid']>;
  /** An object relationship */
  customer: Contact_Customer;
  customer_id: Scalars['uuid'];
  date: Scalars['date'];
  deadline: Scalars['date'];
  /** An object relationship */
  draft: Sales_Draft;
  draft_id: Scalars['Int'];
  id: Scalars['Int'];
  /** An object relationship */
  order?: Maybe<Sales_Order>;
  order_id?: Maybe<Scalars['Int']>;
  /** An object relationship */
  quotation_status: Sales_Quotation_Status;
  ref?: Maybe<Scalars['String']>;
  ref_num?: Maybe<Scalars['Int']>;
  /** An object relationship */
  salepoint: Management_SalesPoint;
  salepoint_id: Scalars['uuid'];
  status: Scalars['String'];
  total_ht: Scalars['numeric'];
  total_tax: Scalars['numeric'];
  total_ttc: Scalars['numeric'];
};

/** aggregated selection of "sales.quotation" */
export type Sales_Quotation_Aggregate = {
  __typename?: 'sales_quotation_aggregate';
  aggregate?: Maybe<Sales_Quotation_Aggregate_Fields>;
  nodes: Array<Sales_Quotation>;
};

/** aggregate fields of "sales.quotation" */
export type Sales_Quotation_Aggregate_Fields = {
  __typename?: 'sales_quotation_aggregate_fields';
  avg?: Maybe<Sales_Quotation_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Sales_Quotation_Max_Fields>;
  min?: Maybe<Sales_Quotation_Min_Fields>;
  stddev?: Maybe<Sales_Quotation_Stddev_Fields>;
  stddev_pop?: Maybe<Sales_Quotation_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Sales_Quotation_Stddev_Samp_Fields>;
  sum?: Maybe<Sales_Quotation_Sum_Fields>;
  var_pop?: Maybe<Sales_Quotation_Var_Pop_Fields>;
  var_samp?: Maybe<Sales_Quotation_Var_Samp_Fields>;
  variance?: Maybe<Sales_Quotation_Variance_Fields>;
};


/** aggregate fields of "sales.quotation" */
export type Sales_Quotation_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Sales_Quotation_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "sales.quotation" */
export type Sales_Quotation_Aggregate_Order_By = {
  avg?: Maybe<Sales_Quotation_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Sales_Quotation_Max_Order_By>;
  min?: Maybe<Sales_Quotation_Min_Order_By>;
  stddev?: Maybe<Sales_Quotation_Stddev_Order_By>;
  stddev_pop?: Maybe<Sales_Quotation_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Sales_Quotation_Stddev_Samp_Order_By>;
  sum?: Maybe<Sales_Quotation_Sum_Order_By>;
  var_pop?: Maybe<Sales_Quotation_Var_Pop_Order_By>;
  var_samp?: Maybe<Sales_Quotation_Var_Samp_Order_By>;
  variance?: Maybe<Sales_Quotation_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "sales.quotation" */
export type Sales_Quotation_Arr_Rel_Insert_Input = {
  data: Array<Sales_Quotation_Insert_Input>;
  /** on conflict condition */
  on_conflict?: Maybe<Sales_Quotation_On_Conflict>;
};

/** aggregate avg on columns */
export type Sales_Quotation_Avg_Fields = {
  __typename?: 'sales_quotation_avg_fields';
  draft_id?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  order_id?: Maybe<Scalars['Float']>;
  ref_num?: Maybe<Scalars['Float']>;
  total_ht?: Maybe<Scalars['Float']>;
  total_tax?: Maybe<Scalars['Float']>;
  total_ttc?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "sales.quotation" */
export type Sales_Quotation_Avg_Order_By = {
  draft_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  order_id?: Maybe<Order_By>;
  ref_num?: Maybe<Order_By>;
  total_ht?: Maybe<Order_By>;
  total_tax?: Maybe<Order_By>;
  total_ttc?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "sales.quotation". All fields are combined with a logical 'AND'. */
export type Sales_Quotation_Bool_Exp = {
  _and?: Maybe<Array<Sales_Quotation_Bool_Exp>>;
  _not?: Maybe<Sales_Quotation_Bool_Exp>;
  _or?: Maybe<Array<Sales_Quotation_Bool_Exp>>;
  company?: Maybe<Management_Company_Bool_Exp>;
  company_id?: Maybe<Uuid_Comparison_Exp>;
  contact_id?: Maybe<Uuid_Comparison_Exp>;
  customer?: Maybe<Contact_Customer_Bool_Exp>;
  customer_id?: Maybe<Uuid_Comparison_Exp>;
  date?: Maybe<Date_Comparison_Exp>;
  deadline?: Maybe<Date_Comparison_Exp>;
  draft?: Maybe<Sales_Draft_Bool_Exp>;
  draft_id?: Maybe<Int_Comparison_Exp>;
  id?: Maybe<Int_Comparison_Exp>;
  order?: Maybe<Sales_Order_Bool_Exp>;
  order_id?: Maybe<Int_Comparison_Exp>;
  quotation_status?: Maybe<Sales_Quotation_Status_Bool_Exp>;
  ref?: Maybe<String_Comparison_Exp>;
  ref_num?: Maybe<Int_Comparison_Exp>;
  salepoint?: Maybe<Management_SalesPoint_Bool_Exp>;
  salepoint_id?: Maybe<Uuid_Comparison_Exp>;
  status?: Maybe<String_Comparison_Exp>;
  total_ht?: Maybe<Numeric_Comparison_Exp>;
  total_tax?: Maybe<Numeric_Comparison_Exp>;
  total_ttc?: Maybe<Numeric_Comparison_Exp>;
};

/** unique or primary key constraints on table "sales.quotation" */
export enum Sales_Quotation_Constraint {
  /** unique or primary key constraint */
  QuotationDraftIdKey = 'quotation_draft_id_key',
  /** unique or primary key constraint */
  QuotationOrderIdKey = 'quotation_order_id_key',
  /** unique or primary key constraint */
  QuotationPkey = 'quotation_pkey'
}

/** input type for incrementing numeric columns in table "sales.quotation" */
export type Sales_Quotation_Inc_Input = {
  draft_id?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['Int']>;
  order_id?: Maybe<Scalars['Int']>;
  ref_num?: Maybe<Scalars['Int']>;
  total_ht?: Maybe<Scalars['numeric']>;
  total_tax?: Maybe<Scalars['numeric']>;
  total_ttc?: Maybe<Scalars['numeric']>;
};

/** input type for inserting data into table "sales.quotation" */
export type Sales_Quotation_Insert_Input = {
  company?: Maybe<Management_Company_Obj_Rel_Insert_Input>;
  company_id?: Maybe<Scalars['uuid']>;
  contact_id?: Maybe<Scalars['uuid']>;
  customer?: Maybe<Contact_Customer_Obj_Rel_Insert_Input>;
  customer_id?: Maybe<Scalars['uuid']>;
  date?: Maybe<Scalars['date']>;
  deadline?: Maybe<Scalars['date']>;
  draft?: Maybe<Sales_Draft_Obj_Rel_Insert_Input>;
  draft_id?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Sales_Order_Obj_Rel_Insert_Input>;
  order_id?: Maybe<Scalars['Int']>;
  quotation_status?: Maybe<Sales_Quotation_Status_Obj_Rel_Insert_Input>;
  ref?: Maybe<Scalars['String']>;
  ref_num?: Maybe<Scalars['Int']>;
  salepoint?: Maybe<Management_SalesPoint_Obj_Rel_Insert_Input>;
  salepoint_id?: Maybe<Scalars['uuid']>;
  status?: Maybe<Scalars['String']>;
  total_ht?: Maybe<Scalars['numeric']>;
  total_tax?: Maybe<Scalars['numeric']>;
  total_ttc?: Maybe<Scalars['numeric']>;
};

/** aggregate max on columns */
export type Sales_Quotation_Max_Fields = {
  __typename?: 'sales_quotation_max_fields';
  company_id?: Maybe<Scalars['uuid']>;
  contact_id?: Maybe<Scalars['uuid']>;
  customer_id?: Maybe<Scalars['uuid']>;
  date?: Maybe<Scalars['date']>;
  deadline?: Maybe<Scalars['date']>;
  draft_id?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['Int']>;
  order_id?: Maybe<Scalars['Int']>;
  ref?: Maybe<Scalars['String']>;
  ref_num?: Maybe<Scalars['Int']>;
  salepoint_id?: Maybe<Scalars['uuid']>;
  status?: Maybe<Scalars['String']>;
  total_ht?: Maybe<Scalars['numeric']>;
  total_tax?: Maybe<Scalars['numeric']>;
  total_ttc?: Maybe<Scalars['numeric']>;
};

/** order by max() on columns of table "sales.quotation" */
export type Sales_Quotation_Max_Order_By = {
  company_id?: Maybe<Order_By>;
  contact_id?: Maybe<Order_By>;
  customer_id?: Maybe<Order_By>;
  date?: Maybe<Order_By>;
  deadline?: Maybe<Order_By>;
  draft_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  order_id?: Maybe<Order_By>;
  ref?: Maybe<Order_By>;
  ref_num?: Maybe<Order_By>;
  salepoint_id?: Maybe<Order_By>;
  status?: Maybe<Order_By>;
  total_ht?: Maybe<Order_By>;
  total_tax?: Maybe<Order_By>;
  total_ttc?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Sales_Quotation_Min_Fields = {
  __typename?: 'sales_quotation_min_fields';
  company_id?: Maybe<Scalars['uuid']>;
  contact_id?: Maybe<Scalars['uuid']>;
  customer_id?: Maybe<Scalars['uuid']>;
  date?: Maybe<Scalars['date']>;
  deadline?: Maybe<Scalars['date']>;
  draft_id?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['Int']>;
  order_id?: Maybe<Scalars['Int']>;
  ref?: Maybe<Scalars['String']>;
  ref_num?: Maybe<Scalars['Int']>;
  salepoint_id?: Maybe<Scalars['uuid']>;
  status?: Maybe<Scalars['String']>;
  total_ht?: Maybe<Scalars['numeric']>;
  total_tax?: Maybe<Scalars['numeric']>;
  total_ttc?: Maybe<Scalars['numeric']>;
};

/** order by min() on columns of table "sales.quotation" */
export type Sales_Quotation_Min_Order_By = {
  company_id?: Maybe<Order_By>;
  contact_id?: Maybe<Order_By>;
  customer_id?: Maybe<Order_By>;
  date?: Maybe<Order_By>;
  deadline?: Maybe<Order_By>;
  draft_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  order_id?: Maybe<Order_By>;
  ref?: Maybe<Order_By>;
  ref_num?: Maybe<Order_By>;
  salepoint_id?: Maybe<Order_By>;
  status?: Maybe<Order_By>;
  total_ht?: Maybe<Order_By>;
  total_tax?: Maybe<Order_By>;
  total_ttc?: Maybe<Order_By>;
};

/** response of any mutation on the table "sales.quotation" */
export type Sales_Quotation_Mutation_Response = {
  __typename?: 'sales_quotation_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Sales_Quotation>;
};

/** input type for inserting object relation for remote table "sales.quotation" */
export type Sales_Quotation_Obj_Rel_Insert_Input = {
  data: Sales_Quotation_Insert_Input;
  /** on conflict condition */
  on_conflict?: Maybe<Sales_Quotation_On_Conflict>;
};

/** on conflict condition type for table "sales.quotation" */
export type Sales_Quotation_On_Conflict = {
  constraint: Sales_Quotation_Constraint;
  update_columns?: Array<Sales_Quotation_Update_Column>;
  where?: Maybe<Sales_Quotation_Bool_Exp>;
};

/** Ordering options when selecting data from "sales.quotation". */
export type Sales_Quotation_Order_By = {
  company?: Maybe<Management_Company_Order_By>;
  company_id?: Maybe<Order_By>;
  contact_id?: Maybe<Order_By>;
  customer?: Maybe<Contact_Customer_Order_By>;
  customer_id?: Maybe<Order_By>;
  date?: Maybe<Order_By>;
  deadline?: Maybe<Order_By>;
  draft?: Maybe<Sales_Draft_Order_By>;
  draft_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  order?: Maybe<Sales_Order_Order_By>;
  order_id?: Maybe<Order_By>;
  quotation_status?: Maybe<Sales_Quotation_Status_Order_By>;
  ref?: Maybe<Order_By>;
  ref_num?: Maybe<Order_By>;
  salepoint?: Maybe<Management_SalesPoint_Order_By>;
  salepoint_id?: Maybe<Order_By>;
  status?: Maybe<Order_By>;
  total_ht?: Maybe<Order_By>;
  total_tax?: Maybe<Order_By>;
  total_ttc?: Maybe<Order_By>;
};

/** primary key columns input for table: sales_quotation */
export type Sales_Quotation_Pk_Columns_Input = {
  id: Scalars['Int'];
};

/** select columns of table "sales.quotation" */
export enum Sales_Quotation_Select_Column {
  /** column name */
  CompanyId = 'company_id',
  /** column name */
  ContactId = 'contact_id',
  /** column name */
  CustomerId = 'customer_id',
  /** column name */
  Date = 'date',
  /** column name */
  Deadline = 'deadline',
  /** column name */
  DraftId = 'draft_id',
  /** column name */
  Id = 'id',
  /** column name */
  OrderId = 'order_id',
  /** column name */
  Ref = 'ref',
  /** column name */
  RefNum = 'ref_num',
  /** column name */
  SalepointId = 'salepoint_id',
  /** column name */
  Status = 'status',
  /** column name */
  TotalHt = 'total_ht',
  /** column name */
  TotalTax = 'total_tax',
  /** column name */
  TotalTtc = 'total_ttc'
}

/** input type for updating data in table "sales.quotation" */
export type Sales_Quotation_Set_Input = {
  company_id?: Maybe<Scalars['uuid']>;
  contact_id?: Maybe<Scalars['uuid']>;
  customer_id?: Maybe<Scalars['uuid']>;
  date?: Maybe<Scalars['date']>;
  deadline?: Maybe<Scalars['date']>;
  draft_id?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['Int']>;
  order_id?: Maybe<Scalars['Int']>;
  ref?: Maybe<Scalars['String']>;
  ref_num?: Maybe<Scalars['Int']>;
  salepoint_id?: Maybe<Scalars['uuid']>;
  status?: Maybe<Scalars['String']>;
  total_ht?: Maybe<Scalars['numeric']>;
  total_tax?: Maybe<Scalars['numeric']>;
  total_ttc?: Maybe<Scalars['numeric']>;
};

/** columns and relationships of "sales.quotation_status" */
export type Sales_Quotation_Status = {
  __typename?: 'sales_quotation_status';
  key: Scalars['String'];
  /** An array relationship */
  quotations: Array<Sales_Quotation>;
  /** An aggregate relationship */
  quotations_aggregate: Sales_Quotation_Aggregate;
  value: Scalars['String'];
};


/** columns and relationships of "sales.quotation_status" */
export type Sales_Quotation_StatusQuotationsArgs = {
  distinct_on?: Maybe<Array<Sales_Quotation_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Quotation_Order_By>>;
  where?: Maybe<Sales_Quotation_Bool_Exp>;
};


/** columns and relationships of "sales.quotation_status" */
export type Sales_Quotation_StatusQuotations_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Quotation_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Quotation_Order_By>>;
  where?: Maybe<Sales_Quotation_Bool_Exp>;
};

/** aggregated selection of "sales.quotation_status" */
export type Sales_Quotation_Status_Aggregate = {
  __typename?: 'sales_quotation_status_aggregate';
  aggregate?: Maybe<Sales_Quotation_Status_Aggregate_Fields>;
  nodes: Array<Sales_Quotation_Status>;
};

/** aggregate fields of "sales.quotation_status" */
export type Sales_Quotation_Status_Aggregate_Fields = {
  __typename?: 'sales_quotation_status_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Sales_Quotation_Status_Max_Fields>;
  min?: Maybe<Sales_Quotation_Status_Min_Fields>;
};


/** aggregate fields of "sales.quotation_status" */
export type Sales_Quotation_Status_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Sales_Quotation_Status_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** Boolean expression to filter rows from the table "sales.quotation_status". All fields are combined with a logical 'AND'. */
export type Sales_Quotation_Status_Bool_Exp = {
  _and?: Maybe<Array<Sales_Quotation_Status_Bool_Exp>>;
  _not?: Maybe<Sales_Quotation_Status_Bool_Exp>;
  _or?: Maybe<Array<Sales_Quotation_Status_Bool_Exp>>;
  key?: Maybe<String_Comparison_Exp>;
  quotations?: Maybe<Sales_Quotation_Bool_Exp>;
  value?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "sales.quotation_status" */
export enum Sales_Quotation_Status_Constraint {
  /** unique or primary key constraint */
  QuotationStatusPkey = 'quotation_status_pkey',
  /** unique or primary key constraint */
  QuotationStatusValueKey = 'quotation_status_value_key'
}

/** input type for inserting data into table "sales.quotation_status" */
export type Sales_Quotation_Status_Insert_Input = {
  key?: Maybe<Scalars['String']>;
  quotations?: Maybe<Sales_Quotation_Arr_Rel_Insert_Input>;
  value?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Sales_Quotation_Status_Max_Fields = {
  __typename?: 'sales_quotation_status_max_fields';
  key?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type Sales_Quotation_Status_Min_Fields = {
  __typename?: 'sales_quotation_status_min_fields';
  key?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/** response of any mutation on the table "sales.quotation_status" */
export type Sales_Quotation_Status_Mutation_Response = {
  __typename?: 'sales_quotation_status_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Sales_Quotation_Status>;
};

/** input type for inserting object relation for remote table "sales.quotation_status" */
export type Sales_Quotation_Status_Obj_Rel_Insert_Input = {
  data: Sales_Quotation_Status_Insert_Input;
  /** on conflict condition */
  on_conflict?: Maybe<Sales_Quotation_Status_On_Conflict>;
};

/** on conflict condition type for table "sales.quotation_status" */
export type Sales_Quotation_Status_On_Conflict = {
  constraint: Sales_Quotation_Status_Constraint;
  update_columns?: Array<Sales_Quotation_Status_Update_Column>;
  where?: Maybe<Sales_Quotation_Status_Bool_Exp>;
};

/** Ordering options when selecting data from "sales.quotation_status". */
export type Sales_Quotation_Status_Order_By = {
  key?: Maybe<Order_By>;
  quotations_aggregate?: Maybe<Sales_Quotation_Aggregate_Order_By>;
  value?: Maybe<Order_By>;
};

/** primary key columns input for table: sales_quotation_status */
export type Sales_Quotation_Status_Pk_Columns_Input = {
  key: Scalars['String'];
};

/** select columns of table "sales.quotation_status" */
export enum Sales_Quotation_Status_Select_Column {
  /** column name */
  Key = 'key',
  /** column name */
  Value = 'value'
}

/** input type for updating data in table "sales.quotation_status" */
export type Sales_Quotation_Status_Set_Input = {
  key?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/** update columns of table "sales.quotation_status" */
export enum Sales_Quotation_Status_Update_Column {
  /** column name */
  Key = 'key',
  /** column name */
  Value = 'value'
}

/** aggregate stddev on columns */
export type Sales_Quotation_Stddev_Fields = {
  __typename?: 'sales_quotation_stddev_fields';
  draft_id?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  order_id?: Maybe<Scalars['Float']>;
  ref_num?: Maybe<Scalars['Float']>;
  total_ht?: Maybe<Scalars['Float']>;
  total_tax?: Maybe<Scalars['Float']>;
  total_ttc?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "sales.quotation" */
export type Sales_Quotation_Stddev_Order_By = {
  draft_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  order_id?: Maybe<Order_By>;
  ref_num?: Maybe<Order_By>;
  total_ht?: Maybe<Order_By>;
  total_tax?: Maybe<Order_By>;
  total_ttc?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Sales_Quotation_Stddev_Pop_Fields = {
  __typename?: 'sales_quotation_stddev_pop_fields';
  draft_id?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  order_id?: Maybe<Scalars['Float']>;
  ref_num?: Maybe<Scalars['Float']>;
  total_ht?: Maybe<Scalars['Float']>;
  total_tax?: Maybe<Scalars['Float']>;
  total_ttc?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "sales.quotation" */
export type Sales_Quotation_Stddev_Pop_Order_By = {
  draft_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  order_id?: Maybe<Order_By>;
  ref_num?: Maybe<Order_By>;
  total_ht?: Maybe<Order_By>;
  total_tax?: Maybe<Order_By>;
  total_ttc?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Sales_Quotation_Stddev_Samp_Fields = {
  __typename?: 'sales_quotation_stddev_samp_fields';
  draft_id?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  order_id?: Maybe<Scalars['Float']>;
  ref_num?: Maybe<Scalars['Float']>;
  total_ht?: Maybe<Scalars['Float']>;
  total_tax?: Maybe<Scalars['Float']>;
  total_ttc?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "sales.quotation" */
export type Sales_Quotation_Stddev_Samp_Order_By = {
  draft_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  order_id?: Maybe<Order_By>;
  ref_num?: Maybe<Order_By>;
  total_ht?: Maybe<Order_By>;
  total_tax?: Maybe<Order_By>;
  total_ttc?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Sales_Quotation_Sum_Fields = {
  __typename?: 'sales_quotation_sum_fields';
  draft_id?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['Int']>;
  order_id?: Maybe<Scalars['Int']>;
  ref_num?: Maybe<Scalars['Int']>;
  total_ht?: Maybe<Scalars['numeric']>;
  total_tax?: Maybe<Scalars['numeric']>;
  total_ttc?: Maybe<Scalars['numeric']>;
};

/** order by sum() on columns of table "sales.quotation" */
export type Sales_Quotation_Sum_Order_By = {
  draft_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  order_id?: Maybe<Order_By>;
  ref_num?: Maybe<Order_By>;
  total_ht?: Maybe<Order_By>;
  total_tax?: Maybe<Order_By>;
  total_ttc?: Maybe<Order_By>;
};

/** update columns of table "sales.quotation" */
export enum Sales_Quotation_Update_Column {
  /** column name */
  CompanyId = 'company_id',
  /** column name */
  ContactId = 'contact_id',
  /** column name */
  CustomerId = 'customer_id',
  /** column name */
  Date = 'date',
  /** column name */
  Deadline = 'deadline',
  /** column name */
  DraftId = 'draft_id',
  /** column name */
  Id = 'id',
  /** column name */
  OrderId = 'order_id',
  /** column name */
  Ref = 'ref',
  /** column name */
  RefNum = 'ref_num',
  /** column name */
  SalepointId = 'salepoint_id',
  /** column name */
  Status = 'status',
  /** column name */
  TotalHt = 'total_ht',
  /** column name */
  TotalTax = 'total_tax',
  /** column name */
  TotalTtc = 'total_ttc'
}

/** aggregate var_pop on columns */
export type Sales_Quotation_Var_Pop_Fields = {
  __typename?: 'sales_quotation_var_pop_fields';
  draft_id?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  order_id?: Maybe<Scalars['Float']>;
  ref_num?: Maybe<Scalars['Float']>;
  total_ht?: Maybe<Scalars['Float']>;
  total_tax?: Maybe<Scalars['Float']>;
  total_ttc?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "sales.quotation" */
export type Sales_Quotation_Var_Pop_Order_By = {
  draft_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  order_id?: Maybe<Order_By>;
  ref_num?: Maybe<Order_By>;
  total_ht?: Maybe<Order_By>;
  total_tax?: Maybe<Order_By>;
  total_ttc?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Sales_Quotation_Var_Samp_Fields = {
  __typename?: 'sales_quotation_var_samp_fields';
  draft_id?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  order_id?: Maybe<Scalars['Float']>;
  ref_num?: Maybe<Scalars['Float']>;
  total_ht?: Maybe<Scalars['Float']>;
  total_tax?: Maybe<Scalars['Float']>;
  total_ttc?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "sales.quotation" */
export type Sales_Quotation_Var_Samp_Order_By = {
  draft_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  order_id?: Maybe<Order_By>;
  ref_num?: Maybe<Order_By>;
  total_ht?: Maybe<Order_By>;
  total_tax?: Maybe<Order_By>;
  total_ttc?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Sales_Quotation_Variance_Fields = {
  __typename?: 'sales_quotation_variance_fields';
  draft_id?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  order_id?: Maybe<Scalars['Float']>;
  ref_num?: Maybe<Scalars['Float']>;
  total_ht?: Maybe<Scalars['Float']>;
  total_tax?: Maybe<Scalars['Float']>;
  total_ttc?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "sales.quotation" */
export type Sales_Quotation_Variance_Order_By = {
  draft_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  order_id?: Maybe<Order_By>;
  ref_num?: Maybe<Order_By>;
  total_ht?: Maybe<Order_By>;
  total_tax?: Maybe<Order_By>;
  total_ttc?: Maybe<Order_By>;
};

/** columns and relationships of "sales.service_draft" */
export type Sales_Service_Draft = {
  __typename?: 'sales_service_draft';
  dependent_id?: Maybe<Scalars['uuid']>;
  /** An object relationship */
  glass_draft?: Maybe<Sales_Glass_Draft>;
  id: Scalars['uuid'];
  labelFactory?: Maybe<Scalars['String']>;
  /** An array relationship */
  manufacturing_services: Array<Manufacturing_Manufacturing_Service>;
  /** An aggregate relationship */
  manufacturing_services_aggregate: Manufacturing_Manufacturing_Service_Aggregate;
  /** An object relationship */
  product_draft: Sales_Product_Draft;
  productdraft_id: Scalars['uuid'];
};


/** columns and relationships of "sales.service_draft" */
export type Sales_Service_DraftManufacturing_ServicesArgs = {
  distinct_on?: Maybe<Array<Manufacturing_Manufacturing_Service_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Manufacturing_Manufacturing_Service_Order_By>>;
  where?: Maybe<Manufacturing_Manufacturing_Service_Bool_Exp>;
};


/** columns and relationships of "sales.service_draft" */
export type Sales_Service_DraftManufacturing_Services_AggregateArgs = {
  distinct_on?: Maybe<Array<Manufacturing_Manufacturing_Service_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Manufacturing_Manufacturing_Service_Order_By>>;
  where?: Maybe<Manufacturing_Manufacturing_Service_Bool_Exp>;
};

/** aggregated selection of "sales.service_draft" */
export type Sales_Service_Draft_Aggregate = {
  __typename?: 'sales_service_draft_aggregate';
  aggregate?: Maybe<Sales_Service_Draft_Aggregate_Fields>;
  nodes: Array<Sales_Service_Draft>;
};

/** aggregate fields of "sales.service_draft" */
export type Sales_Service_Draft_Aggregate_Fields = {
  __typename?: 'sales_service_draft_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Sales_Service_Draft_Max_Fields>;
  min?: Maybe<Sales_Service_Draft_Min_Fields>;
};


/** aggregate fields of "sales.service_draft" */
export type Sales_Service_Draft_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Sales_Service_Draft_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "sales.service_draft" */
export type Sales_Service_Draft_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Sales_Service_Draft_Max_Order_By>;
  min?: Maybe<Sales_Service_Draft_Min_Order_By>;
};

/** input type for inserting array relation for remote table "sales.service_draft" */
export type Sales_Service_Draft_Arr_Rel_Insert_Input = {
  data: Array<Sales_Service_Draft_Insert_Input>;
  /** on conflict condition */
  on_conflict?: Maybe<Sales_Service_Draft_On_Conflict>;
};

/** Boolean expression to filter rows from the table "sales.service_draft". All fields are combined with a logical 'AND'. */
export type Sales_Service_Draft_Bool_Exp = {
  _and?: Maybe<Array<Sales_Service_Draft_Bool_Exp>>;
  _not?: Maybe<Sales_Service_Draft_Bool_Exp>;
  _or?: Maybe<Array<Sales_Service_Draft_Bool_Exp>>;
  dependent_id?: Maybe<Uuid_Comparison_Exp>;
  glass_draft?: Maybe<Sales_Glass_Draft_Bool_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  labelFactory?: Maybe<String_Comparison_Exp>;
  manufacturing_services?: Maybe<Manufacturing_Manufacturing_Service_Bool_Exp>;
  product_draft?: Maybe<Sales_Product_Draft_Bool_Exp>;
  productdraft_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "sales.service_draft" */
export enum Sales_Service_Draft_Constraint {
  /** unique or primary key constraint */
  ServiceDraftPkey = 'service_draft_pkey',
  /** unique or primary key constraint */
  ServiceDraftProductdraftIdKey = 'service_draft_productdraft_id_key'
}

/** input type for inserting data into table "sales.service_draft" */
export type Sales_Service_Draft_Insert_Input = {
  dependent_id?: Maybe<Scalars['uuid']>;
  glass_draft?: Maybe<Sales_Glass_Draft_Obj_Rel_Insert_Input>;
  id?: Maybe<Scalars['uuid']>;
  labelFactory?: Maybe<Scalars['String']>;
  manufacturing_services?: Maybe<Manufacturing_Manufacturing_Service_Arr_Rel_Insert_Input>;
  product_draft?: Maybe<Sales_Product_Draft_Obj_Rel_Insert_Input>;
  productdraft_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Sales_Service_Draft_Max_Fields = {
  __typename?: 'sales_service_draft_max_fields';
  dependent_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  labelFactory?: Maybe<Scalars['String']>;
  productdraft_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "sales.service_draft" */
export type Sales_Service_Draft_Max_Order_By = {
  dependent_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  labelFactory?: Maybe<Order_By>;
  productdraft_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Sales_Service_Draft_Min_Fields = {
  __typename?: 'sales_service_draft_min_fields';
  dependent_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  labelFactory?: Maybe<Scalars['String']>;
  productdraft_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "sales.service_draft" */
export type Sales_Service_Draft_Min_Order_By = {
  dependent_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  labelFactory?: Maybe<Order_By>;
  productdraft_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "sales.service_draft" */
export type Sales_Service_Draft_Mutation_Response = {
  __typename?: 'sales_service_draft_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Sales_Service_Draft>;
};

/** input type for inserting object relation for remote table "sales.service_draft" */
export type Sales_Service_Draft_Obj_Rel_Insert_Input = {
  data: Sales_Service_Draft_Insert_Input;
  /** on conflict condition */
  on_conflict?: Maybe<Sales_Service_Draft_On_Conflict>;
};

/** on conflict condition type for table "sales.service_draft" */
export type Sales_Service_Draft_On_Conflict = {
  constraint: Sales_Service_Draft_Constraint;
  update_columns?: Array<Sales_Service_Draft_Update_Column>;
  where?: Maybe<Sales_Service_Draft_Bool_Exp>;
};

/** Ordering options when selecting data from "sales.service_draft". */
export type Sales_Service_Draft_Order_By = {
  dependent_id?: Maybe<Order_By>;
  glass_draft?: Maybe<Sales_Glass_Draft_Order_By>;
  id?: Maybe<Order_By>;
  labelFactory?: Maybe<Order_By>;
  manufacturing_services_aggregate?: Maybe<Manufacturing_Manufacturing_Service_Aggregate_Order_By>;
  product_draft?: Maybe<Sales_Product_Draft_Order_By>;
  productdraft_id?: Maybe<Order_By>;
};

/** primary key columns input for table: sales_service_draft */
export type Sales_Service_Draft_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "sales.service_draft" */
export enum Sales_Service_Draft_Select_Column {
  /** column name */
  DependentId = 'dependent_id',
  /** column name */
  Id = 'id',
  /** column name */
  LabelFactory = 'labelFactory',
  /** column name */
  ProductdraftId = 'productdraft_id'
}

/** input type for updating data in table "sales.service_draft" */
export type Sales_Service_Draft_Set_Input = {
  dependent_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  labelFactory?: Maybe<Scalars['String']>;
  productdraft_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "sales.service_draft" */
export enum Sales_Service_Draft_Update_Column {
  /** column name */
  DependentId = 'dependent_id',
  /** column name */
  Id = 'id',
  /** column name */
  LabelFactory = 'labelFactory',
  /** column name */
  ProductdraftId = 'productdraft_id'
}

/** columns and relationships of "sales.test" */
export type Sales_Test = {
  __typename?: 'sales_test';
  company: Scalars['String'];
  created_at: Scalars['date'];
  id: Scalars['Int'];
  ref?: Maybe<Scalars['String']>;
  ref_num?: Maybe<Scalars['Int']>;
};

/** aggregated selection of "sales.test" */
export type Sales_Test_Aggregate = {
  __typename?: 'sales_test_aggregate';
  aggregate?: Maybe<Sales_Test_Aggregate_Fields>;
  nodes: Array<Sales_Test>;
};

/** aggregate fields of "sales.test" */
export type Sales_Test_Aggregate_Fields = {
  __typename?: 'sales_test_aggregate_fields';
  avg?: Maybe<Sales_Test_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Sales_Test_Max_Fields>;
  min?: Maybe<Sales_Test_Min_Fields>;
  stddev?: Maybe<Sales_Test_Stddev_Fields>;
  stddev_pop?: Maybe<Sales_Test_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Sales_Test_Stddev_Samp_Fields>;
  sum?: Maybe<Sales_Test_Sum_Fields>;
  var_pop?: Maybe<Sales_Test_Var_Pop_Fields>;
  var_samp?: Maybe<Sales_Test_Var_Samp_Fields>;
  variance?: Maybe<Sales_Test_Variance_Fields>;
};


/** aggregate fields of "sales.test" */
export type Sales_Test_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Sales_Test_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** aggregate avg on columns */
export type Sales_Test_Avg_Fields = {
  __typename?: 'sales_test_avg_fields';
  id?: Maybe<Scalars['Float']>;
  ref_num?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "sales.test". All fields are combined with a logical 'AND'. */
export type Sales_Test_Bool_Exp = {
  _and?: Maybe<Array<Sales_Test_Bool_Exp>>;
  _not?: Maybe<Sales_Test_Bool_Exp>;
  _or?: Maybe<Array<Sales_Test_Bool_Exp>>;
  company?: Maybe<String_Comparison_Exp>;
  created_at?: Maybe<Date_Comparison_Exp>;
  id?: Maybe<Int_Comparison_Exp>;
  ref?: Maybe<String_Comparison_Exp>;
  ref_num?: Maybe<Int_Comparison_Exp>;
};

/** unique or primary key constraints on table "sales.test" */
export enum Sales_Test_Constraint {
  /** unique or primary key constraint */
  TestPkey = 'test_pkey'
}

/** input type for incrementing numeric columns in table "sales.test" */
export type Sales_Test_Inc_Input = {
  id?: Maybe<Scalars['Int']>;
  ref_num?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "sales.test" */
export type Sales_Test_Insert_Input = {
  company?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['date']>;
  id?: Maybe<Scalars['Int']>;
  ref?: Maybe<Scalars['String']>;
  ref_num?: Maybe<Scalars['Int']>;
};

/** aggregate max on columns */
export type Sales_Test_Max_Fields = {
  __typename?: 'sales_test_max_fields';
  company?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['date']>;
  id?: Maybe<Scalars['Int']>;
  ref?: Maybe<Scalars['String']>;
  ref_num?: Maybe<Scalars['Int']>;
};

/** aggregate min on columns */
export type Sales_Test_Min_Fields = {
  __typename?: 'sales_test_min_fields';
  company?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['date']>;
  id?: Maybe<Scalars['Int']>;
  ref?: Maybe<Scalars['String']>;
  ref_num?: Maybe<Scalars['Int']>;
};

/** response of any mutation on the table "sales.test" */
export type Sales_Test_Mutation_Response = {
  __typename?: 'sales_test_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Sales_Test>;
};

/** on conflict condition type for table "sales.test" */
export type Sales_Test_On_Conflict = {
  constraint: Sales_Test_Constraint;
  update_columns?: Array<Sales_Test_Update_Column>;
  where?: Maybe<Sales_Test_Bool_Exp>;
};

/** Ordering options when selecting data from "sales.test". */
export type Sales_Test_Order_By = {
  company?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  ref?: Maybe<Order_By>;
  ref_num?: Maybe<Order_By>;
};

/** primary key columns input for table: sales_test */
export type Sales_Test_Pk_Columns_Input = {
  id: Scalars['Int'];
};

/** select columns of table "sales.test" */
export enum Sales_Test_Select_Column {
  /** column name */
  Company = 'company',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  Ref = 'ref',
  /** column name */
  RefNum = 'ref_num'
}

/** input type for updating data in table "sales.test" */
export type Sales_Test_Set_Input = {
  company?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['date']>;
  id?: Maybe<Scalars['Int']>;
  ref?: Maybe<Scalars['String']>;
  ref_num?: Maybe<Scalars['Int']>;
};

/** aggregate stddev on columns */
export type Sales_Test_Stddev_Fields = {
  __typename?: 'sales_test_stddev_fields';
  id?: Maybe<Scalars['Float']>;
  ref_num?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type Sales_Test_Stddev_Pop_Fields = {
  __typename?: 'sales_test_stddev_pop_fields';
  id?: Maybe<Scalars['Float']>;
  ref_num?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type Sales_Test_Stddev_Samp_Fields = {
  __typename?: 'sales_test_stddev_samp_fields';
  id?: Maybe<Scalars['Float']>;
  ref_num?: Maybe<Scalars['Float']>;
};

/** aggregate sum on columns */
export type Sales_Test_Sum_Fields = {
  __typename?: 'sales_test_sum_fields';
  id?: Maybe<Scalars['Int']>;
  ref_num?: Maybe<Scalars['Int']>;
};

/** update columns of table "sales.test" */
export enum Sales_Test_Update_Column {
  /** column name */
  Company = 'company',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  Ref = 'ref',
  /** column name */
  RefNum = 'ref_num'
}

/** aggregate var_pop on columns */
export type Sales_Test_Var_Pop_Fields = {
  __typename?: 'sales_test_var_pop_fields';
  id?: Maybe<Scalars['Float']>;
  ref_num?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type Sales_Test_Var_Samp_Fields = {
  __typename?: 'sales_test_var_samp_fields';
  id?: Maybe<Scalars['Float']>;
  ref_num?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type Sales_Test_Variance_Fields = {
  __typename?: 'sales_test_variance_fields';
  id?: Maybe<Scalars['Float']>;
  ref_num?: Maybe<Scalars['Float']>;
};

/** columns and relationships of "stock.adjustment_reasons" */
export type Stock_Adjustment_Reasons = {
  __typename?: 'stock_adjustment_reasons';
  key: Scalars['String'];
  /** An array relationship */
  stock_adjustments: Array<Stock_Stock_Adjustment>;
  /** An aggregate relationship */
  stock_adjustments_aggregate: Stock_Stock_Adjustment_Aggregate;
  value: Scalars['String'];
};


/** columns and relationships of "stock.adjustment_reasons" */
export type Stock_Adjustment_ReasonsStock_AdjustmentsArgs = {
  distinct_on?: Maybe<Array<Stock_Stock_Adjustment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Stock_Adjustment_Order_By>>;
  where?: Maybe<Stock_Stock_Adjustment_Bool_Exp>;
};


/** columns and relationships of "stock.adjustment_reasons" */
export type Stock_Adjustment_ReasonsStock_Adjustments_AggregateArgs = {
  distinct_on?: Maybe<Array<Stock_Stock_Adjustment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Stock_Adjustment_Order_By>>;
  where?: Maybe<Stock_Stock_Adjustment_Bool_Exp>;
};

/** aggregated selection of "stock.adjustment_reasons" */
export type Stock_Adjustment_Reasons_Aggregate = {
  __typename?: 'stock_adjustment_reasons_aggregate';
  aggregate?: Maybe<Stock_Adjustment_Reasons_Aggregate_Fields>;
  nodes: Array<Stock_Adjustment_Reasons>;
};

/** aggregate fields of "stock.adjustment_reasons" */
export type Stock_Adjustment_Reasons_Aggregate_Fields = {
  __typename?: 'stock_adjustment_reasons_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Stock_Adjustment_Reasons_Max_Fields>;
  min?: Maybe<Stock_Adjustment_Reasons_Min_Fields>;
};


/** aggregate fields of "stock.adjustment_reasons" */
export type Stock_Adjustment_Reasons_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Stock_Adjustment_Reasons_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** Boolean expression to filter rows from the table "stock.adjustment_reasons". All fields are combined with a logical 'AND'. */
export type Stock_Adjustment_Reasons_Bool_Exp = {
  _and?: Maybe<Array<Stock_Adjustment_Reasons_Bool_Exp>>;
  _not?: Maybe<Stock_Adjustment_Reasons_Bool_Exp>;
  _or?: Maybe<Array<Stock_Adjustment_Reasons_Bool_Exp>>;
  key?: Maybe<String_Comparison_Exp>;
  stock_adjustments?: Maybe<Stock_Stock_Adjustment_Bool_Exp>;
  value?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "stock.adjustment_reasons" */
export enum Stock_Adjustment_Reasons_Constraint {
  /** unique or primary key constraint */
  AdjustmentReasonsPkey = 'adjustment_reasons_pkey'
}

export enum Stock_Adjustment_Reasons_Enum {
  /** damage */
  Endommagement = 'endommagement',
  /** inventory */
  Inventaire = 'inventaire',
  /** loss */
  Perte = 'perte'
}

/** Boolean expression to compare columns of type "stock_adjustment_reasons_enum". All fields are combined with logical 'AND'. */
export type Stock_Adjustment_Reasons_Enum_Comparison_Exp = {
  _eq?: Maybe<Stock_Adjustment_Reasons_Enum>;
  _in?: Maybe<Array<Stock_Adjustment_Reasons_Enum>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _neq?: Maybe<Stock_Adjustment_Reasons_Enum>;
  _nin?: Maybe<Array<Stock_Adjustment_Reasons_Enum>>;
};

/** input type for inserting data into table "stock.adjustment_reasons" */
export type Stock_Adjustment_Reasons_Insert_Input = {
  key?: Maybe<Scalars['String']>;
  stock_adjustments?: Maybe<Stock_Stock_Adjustment_Arr_Rel_Insert_Input>;
  value?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Stock_Adjustment_Reasons_Max_Fields = {
  __typename?: 'stock_adjustment_reasons_max_fields';
  key?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type Stock_Adjustment_Reasons_Min_Fields = {
  __typename?: 'stock_adjustment_reasons_min_fields';
  key?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/** response of any mutation on the table "stock.adjustment_reasons" */
export type Stock_Adjustment_Reasons_Mutation_Response = {
  __typename?: 'stock_adjustment_reasons_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Stock_Adjustment_Reasons>;
};

/** input type for inserting object relation for remote table "stock.adjustment_reasons" */
export type Stock_Adjustment_Reasons_Obj_Rel_Insert_Input = {
  data: Stock_Adjustment_Reasons_Insert_Input;
  /** on conflict condition */
  on_conflict?: Maybe<Stock_Adjustment_Reasons_On_Conflict>;
};

/** on conflict condition type for table "stock.adjustment_reasons" */
export type Stock_Adjustment_Reasons_On_Conflict = {
  constraint: Stock_Adjustment_Reasons_Constraint;
  update_columns?: Array<Stock_Adjustment_Reasons_Update_Column>;
  where?: Maybe<Stock_Adjustment_Reasons_Bool_Exp>;
};

/** Ordering options when selecting data from "stock.adjustment_reasons". */
export type Stock_Adjustment_Reasons_Order_By = {
  key?: Maybe<Order_By>;
  stock_adjustments_aggregate?: Maybe<Stock_Stock_Adjustment_Aggregate_Order_By>;
  value?: Maybe<Order_By>;
};

/** primary key columns input for table: stock_adjustment_reasons */
export type Stock_Adjustment_Reasons_Pk_Columns_Input = {
  value: Scalars['String'];
};

/** select columns of table "stock.adjustment_reasons" */
export enum Stock_Adjustment_Reasons_Select_Column {
  /** column name */
  Key = 'key',
  /** column name */
  Value = 'value'
}

/** input type for updating data in table "stock.adjustment_reasons" */
export type Stock_Adjustment_Reasons_Set_Input = {
  key?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

/** update columns of table "stock.adjustment_reasons" */
export enum Stock_Adjustment_Reasons_Update_Column {
  /** column name */
  Key = 'key',
  /** column name */
  Value = 'value'
}

/** columns and relationships of "stock.item_tranfer" */
export type Stock_Item_Tranfer = {
  __typename?: 'stock_item_tranfer';
  confirmed?: Maybe<Scalars['Boolean']>;
  date: Scalars['date'];
  id: Scalars['uuid'];
  /** An object relationship */
  item_transfer_status: Stock_Item_Transfer_Status;
  order_itemid: Scalars['uuid'];
  quantity: Scalars['Float'];
  status: Scalars['String'];
  /** An object relationship */
  tranfer_order_item: Stock_Order_Item;
};

/** aggregated selection of "stock.item_tranfer" */
export type Stock_Item_Tranfer_Aggregate = {
  __typename?: 'stock_item_tranfer_aggregate';
  aggregate?: Maybe<Stock_Item_Tranfer_Aggregate_Fields>;
  nodes: Array<Stock_Item_Tranfer>;
};

/** aggregate fields of "stock.item_tranfer" */
export type Stock_Item_Tranfer_Aggregate_Fields = {
  __typename?: 'stock_item_tranfer_aggregate_fields';
  avg?: Maybe<Stock_Item_Tranfer_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Stock_Item_Tranfer_Max_Fields>;
  min?: Maybe<Stock_Item_Tranfer_Min_Fields>;
  stddev?: Maybe<Stock_Item_Tranfer_Stddev_Fields>;
  stddev_pop?: Maybe<Stock_Item_Tranfer_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Stock_Item_Tranfer_Stddev_Samp_Fields>;
  sum?: Maybe<Stock_Item_Tranfer_Sum_Fields>;
  var_pop?: Maybe<Stock_Item_Tranfer_Var_Pop_Fields>;
  var_samp?: Maybe<Stock_Item_Tranfer_Var_Samp_Fields>;
  variance?: Maybe<Stock_Item_Tranfer_Variance_Fields>;
};


/** aggregate fields of "stock.item_tranfer" */
export type Stock_Item_Tranfer_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Stock_Item_Tranfer_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "stock.item_tranfer" */
export type Stock_Item_Tranfer_Aggregate_Order_By = {
  avg?: Maybe<Stock_Item_Tranfer_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Stock_Item_Tranfer_Max_Order_By>;
  min?: Maybe<Stock_Item_Tranfer_Min_Order_By>;
  stddev?: Maybe<Stock_Item_Tranfer_Stddev_Order_By>;
  stddev_pop?: Maybe<Stock_Item_Tranfer_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Stock_Item_Tranfer_Stddev_Samp_Order_By>;
  sum?: Maybe<Stock_Item_Tranfer_Sum_Order_By>;
  var_pop?: Maybe<Stock_Item_Tranfer_Var_Pop_Order_By>;
  var_samp?: Maybe<Stock_Item_Tranfer_Var_Samp_Order_By>;
  variance?: Maybe<Stock_Item_Tranfer_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "stock.item_tranfer" */
export type Stock_Item_Tranfer_Arr_Rel_Insert_Input = {
  data: Array<Stock_Item_Tranfer_Insert_Input>;
  /** on conflict condition */
  on_conflict?: Maybe<Stock_Item_Tranfer_On_Conflict>;
};

/** aggregate avg on columns */
export type Stock_Item_Tranfer_Avg_Fields = {
  __typename?: 'stock_item_tranfer_avg_fields';
  quantity?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "stock.item_tranfer" */
export type Stock_Item_Tranfer_Avg_Order_By = {
  quantity?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "stock.item_tranfer". All fields are combined with a logical 'AND'. */
export type Stock_Item_Tranfer_Bool_Exp = {
  _and?: Maybe<Array<Stock_Item_Tranfer_Bool_Exp>>;
  _not?: Maybe<Stock_Item_Tranfer_Bool_Exp>;
  _or?: Maybe<Array<Stock_Item_Tranfer_Bool_Exp>>;
  confirmed?: Maybe<Boolean_Comparison_Exp>;
  date?: Maybe<Date_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  item_transfer_status?: Maybe<Stock_Item_Transfer_Status_Bool_Exp>;
  order_itemid?: Maybe<Uuid_Comparison_Exp>;
  quantity?: Maybe<Float_Comparison_Exp>;
  status?: Maybe<String_Comparison_Exp>;
  tranfer_order_item?: Maybe<Stock_Order_Item_Bool_Exp>;
};

/** unique or primary key constraints on table "stock.item_tranfer" */
export enum Stock_Item_Tranfer_Constraint {
  /** unique or primary key constraint */
  AccessoryTranferPkey = 'accessoryTranfer_pkey'
}

/** input type for incrementing numeric columns in table "stock.item_tranfer" */
export type Stock_Item_Tranfer_Inc_Input = {
  quantity?: Maybe<Scalars['Float']>;
};

/** input type for inserting data into table "stock.item_tranfer" */
export type Stock_Item_Tranfer_Insert_Input = {
  confirmed?: Maybe<Scalars['Boolean']>;
  date?: Maybe<Scalars['date']>;
  id?: Maybe<Scalars['uuid']>;
  item_transfer_status?: Maybe<Stock_Item_Transfer_Status_Obj_Rel_Insert_Input>;
  order_itemid?: Maybe<Scalars['uuid']>;
  quantity?: Maybe<Scalars['Float']>;
  status?: Maybe<Scalars['String']>;
  tranfer_order_item?: Maybe<Stock_Order_Item_Obj_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Stock_Item_Tranfer_Max_Fields = {
  __typename?: 'stock_item_tranfer_max_fields';
  date?: Maybe<Scalars['date']>;
  id?: Maybe<Scalars['uuid']>;
  order_itemid?: Maybe<Scalars['uuid']>;
  quantity?: Maybe<Scalars['Float']>;
  status?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "stock.item_tranfer" */
export type Stock_Item_Tranfer_Max_Order_By = {
  date?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  order_itemid?: Maybe<Order_By>;
  quantity?: Maybe<Order_By>;
  status?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Stock_Item_Tranfer_Min_Fields = {
  __typename?: 'stock_item_tranfer_min_fields';
  date?: Maybe<Scalars['date']>;
  id?: Maybe<Scalars['uuid']>;
  order_itemid?: Maybe<Scalars['uuid']>;
  quantity?: Maybe<Scalars['Float']>;
  status?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "stock.item_tranfer" */
export type Stock_Item_Tranfer_Min_Order_By = {
  date?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  order_itemid?: Maybe<Order_By>;
  quantity?: Maybe<Order_By>;
  status?: Maybe<Order_By>;
};

/** response of any mutation on the table "stock.item_tranfer" */
export type Stock_Item_Tranfer_Mutation_Response = {
  __typename?: 'stock_item_tranfer_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Stock_Item_Tranfer>;
};

/** on conflict condition type for table "stock.item_tranfer" */
export type Stock_Item_Tranfer_On_Conflict = {
  constraint: Stock_Item_Tranfer_Constraint;
  update_columns?: Array<Stock_Item_Tranfer_Update_Column>;
  where?: Maybe<Stock_Item_Tranfer_Bool_Exp>;
};

/** Ordering options when selecting data from "stock.item_tranfer". */
export type Stock_Item_Tranfer_Order_By = {
  confirmed?: Maybe<Order_By>;
  date?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  item_transfer_status?: Maybe<Stock_Item_Transfer_Status_Order_By>;
  order_itemid?: Maybe<Order_By>;
  quantity?: Maybe<Order_By>;
  status?: Maybe<Order_By>;
  tranfer_order_item?: Maybe<Stock_Order_Item_Order_By>;
};

/** primary key columns input for table: stock_item_tranfer */
export type Stock_Item_Tranfer_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "stock.item_tranfer" */
export enum Stock_Item_Tranfer_Select_Column {
  /** column name */
  Confirmed = 'confirmed',
  /** column name */
  Date = 'date',
  /** column name */
  Id = 'id',
  /** column name */
  OrderItemid = 'order_itemid',
  /** column name */
  Quantity = 'quantity',
  /** column name */
  Status = 'status'
}

/** input type for updating data in table "stock.item_tranfer" */
export type Stock_Item_Tranfer_Set_Input = {
  confirmed?: Maybe<Scalars['Boolean']>;
  date?: Maybe<Scalars['date']>;
  id?: Maybe<Scalars['uuid']>;
  order_itemid?: Maybe<Scalars['uuid']>;
  quantity?: Maybe<Scalars['Float']>;
  status?: Maybe<Scalars['String']>;
};

/** aggregate stddev on columns */
export type Stock_Item_Tranfer_Stddev_Fields = {
  __typename?: 'stock_item_tranfer_stddev_fields';
  quantity?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "stock.item_tranfer" */
export type Stock_Item_Tranfer_Stddev_Order_By = {
  quantity?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Stock_Item_Tranfer_Stddev_Pop_Fields = {
  __typename?: 'stock_item_tranfer_stddev_pop_fields';
  quantity?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "stock.item_tranfer" */
export type Stock_Item_Tranfer_Stddev_Pop_Order_By = {
  quantity?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Stock_Item_Tranfer_Stddev_Samp_Fields = {
  __typename?: 'stock_item_tranfer_stddev_samp_fields';
  quantity?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "stock.item_tranfer" */
export type Stock_Item_Tranfer_Stddev_Samp_Order_By = {
  quantity?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Stock_Item_Tranfer_Sum_Fields = {
  __typename?: 'stock_item_tranfer_sum_fields';
  quantity?: Maybe<Scalars['Float']>;
};

/** order by sum() on columns of table "stock.item_tranfer" */
export type Stock_Item_Tranfer_Sum_Order_By = {
  quantity?: Maybe<Order_By>;
};

/** update columns of table "stock.item_tranfer" */
export enum Stock_Item_Tranfer_Update_Column {
  /** column name */
  Confirmed = 'confirmed',
  /** column name */
  Date = 'date',
  /** column name */
  Id = 'id',
  /** column name */
  OrderItemid = 'order_itemid',
  /** column name */
  Quantity = 'quantity',
  /** column name */
  Status = 'status'
}

/** aggregate var_pop on columns */
export type Stock_Item_Tranfer_Var_Pop_Fields = {
  __typename?: 'stock_item_tranfer_var_pop_fields';
  quantity?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "stock.item_tranfer" */
export type Stock_Item_Tranfer_Var_Pop_Order_By = {
  quantity?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Stock_Item_Tranfer_Var_Samp_Fields = {
  __typename?: 'stock_item_tranfer_var_samp_fields';
  quantity?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "stock.item_tranfer" */
export type Stock_Item_Tranfer_Var_Samp_Order_By = {
  quantity?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Stock_Item_Tranfer_Variance_Fields = {
  __typename?: 'stock_item_tranfer_variance_fields';
  quantity?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "stock.item_tranfer" */
export type Stock_Item_Tranfer_Variance_Order_By = {
  quantity?: Maybe<Order_By>;
};

/** columns and relationships of "stock.item_transfer_status" */
export type Stock_Item_Transfer_Status = {
  __typename?: 'stock_item_transfer_status';
  /** An array relationship */
  item_tranfers: Array<Stock_Item_Tranfer>;
  /** An aggregate relationship */
  item_tranfers_aggregate: Stock_Item_Tranfer_Aggregate;
  key: Scalars['String'];
  status: Scalars['String'];
};


/** columns and relationships of "stock.item_transfer_status" */
export type Stock_Item_Transfer_StatusItem_TranfersArgs = {
  distinct_on?: Maybe<Array<Stock_Item_Tranfer_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Item_Tranfer_Order_By>>;
  where?: Maybe<Stock_Item_Tranfer_Bool_Exp>;
};


/** columns and relationships of "stock.item_transfer_status" */
export type Stock_Item_Transfer_StatusItem_Tranfers_AggregateArgs = {
  distinct_on?: Maybe<Array<Stock_Item_Tranfer_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Item_Tranfer_Order_By>>;
  where?: Maybe<Stock_Item_Tranfer_Bool_Exp>;
};

/** aggregated selection of "stock.item_transfer_status" */
export type Stock_Item_Transfer_Status_Aggregate = {
  __typename?: 'stock_item_transfer_status_aggregate';
  aggregate?: Maybe<Stock_Item_Transfer_Status_Aggregate_Fields>;
  nodes: Array<Stock_Item_Transfer_Status>;
};

/** aggregate fields of "stock.item_transfer_status" */
export type Stock_Item_Transfer_Status_Aggregate_Fields = {
  __typename?: 'stock_item_transfer_status_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Stock_Item_Transfer_Status_Max_Fields>;
  min?: Maybe<Stock_Item_Transfer_Status_Min_Fields>;
};


/** aggregate fields of "stock.item_transfer_status" */
export type Stock_Item_Transfer_Status_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Stock_Item_Transfer_Status_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** Boolean expression to filter rows from the table "stock.item_transfer_status". All fields are combined with a logical 'AND'. */
export type Stock_Item_Transfer_Status_Bool_Exp = {
  _and?: Maybe<Array<Stock_Item_Transfer_Status_Bool_Exp>>;
  _not?: Maybe<Stock_Item_Transfer_Status_Bool_Exp>;
  _or?: Maybe<Array<Stock_Item_Transfer_Status_Bool_Exp>>;
  item_tranfers?: Maybe<Stock_Item_Tranfer_Bool_Exp>;
  key?: Maybe<String_Comparison_Exp>;
  status?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "stock.item_transfer_status" */
export enum Stock_Item_Transfer_Status_Constraint {
  /** unique or primary key constraint */
  ItemTransferStatusPkey = 'item_transfer_status_pkey',
  /** unique or primary key constraint */
  ItemTransferStatusStatusKey = 'item_transfer_status_status_key'
}

/** input type for inserting data into table "stock.item_transfer_status" */
export type Stock_Item_Transfer_Status_Insert_Input = {
  item_tranfers?: Maybe<Stock_Item_Tranfer_Arr_Rel_Insert_Input>;
  key?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Stock_Item_Transfer_Status_Max_Fields = {
  __typename?: 'stock_item_transfer_status_max_fields';
  key?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type Stock_Item_Transfer_Status_Min_Fields = {
  __typename?: 'stock_item_transfer_status_min_fields';
  key?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
};

/** response of any mutation on the table "stock.item_transfer_status" */
export type Stock_Item_Transfer_Status_Mutation_Response = {
  __typename?: 'stock_item_transfer_status_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Stock_Item_Transfer_Status>;
};

/** input type for inserting object relation for remote table "stock.item_transfer_status" */
export type Stock_Item_Transfer_Status_Obj_Rel_Insert_Input = {
  data: Stock_Item_Transfer_Status_Insert_Input;
  /** on conflict condition */
  on_conflict?: Maybe<Stock_Item_Transfer_Status_On_Conflict>;
};

/** on conflict condition type for table "stock.item_transfer_status" */
export type Stock_Item_Transfer_Status_On_Conflict = {
  constraint: Stock_Item_Transfer_Status_Constraint;
  update_columns?: Array<Stock_Item_Transfer_Status_Update_Column>;
  where?: Maybe<Stock_Item_Transfer_Status_Bool_Exp>;
};

/** Ordering options when selecting data from "stock.item_transfer_status". */
export type Stock_Item_Transfer_Status_Order_By = {
  item_tranfers_aggregate?: Maybe<Stock_Item_Tranfer_Aggregate_Order_By>;
  key?: Maybe<Order_By>;
  status?: Maybe<Order_By>;
};

/** primary key columns input for table: stock_item_transfer_status */
export type Stock_Item_Transfer_Status_Pk_Columns_Input = {
  key: Scalars['String'];
};

/** select columns of table "stock.item_transfer_status" */
export enum Stock_Item_Transfer_Status_Select_Column {
  /** column name */
  Key = 'key',
  /** column name */
  Status = 'status'
}

/** input type for updating data in table "stock.item_transfer_status" */
export type Stock_Item_Transfer_Status_Set_Input = {
  key?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
};

/** update columns of table "stock.item_transfer_status" */
export enum Stock_Item_Transfer_Status_Update_Column {
  /** column name */
  Key = 'key',
  /** column name */
  Status = 'status'
}

/** columns and relationships of "stock.order_item" */
export type Stock_Order_Item = {
  __typename?: 'stock_order_item';
  id: Scalars['uuid'];
  /** An array relationship */
  item_tranfers: Array<Stock_Item_Tranfer>;
  /** An aggregate relationship */
  item_tranfers_aggregate: Stock_Item_Tranfer_Aggregate;
  /** An object relationship */
  order_item_status: Stock_Order_Item_Status;
  quantity: Scalars['Float'];
  status: Scalars['String'];
  /** An object relationship */
  substance: Product_Substance;
  substanceid: Scalars['uuid'];
  /** An object relationship */
  transfer_order: Stock_Transfer_Order;
  transfer_orderid: Scalars['Int'];
};


/** columns and relationships of "stock.order_item" */
export type Stock_Order_ItemItem_TranfersArgs = {
  distinct_on?: Maybe<Array<Stock_Item_Tranfer_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Item_Tranfer_Order_By>>;
  where?: Maybe<Stock_Item_Tranfer_Bool_Exp>;
};


/** columns and relationships of "stock.order_item" */
export type Stock_Order_ItemItem_Tranfers_AggregateArgs = {
  distinct_on?: Maybe<Array<Stock_Item_Tranfer_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Item_Tranfer_Order_By>>;
  where?: Maybe<Stock_Item_Tranfer_Bool_Exp>;
};

/** aggregated selection of "stock.order_item" */
export type Stock_Order_Item_Aggregate = {
  __typename?: 'stock_order_item_aggregate';
  aggregate?: Maybe<Stock_Order_Item_Aggregate_Fields>;
  nodes: Array<Stock_Order_Item>;
};

/** aggregate fields of "stock.order_item" */
export type Stock_Order_Item_Aggregate_Fields = {
  __typename?: 'stock_order_item_aggregate_fields';
  avg?: Maybe<Stock_Order_Item_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Stock_Order_Item_Max_Fields>;
  min?: Maybe<Stock_Order_Item_Min_Fields>;
  stddev?: Maybe<Stock_Order_Item_Stddev_Fields>;
  stddev_pop?: Maybe<Stock_Order_Item_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Stock_Order_Item_Stddev_Samp_Fields>;
  sum?: Maybe<Stock_Order_Item_Sum_Fields>;
  var_pop?: Maybe<Stock_Order_Item_Var_Pop_Fields>;
  var_samp?: Maybe<Stock_Order_Item_Var_Samp_Fields>;
  variance?: Maybe<Stock_Order_Item_Variance_Fields>;
};


/** aggregate fields of "stock.order_item" */
export type Stock_Order_Item_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Stock_Order_Item_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "stock.order_item" */
export type Stock_Order_Item_Aggregate_Order_By = {
  avg?: Maybe<Stock_Order_Item_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Stock_Order_Item_Max_Order_By>;
  min?: Maybe<Stock_Order_Item_Min_Order_By>;
  stddev?: Maybe<Stock_Order_Item_Stddev_Order_By>;
  stddev_pop?: Maybe<Stock_Order_Item_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Stock_Order_Item_Stddev_Samp_Order_By>;
  sum?: Maybe<Stock_Order_Item_Sum_Order_By>;
  var_pop?: Maybe<Stock_Order_Item_Var_Pop_Order_By>;
  var_samp?: Maybe<Stock_Order_Item_Var_Samp_Order_By>;
  variance?: Maybe<Stock_Order_Item_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "stock.order_item" */
export type Stock_Order_Item_Arr_Rel_Insert_Input = {
  data: Array<Stock_Order_Item_Insert_Input>;
  /** on conflict condition */
  on_conflict?: Maybe<Stock_Order_Item_On_Conflict>;
};

/** aggregate avg on columns */
export type Stock_Order_Item_Avg_Fields = {
  __typename?: 'stock_order_item_avg_fields';
  quantity?: Maybe<Scalars['Float']>;
  transfer_orderid?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "stock.order_item" */
export type Stock_Order_Item_Avg_Order_By = {
  quantity?: Maybe<Order_By>;
  transfer_orderid?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "stock.order_item". All fields are combined with a logical 'AND'. */
export type Stock_Order_Item_Bool_Exp = {
  _and?: Maybe<Array<Stock_Order_Item_Bool_Exp>>;
  _not?: Maybe<Stock_Order_Item_Bool_Exp>;
  _or?: Maybe<Array<Stock_Order_Item_Bool_Exp>>;
  id?: Maybe<Uuid_Comparison_Exp>;
  item_tranfers?: Maybe<Stock_Item_Tranfer_Bool_Exp>;
  order_item_status?: Maybe<Stock_Order_Item_Status_Bool_Exp>;
  quantity?: Maybe<Float_Comparison_Exp>;
  status?: Maybe<String_Comparison_Exp>;
  substance?: Maybe<Product_Substance_Bool_Exp>;
  substanceid?: Maybe<Uuid_Comparison_Exp>;
  transfer_order?: Maybe<Stock_Transfer_Order_Bool_Exp>;
  transfer_orderid?: Maybe<Int_Comparison_Exp>;
};

/** unique or primary key constraints on table "stock.order_item" */
export enum Stock_Order_Item_Constraint {
  /** unique or primary key constraint */
  AccessoryTranferOrderPkey = 'accessoryTranferOrder_pkey'
}

/** input type for incrementing numeric columns in table "stock.order_item" */
export type Stock_Order_Item_Inc_Input = {
  quantity?: Maybe<Scalars['Float']>;
  transfer_orderid?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "stock.order_item" */
export type Stock_Order_Item_Insert_Input = {
  id?: Maybe<Scalars['uuid']>;
  item_tranfers?: Maybe<Stock_Item_Tranfer_Arr_Rel_Insert_Input>;
  order_item_status?: Maybe<Stock_Order_Item_Status_Obj_Rel_Insert_Input>;
  quantity?: Maybe<Scalars['Float']>;
  status?: Maybe<Scalars['String']>;
  substance?: Maybe<Product_Substance_Obj_Rel_Insert_Input>;
  substanceid?: Maybe<Scalars['uuid']>;
  transfer_order?: Maybe<Stock_Transfer_Order_Obj_Rel_Insert_Input>;
  transfer_orderid?: Maybe<Scalars['Int']>;
};

/** aggregate max on columns */
export type Stock_Order_Item_Max_Fields = {
  __typename?: 'stock_order_item_max_fields';
  id?: Maybe<Scalars['uuid']>;
  quantity?: Maybe<Scalars['Float']>;
  status?: Maybe<Scalars['String']>;
  substanceid?: Maybe<Scalars['uuid']>;
  transfer_orderid?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "stock.order_item" */
export type Stock_Order_Item_Max_Order_By = {
  id?: Maybe<Order_By>;
  quantity?: Maybe<Order_By>;
  status?: Maybe<Order_By>;
  substanceid?: Maybe<Order_By>;
  transfer_orderid?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Stock_Order_Item_Min_Fields = {
  __typename?: 'stock_order_item_min_fields';
  id?: Maybe<Scalars['uuid']>;
  quantity?: Maybe<Scalars['Float']>;
  status?: Maybe<Scalars['String']>;
  substanceid?: Maybe<Scalars['uuid']>;
  transfer_orderid?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "stock.order_item" */
export type Stock_Order_Item_Min_Order_By = {
  id?: Maybe<Order_By>;
  quantity?: Maybe<Order_By>;
  status?: Maybe<Order_By>;
  substanceid?: Maybe<Order_By>;
  transfer_orderid?: Maybe<Order_By>;
};

/** response of any mutation on the table "stock.order_item" */
export type Stock_Order_Item_Mutation_Response = {
  __typename?: 'stock_order_item_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Stock_Order_Item>;
};

/** input type for inserting object relation for remote table "stock.order_item" */
export type Stock_Order_Item_Obj_Rel_Insert_Input = {
  data: Stock_Order_Item_Insert_Input;
  /** on conflict condition */
  on_conflict?: Maybe<Stock_Order_Item_On_Conflict>;
};

/** on conflict condition type for table "stock.order_item" */
export type Stock_Order_Item_On_Conflict = {
  constraint: Stock_Order_Item_Constraint;
  update_columns?: Array<Stock_Order_Item_Update_Column>;
  where?: Maybe<Stock_Order_Item_Bool_Exp>;
};

/** Ordering options when selecting data from "stock.order_item". */
export type Stock_Order_Item_Order_By = {
  id?: Maybe<Order_By>;
  item_tranfers_aggregate?: Maybe<Stock_Item_Tranfer_Aggregate_Order_By>;
  order_item_status?: Maybe<Stock_Order_Item_Status_Order_By>;
  quantity?: Maybe<Order_By>;
  status?: Maybe<Order_By>;
  substance?: Maybe<Product_Substance_Order_By>;
  substanceid?: Maybe<Order_By>;
  transfer_order?: Maybe<Stock_Transfer_Order_Order_By>;
  transfer_orderid?: Maybe<Order_By>;
};

/** primary key columns input for table: stock_order_item */
export type Stock_Order_Item_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "stock.order_item" */
export enum Stock_Order_Item_Select_Column {
  /** column name */
  Id = 'id',
  /** column name */
  Quantity = 'quantity',
  /** column name */
  Status = 'status',
  /** column name */
  Substanceid = 'substanceid',
  /** column name */
  TransferOrderid = 'transfer_orderid'
}

/** input type for updating data in table "stock.order_item" */
export type Stock_Order_Item_Set_Input = {
  id?: Maybe<Scalars['uuid']>;
  quantity?: Maybe<Scalars['Float']>;
  status?: Maybe<Scalars['String']>;
  substanceid?: Maybe<Scalars['uuid']>;
  transfer_orderid?: Maybe<Scalars['Int']>;
};

/** columns and relationships of "stock.order_item_status" */
export type Stock_Order_Item_Status = {
  __typename?: 'stock_order_item_status';
  key: Scalars['String'];
  /** An array relationship */
  order_items: Array<Stock_Order_Item>;
  /** An aggregate relationship */
  order_items_aggregate: Stock_Order_Item_Aggregate;
  status: Scalars['String'];
};


/** columns and relationships of "stock.order_item_status" */
export type Stock_Order_Item_StatusOrder_ItemsArgs = {
  distinct_on?: Maybe<Array<Stock_Order_Item_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Order_Item_Order_By>>;
  where?: Maybe<Stock_Order_Item_Bool_Exp>;
};


/** columns and relationships of "stock.order_item_status" */
export type Stock_Order_Item_StatusOrder_Items_AggregateArgs = {
  distinct_on?: Maybe<Array<Stock_Order_Item_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Order_Item_Order_By>>;
  where?: Maybe<Stock_Order_Item_Bool_Exp>;
};

/** aggregated selection of "stock.order_item_status" */
export type Stock_Order_Item_Status_Aggregate = {
  __typename?: 'stock_order_item_status_aggregate';
  aggregate?: Maybe<Stock_Order_Item_Status_Aggregate_Fields>;
  nodes: Array<Stock_Order_Item_Status>;
};

/** aggregate fields of "stock.order_item_status" */
export type Stock_Order_Item_Status_Aggregate_Fields = {
  __typename?: 'stock_order_item_status_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Stock_Order_Item_Status_Max_Fields>;
  min?: Maybe<Stock_Order_Item_Status_Min_Fields>;
};


/** aggregate fields of "stock.order_item_status" */
export type Stock_Order_Item_Status_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Stock_Order_Item_Status_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** Boolean expression to filter rows from the table "stock.order_item_status". All fields are combined with a logical 'AND'. */
export type Stock_Order_Item_Status_Bool_Exp = {
  _and?: Maybe<Array<Stock_Order_Item_Status_Bool_Exp>>;
  _not?: Maybe<Stock_Order_Item_Status_Bool_Exp>;
  _or?: Maybe<Array<Stock_Order_Item_Status_Bool_Exp>>;
  key?: Maybe<String_Comparison_Exp>;
  order_items?: Maybe<Stock_Order_Item_Bool_Exp>;
  status?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "stock.order_item_status" */
export enum Stock_Order_Item_Status_Constraint {
  /** unique or primary key constraint */
  OrderItemStatusPkey = 'order_item_status_pkey',
  /** unique or primary key constraint */
  OrderItemStatusStatusKey = 'order_item_status_status_key'
}

/** input type for inserting data into table "stock.order_item_status" */
export type Stock_Order_Item_Status_Insert_Input = {
  key?: Maybe<Scalars['String']>;
  order_items?: Maybe<Stock_Order_Item_Arr_Rel_Insert_Input>;
  status?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Stock_Order_Item_Status_Max_Fields = {
  __typename?: 'stock_order_item_status_max_fields';
  key?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type Stock_Order_Item_Status_Min_Fields = {
  __typename?: 'stock_order_item_status_min_fields';
  key?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
};

/** response of any mutation on the table "stock.order_item_status" */
export type Stock_Order_Item_Status_Mutation_Response = {
  __typename?: 'stock_order_item_status_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Stock_Order_Item_Status>;
};

/** input type for inserting object relation for remote table "stock.order_item_status" */
export type Stock_Order_Item_Status_Obj_Rel_Insert_Input = {
  data: Stock_Order_Item_Status_Insert_Input;
  /** on conflict condition */
  on_conflict?: Maybe<Stock_Order_Item_Status_On_Conflict>;
};

/** on conflict condition type for table "stock.order_item_status" */
export type Stock_Order_Item_Status_On_Conflict = {
  constraint: Stock_Order_Item_Status_Constraint;
  update_columns?: Array<Stock_Order_Item_Status_Update_Column>;
  where?: Maybe<Stock_Order_Item_Status_Bool_Exp>;
};

/** Ordering options when selecting data from "stock.order_item_status". */
export type Stock_Order_Item_Status_Order_By = {
  key?: Maybe<Order_By>;
  order_items_aggregate?: Maybe<Stock_Order_Item_Aggregate_Order_By>;
  status?: Maybe<Order_By>;
};

/** primary key columns input for table: stock_order_item_status */
export type Stock_Order_Item_Status_Pk_Columns_Input = {
  key: Scalars['String'];
};

/** select columns of table "stock.order_item_status" */
export enum Stock_Order_Item_Status_Select_Column {
  /** column name */
  Key = 'key',
  /** column name */
  Status = 'status'
}

/** input type for updating data in table "stock.order_item_status" */
export type Stock_Order_Item_Status_Set_Input = {
  key?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
};

/** update columns of table "stock.order_item_status" */
export enum Stock_Order_Item_Status_Update_Column {
  /** column name */
  Key = 'key',
  /** column name */
  Status = 'status'
}

/** aggregate stddev on columns */
export type Stock_Order_Item_Stddev_Fields = {
  __typename?: 'stock_order_item_stddev_fields';
  quantity?: Maybe<Scalars['Float']>;
  transfer_orderid?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "stock.order_item" */
export type Stock_Order_Item_Stddev_Order_By = {
  quantity?: Maybe<Order_By>;
  transfer_orderid?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Stock_Order_Item_Stddev_Pop_Fields = {
  __typename?: 'stock_order_item_stddev_pop_fields';
  quantity?: Maybe<Scalars['Float']>;
  transfer_orderid?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "stock.order_item" */
export type Stock_Order_Item_Stddev_Pop_Order_By = {
  quantity?: Maybe<Order_By>;
  transfer_orderid?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Stock_Order_Item_Stddev_Samp_Fields = {
  __typename?: 'stock_order_item_stddev_samp_fields';
  quantity?: Maybe<Scalars['Float']>;
  transfer_orderid?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "stock.order_item" */
export type Stock_Order_Item_Stddev_Samp_Order_By = {
  quantity?: Maybe<Order_By>;
  transfer_orderid?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Stock_Order_Item_Sum_Fields = {
  __typename?: 'stock_order_item_sum_fields';
  quantity?: Maybe<Scalars['Float']>;
  transfer_orderid?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "stock.order_item" */
export type Stock_Order_Item_Sum_Order_By = {
  quantity?: Maybe<Order_By>;
  transfer_orderid?: Maybe<Order_By>;
};

/** update columns of table "stock.order_item" */
export enum Stock_Order_Item_Update_Column {
  /** column name */
  Id = 'id',
  /** column name */
  Quantity = 'quantity',
  /** column name */
  Status = 'status',
  /** column name */
  Substanceid = 'substanceid',
  /** column name */
  TransferOrderid = 'transfer_orderid'
}

/** aggregate var_pop on columns */
export type Stock_Order_Item_Var_Pop_Fields = {
  __typename?: 'stock_order_item_var_pop_fields';
  quantity?: Maybe<Scalars['Float']>;
  transfer_orderid?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "stock.order_item" */
export type Stock_Order_Item_Var_Pop_Order_By = {
  quantity?: Maybe<Order_By>;
  transfer_orderid?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Stock_Order_Item_Var_Samp_Fields = {
  __typename?: 'stock_order_item_var_samp_fields';
  quantity?: Maybe<Scalars['Float']>;
  transfer_orderid?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "stock.order_item" */
export type Stock_Order_Item_Var_Samp_Order_By = {
  quantity?: Maybe<Order_By>;
  transfer_orderid?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Stock_Order_Item_Variance_Fields = {
  __typename?: 'stock_order_item_variance_fields';
  quantity?: Maybe<Scalars['Float']>;
  transfer_orderid?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "stock.order_item" */
export type Stock_Order_Item_Variance_Order_By = {
  quantity?: Maybe<Order_By>;
  transfer_orderid?: Maybe<Order_By>;
};

/** columns and relationships of "stock.stock_adjustment" */
export type Stock_Stock_Adjustment = {
  __typename?: 'stock_stock_adjustment';
  /** An object relationship */
  adjustment_reason: Stock_Adjustment_Reasons;
  createdBy?: Maybe<Scalars['String']>;
  date: Scalars['date'];
  id: Scalars['uuid'];
  newQuantity: Scalars['Float'];
  note?: Maybe<Scalars['String']>;
  oldQuantity: Scalars['Float'];
  reason: Stock_Adjustment_Reasons_Enum;
  ref: Scalars['Int'];
  substance_id: Scalars['uuid'];
  /** An object relationship */
  userProfile?: Maybe<Management_UserProfile>;
  warehouse_id: Scalars['uuid'];
  /** An object relationship */
  warehouse_substance?: Maybe<Stock_Warehouse_Substance>;
};

/** aggregated selection of "stock.stock_adjustment" */
export type Stock_Stock_Adjustment_Aggregate = {
  __typename?: 'stock_stock_adjustment_aggregate';
  aggregate?: Maybe<Stock_Stock_Adjustment_Aggregate_Fields>;
  nodes: Array<Stock_Stock_Adjustment>;
};

/** aggregate fields of "stock.stock_adjustment" */
export type Stock_Stock_Adjustment_Aggregate_Fields = {
  __typename?: 'stock_stock_adjustment_aggregate_fields';
  avg?: Maybe<Stock_Stock_Adjustment_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Stock_Stock_Adjustment_Max_Fields>;
  min?: Maybe<Stock_Stock_Adjustment_Min_Fields>;
  stddev?: Maybe<Stock_Stock_Adjustment_Stddev_Fields>;
  stddev_pop?: Maybe<Stock_Stock_Adjustment_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Stock_Stock_Adjustment_Stddev_Samp_Fields>;
  sum?: Maybe<Stock_Stock_Adjustment_Sum_Fields>;
  var_pop?: Maybe<Stock_Stock_Adjustment_Var_Pop_Fields>;
  var_samp?: Maybe<Stock_Stock_Adjustment_Var_Samp_Fields>;
  variance?: Maybe<Stock_Stock_Adjustment_Variance_Fields>;
};


/** aggregate fields of "stock.stock_adjustment" */
export type Stock_Stock_Adjustment_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Stock_Stock_Adjustment_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "stock.stock_adjustment" */
export type Stock_Stock_Adjustment_Aggregate_Order_By = {
  avg?: Maybe<Stock_Stock_Adjustment_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Stock_Stock_Adjustment_Max_Order_By>;
  min?: Maybe<Stock_Stock_Adjustment_Min_Order_By>;
  stddev?: Maybe<Stock_Stock_Adjustment_Stddev_Order_By>;
  stddev_pop?: Maybe<Stock_Stock_Adjustment_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Stock_Stock_Adjustment_Stddev_Samp_Order_By>;
  sum?: Maybe<Stock_Stock_Adjustment_Sum_Order_By>;
  var_pop?: Maybe<Stock_Stock_Adjustment_Var_Pop_Order_By>;
  var_samp?: Maybe<Stock_Stock_Adjustment_Var_Samp_Order_By>;
  variance?: Maybe<Stock_Stock_Adjustment_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "stock.stock_adjustment" */
export type Stock_Stock_Adjustment_Arr_Rel_Insert_Input = {
  data: Array<Stock_Stock_Adjustment_Insert_Input>;
  /** on conflict condition */
  on_conflict?: Maybe<Stock_Stock_Adjustment_On_Conflict>;
};

/** aggregate avg on columns */
export type Stock_Stock_Adjustment_Avg_Fields = {
  __typename?: 'stock_stock_adjustment_avg_fields';
  newQuantity?: Maybe<Scalars['Float']>;
  oldQuantity?: Maybe<Scalars['Float']>;
  ref?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "stock.stock_adjustment" */
export type Stock_Stock_Adjustment_Avg_Order_By = {
  newQuantity?: Maybe<Order_By>;
  oldQuantity?: Maybe<Order_By>;
  ref?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "stock.stock_adjustment". All fields are combined with a logical 'AND'. */
export type Stock_Stock_Adjustment_Bool_Exp = {
  _and?: Maybe<Array<Stock_Stock_Adjustment_Bool_Exp>>;
  _not?: Maybe<Stock_Stock_Adjustment_Bool_Exp>;
  _or?: Maybe<Array<Stock_Stock_Adjustment_Bool_Exp>>;
  adjustment_reason?: Maybe<Stock_Adjustment_Reasons_Bool_Exp>;
  createdBy?: Maybe<String_Comparison_Exp>;
  date?: Maybe<Date_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  newQuantity?: Maybe<Float_Comparison_Exp>;
  note?: Maybe<String_Comparison_Exp>;
  oldQuantity?: Maybe<Float_Comparison_Exp>;
  reason?: Maybe<Stock_Adjustment_Reasons_Enum_Comparison_Exp>;
  ref?: Maybe<Int_Comparison_Exp>;
  substance_id?: Maybe<Uuid_Comparison_Exp>;
  userProfile?: Maybe<Management_UserProfile_Bool_Exp>;
  warehouse_id?: Maybe<Uuid_Comparison_Exp>;
  warehouse_substance?: Maybe<Stock_Warehouse_Substance_Bool_Exp>;
};

/** unique or primary key constraints on table "stock.stock_adjustment" */
export enum Stock_Stock_Adjustment_Constraint {
  /** unique or primary key constraint */
  StockAdjustmentPkey = 'stock_adjustment_pkey',
  /** unique or primary key constraint */
  StockAdjustmentRefKey = 'stock_adjustment_ref_key'
}

/** input type for incrementing numeric columns in table "stock.stock_adjustment" */
export type Stock_Stock_Adjustment_Inc_Input = {
  newQuantity?: Maybe<Scalars['Float']>;
  oldQuantity?: Maybe<Scalars['Float']>;
  ref?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "stock.stock_adjustment" */
export type Stock_Stock_Adjustment_Insert_Input = {
  adjustment_reason?: Maybe<Stock_Adjustment_Reasons_Obj_Rel_Insert_Input>;
  createdBy?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['date']>;
  id?: Maybe<Scalars['uuid']>;
  newQuantity?: Maybe<Scalars['Float']>;
  note?: Maybe<Scalars['String']>;
  oldQuantity?: Maybe<Scalars['Float']>;
  reason?: Maybe<Stock_Adjustment_Reasons_Enum>;
  ref?: Maybe<Scalars['Int']>;
  substance_id?: Maybe<Scalars['uuid']>;
  userProfile?: Maybe<Management_UserProfile_Obj_Rel_Insert_Input>;
  warehouse_id?: Maybe<Scalars['uuid']>;
  warehouse_substance?: Maybe<Stock_Warehouse_Substance_Obj_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Stock_Stock_Adjustment_Max_Fields = {
  __typename?: 'stock_stock_adjustment_max_fields';
  createdBy?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['date']>;
  id?: Maybe<Scalars['uuid']>;
  newQuantity?: Maybe<Scalars['Float']>;
  note?: Maybe<Scalars['String']>;
  oldQuantity?: Maybe<Scalars['Float']>;
  ref?: Maybe<Scalars['Int']>;
  substance_id?: Maybe<Scalars['uuid']>;
  warehouse_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "stock.stock_adjustment" */
export type Stock_Stock_Adjustment_Max_Order_By = {
  createdBy?: Maybe<Order_By>;
  date?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  newQuantity?: Maybe<Order_By>;
  note?: Maybe<Order_By>;
  oldQuantity?: Maybe<Order_By>;
  ref?: Maybe<Order_By>;
  substance_id?: Maybe<Order_By>;
  warehouse_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Stock_Stock_Adjustment_Min_Fields = {
  __typename?: 'stock_stock_adjustment_min_fields';
  createdBy?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['date']>;
  id?: Maybe<Scalars['uuid']>;
  newQuantity?: Maybe<Scalars['Float']>;
  note?: Maybe<Scalars['String']>;
  oldQuantity?: Maybe<Scalars['Float']>;
  ref?: Maybe<Scalars['Int']>;
  substance_id?: Maybe<Scalars['uuid']>;
  warehouse_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "stock.stock_adjustment" */
export type Stock_Stock_Adjustment_Min_Order_By = {
  createdBy?: Maybe<Order_By>;
  date?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  newQuantity?: Maybe<Order_By>;
  note?: Maybe<Order_By>;
  oldQuantity?: Maybe<Order_By>;
  ref?: Maybe<Order_By>;
  substance_id?: Maybe<Order_By>;
  warehouse_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "stock.stock_adjustment" */
export type Stock_Stock_Adjustment_Mutation_Response = {
  __typename?: 'stock_stock_adjustment_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Stock_Stock_Adjustment>;
};

/** on conflict condition type for table "stock.stock_adjustment" */
export type Stock_Stock_Adjustment_On_Conflict = {
  constraint: Stock_Stock_Adjustment_Constraint;
  update_columns?: Array<Stock_Stock_Adjustment_Update_Column>;
  where?: Maybe<Stock_Stock_Adjustment_Bool_Exp>;
};

/** Ordering options when selecting data from "stock.stock_adjustment". */
export type Stock_Stock_Adjustment_Order_By = {
  adjustment_reason?: Maybe<Stock_Adjustment_Reasons_Order_By>;
  createdBy?: Maybe<Order_By>;
  date?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  newQuantity?: Maybe<Order_By>;
  note?: Maybe<Order_By>;
  oldQuantity?: Maybe<Order_By>;
  reason?: Maybe<Order_By>;
  ref?: Maybe<Order_By>;
  substance_id?: Maybe<Order_By>;
  userProfile?: Maybe<Management_UserProfile_Order_By>;
  warehouse_id?: Maybe<Order_By>;
  warehouse_substance?: Maybe<Stock_Warehouse_Substance_Order_By>;
};

/** primary key columns input for table: stock_stock_adjustment */
export type Stock_Stock_Adjustment_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "stock.stock_adjustment" */
export enum Stock_Stock_Adjustment_Select_Column {
  /** column name */
  CreatedBy = 'createdBy',
  /** column name */
  Date = 'date',
  /** column name */
  Id = 'id',
  /** column name */
  NewQuantity = 'newQuantity',
  /** column name */
  Note = 'note',
  /** column name */
  OldQuantity = 'oldQuantity',
  /** column name */
  Reason = 'reason',
  /** column name */
  Ref = 'ref',
  /** column name */
  SubstanceId = 'substance_id',
  /** column name */
  WarehouseId = 'warehouse_id'
}

/** input type for updating data in table "stock.stock_adjustment" */
export type Stock_Stock_Adjustment_Set_Input = {
  createdBy?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['date']>;
  id?: Maybe<Scalars['uuid']>;
  newQuantity?: Maybe<Scalars['Float']>;
  note?: Maybe<Scalars['String']>;
  oldQuantity?: Maybe<Scalars['Float']>;
  reason?: Maybe<Stock_Adjustment_Reasons_Enum>;
  ref?: Maybe<Scalars['Int']>;
  substance_id?: Maybe<Scalars['uuid']>;
  warehouse_id?: Maybe<Scalars['uuid']>;
};

/** aggregate stddev on columns */
export type Stock_Stock_Adjustment_Stddev_Fields = {
  __typename?: 'stock_stock_adjustment_stddev_fields';
  newQuantity?: Maybe<Scalars['Float']>;
  oldQuantity?: Maybe<Scalars['Float']>;
  ref?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "stock.stock_adjustment" */
export type Stock_Stock_Adjustment_Stddev_Order_By = {
  newQuantity?: Maybe<Order_By>;
  oldQuantity?: Maybe<Order_By>;
  ref?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Stock_Stock_Adjustment_Stddev_Pop_Fields = {
  __typename?: 'stock_stock_adjustment_stddev_pop_fields';
  newQuantity?: Maybe<Scalars['Float']>;
  oldQuantity?: Maybe<Scalars['Float']>;
  ref?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "stock.stock_adjustment" */
export type Stock_Stock_Adjustment_Stddev_Pop_Order_By = {
  newQuantity?: Maybe<Order_By>;
  oldQuantity?: Maybe<Order_By>;
  ref?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Stock_Stock_Adjustment_Stddev_Samp_Fields = {
  __typename?: 'stock_stock_adjustment_stddev_samp_fields';
  newQuantity?: Maybe<Scalars['Float']>;
  oldQuantity?: Maybe<Scalars['Float']>;
  ref?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "stock.stock_adjustment" */
export type Stock_Stock_Adjustment_Stddev_Samp_Order_By = {
  newQuantity?: Maybe<Order_By>;
  oldQuantity?: Maybe<Order_By>;
  ref?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Stock_Stock_Adjustment_Sum_Fields = {
  __typename?: 'stock_stock_adjustment_sum_fields';
  newQuantity?: Maybe<Scalars['Float']>;
  oldQuantity?: Maybe<Scalars['Float']>;
  ref?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "stock.stock_adjustment" */
export type Stock_Stock_Adjustment_Sum_Order_By = {
  newQuantity?: Maybe<Order_By>;
  oldQuantity?: Maybe<Order_By>;
  ref?: Maybe<Order_By>;
};

/** update columns of table "stock.stock_adjustment" */
export enum Stock_Stock_Adjustment_Update_Column {
  /** column name */
  CreatedBy = 'createdBy',
  /** column name */
  Date = 'date',
  /** column name */
  Id = 'id',
  /** column name */
  NewQuantity = 'newQuantity',
  /** column name */
  Note = 'note',
  /** column name */
  OldQuantity = 'oldQuantity',
  /** column name */
  Reason = 'reason',
  /** column name */
  Ref = 'ref',
  /** column name */
  SubstanceId = 'substance_id',
  /** column name */
  WarehouseId = 'warehouse_id'
}

/** aggregate var_pop on columns */
export type Stock_Stock_Adjustment_Var_Pop_Fields = {
  __typename?: 'stock_stock_adjustment_var_pop_fields';
  newQuantity?: Maybe<Scalars['Float']>;
  oldQuantity?: Maybe<Scalars['Float']>;
  ref?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "stock.stock_adjustment" */
export type Stock_Stock_Adjustment_Var_Pop_Order_By = {
  newQuantity?: Maybe<Order_By>;
  oldQuantity?: Maybe<Order_By>;
  ref?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Stock_Stock_Adjustment_Var_Samp_Fields = {
  __typename?: 'stock_stock_adjustment_var_samp_fields';
  newQuantity?: Maybe<Scalars['Float']>;
  oldQuantity?: Maybe<Scalars['Float']>;
  ref?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "stock.stock_adjustment" */
export type Stock_Stock_Adjustment_Var_Samp_Order_By = {
  newQuantity?: Maybe<Order_By>;
  oldQuantity?: Maybe<Order_By>;
  ref?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Stock_Stock_Adjustment_Variance_Fields = {
  __typename?: 'stock_stock_adjustment_variance_fields';
  newQuantity?: Maybe<Scalars['Float']>;
  oldQuantity?: Maybe<Scalars['Float']>;
  ref?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "stock.stock_adjustment" */
export type Stock_Stock_Adjustment_Variance_Order_By = {
  newQuantity?: Maybe<Order_By>;
  oldQuantity?: Maybe<Order_By>;
  ref?: Maybe<Order_By>;
};

/** columns and relationships of "stock.transfer_order" */
export type Stock_Transfer_Order = {
  __typename?: 'stock_transfer_order';
  createdAt: Scalars['date'];
  createdBy?: Maybe<Scalars['String']>;
  date: Scalars['date'];
  deadline?: Maybe<Scalars['date']>;
  fromWarehouseid: Scalars['uuid'];
  /** An object relationship */
  fromwarehouse: Stock_Warehouse;
  id: Scalars['Int'];
  /** An array relationship */
  order_items: Array<Stock_Order_Item>;
  /** An aggregate relationship */
  order_items_aggregate: Stock_Order_Item_Aggregate;
  status: Scalars['String'];
  toWarehouseid: Scalars['uuid'];
  /** An object relationship */
  towarehouse: Stock_Warehouse;
  /** An object relationship */
  transfer_status: Stock_Transfer_Order_Status;
  updatedAt: Scalars['date'];
  updatedBy?: Maybe<Scalars['String']>;
};


/** columns and relationships of "stock.transfer_order" */
export type Stock_Transfer_OrderOrder_ItemsArgs = {
  distinct_on?: Maybe<Array<Stock_Order_Item_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Order_Item_Order_By>>;
  where?: Maybe<Stock_Order_Item_Bool_Exp>;
};


/** columns and relationships of "stock.transfer_order" */
export type Stock_Transfer_OrderOrder_Items_AggregateArgs = {
  distinct_on?: Maybe<Array<Stock_Order_Item_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Order_Item_Order_By>>;
  where?: Maybe<Stock_Order_Item_Bool_Exp>;
};

/** aggregated selection of "stock.transfer_order" */
export type Stock_Transfer_Order_Aggregate = {
  __typename?: 'stock_transfer_order_aggregate';
  aggregate?: Maybe<Stock_Transfer_Order_Aggregate_Fields>;
  nodes: Array<Stock_Transfer_Order>;
};

/** aggregate fields of "stock.transfer_order" */
export type Stock_Transfer_Order_Aggregate_Fields = {
  __typename?: 'stock_transfer_order_aggregate_fields';
  avg?: Maybe<Stock_Transfer_Order_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Stock_Transfer_Order_Max_Fields>;
  min?: Maybe<Stock_Transfer_Order_Min_Fields>;
  stddev?: Maybe<Stock_Transfer_Order_Stddev_Fields>;
  stddev_pop?: Maybe<Stock_Transfer_Order_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Stock_Transfer_Order_Stddev_Samp_Fields>;
  sum?: Maybe<Stock_Transfer_Order_Sum_Fields>;
  var_pop?: Maybe<Stock_Transfer_Order_Var_Pop_Fields>;
  var_samp?: Maybe<Stock_Transfer_Order_Var_Samp_Fields>;
  variance?: Maybe<Stock_Transfer_Order_Variance_Fields>;
};


/** aggregate fields of "stock.transfer_order" */
export type Stock_Transfer_Order_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Stock_Transfer_Order_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "stock.transfer_order" */
export type Stock_Transfer_Order_Aggregate_Order_By = {
  avg?: Maybe<Stock_Transfer_Order_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Stock_Transfer_Order_Max_Order_By>;
  min?: Maybe<Stock_Transfer_Order_Min_Order_By>;
  stddev?: Maybe<Stock_Transfer_Order_Stddev_Order_By>;
  stddev_pop?: Maybe<Stock_Transfer_Order_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Stock_Transfer_Order_Stddev_Samp_Order_By>;
  sum?: Maybe<Stock_Transfer_Order_Sum_Order_By>;
  var_pop?: Maybe<Stock_Transfer_Order_Var_Pop_Order_By>;
  var_samp?: Maybe<Stock_Transfer_Order_Var_Samp_Order_By>;
  variance?: Maybe<Stock_Transfer_Order_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "stock.transfer_order" */
export type Stock_Transfer_Order_Arr_Rel_Insert_Input = {
  data: Array<Stock_Transfer_Order_Insert_Input>;
  /** on conflict condition */
  on_conflict?: Maybe<Stock_Transfer_Order_On_Conflict>;
};

/** aggregate avg on columns */
export type Stock_Transfer_Order_Avg_Fields = {
  __typename?: 'stock_transfer_order_avg_fields';
  id?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "stock.transfer_order" */
export type Stock_Transfer_Order_Avg_Order_By = {
  id?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "stock.transfer_order". All fields are combined with a logical 'AND'. */
export type Stock_Transfer_Order_Bool_Exp = {
  _and?: Maybe<Array<Stock_Transfer_Order_Bool_Exp>>;
  _not?: Maybe<Stock_Transfer_Order_Bool_Exp>;
  _or?: Maybe<Array<Stock_Transfer_Order_Bool_Exp>>;
  createdAt?: Maybe<Date_Comparison_Exp>;
  createdBy?: Maybe<String_Comparison_Exp>;
  date?: Maybe<Date_Comparison_Exp>;
  deadline?: Maybe<Date_Comparison_Exp>;
  fromWarehouseid?: Maybe<Uuid_Comparison_Exp>;
  fromwarehouse?: Maybe<Stock_Warehouse_Bool_Exp>;
  id?: Maybe<Int_Comparison_Exp>;
  order_items?: Maybe<Stock_Order_Item_Bool_Exp>;
  status?: Maybe<String_Comparison_Exp>;
  toWarehouseid?: Maybe<Uuid_Comparison_Exp>;
  towarehouse?: Maybe<Stock_Warehouse_Bool_Exp>;
  transfer_status?: Maybe<Stock_Transfer_Order_Status_Bool_Exp>;
  updatedAt?: Maybe<Date_Comparison_Exp>;
  updatedBy?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "stock.transfer_order" */
export enum Stock_Transfer_Order_Constraint {
  /** unique or primary key constraint */
  TransferOrderIdKey = 'transfer_order_id_key',
  /** unique or primary key constraint */
  TransferOrderPkey = 'transfer_order_pkey'
}

/** input type for incrementing numeric columns in table "stock.transfer_order" */
export type Stock_Transfer_Order_Inc_Input = {
  id?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "stock.transfer_order" */
export type Stock_Transfer_Order_Insert_Input = {
  createdAt?: Maybe<Scalars['date']>;
  createdBy?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['date']>;
  deadline?: Maybe<Scalars['date']>;
  fromWarehouseid?: Maybe<Scalars['uuid']>;
  fromwarehouse?: Maybe<Stock_Warehouse_Obj_Rel_Insert_Input>;
  id?: Maybe<Scalars['Int']>;
  order_items?: Maybe<Stock_Order_Item_Arr_Rel_Insert_Input>;
  status?: Maybe<Scalars['String']>;
  toWarehouseid?: Maybe<Scalars['uuid']>;
  towarehouse?: Maybe<Stock_Warehouse_Obj_Rel_Insert_Input>;
  transfer_status?: Maybe<Stock_Transfer_Order_Status_Obj_Rel_Insert_Input>;
  updatedAt?: Maybe<Scalars['date']>;
  updatedBy?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Stock_Transfer_Order_Max_Fields = {
  __typename?: 'stock_transfer_order_max_fields';
  createdAt?: Maybe<Scalars['date']>;
  createdBy?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['date']>;
  deadline?: Maybe<Scalars['date']>;
  fromWarehouseid?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['Int']>;
  status?: Maybe<Scalars['String']>;
  toWarehouseid?: Maybe<Scalars['uuid']>;
  updatedAt?: Maybe<Scalars['date']>;
  updatedBy?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "stock.transfer_order" */
export type Stock_Transfer_Order_Max_Order_By = {
  createdAt?: Maybe<Order_By>;
  createdBy?: Maybe<Order_By>;
  date?: Maybe<Order_By>;
  deadline?: Maybe<Order_By>;
  fromWarehouseid?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  status?: Maybe<Order_By>;
  toWarehouseid?: Maybe<Order_By>;
  updatedAt?: Maybe<Order_By>;
  updatedBy?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Stock_Transfer_Order_Min_Fields = {
  __typename?: 'stock_transfer_order_min_fields';
  createdAt?: Maybe<Scalars['date']>;
  createdBy?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['date']>;
  deadline?: Maybe<Scalars['date']>;
  fromWarehouseid?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['Int']>;
  status?: Maybe<Scalars['String']>;
  toWarehouseid?: Maybe<Scalars['uuid']>;
  updatedAt?: Maybe<Scalars['date']>;
  updatedBy?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "stock.transfer_order" */
export type Stock_Transfer_Order_Min_Order_By = {
  createdAt?: Maybe<Order_By>;
  createdBy?: Maybe<Order_By>;
  date?: Maybe<Order_By>;
  deadline?: Maybe<Order_By>;
  fromWarehouseid?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  status?: Maybe<Order_By>;
  toWarehouseid?: Maybe<Order_By>;
  updatedAt?: Maybe<Order_By>;
  updatedBy?: Maybe<Order_By>;
};

/** response of any mutation on the table "stock.transfer_order" */
export type Stock_Transfer_Order_Mutation_Response = {
  __typename?: 'stock_transfer_order_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Stock_Transfer_Order>;
};

/** input type for inserting object relation for remote table "stock.transfer_order" */
export type Stock_Transfer_Order_Obj_Rel_Insert_Input = {
  data: Stock_Transfer_Order_Insert_Input;
  /** on conflict condition */
  on_conflict?: Maybe<Stock_Transfer_Order_On_Conflict>;
};

/** on conflict condition type for table "stock.transfer_order" */
export type Stock_Transfer_Order_On_Conflict = {
  constraint: Stock_Transfer_Order_Constraint;
  update_columns?: Array<Stock_Transfer_Order_Update_Column>;
  where?: Maybe<Stock_Transfer_Order_Bool_Exp>;
};

/** Ordering options when selecting data from "stock.transfer_order". */
export type Stock_Transfer_Order_Order_By = {
  createdAt?: Maybe<Order_By>;
  createdBy?: Maybe<Order_By>;
  date?: Maybe<Order_By>;
  deadline?: Maybe<Order_By>;
  fromWarehouseid?: Maybe<Order_By>;
  fromwarehouse?: Maybe<Stock_Warehouse_Order_By>;
  id?: Maybe<Order_By>;
  order_items_aggregate?: Maybe<Stock_Order_Item_Aggregate_Order_By>;
  status?: Maybe<Order_By>;
  toWarehouseid?: Maybe<Order_By>;
  towarehouse?: Maybe<Stock_Warehouse_Order_By>;
  transfer_status?: Maybe<Stock_Transfer_Order_Status_Order_By>;
  updatedAt?: Maybe<Order_By>;
  updatedBy?: Maybe<Order_By>;
};

/** primary key columns input for table: stock_transfer_order */
export type Stock_Transfer_Order_Pk_Columns_Input = {
  id: Scalars['Int'];
};

/** select columns of table "stock.transfer_order" */
export enum Stock_Transfer_Order_Select_Column {
  /** column name */
  CreatedAt = 'createdAt',
  /** column name */
  CreatedBy = 'createdBy',
  /** column name */
  Date = 'date',
  /** column name */
  Deadline = 'deadline',
  /** column name */
  FromWarehouseid = 'fromWarehouseid',
  /** column name */
  Id = 'id',
  /** column name */
  Status = 'status',
  /** column name */
  ToWarehouseid = 'toWarehouseid',
  /** column name */
  UpdatedAt = 'updatedAt',
  /** column name */
  UpdatedBy = 'updatedBy'
}

/** input type for updating data in table "stock.transfer_order" */
export type Stock_Transfer_Order_Set_Input = {
  createdAt?: Maybe<Scalars['date']>;
  createdBy?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['date']>;
  deadline?: Maybe<Scalars['date']>;
  fromWarehouseid?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['Int']>;
  status?: Maybe<Scalars['String']>;
  toWarehouseid?: Maybe<Scalars['uuid']>;
  updatedAt?: Maybe<Scalars['date']>;
  updatedBy?: Maybe<Scalars['String']>;
};

/** columns and relationships of "stock.transfer_order_status" */
export type Stock_Transfer_Order_Status = {
  __typename?: 'stock_transfer_order_status';
  key: Scalars['String'];
  status: Scalars['String'];
  /** An array relationship */
  transfer_orders: Array<Stock_Transfer_Order>;
  /** An aggregate relationship */
  transfer_orders_aggregate: Stock_Transfer_Order_Aggregate;
};


/** columns and relationships of "stock.transfer_order_status" */
export type Stock_Transfer_Order_StatusTransfer_OrdersArgs = {
  distinct_on?: Maybe<Array<Stock_Transfer_Order_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Transfer_Order_Order_By>>;
  where?: Maybe<Stock_Transfer_Order_Bool_Exp>;
};


/** columns and relationships of "stock.transfer_order_status" */
export type Stock_Transfer_Order_StatusTransfer_Orders_AggregateArgs = {
  distinct_on?: Maybe<Array<Stock_Transfer_Order_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Transfer_Order_Order_By>>;
  where?: Maybe<Stock_Transfer_Order_Bool_Exp>;
};

/** aggregated selection of "stock.transfer_order_status" */
export type Stock_Transfer_Order_Status_Aggregate = {
  __typename?: 'stock_transfer_order_status_aggregate';
  aggregate?: Maybe<Stock_Transfer_Order_Status_Aggregate_Fields>;
  nodes: Array<Stock_Transfer_Order_Status>;
};

/** aggregate fields of "stock.transfer_order_status" */
export type Stock_Transfer_Order_Status_Aggregate_Fields = {
  __typename?: 'stock_transfer_order_status_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Stock_Transfer_Order_Status_Max_Fields>;
  min?: Maybe<Stock_Transfer_Order_Status_Min_Fields>;
};


/** aggregate fields of "stock.transfer_order_status" */
export type Stock_Transfer_Order_Status_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Stock_Transfer_Order_Status_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** Boolean expression to filter rows from the table "stock.transfer_order_status". All fields are combined with a logical 'AND'. */
export type Stock_Transfer_Order_Status_Bool_Exp = {
  _and?: Maybe<Array<Stock_Transfer_Order_Status_Bool_Exp>>;
  _not?: Maybe<Stock_Transfer_Order_Status_Bool_Exp>;
  _or?: Maybe<Array<Stock_Transfer_Order_Status_Bool_Exp>>;
  key?: Maybe<String_Comparison_Exp>;
  status?: Maybe<String_Comparison_Exp>;
  transfer_orders?: Maybe<Stock_Transfer_Order_Bool_Exp>;
};

/** unique or primary key constraints on table "stock.transfer_order_status" */
export enum Stock_Transfer_Order_Status_Constraint {
  /** unique or primary key constraint */
  TransferStatusPkey = 'transfer_status_pkey',
  /** unique or primary key constraint */
  TransferStatusStatusKey = 'transfer_status_status_key'
}

/** input type for inserting data into table "stock.transfer_order_status" */
export type Stock_Transfer_Order_Status_Insert_Input = {
  key?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  transfer_orders?: Maybe<Stock_Transfer_Order_Arr_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Stock_Transfer_Order_Status_Max_Fields = {
  __typename?: 'stock_transfer_order_status_max_fields';
  key?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type Stock_Transfer_Order_Status_Min_Fields = {
  __typename?: 'stock_transfer_order_status_min_fields';
  key?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
};

/** response of any mutation on the table "stock.transfer_order_status" */
export type Stock_Transfer_Order_Status_Mutation_Response = {
  __typename?: 'stock_transfer_order_status_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Stock_Transfer_Order_Status>;
};

/** input type for inserting object relation for remote table "stock.transfer_order_status" */
export type Stock_Transfer_Order_Status_Obj_Rel_Insert_Input = {
  data: Stock_Transfer_Order_Status_Insert_Input;
  /** on conflict condition */
  on_conflict?: Maybe<Stock_Transfer_Order_Status_On_Conflict>;
};

/** on conflict condition type for table "stock.transfer_order_status" */
export type Stock_Transfer_Order_Status_On_Conflict = {
  constraint: Stock_Transfer_Order_Status_Constraint;
  update_columns?: Array<Stock_Transfer_Order_Status_Update_Column>;
  where?: Maybe<Stock_Transfer_Order_Status_Bool_Exp>;
};

/** Ordering options when selecting data from "stock.transfer_order_status". */
export type Stock_Transfer_Order_Status_Order_By = {
  key?: Maybe<Order_By>;
  status?: Maybe<Order_By>;
  transfer_orders_aggregate?: Maybe<Stock_Transfer_Order_Aggregate_Order_By>;
};

/** primary key columns input for table: stock_transfer_order_status */
export type Stock_Transfer_Order_Status_Pk_Columns_Input = {
  key: Scalars['String'];
};

/** select columns of table "stock.transfer_order_status" */
export enum Stock_Transfer_Order_Status_Select_Column {
  /** column name */
  Key = 'key',
  /** column name */
  Status = 'status'
}

/** input type for updating data in table "stock.transfer_order_status" */
export type Stock_Transfer_Order_Status_Set_Input = {
  key?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
};

/** update columns of table "stock.transfer_order_status" */
export enum Stock_Transfer_Order_Status_Update_Column {
  /** column name */
  Key = 'key',
  /** column name */
  Status = 'status'
}

/** aggregate stddev on columns */
export type Stock_Transfer_Order_Stddev_Fields = {
  __typename?: 'stock_transfer_order_stddev_fields';
  id?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "stock.transfer_order" */
export type Stock_Transfer_Order_Stddev_Order_By = {
  id?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Stock_Transfer_Order_Stddev_Pop_Fields = {
  __typename?: 'stock_transfer_order_stddev_pop_fields';
  id?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "stock.transfer_order" */
export type Stock_Transfer_Order_Stddev_Pop_Order_By = {
  id?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Stock_Transfer_Order_Stddev_Samp_Fields = {
  __typename?: 'stock_transfer_order_stddev_samp_fields';
  id?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "stock.transfer_order" */
export type Stock_Transfer_Order_Stddev_Samp_Order_By = {
  id?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Stock_Transfer_Order_Sum_Fields = {
  __typename?: 'stock_transfer_order_sum_fields';
  id?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "stock.transfer_order" */
export type Stock_Transfer_Order_Sum_Order_By = {
  id?: Maybe<Order_By>;
};

/** update columns of table "stock.transfer_order" */
export enum Stock_Transfer_Order_Update_Column {
  /** column name */
  CreatedAt = 'createdAt',
  /** column name */
  CreatedBy = 'createdBy',
  /** column name */
  Date = 'date',
  /** column name */
  Deadline = 'deadline',
  /** column name */
  FromWarehouseid = 'fromWarehouseid',
  /** column name */
  Id = 'id',
  /** column name */
  Status = 'status',
  /** column name */
  ToWarehouseid = 'toWarehouseid',
  /** column name */
  UpdatedAt = 'updatedAt',
  /** column name */
  UpdatedBy = 'updatedBy'
}

/** aggregate var_pop on columns */
export type Stock_Transfer_Order_Var_Pop_Fields = {
  __typename?: 'stock_transfer_order_var_pop_fields';
  id?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "stock.transfer_order" */
export type Stock_Transfer_Order_Var_Pop_Order_By = {
  id?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Stock_Transfer_Order_Var_Samp_Fields = {
  __typename?: 'stock_transfer_order_var_samp_fields';
  id?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "stock.transfer_order" */
export type Stock_Transfer_Order_Var_Samp_Order_By = {
  id?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Stock_Transfer_Order_Variance_Fields = {
  __typename?: 'stock_transfer_order_variance_fields';
  id?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "stock.transfer_order" */
export type Stock_Transfer_Order_Variance_Order_By = {
  id?: Maybe<Order_By>;
};

/** columns and relationships of "stock.warehouse" */
export type Stock_Warehouse = {
  __typename?: 'stock_warehouse';
  /** An object relationship */
  company: Management_Company;
  companyid: Scalars['uuid'];
  createdAt: Scalars['date'];
  createdBy?: Maybe<Scalars['String']>;
  /** An array relationship */
  delivery_items: Array<Purchase_Delivery_Item>;
  /** An aggregate relationship */
  delivery_items_aggregate: Purchase_Delivery_Item_Aggregate;
  id: Scalars['uuid'];
  name: Scalars['String'];
  /** An object relationship */
  salesPoint?: Maybe<Management_SalesPoint>;
  salesPointid?: Maybe<Scalars['uuid']>;
  /** An array relationship */
  transferOrdersFromWarehouse: Array<Stock_Transfer_Order>;
  /** An aggregate relationship */
  transferOrdersFromWarehouse_aggregate: Stock_Transfer_Order_Aggregate;
  /** An array relationship */
  transferOrdersToWarehouse: Array<Stock_Transfer_Order>;
  /** An aggregate relationship */
  transferOrdersToWarehouse_aggregate: Stock_Transfer_Order_Aggregate;
  updatedAt: Scalars['date'];
  updatedBy?: Maybe<Scalars['String']>;
  /** An array relationship */
  warehouse_subsctances: Array<Stock_Warehouse_Substance>;
  /** An aggregate relationship */
  warehouse_subsctances_aggregate: Stock_Warehouse_Substance_Aggregate;
};


/** columns and relationships of "stock.warehouse" */
export type Stock_WarehouseDelivery_ItemsArgs = {
  distinct_on?: Maybe<Array<Purchase_Delivery_Item_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Purchase_Delivery_Item_Order_By>>;
  where?: Maybe<Purchase_Delivery_Item_Bool_Exp>;
};


/** columns and relationships of "stock.warehouse" */
export type Stock_WarehouseDelivery_Items_AggregateArgs = {
  distinct_on?: Maybe<Array<Purchase_Delivery_Item_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Purchase_Delivery_Item_Order_By>>;
  where?: Maybe<Purchase_Delivery_Item_Bool_Exp>;
};


/** columns and relationships of "stock.warehouse" */
export type Stock_WarehouseTransferOrdersFromWarehouseArgs = {
  distinct_on?: Maybe<Array<Stock_Transfer_Order_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Transfer_Order_Order_By>>;
  where?: Maybe<Stock_Transfer_Order_Bool_Exp>;
};


/** columns and relationships of "stock.warehouse" */
export type Stock_WarehouseTransferOrdersFromWarehouse_AggregateArgs = {
  distinct_on?: Maybe<Array<Stock_Transfer_Order_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Transfer_Order_Order_By>>;
  where?: Maybe<Stock_Transfer_Order_Bool_Exp>;
};


/** columns and relationships of "stock.warehouse" */
export type Stock_WarehouseTransferOrdersToWarehouseArgs = {
  distinct_on?: Maybe<Array<Stock_Transfer_Order_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Transfer_Order_Order_By>>;
  where?: Maybe<Stock_Transfer_Order_Bool_Exp>;
};


/** columns and relationships of "stock.warehouse" */
export type Stock_WarehouseTransferOrdersToWarehouse_AggregateArgs = {
  distinct_on?: Maybe<Array<Stock_Transfer_Order_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Transfer_Order_Order_By>>;
  where?: Maybe<Stock_Transfer_Order_Bool_Exp>;
};


/** columns and relationships of "stock.warehouse" */
export type Stock_WarehouseWarehouse_SubsctancesArgs = {
  distinct_on?: Maybe<Array<Stock_Warehouse_Substance_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Warehouse_Substance_Order_By>>;
  where?: Maybe<Stock_Warehouse_Substance_Bool_Exp>;
};


/** columns and relationships of "stock.warehouse" */
export type Stock_WarehouseWarehouse_Subsctances_AggregateArgs = {
  distinct_on?: Maybe<Array<Stock_Warehouse_Substance_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Warehouse_Substance_Order_By>>;
  where?: Maybe<Stock_Warehouse_Substance_Bool_Exp>;
};

/** aggregated selection of "stock.warehouse" */
export type Stock_Warehouse_Aggregate = {
  __typename?: 'stock_warehouse_aggregate';
  aggregate?: Maybe<Stock_Warehouse_Aggregate_Fields>;
  nodes: Array<Stock_Warehouse>;
};

/** aggregate fields of "stock.warehouse" */
export type Stock_Warehouse_Aggregate_Fields = {
  __typename?: 'stock_warehouse_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Stock_Warehouse_Max_Fields>;
  min?: Maybe<Stock_Warehouse_Min_Fields>;
};


/** aggregate fields of "stock.warehouse" */
export type Stock_Warehouse_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Stock_Warehouse_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "stock.warehouse" */
export type Stock_Warehouse_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Stock_Warehouse_Max_Order_By>;
  min?: Maybe<Stock_Warehouse_Min_Order_By>;
};

/** input type for inserting array relation for remote table "stock.warehouse" */
export type Stock_Warehouse_Arr_Rel_Insert_Input = {
  data: Array<Stock_Warehouse_Insert_Input>;
  /** on conflict condition */
  on_conflict?: Maybe<Stock_Warehouse_On_Conflict>;
};

/** Boolean expression to filter rows from the table "stock.warehouse". All fields are combined with a logical 'AND'. */
export type Stock_Warehouse_Bool_Exp = {
  _and?: Maybe<Array<Stock_Warehouse_Bool_Exp>>;
  _not?: Maybe<Stock_Warehouse_Bool_Exp>;
  _or?: Maybe<Array<Stock_Warehouse_Bool_Exp>>;
  company?: Maybe<Management_Company_Bool_Exp>;
  companyid?: Maybe<Uuid_Comparison_Exp>;
  createdAt?: Maybe<Date_Comparison_Exp>;
  createdBy?: Maybe<String_Comparison_Exp>;
  delivery_items?: Maybe<Purchase_Delivery_Item_Bool_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  name?: Maybe<String_Comparison_Exp>;
  salesPoint?: Maybe<Management_SalesPoint_Bool_Exp>;
  salesPointid?: Maybe<Uuid_Comparison_Exp>;
  transferOrdersFromWarehouse?: Maybe<Stock_Transfer_Order_Bool_Exp>;
  transferOrdersToWarehouse?: Maybe<Stock_Transfer_Order_Bool_Exp>;
  updatedAt?: Maybe<Date_Comparison_Exp>;
  updatedBy?: Maybe<String_Comparison_Exp>;
  warehouse_subsctances?: Maybe<Stock_Warehouse_Substance_Bool_Exp>;
};

/** unique or primary key constraints on table "stock.warehouse" */
export enum Stock_Warehouse_Constraint {
  /** unique or primary key constraint */
  WarehouseNameKey = 'warehouse_name_key',
  /** unique or primary key constraint */
  WarehousePkey = 'warehouse_pkey'
}

/** input type for inserting data into table "stock.warehouse" */
export type Stock_Warehouse_Insert_Input = {
  company?: Maybe<Management_Company_Obj_Rel_Insert_Input>;
  companyid?: Maybe<Scalars['uuid']>;
  createdAt?: Maybe<Scalars['date']>;
  createdBy?: Maybe<Scalars['String']>;
  delivery_items?: Maybe<Purchase_Delivery_Item_Arr_Rel_Insert_Input>;
  id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Scalars['String']>;
  salesPoint?: Maybe<Management_SalesPoint_Obj_Rel_Insert_Input>;
  salesPointid?: Maybe<Scalars['uuid']>;
  transferOrdersFromWarehouse?: Maybe<Stock_Transfer_Order_Arr_Rel_Insert_Input>;
  transferOrdersToWarehouse?: Maybe<Stock_Transfer_Order_Arr_Rel_Insert_Input>;
  updatedAt?: Maybe<Scalars['date']>;
  updatedBy?: Maybe<Scalars['String']>;
  warehouse_subsctances?: Maybe<Stock_Warehouse_Substance_Arr_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Stock_Warehouse_Max_Fields = {
  __typename?: 'stock_warehouse_max_fields';
  companyid?: Maybe<Scalars['uuid']>;
  createdAt?: Maybe<Scalars['date']>;
  createdBy?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Scalars['String']>;
  salesPointid?: Maybe<Scalars['uuid']>;
  updatedAt?: Maybe<Scalars['date']>;
  updatedBy?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "stock.warehouse" */
export type Stock_Warehouse_Max_Order_By = {
  companyid?: Maybe<Order_By>;
  createdAt?: Maybe<Order_By>;
  createdBy?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  salesPointid?: Maybe<Order_By>;
  updatedAt?: Maybe<Order_By>;
  updatedBy?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Stock_Warehouse_Min_Fields = {
  __typename?: 'stock_warehouse_min_fields';
  companyid?: Maybe<Scalars['uuid']>;
  createdAt?: Maybe<Scalars['date']>;
  createdBy?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Scalars['String']>;
  salesPointid?: Maybe<Scalars['uuid']>;
  updatedAt?: Maybe<Scalars['date']>;
  updatedBy?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "stock.warehouse" */
export type Stock_Warehouse_Min_Order_By = {
  companyid?: Maybe<Order_By>;
  createdAt?: Maybe<Order_By>;
  createdBy?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  salesPointid?: Maybe<Order_By>;
  updatedAt?: Maybe<Order_By>;
  updatedBy?: Maybe<Order_By>;
};

/** response of any mutation on the table "stock.warehouse" */
export type Stock_Warehouse_Mutation_Response = {
  __typename?: 'stock_warehouse_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Stock_Warehouse>;
};

/** input type for inserting object relation for remote table "stock.warehouse" */
export type Stock_Warehouse_Obj_Rel_Insert_Input = {
  data: Stock_Warehouse_Insert_Input;
  /** on conflict condition */
  on_conflict?: Maybe<Stock_Warehouse_On_Conflict>;
};

/** on conflict condition type for table "stock.warehouse" */
export type Stock_Warehouse_On_Conflict = {
  constraint: Stock_Warehouse_Constraint;
  update_columns?: Array<Stock_Warehouse_Update_Column>;
  where?: Maybe<Stock_Warehouse_Bool_Exp>;
};

/** Ordering options when selecting data from "stock.warehouse". */
export type Stock_Warehouse_Order_By = {
  company?: Maybe<Management_Company_Order_By>;
  companyid?: Maybe<Order_By>;
  createdAt?: Maybe<Order_By>;
  createdBy?: Maybe<Order_By>;
  delivery_items_aggregate?: Maybe<Purchase_Delivery_Item_Aggregate_Order_By>;
  id?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  salesPoint?: Maybe<Management_SalesPoint_Order_By>;
  salesPointid?: Maybe<Order_By>;
  transferOrdersFromWarehouse_aggregate?: Maybe<Stock_Transfer_Order_Aggregate_Order_By>;
  transferOrdersToWarehouse_aggregate?: Maybe<Stock_Transfer_Order_Aggregate_Order_By>;
  updatedAt?: Maybe<Order_By>;
  updatedBy?: Maybe<Order_By>;
  warehouse_subsctances_aggregate?: Maybe<Stock_Warehouse_Substance_Aggregate_Order_By>;
};

/** columns and relationships of "stock.warehouse_order_view" */
export type Stock_Warehouse_Order_View = {
  __typename?: 'stock_warehouse_order_view';
  date?: Maybe<Scalars['date']>;
  deadline?: Maybe<Scalars['date']>;
  fromwarehouse?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Int']>;
  status?: Maybe<Scalars['String']>;
  towarehouse?: Maybe<Scalars['String']>;
};

/** aggregated selection of "stock.warehouse_order_view" */
export type Stock_Warehouse_Order_View_Aggregate = {
  __typename?: 'stock_warehouse_order_view_aggregate';
  aggregate?: Maybe<Stock_Warehouse_Order_View_Aggregate_Fields>;
  nodes: Array<Stock_Warehouse_Order_View>;
};

/** aggregate fields of "stock.warehouse_order_view" */
export type Stock_Warehouse_Order_View_Aggregate_Fields = {
  __typename?: 'stock_warehouse_order_view_aggregate_fields';
  avg?: Maybe<Stock_Warehouse_Order_View_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Stock_Warehouse_Order_View_Max_Fields>;
  min?: Maybe<Stock_Warehouse_Order_View_Min_Fields>;
  stddev?: Maybe<Stock_Warehouse_Order_View_Stddev_Fields>;
  stddev_pop?: Maybe<Stock_Warehouse_Order_View_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Stock_Warehouse_Order_View_Stddev_Samp_Fields>;
  sum?: Maybe<Stock_Warehouse_Order_View_Sum_Fields>;
  var_pop?: Maybe<Stock_Warehouse_Order_View_Var_Pop_Fields>;
  var_samp?: Maybe<Stock_Warehouse_Order_View_Var_Samp_Fields>;
  variance?: Maybe<Stock_Warehouse_Order_View_Variance_Fields>;
};


/** aggregate fields of "stock.warehouse_order_view" */
export type Stock_Warehouse_Order_View_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Stock_Warehouse_Order_View_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** aggregate avg on columns */
export type Stock_Warehouse_Order_View_Avg_Fields = {
  __typename?: 'stock_warehouse_order_view_avg_fields';
  id?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "stock.warehouse_order_view". All fields are combined with a logical 'AND'. */
export type Stock_Warehouse_Order_View_Bool_Exp = {
  _and?: Maybe<Array<Stock_Warehouse_Order_View_Bool_Exp>>;
  _not?: Maybe<Stock_Warehouse_Order_View_Bool_Exp>;
  _or?: Maybe<Array<Stock_Warehouse_Order_View_Bool_Exp>>;
  date?: Maybe<Date_Comparison_Exp>;
  deadline?: Maybe<Date_Comparison_Exp>;
  fromwarehouse?: Maybe<String_Comparison_Exp>;
  id?: Maybe<Int_Comparison_Exp>;
  status?: Maybe<String_Comparison_Exp>;
  towarehouse?: Maybe<String_Comparison_Exp>;
};

/** aggregate max on columns */
export type Stock_Warehouse_Order_View_Max_Fields = {
  __typename?: 'stock_warehouse_order_view_max_fields';
  date?: Maybe<Scalars['date']>;
  deadline?: Maybe<Scalars['date']>;
  fromwarehouse?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Int']>;
  status?: Maybe<Scalars['String']>;
  towarehouse?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type Stock_Warehouse_Order_View_Min_Fields = {
  __typename?: 'stock_warehouse_order_view_min_fields';
  date?: Maybe<Scalars['date']>;
  deadline?: Maybe<Scalars['date']>;
  fromwarehouse?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Int']>;
  status?: Maybe<Scalars['String']>;
  towarehouse?: Maybe<Scalars['String']>;
};

/** Ordering options when selecting data from "stock.warehouse_order_view". */
export type Stock_Warehouse_Order_View_Order_By = {
  date?: Maybe<Order_By>;
  deadline?: Maybe<Order_By>;
  fromwarehouse?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  status?: Maybe<Order_By>;
  towarehouse?: Maybe<Order_By>;
};

/** select columns of table "stock.warehouse_order_view" */
export enum Stock_Warehouse_Order_View_Select_Column {
  /** column name */
  Date = 'date',
  /** column name */
  Deadline = 'deadline',
  /** column name */
  Fromwarehouse = 'fromwarehouse',
  /** column name */
  Id = 'id',
  /** column name */
  Status = 'status',
  /** column name */
  Towarehouse = 'towarehouse'
}

/** aggregate stddev on columns */
export type Stock_Warehouse_Order_View_Stddev_Fields = {
  __typename?: 'stock_warehouse_order_view_stddev_fields';
  id?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type Stock_Warehouse_Order_View_Stddev_Pop_Fields = {
  __typename?: 'stock_warehouse_order_view_stddev_pop_fields';
  id?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type Stock_Warehouse_Order_View_Stddev_Samp_Fields = {
  __typename?: 'stock_warehouse_order_view_stddev_samp_fields';
  id?: Maybe<Scalars['Float']>;
};

/** aggregate sum on columns */
export type Stock_Warehouse_Order_View_Sum_Fields = {
  __typename?: 'stock_warehouse_order_view_sum_fields';
  id?: Maybe<Scalars['Int']>;
};

/** aggregate var_pop on columns */
export type Stock_Warehouse_Order_View_Var_Pop_Fields = {
  __typename?: 'stock_warehouse_order_view_var_pop_fields';
  id?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type Stock_Warehouse_Order_View_Var_Samp_Fields = {
  __typename?: 'stock_warehouse_order_view_var_samp_fields';
  id?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type Stock_Warehouse_Order_View_Variance_Fields = {
  __typename?: 'stock_warehouse_order_view_variance_fields';
  id?: Maybe<Scalars['Float']>;
};

/** primary key columns input for table: stock_warehouse */
export type Stock_Warehouse_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "stock.warehouse" */
export enum Stock_Warehouse_Select_Column {
  /** column name */
  Companyid = 'companyid',
  /** column name */
  CreatedAt = 'createdAt',
  /** column name */
  CreatedBy = 'createdBy',
  /** column name */
  Id = 'id',
  /** column name */
  Name = 'name',
  /** column name */
  SalesPointid = 'salesPointid',
  /** column name */
  UpdatedAt = 'updatedAt',
  /** column name */
  UpdatedBy = 'updatedBy'
}

/** input type for updating data in table "stock.warehouse" */
export type Stock_Warehouse_Set_Input = {
  companyid?: Maybe<Scalars['uuid']>;
  createdAt?: Maybe<Scalars['date']>;
  createdBy?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Scalars['String']>;
  salesPointid?: Maybe<Scalars['uuid']>;
  updatedAt?: Maybe<Scalars['date']>;
  updatedBy?: Maybe<Scalars['String']>;
};

/** columns and relationships of "stock.warehouse_substance" */
export type Stock_Warehouse_Substance = {
  __typename?: 'stock_warehouse_substance';
  id: Scalars['Int'];
  quantity: Scalars['Float'];
  quantity_min?: Maybe<Scalars['Float']>;
  quantity_planned?: Maybe<Scalars['Float']>;
  /** An array relationship */
  stock_adjustments: Array<Stock_Stock_Adjustment>;
  /** An aggregate relationship */
  stock_adjustments_aggregate: Stock_Stock_Adjustment_Aggregate;
  /** An object relationship */
  substance: Product_Substance;
  substanceid: Scalars['uuid'];
  /** An object relationship */
  warehouse: Stock_Warehouse;
  warehouseid: Scalars['uuid'];
};


/** columns and relationships of "stock.warehouse_substance" */
export type Stock_Warehouse_SubstanceStock_AdjustmentsArgs = {
  distinct_on?: Maybe<Array<Stock_Stock_Adjustment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Stock_Adjustment_Order_By>>;
  where?: Maybe<Stock_Stock_Adjustment_Bool_Exp>;
};


/** columns and relationships of "stock.warehouse_substance" */
export type Stock_Warehouse_SubstanceStock_Adjustments_AggregateArgs = {
  distinct_on?: Maybe<Array<Stock_Stock_Adjustment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Stock_Adjustment_Order_By>>;
  where?: Maybe<Stock_Stock_Adjustment_Bool_Exp>;
};

/** aggregated selection of "stock.warehouse_substance" */
export type Stock_Warehouse_Substance_Aggregate = {
  __typename?: 'stock_warehouse_substance_aggregate';
  aggregate?: Maybe<Stock_Warehouse_Substance_Aggregate_Fields>;
  nodes: Array<Stock_Warehouse_Substance>;
};

/** aggregate fields of "stock.warehouse_substance" */
export type Stock_Warehouse_Substance_Aggregate_Fields = {
  __typename?: 'stock_warehouse_substance_aggregate_fields';
  avg?: Maybe<Stock_Warehouse_Substance_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Stock_Warehouse_Substance_Max_Fields>;
  min?: Maybe<Stock_Warehouse_Substance_Min_Fields>;
  stddev?: Maybe<Stock_Warehouse_Substance_Stddev_Fields>;
  stddev_pop?: Maybe<Stock_Warehouse_Substance_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Stock_Warehouse_Substance_Stddev_Samp_Fields>;
  sum?: Maybe<Stock_Warehouse_Substance_Sum_Fields>;
  var_pop?: Maybe<Stock_Warehouse_Substance_Var_Pop_Fields>;
  var_samp?: Maybe<Stock_Warehouse_Substance_Var_Samp_Fields>;
  variance?: Maybe<Stock_Warehouse_Substance_Variance_Fields>;
};


/** aggregate fields of "stock.warehouse_substance" */
export type Stock_Warehouse_Substance_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Stock_Warehouse_Substance_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "stock.warehouse_substance" */
export type Stock_Warehouse_Substance_Aggregate_Order_By = {
  avg?: Maybe<Stock_Warehouse_Substance_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Stock_Warehouse_Substance_Max_Order_By>;
  min?: Maybe<Stock_Warehouse_Substance_Min_Order_By>;
  stddev?: Maybe<Stock_Warehouse_Substance_Stddev_Order_By>;
  stddev_pop?: Maybe<Stock_Warehouse_Substance_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Stock_Warehouse_Substance_Stddev_Samp_Order_By>;
  sum?: Maybe<Stock_Warehouse_Substance_Sum_Order_By>;
  var_pop?: Maybe<Stock_Warehouse_Substance_Var_Pop_Order_By>;
  var_samp?: Maybe<Stock_Warehouse_Substance_Var_Samp_Order_By>;
  variance?: Maybe<Stock_Warehouse_Substance_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "stock.warehouse_substance" */
export type Stock_Warehouse_Substance_Arr_Rel_Insert_Input = {
  data: Array<Stock_Warehouse_Substance_Insert_Input>;
  /** on conflict condition */
  on_conflict?: Maybe<Stock_Warehouse_Substance_On_Conflict>;
};

/** aggregate avg on columns */
export type Stock_Warehouse_Substance_Avg_Fields = {
  __typename?: 'stock_warehouse_substance_avg_fields';
  id?: Maybe<Scalars['Float']>;
  quantity?: Maybe<Scalars['Float']>;
  quantity_min?: Maybe<Scalars['Float']>;
  quantity_planned?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "stock.warehouse_substance" */
export type Stock_Warehouse_Substance_Avg_Order_By = {
  id?: Maybe<Order_By>;
  quantity?: Maybe<Order_By>;
  quantity_min?: Maybe<Order_By>;
  quantity_planned?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "stock.warehouse_substance". All fields are combined with a logical 'AND'. */
export type Stock_Warehouse_Substance_Bool_Exp = {
  _and?: Maybe<Array<Stock_Warehouse_Substance_Bool_Exp>>;
  _not?: Maybe<Stock_Warehouse_Substance_Bool_Exp>;
  _or?: Maybe<Array<Stock_Warehouse_Substance_Bool_Exp>>;
  id?: Maybe<Int_Comparison_Exp>;
  quantity?: Maybe<Float_Comparison_Exp>;
  quantity_min?: Maybe<Float_Comparison_Exp>;
  quantity_planned?: Maybe<Float_Comparison_Exp>;
  stock_adjustments?: Maybe<Stock_Stock_Adjustment_Bool_Exp>;
  substance?: Maybe<Product_Substance_Bool_Exp>;
  substanceid?: Maybe<Uuid_Comparison_Exp>;
  warehouse?: Maybe<Stock_Warehouse_Bool_Exp>;
  warehouseid?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "stock.warehouse_substance" */
export enum Stock_Warehouse_Substance_Constraint {
  /** unique or primary key constraint */
  WarehouseSubsctancePkey = 'warehouse_subsctance_pkey',
  /** unique or primary key constraint */
  WarehouseSubstanceIdKey = 'warehouse_substance_id_key'
}

/** input type for incrementing numeric columns in table "stock.warehouse_substance" */
export type Stock_Warehouse_Substance_Inc_Input = {
  id?: Maybe<Scalars['Int']>;
  quantity?: Maybe<Scalars['Float']>;
  quantity_min?: Maybe<Scalars['Float']>;
  quantity_planned?: Maybe<Scalars['Float']>;
};

/** input type for inserting data into table "stock.warehouse_substance" */
export type Stock_Warehouse_Substance_Insert_Input = {
  id?: Maybe<Scalars['Int']>;
  quantity?: Maybe<Scalars['Float']>;
  quantity_min?: Maybe<Scalars['Float']>;
  quantity_planned?: Maybe<Scalars['Float']>;
  stock_adjustments?: Maybe<Stock_Stock_Adjustment_Arr_Rel_Insert_Input>;
  substance?: Maybe<Product_Substance_Obj_Rel_Insert_Input>;
  substanceid?: Maybe<Scalars['uuid']>;
  warehouse?: Maybe<Stock_Warehouse_Obj_Rel_Insert_Input>;
  warehouseid?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Stock_Warehouse_Substance_Max_Fields = {
  __typename?: 'stock_warehouse_substance_max_fields';
  id?: Maybe<Scalars['Int']>;
  quantity?: Maybe<Scalars['Float']>;
  quantity_min?: Maybe<Scalars['Float']>;
  quantity_planned?: Maybe<Scalars['Float']>;
  substanceid?: Maybe<Scalars['uuid']>;
  warehouseid?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "stock.warehouse_substance" */
export type Stock_Warehouse_Substance_Max_Order_By = {
  id?: Maybe<Order_By>;
  quantity?: Maybe<Order_By>;
  quantity_min?: Maybe<Order_By>;
  quantity_planned?: Maybe<Order_By>;
  substanceid?: Maybe<Order_By>;
  warehouseid?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Stock_Warehouse_Substance_Min_Fields = {
  __typename?: 'stock_warehouse_substance_min_fields';
  id?: Maybe<Scalars['Int']>;
  quantity?: Maybe<Scalars['Float']>;
  quantity_min?: Maybe<Scalars['Float']>;
  quantity_planned?: Maybe<Scalars['Float']>;
  substanceid?: Maybe<Scalars['uuid']>;
  warehouseid?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "stock.warehouse_substance" */
export type Stock_Warehouse_Substance_Min_Order_By = {
  id?: Maybe<Order_By>;
  quantity?: Maybe<Order_By>;
  quantity_min?: Maybe<Order_By>;
  quantity_planned?: Maybe<Order_By>;
  substanceid?: Maybe<Order_By>;
  warehouseid?: Maybe<Order_By>;
};

/** response of any mutation on the table "stock.warehouse_substance" */
export type Stock_Warehouse_Substance_Mutation_Response = {
  __typename?: 'stock_warehouse_substance_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Stock_Warehouse_Substance>;
};

/** input type for inserting object relation for remote table "stock.warehouse_substance" */
export type Stock_Warehouse_Substance_Obj_Rel_Insert_Input = {
  data: Stock_Warehouse_Substance_Insert_Input;
  /** on conflict condition */
  on_conflict?: Maybe<Stock_Warehouse_Substance_On_Conflict>;
};

/** on conflict condition type for table "stock.warehouse_substance" */
export type Stock_Warehouse_Substance_On_Conflict = {
  constraint: Stock_Warehouse_Substance_Constraint;
  update_columns?: Array<Stock_Warehouse_Substance_Update_Column>;
  where?: Maybe<Stock_Warehouse_Substance_Bool_Exp>;
};

/** Ordering options when selecting data from "stock.warehouse_substance". */
export type Stock_Warehouse_Substance_Order_By = {
  id?: Maybe<Order_By>;
  quantity?: Maybe<Order_By>;
  quantity_min?: Maybe<Order_By>;
  quantity_planned?: Maybe<Order_By>;
  stock_adjustments_aggregate?: Maybe<Stock_Stock_Adjustment_Aggregate_Order_By>;
  substance?: Maybe<Product_Substance_Order_By>;
  substanceid?: Maybe<Order_By>;
  warehouse?: Maybe<Stock_Warehouse_Order_By>;
  warehouseid?: Maybe<Order_By>;
};

/** primary key columns input for table: stock_warehouse_substance */
export type Stock_Warehouse_Substance_Pk_Columns_Input = {
  substanceid: Scalars['uuid'];
  warehouseid: Scalars['uuid'];
};

/** select columns of table "stock.warehouse_substance" */
export enum Stock_Warehouse_Substance_Select_Column {
  /** column name */
  Id = 'id',
  /** column name */
  Quantity = 'quantity',
  /** column name */
  QuantityMin = 'quantity_min',
  /** column name */
  QuantityPlanned = 'quantity_planned',
  /** column name */
  Substanceid = 'substanceid',
  /** column name */
  Warehouseid = 'warehouseid'
}

/** input type for updating data in table "stock.warehouse_substance" */
export type Stock_Warehouse_Substance_Set_Input = {
  id?: Maybe<Scalars['Int']>;
  quantity?: Maybe<Scalars['Float']>;
  quantity_min?: Maybe<Scalars['Float']>;
  quantity_planned?: Maybe<Scalars['Float']>;
  substanceid?: Maybe<Scalars['uuid']>;
  warehouseid?: Maybe<Scalars['uuid']>;
};

/** aggregate stddev on columns */
export type Stock_Warehouse_Substance_Stddev_Fields = {
  __typename?: 'stock_warehouse_substance_stddev_fields';
  id?: Maybe<Scalars['Float']>;
  quantity?: Maybe<Scalars['Float']>;
  quantity_min?: Maybe<Scalars['Float']>;
  quantity_planned?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "stock.warehouse_substance" */
export type Stock_Warehouse_Substance_Stddev_Order_By = {
  id?: Maybe<Order_By>;
  quantity?: Maybe<Order_By>;
  quantity_min?: Maybe<Order_By>;
  quantity_planned?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Stock_Warehouse_Substance_Stddev_Pop_Fields = {
  __typename?: 'stock_warehouse_substance_stddev_pop_fields';
  id?: Maybe<Scalars['Float']>;
  quantity?: Maybe<Scalars['Float']>;
  quantity_min?: Maybe<Scalars['Float']>;
  quantity_planned?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "stock.warehouse_substance" */
export type Stock_Warehouse_Substance_Stddev_Pop_Order_By = {
  id?: Maybe<Order_By>;
  quantity?: Maybe<Order_By>;
  quantity_min?: Maybe<Order_By>;
  quantity_planned?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Stock_Warehouse_Substance_Stddev_Samp_Fields = {
  __typename?: 'stock_warehouse_substance_stddev_samp_fields';
  id?: Maybe<Scalars['Float']>;
  quantity?: Maybe<Scalars['Float']>;
  quantity_min?: Maybe<Scalars['Float']>;
  quantity_planned?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "stock.warehouse_substance" */
export type Stock_Warehouse_Substance_Stddev_Samp_Order_By = {
  id?: Maybe<Order_By>;
  quantity?: Maybe<Order_By>;
  quantity_min?: Maybe<Order_By>;
  quantity_planned?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Stock_Warehouse_Substance_Sum_Fields = {
  __typename?: 'stock_warehouse_substance_sum_fields';
  id?: Maybe<Scalars['Int']>;
  quantity?: Maybe<Scalars['Float']>;
  quantity_min?: Maybe<Scalars['Float']>;
  quantity_planned?: Maybe<Scalars['Float']>;
};

/** order by sum() on columns of table "stock.warehouse_substance" */
export type Stock_Warehouse_Substance_Sum_Order_By = {
  id?: Maybe<Order_By>;
  quantity?: Maybe<Order_By>;
  quantity_min?: Maybe<Order_By>;
  quantity_planned?: Maybe<Order_By>;
};

/** update columns of table "stock.warehouse_substance" */
export enum Stock_Warehouse_Substance_Update_Column {
  /** column name */
  Id = 'id',
  /** column name */
  Quantity = 'quantity',
  /** column name */
  QuantityMin = 'quantity_min',
  /** column name */
  QuantityPlanned = 'quantity_planned',
  /** column name */
  Substanceid = 'substanceid',
  /** column name */
  Warehouseid = 'warehouseid'
}

/** aggregate var_pop on columns */
export type Stock_Warehouse_Substance_Var_Pop_Fields = {
  __typename?: 'stock_warehouse_substance_var_pop_fields';
  id?: Maybe<Scalars['Float']>;
  quantity?: Maybe<Scalars['Float']>;
  quantity_min?: Maybe<Scalars['Float']>;
  quantity_planned?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "stock.warehouse_substance" */
export type Stock_Warehouse_Substance_Var_Pop_Order_By = {
  id?: Maybe<Order_By>;
  quantity?: Maybe<Order_By>;
  quantity_min?: Maybe<Order_By>;
  quantity_planned?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Stock_Warehouse_Substance_Var_Samp_Fields = {
  __typename?: 'stock_warehouse_substance_var_samp_fields';
  id?: Maybe<Scalars['Float']>;
  quantity?: Maybe<Scalars['Float']>;
  quantity_min?: Maybe<Scalars['Float']>;
  quantity_planned?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "stock.warehouse_substance" */
export type Stock_Warehouse_Substance_Var_Samp_Order_By = {
  id?: Maybe<Order_By>;
  quantity?: Maybe<Order_By>;
  quantity_min?: Maybe<Order_By>;
  quantity_planned?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Stock_Warehouse_Substance_Variance_Fields = {
  __typename?: 'stock_warehouse_substance_variance_fields';
  id?: Maybe<Scalars['Float']>;
  quantity?: Maybe<Scalars['Float']>;
  quantity_min?: Maybe<Scalars['Float']>;
  quantity_planned?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "stock.warehouse_substance" */
export type Stock_Warehouse_Substance_Variance_Order_By = {
  id?: Maybe<Order_By>;
  quantity?: Maybe<Order_By>;
  quantity_min?: Maybe<Order_By>;
  quantity_planned?: Maybe<Order_By>;
};

/** update columns of table "stock.warehouse" */
export enum Stock_Warehouse_Update_Column {
  /** column name */
  Companyid = 'companyid',
  /** column name */
  CreatedAt = 'createdAt',
  /** column name */
  CreatedBy = 'createdBy',
  /** column name */
  Id = 'id',
  /** column name */
  Name = 'name',
  /** column name */
  SalesPointid = 'salesPointid',
  /** column name */
  UpdatedAt = 'updatedAt',
  /** column name */
  UpdatedBy = 'updatedBy'
}

export type Subscription_Root = {
  __typename?: 'subscription_root';
  /** fetch data from the table: "cash_register.cash_box" */
  cash_register_cash_box: Array<Cash_Register_Cash_Box>;
  /** fetch aggregated fields from the table: "cash_register.cash_box" */
  cash_register_cash_box_aggregate: Cash_Register_Cash_Box_Aggregate;
  /** fetch data from the table: "cash_register.cash_box" using primary key columns */
  cash_register_cash_box_by_pk?: Maybe<Cash_Register_Cash_Box>;
  /** fetch data from the table: "cash_register.expense_category" */
  cash_register_expense_category: Array<Cash_Register_Expense_Category>;
  /** fetch aggregated fields from the table: "cash_register.expense_category" */
  cash_register_expense_category_aggregate: Cash_Register_Expense_Category_Aggregate;
  /** fetch data from the table: "cash_register.expense_category" using primary key columns */
  cash_register_expense_category_by_pk?: Maybe<Cash_Register_Expense_Category>;
  /** fetch data from the table: "cash_register.expenses" */
  cash_register_expenses: Array<Cash_Register_Expenses>;
  /** fetch aggregated fields from the table: "cash_register.expenses" */
  cash_register_expenses_aggregate: Cash_Register_Expenses_Aggregate;
  /** fetch data from the table: "cash_register.expenses" using primary key columns */
  cash_register_expenses_by_pk?: Maybe<Cash_Register_Expenses>;
  /** fetch data from the table: "contact.address" */
  contact_address: Array<Contact_Address>;
  /** fetch aggregated fields from the table: "contact.address" */
  contact_address_aggregate: Contact_Address_Aggregate;
  /** fetch data from the table: "contact.address" using primary key columns */
  contact_address_by_pk?: Maybe<Contact_Address>;
  /** fetch data from the table: "contact.contact" */
  contact_contact: Array<Contact_Contact>;
  /** fetch data from the table: "contact.contact_address" */
  contact_contact_address: Array<Contact_Contact_Address>;
  /** fetch aggregated fields from the table: "contact.contact_address" */
  contact_contact_address_aggregate: Contact_Contact_Address_Aggregate;
  /** fetch data from the table: "contact.contact_address" using primary key columns */
  contact_contact_address_by_pk?: Maybe<Contact_Contact_Address>;
  /** fetch data from the table: "contact.contact_addresses_view" */
  contact_contact_addresses_view: Array<Contact_Contact_Addresses_View>;
  /** fetch aggregated fields from the table: "contact.contact_addresses_view" */
  contact_contact_addresses_view_aggregate: Contact_Contact_Addresses_View_Aggregate;
  /** fetch aggregated fields from the table: "contact.contact" */
  contact_contact_aggregate: Contact_Contact_Aggregate;
  /** fetch data from the table: "contact.contact" using primary key columns */
  contact_contact_by_pk?: Maybe<Contact_Contact>;
  /** fetch data from the table: "contact.contact_customers_view" */
  contact_contact_customers_view: Array<Contact_Contact_Customers_View>;
  /** fetch aggregated fields from the table: "contact.contact_customers_view" */
  contact_contact_customers_view_aggregate: Contact_Contact_Customers_View_Aggregate;
  /** fetch data from the table: "contact.contact_providers_view" */
  contact_contact_providers_view: Array<Contact_Contact_Providers_View>;
  /** fetch aggregated fields from the table: "contact.contact_providers_view" */
  contact_contact_providers_view_aggregate: Contact_Contact_Providers_View_Aggregate;
  /** fetch data from the table: "contact.customer" */
  contact_customer: Array<Contact_Customer>;
  /** fetch data from the table: "contact.customer_address" */
  contact_customer_address: Array<Contact_Customer_Address>;
  /** fetch aggregated fields from the table: "contact.customer_address" */
  contact_customer_address_aggregate: Contact_Customer_Address_Aggregate;
  /** fetch data from the table: "contact.customer_address" using primary key columns */
  contact_customer_address_by_pk?: Maybe<Contact_Customer_Address>;
  /** fetch data from the table: "contact.customer_addresses_view" */
  contact_customer_addresses_view: Array<Contact_Customer_Addresses_View>;
  /** fetch aggregated fields from the table: "contact.customer_addresses_view" */
  contact_customer_addresses_view_aggregate: Contact_Customer_Addresses_View_Aggregate;
  /** fetch aggregated fields from the table: "contact.customer" */
  contact_customer_aggregate: Contact_Customer_Aggregate;
  /** fetch data from the table: "contact.customer" using primary key columns */
  contact_customer_by_pk?: Maybe<Contact_Customer>;
  /** fetch data from the table: "contact.customer_contact" */
  contact_customer_contact: Array<Contact_Customer_Contact>;
  /** fetch aggregated fields from the table: "contact.customer_contact" */
  contact_customer_contact_aggregate: Contact_Customer_Contact_Aggregate;
  /** fetch data from the table: "contact.customer_contact" using primary key columns */
  contact_customer_contact_by_pk?: Maybe<Contact_Customer_Contact>;
  /** fetch data from the table: "contact.customer_contacts_view" */
  contact_customer_contacts_view: Array<Contact_Customer_Contacts_View>;
  /** fetch aggregated fields from the table: "contact.customer_contacts_view" */
  contact_customer_contacts_view_aggregate: Contact_Customer_Contacts_View_Aggregate;
  /** fetch data from the table: "contact.provider" */
  contact_provider: Array<Contact_Provider>;
  /** fetch data from the table: "contact.provider_address" */
  contact_provider_address: Array<Contact_Provider_Address>;
  /** fetch aggregated fields from the table: "contact.provider_address" */
  contact_provider_address_aggregate: Contact_Provider_Address_Aggregate;
  /** fetch data from the table: "contact.provider_address" using primary key columns */
  contact_provider_address_by_pk?: Maybe<Contact_Provider_Address>;
  /** fetch data from the table: "contact.provider_addresses_view" */
  contact_provider_addresses_view: Array<Contact_Provider_Addresses_View>;
  /** fetch aggregated fields from the table: "contact.provider_addresses_view" */
  contact_provider_addresses_view_aggregate: Contact_Provider_Addresses_View_Aggregate;
  /** fetch aggregated fields from the table: "contact.provider" */
  contact_provider_aggregate: Contact_Provider_Aggregate;
  /** fetch data from the table: "contact.provider" using primary key columns */
  contact_provider_by_pk?: Maybe<Contact_Provider>;
  /** fetch data from the table: "contact.provider_contact" */
  contact_provider_contact: Array<Contact_Provider_Contact>;
  /** fetch aggregated fields from the table: "contact.provider_contact" */
  contact_provider_contact_aggregate: Contact_Provider_Contact_Aggregate;
  /** fetch data from the table: "contact.provider_contact" using primary key columns */
  contact_provider_contact_by_pk?: Maybe<Contact_Provider_Contact>;
  /** fetch data from the table: "contact.provider_contacts_view" */
  contact_provider_contacts_view: Array<Contact_Provider_Contacts_View>;
  /** fetch aggregated fields from the table: "contact.provider_contacts_view" */
  contact_provider_contacts_view_aggregate: Contact_Provider_Contacts_View_Aggregate;
  /** fetch data from the table: "customer_situation" */
  customer_situation: Array<Customer_Situation>;
  /** fetch aggregated fields from the table: "customer_situation" */
  customer_situation_aggregate: Customer_Situation_Aggregate;
  /** fetch data from the table: "management.company" */
  management_company: Array<Management_Company>;
  /** fetch aggregated fields from the table: "management.company" */
  management_company_aggregate: Management_Company_Aggregate;
  /** fetch data from the table: "management.company" using primary key columns */
  management_company_by_pk?: Maybe<Management_Company>;
  /** fetch data from the table: "management.salesPoint" */
  management_salesPoint: Array<Management_SalesPoint>;
  /** fetch aggregated fields from the table: "management.salesPoint" */
  management_salesPoint_aggregate: Management_SalesPoint_Aggregate;
  /** fetch data from the table: "management.salesPoint" using primary key columns */
  management_salesPoint_by_pk?: Maybe<Management_SalesPoint>;
  /** fetch data from the table: "management.userProfile" */
  management_userProfile: Array<Management_UserProfile>;
  /** fetch aggregated fields from the table: "management.userProfile" */
  management_userProfile_aggregate: Management_UserProfile_Aggregate;
  /** fetch data from the table: "management.userProfile" using primary key columns */
  management_userProfile_by_pk?: Maybe<Management_UserProfile>;
  /** fetch data from the table: "management.user_role" */
  management_user_role: Array<Management_User_Role>;
  /** fetch aggregated fields from the table: "management.user_role" */
  management_user_role_aggregate: Management_User_Role_Aggregate;
  /** fetch data from the table: "management.user_role" using primary key columns */
  management_user_role_by_pk?: Maybe<Management_User_Role>;
  /** fetch data from the table: "manufacturing.job_order" */
  manufacturing_job_order: Array<Manufacturing_Job_Order>;
  /** fetch aggregated fields from the table: "manufacturing.job_order" */
  manufacturing_job_order_aggregate: Manufacturing_Job_Order_Aggregate;
  /** fetch data from the table: "manufacturing.job_order" using primary key columns */
  manufacturing_job_order_by_pk?: Maybe<Manufacturing_Job_Order>;
  /** fetch data from the table: "manufacturing.job_status" */
  manufacturing_job_status: Array<Manufacturing_Job_Status>;
  /** fetch aggregated fields from the table: "manufacturing.job_status" */
  manufacturing_job_status_aggregate: Manufacturing_Job_Status_Aggregate;
  /** fetch data from the table: "manufacturing.job_status" using primary key columns */
  manufacturing_job_status_by_pk?: Maybe<Manufacturing_Job_Status>;
  /** fetch data from the table: "manufacturing.manufacturing_consumable" */
  manufacturing_manufacturing_consumable: Array<Manufacturing_Manufacturing_Consumable>;
  /** fetch aggregated fields from the table: "manufacturing.manufacturing_consumable" */
  manufacturing_manufacturing_consumable_aggregate: Manufacturing_Manufacturing_Consumable_Aggregate;
  /** fetch data from the table: "manufacturing.manufacturing_consumable" using primary key columns */
  manufacturing_manufacturing_consumable_by_pk?: Maybe<Manufacturing_Manufacturing_Consumable>;
  /** fetch data from the table: "manufacturing.manufacturing_line" */
  manufacturing_manufacturing_line: Array<Manufacturing_Manufacturing_Line>;
  /** fetch aggregated fields from the table: "manufacturing.manufacturing_line" */
  manufacturing_manufacturing_line_aggregate: Manufacturing_Manufacturing_Line_Aggregate;
  /** fetch data from the table: "manufacturing.manufacturing_line" using primary key columns */
  manufacturing_manufacturing_line_by_pk?: Maybe<Manufacturing_Manufacturing_Line>;
  /** fetch data from the table: "manufacturing.manufacturing_line_status" */
  manufacturing_manufacturing_line_status: Array<Manufacturing_Manufacturing_Line_Status>;
  /** fetch aggregated fields from the table: "manufacturing.manufacturing_line_status" */
  manufacturing_manufacturing_line_status_aggregate: Manufacturing_Manufacturing_Line_Status_Aggregate;
  /** fetch data from the table: "manufacturing.manufacturing_line_status" using primary key columns */
  manufacturing_manufacturing_line_status_by_pk?: Maybe<Manufacturing_Manufacturing_Line_Status>;
  /** fetch data from the table: "manufacturing.manufacturing_service" */
  manufacturing_manufacturing_service: Array<Manufacturing_Manufacturing_Service>;
  /** fetch aggregated fields from the table: "manufacturing.manufacturing_service" */
  manufacturing_manufacturing_service_aggregate: Manufacturing_Manufacturing_Service_Aggregate;
  /** fetch data from the table: "manufacturing.manufacturing_service" using primary key columns */
  manufacturing_manufacturing_service_by_pk?: Maybe<Manufacturing_Manufacturing_Service>;
  /** fetch data from the table: "notification.notification" */
  notification_notification: Array<Notification_Notification>;
  /** fetch aggregated fields from the table: "notification.notification" */
  notification_notification_aggregate: Notification_Notification_Aggregate;
  /** fetch data from the table: "notification.notification" using primary key columns */
  notification_notification_by_pk?: Maybe<Notification_Notification>;
  /** fetch data from the table: "notification.notification_priority" */
  notification_notification_priority: Array<Notification_Notification_Priority>;
  /** fetch aggregated fields from the table: "notification.notification_priority" */
  notification_notification_priority_aggregate: Notification_Notification_Priority_Aggregate;
  /** fetch data from the table: "notification.notification_priority" using primary key columns */
  notification_notification_priority_by_pk?: Maybe<Notification_Notification_Priority>;
  /** fetch data from the table: "notification.notification_status" */
  notification_notification_status: Array<Notification_Notification_Status>;
  /** fetch aggregated fields from the table: "notification.notification_status" */
  notification_notification_status_aggregate: Notification_Notification_Status_Aggregate;
  /** fetch data from the table: "notification.notification_status" using primary key columns */
  notification_notification_status_by_pk?: Maybe<Notification_Notification_Status>;
  /** fetch data from the table: "product.accessory" */
  product_accessory: Array<Product_Accessory>;
  /** fetch data from the table: "product.accessoryTypes" */
  product_accessoryTypes: Array<Product_AccessoryTypes>;
  /** fetch aggregated fields from the table: "product.accessoryTypes" */
  product_accessoryTypes_aggregate: Product_AccessoryTypes_Aggregate;
  /** fetch data from the table: "product.accessoryTypes" using primary key columns */
  product_accessoryTypes_by_pk?: Maybe<Product_AccessoryTypes>;
  /** fetch aggregated fields from the table: "product.accessory" */
  product_accessory_aggregate: Product_Accessory_Aggregate;
  /** fetch data from the table: "product.accessory" using primary key columns */
  product_accessory_by_pk?: Maybe<Product_Accessory>;
  /** fetch data from the table: "product.consumable" */
  product_consumable: Array<Product_Consumable>;
  /** fetch data from the table: "product.consumableCategory" */
  product_consumableCategory: Array<Product_ConsumableCategory>;
  /** fetch aggregated fields from the table: "product.consumableCategory" */
  product_consumableCategory_aggregate: Product_ConsumableCategory_Aggregate;
  /** fetch data from the table: "product.consumableCategory" using primary key columns */
  product_consumableCategory_by_pk?: Maybe<Product_ConsumableCategory>;
  /** fetch aggregated fields from the table: "product.consumable" */
  product_consumable_aggregate: Product_Consumable_Aggregate;
  /** fetch data from the table: "product.consumable" using primary key columns */
  product_consumable_by_pk?: Maybe<Product_Consumable>;
  /** fetch data from the table: "product.customer_product" */
  product_customer_product: Array<Product_Customer_Product>;
  /** fetch aggregated fields from the table: "product.customer_product" */
  product_customer_product_aggregate: Product_Customer_Product_Aggregate;
  /** fetch data from the table: "product.customer_product" using primary key columns */
  product_customer_product_by_pk?: Maybe<Product_Customer_Product>;
  /** fetch data from the table: "product.glass" */
  product_glass: Array<Product_Glass>;
  /** fetch data from the table: "product.glassColor" */
  product_glassColor: Array<Product_GlassColor>;
  /** fetch aggregated fields from the table: "product.glassColor" */
  product_glassColor_aggregate: Product_GlassColor_Aggregate;
  /** fetch data from the table: "product.glassColor" using primary key columns */
  product_glassColor_by_pk?: Maybe<Product_GlassColor>;
  /** fetch data from the table: "product.glassThickness" */
  product_glassThickness: Array<Product_GlassThickness>;
  /** fetch aggregated fields from the table: "product.glassThickness" */
  product_glassThickness_aggregate: Product_GlassThickness_Aggregate;
  /** fetch data from the table: "product.glassThickness" using primary key columns */
  product_glassThickness_by_pk?: Maybe<Product_GlassThickness>;
  /** fetch data from the table: "product.glassType" */
  product_glassType: Array<Product_GlassType>;
  /** fetch aggregated fields from the table: "product.glassType" */
  product_glassType_aggregate: Product_GlassType_Aggregate;
  /** fetch data from the table: "product.glassType" using primary key columns */
  product_glassType_by_pk?: Maybe<Product_GlassType>;
  /** fetch aggregated fields from the table: "product.glass" */
  product_glass_aggregate: Product_Glass_Aggregate;
  /** fetch data from the table: "product.glass" using primary key columns */
  product_glass_by_pk?: Maybe<Product_Glass>;
  /** fetch data from the table: "product.product" */
  product_product: Array<Product_Product>;
  /** fetch data from the table: "product.product_accessory_view" */
  product_product_accessory_view: Array<Product_Product_Accessory_View>;
  /** fetch aggregated fields from the table: "product.product_accessory_view" */
  product_product_accessory_view_aggregate: Product_Product_Accessory_View_Aggregate;
  /** fetch aggregated fields from the table: "product.product" */
  product_product_aggregate: Product_Product_Aggregate;
  /** fetch data from the table: "product.product" using primary key columns */
  product_product_by_pk?: Maybe<Product_Product>;
  /** fetch data from the table: "product.product_companies" */
  product_product_companies: Array<Product_Product_Companies>;
  /** fetch aggregated fields from the table: "product.product_companies" */
  product_product_companies_aggregate: Product_Product_Companies_Aggregate;
  /** fetch data from the table: "product.product_companies" using primary key columns */
  product_product_companies_by_pk?: Maybe<Product_Product_Companies>;
  /** fetch data from the table: "product.product_companies_view" */
  product_product_companies_view: Array<Product_Product_Companies_View>;
  /** fetch aggregated fields from the table: "product.product_companies_view" */
  product_product_companies_view_aggregate: Product_Product_Companies_View_Aggregate;
  /** fetch data from the table: "product.product_consumable_view" */
  product_product_consumable_view: Array<Product_Product_Consumable_View>;
  /** fetch aggregated fields from the table: "product.product_consumable_view" */
  product_product_consumable_view_aggregate: Product_Product_Consumable_View_Aggregate;
  /** fetch data from the table: "product.product_glass_view" */
  product_product_glass_view: Array<Product_Product_Glass_View>;
  /** fetch aggregated fields from the table: "product.product_glass_view" */
  product_product_glass_view_aggregate: Product_Product_Glass_View_Aggregate;
  /** fetch data from the table: "product.product_unit" */
  product_product_unit: Array<Product_Product_Unit>;
  /** fetch aggregated fields from the table: "product.product_unit" */
  product_product_unit_aggregate: Product_Product_Unit_Aggregate;
  /** fetch data from the table: "product.product_unit" using primary key columns */
  product_product_unit_by_pk?: Maybe<Product_Product_Unit>;
  /** fetch data from the table: "product.service" */
  product_service: Array<Product_Service>;
  /** fetch data from the table: "product.serviceConfig" */
  product_serviceConfig: Array<Product_ServiceConfig>;
  /** fetch aggregated fields from the table: "product.serviceConfig" */
  product_serviceConfig_aggregate: Product_ServiceConfig_Aggregate;
  /** fetch data from the table: "product.serviceConfig" using primary key columns */
  product_serviceConfig_by_pk?: Maybe<Product_ServiceConfig>;
  /** fetch aggregated fields from the table: "product.service" */
  product_service_aggregate: Product_Service_Aggregate;
  /** fetch data from the table: "product.service" using primary key columns */
  product_service_by_pk?: Maybe<Product_Service>;
  /** fetch data from the table: "product.service_consumable" */
  product_service_consumable: Array<Product_Service_Consumable>;
  /** fetch aggregated fields from the table: "product.service_consumable" */
  product_service_consumable_aggregate: Product_Service_Consumable_Aggregate;
  /** fetch data from the table: "product.service_consumable" using primary key columns */
  product_service_consumable_by_pk?: Maybe<Product_Service_Consumable>;
  /** fetch data from the table: "product.substance" */
  product_substance: Array<Product_Substance>;
  /** fetch aggregated fields from the table: "product.substance" */
  product_substance_aggregate: Product_Substance_Aggregate;
  /** fetch data from the table: "product.substance" using primary key columns */
  product_substance_by_pk?: Maybe<Product_Substance>;
  /** fetch data from the table: "product.substance_provider" */
  product_substance_provider: Array<Product_Substance_Provider>;
  /** fetch aggregated fields from the table: "product.substance_provider" */
  product_substance_provider_aggregate: Product_Substance_Provider_Aggregate;
  /** fetch data from the table: "product.substance_provider" using primary key columns */
  product_substance_provider_by_pk?: Maybe<Product_Substance_Provider>;
  /** fetch data from the table: "product.substance_providers_view" */
  product_substance_providers_view: Array<Product_Substance_Providers_View>;
  /** fetch aggregated fields from the table: "product.substance_providers_view" */
  product_substance_providers_view_aggregate: Product_Substance_Providers_View_Aggregate;
  /** fetch data from the table: "product.substance_type" */
  product_substance_type: Array<Product_Substance_Type>;
  /** fetch aggregated fields from the table: "product.substance_type" */
  product_substance_type_aggregate: Product_Substance_Type_Aggregate;
  /** fetch data from the table: "product.substance_type" using primary key columns */
  product_substance_type_by_pk?: Maybe<Product_Substance_Type>;
  /** fetch data from the table: "product.supply" */
  product_supply: Array<Product_Supply>;
  /** fetch aggregated fields from the table: "product.supply" */
  product_supply_aggregate: Product_Supply_Aggregate;
  /** fetch data from the table: "product.supply" using primary key columns */
  product_supply_by_pk?: Maybe<Product_Supply>;
  /** fetch data from the table: "purchase.delivery" */
  purchase_delivery: Array<Purchase_Delivery>;
  /** fetch aggregated fields from the table: "purchase.delivery" */
  purchase_delivery_aggregate: Purchase_Delivery_Aggregate;
  /** fetch data from the table: "purchase.delivery" using primary key columns */
  purchase_delivery_by_pk?: Maybe<Purchase_Delivery>;
  /** fetch data from the table: "purchase.delivery_item" */
  purchase_delivery_item: Array<Purchase_Delivery_Item>;
  /** fetch aggregated fields from the table: "purchase.delivery_item" */
  purchase_delivery_item_aggregate: Purchase_Delivery_Item_Aggregate;
  /** fetch data from the table: "purchase.delivery_item" using primary key columns */
  purchase_delivery_item_by_pk?: Maybe<Purchase_Delivery_Item>;
  /** fetch data from the table: "sales.accessory_draft" */
  sales_accessory_draft: Array<Sales_Accessory_Draft>;
  /** fetch aggregated fields from the table: "sales.accessory_draft" */
  sales_accessory_draft_aggregate: Sales_Accessory_Draft_Aggregate;
  /** fetch data from the table: "sales.accessory_draft" using primary key columns */
  sales_accessory_draft_by_pk?: Maybe<Sales_Accessory_Draft>;
  /** fetch data from the table: "sales.amount" */
  sales_amount: Array<Sales_Amount>;
  /** fetch aggregated fields from the table: "sales.amount" */
  sales_amount_aggregate: Sales_Amount_Aggregate;
  /** fetch data from the table: "sales.amount" using primary key columns */
  sales_amount_by_pk?: Maybe<Sales_Amount>;
  /** fetch data from the table: "sales.consumable_draft" */
  sales_consumable_draft: Array<Sales_Consumable_Draft>;
  /** fetch aggregated fields from the table: "sales.consumable_draft" */
  sales_consumable_draft_aggregate: Sales_Consumable_Draft_Aggregate;
  /** fetch data from the table: "sales.consumable_draft" using primary key columns */
  sales_consumable_draft_by_pk?: Maybe<Sales_Consumable_Draft>;
  /** fetch data from the table: "sales.delivery" */
  sales_delivery: Array<Sales_Delivery>;
  /** fetch aggregated fields from the table: "sales.delivery" */
  sales_delivery_aggregate: Sales_Delivery_Aggregate;
  /** fetch data from the table: "sales.delivery" using primary key columns */
  sales_delivery_by_pk?: Maybe<Sales_Delivery>;
  /** fetch data from the table: "sales.delivery_line" */
  sales_delivery_line: Array<Sales_Delivery_Line>;
  /** fetch aggregated fields from the table: "sales.delivery_line" */
  sales_delivery_line_aggregate: Sales_Delivery_Line_Aggregate;
  /** fetch data from the table: "sales.delivery_line" using primary key columns */
  sales_delivery_line_by_pk?: Maybe<Sales_Delivery_Line>;
  /** fetch data from the table: "sales.draft" */
  sales_draft: Array<Sales_Draft>;
  /** fetch aggregated fields from the table: "sales.draft" */
  sales_draft_aggregate: Sales_Draft_Aggregate;
  /** fetch data from the table: "sales.draft" using primary key columns */
  sales_draft_by_pk?: Maybe<Sales_Draft>;
  /** fetch data from the table: "sales.draft_status" */
  sales_draft_status: Array<Sales_Draft_Status>;
  /** fetch aggregated fields from the table: "sales.draft_status" */
  sales_draft_status_aggregate: Sales_Draft_Status_Aggregate;
  /** fetch data from the table: "sales.draft_status" using primary key columns */
  sales_draft_status_by_pk?: Maybe<Sales_Draft_Status>;
  /** fetch data from the table: "sales.glass_draft" */
  sales_glass_draft: Array<Sales_Glass_Draft>;
  /** fetch aggregated fields from the table: "sales.glass_draft" */
  sales_glass_draft_aggregate: Sales_Glass_Draft_Aggregate;
  /** fetch data from the table: "sales.glass_draft" using primary key columns */
  sales_glass_draft_by_pk?: Maybe<Sales_Glass_Draft>;
  /** fetch data from the table: "sales.invoice" */
  sales_invoice: Array<Sales_Invoice>;
  /** fetch aggregated fields from the table: "sales.invoice" */
  sales_invoice_aggregate: Sales_Invoice_Aggregate;
  /** fetch data from the table: "sales.invoice" using primary key columns */
  sales_invoice_by_pk?: Maybe<Sales_Invoice>;
  /** fetch data from the table: "sales.invoice_delivery" */
  sales_invoice_delivery: Array<Sales_Invoice_Delivery>;
  /** fetch aggregated fields from the table: "sales.invoice_delivery" */
  sales_invoice_delivery_aggregate: Sales_Invoice_Delivery_Aggregate;
  /** fetch data from the table: "sales.invoice_delivery" using primary key columns */
  sales_invoice_delivery_by_pk?: Maybe<Sales_Invoice_Delivery>;
  /** fetch data from the table: "sales.invoice_line" */
  sales_invoice_line: Array<Sales_Invoice_Line>;
  /** fetch aggregated fields from the table: "sales.invoice_line" */
  sales_invoice_line_aggregate: Sales_Invoice_Line_Aggregate;
  /** fetch data from the table: "sales.invoice_line" using primary key columns */
  sales_invoice_line_by_pk?: Maybe<Sales_Invoice_Line>;
  /** fetch data from the table: "sales.order" */
  sales_order: Array<Sales_Order>;
  /** fetch aggregated fields from the table: "sales.order" */
  sales_order_aggregate: Sales_Order_Aggregate;
  /** fetch data from the table: "sales.order" using primary key columns */
  sales_order_by_pk?: Maybe<Sales_Order>;
  /** fetch data from the table: "sales.order_delivery_status" */
  sales_order_delivery_status: Array<Sales_Order_Delivery_Status>;
  /** fetch aggregated fields from the table: "sales.order_delivery_status" */
  sales_order_delivery_status_aggregate: Sales_Order_Delivery_Status_Aggregate;
  /** fetch data from the table: "sales.order_delivery_status" using primary key columns */
  sales_order_delivery_status_by_pk?: Maybe<Sales_Order_Delivery_Status>;
  /** fetch data from the table: "sales.payment" */
  sales_payment: Array<Sales_Payment>;
  /** fetch aggregated fields from the table: "sales.payment" */
  sales_payment_aggregate: Sales_Payment_Aggregate;
  /** fetch data from the table: "sales.payment" using primary key columns */
  sales_payment_by_pk?: Maybe<Sales_Payment>;
  /** fetch data from the table: "sales.payment_method" */
  sales_payment_method: Array<Sales_Payment_Method>;
  /** fetch aggregated fields from the table: "sales.payment_method" */
  sales_payment_method_aggregate: Sales_Payment_Method_Aggregate;
  /** fetch data from the table: "sales.payment_method" using primary key columns */
  sales_payment_method_by_pk?: Maybe<Sales_Payment_Method>;
  /** fetch data from the table: "sales.payment_status" */
  sales_payment_status: Array<Sales_Payment_Status>;
  /** fetch aggregated fields from the table: "sales.payment_status" */
  sales_payment_status_aggregate: Sales_Payment_Status_Aggregate;
  /** fetch data from the table: "sales.payment_status" using primary key columns */
  sales_payment_status_by_pk?: Maybe<Sales_Payment_Status>;
  /** fetch data from the table: "sales.product_draft" */
  sales_product_draft: Array<Sales_Product_Draft>;
  /** fetch aggregated fields from the table: "sales.product_draft" */
  sales_product_draft_aggregate: Sales_Product_Draft_Aggregate;
  /** fetch data from the table: "sales.product_draft" using primary key columns */
  sales_product_draft_by_pk?: Maybe<Sales_Product_Draft>;
  /** fetch data from the table: "sales.product_type" */
  sales_product_type: Array<Sales_Product_Type>;
  /** fetch aggregated fields from the table: "sales.product_type" */
  sales_product_type_aggregate: Sales_Product_Type_Aggregate;
  /** fetch data from the table: "sales.product_type" using primary key columns */
  sales_product_type_by_pk?: Maybe<Sales_Product_Type>;
  /** fetch data from the table: "sales.quotation" */
  sales_quotation: Array<Sales_Quotation>;
  /** fetch aggregated fields from the table: "sales.quotation" */
  sales_quotation_aggregate: Sales_Quotation_Aggregate;
  /** fetch data from the table: "sales.quotation" using primary key columns */
  sales_quotation_by_pk?: Maybe<Sales_Quotation>;
  /** fetch data from the table: "sales.quotation_status" */
  sales_quotation_status: Array<Sales_Quotation_Status>;
  /** fetch aggregated fields from the table: "sales.quotation_status" */
  sales_quotation_status_aggregate: Sales_Quotation_Status_Aggregate;
  /** fetch data from the table: "sales.quotation_status" using primary key columns */
  sales_quotation_status_by_pk?: Maybe<Sales_Quotation_Status>;
  /** fetch data from the table: "sales.service_draft" */
  sales_service_draft: Array<Sales_Service_Draft>;
  /** fetch aggregated fields from the table: "sales.service_draft" */
  sales_service_draft_aggregate: Sales_Service_Draft_Aggregate;
  /** fetch data from the table: "sales.service_draft" using primary key columns */
  sales_service_draft_by_pk?: Maybe<Sales_Service_Draft>;
  /** fetch data from the table: "sales.test" */
  sales_test: Array<Sales_Test>;
  /** fetch aggregated fields from the table: "sales.test" */
  sales_test_aggregate: Sales_Test_Aggregate;
  /** fetch data from the table: "sales.test" using primary key columns */
  sales_test_by_pk?: Maybe<Sales_Test>;
  /** fetch data from the table: "stock.adjustment_reasons" */
  stock_adjustment_reasons: Array<Stock_Adjustment_Reasons>;
  /** fetch aggregated fields from the table: "stock.adjustment_reasons" */
  stock_adjustment_reasons_aggregate: Stock_Adjustment_Reasons_Aggregate;
  /** fetch data from the table: "stock.adjustment_reasons" using primary key columns */
  stock_adjustment_reasons_by_pk?: Maybe<Stock_Adjustment_Reasons>;
  /** fetch data from the table: "stock.item_tranfer" */
  stock_item_tranfer: Array<Stock_Item_Tranfer>;
  /** fetch aggregated fields from the table: "stock.item_tranfer" */
  stock_item_tranfer_aggregate: Stock_Item_Tranfer_Aggregate;
  /** fetch data from the table: "stock.item_tranfer" using primary key columns */
  stock_item_tranfer_by_pk?: Maybe<Stock_Item_Tranfer>;
  /** fetch data from the table: "stock.item_transfer_status" */
  stock_item_transfer_status: Array<Stock_Item_Transfer_Status>;
  /** fetch aggregated fields from the table: "stock.item_transfer_status" */
  stock_item_transfer_status_aggregate: Stock_Item_Transfer_Status_Aggregate;
  /** fetch data from the table: "stock.item_transfer_status" using primary key columns */
  stock_item_transfer_status_by_pk?: Maybe<Stock_Item_Transfer_Status>;
  /** fetch data from the table: "stock.order_item" */
  stock_order_item: Array<Stock_Order_Item>;
  /** fetch aggregated fields from the table: "stock.order_item" */
  stock_order_item_aggregate: Stock_Order_Item_Aggregate;
  /** fetch data from the table: "stock.order_item" using primary key columns */
  stock_order_item_by_pk?: Maybe<Stock_Order_Item>;
  /** fetch data from the table: "stock.order_item_status" */
  stock_order_item_status: Array<Stock_Order_Item_Status>;
  /** fetch aggregated fields from the table: "stock.order_item_status" */
  stock_order_item_status_aggregate: Stock_Order_Item_Status_Aggregate;
  /** fetch data from the table: "stock.order_item_status" using primary key columns */
  stock_order_item_status_by_pk?: Maybe<Stock_Order_Item_Status>;
  /** fetch data from the table: "stock.stock_adjustment" */
  stock_stock_adjustment: Array<Stock_Stock_Adjustment>;
  /** fetch aggregated fields from the table: "stock.stock_adjustment" */
  stock_stock_adjustment_aggregate: Stock_Stock_Adjustment_Aggregate;
  /** fetch data from the table: "stock.stock_adjustment" using primary key columns */
  stock_stock_adjustment_by_pk?: Maybe<Stock_Stock_Adjustment>;
  /** fetch data from the table: "stock.transfer_order" */
  stock_transfer_order: Array<Stock_Transfer_Order>;
  /** fetch aggregated fields from the table: "stock.transfer_order" */
  stock_transfer_order_aggregate: Stock_Transfer_Order_Aggregate;
  /** fetch data from the table: "stock.transfer_order" using primary key columns */
  stock_transfer_order_by_pk?: Maybe<Stock_Transfer_Order>;
  /** fetch data from the table: "stock.transfer_order_status" */
  stock_transfer_order_status: Array<Stock_Transfer_Order_Status>;
  /** fetch aggregated fields from the table: "stock.transfer_order_status" */
  stock_transfer_order_status_aggregate: Stock_Transfer_Order_Status_Aggregate;
  /** fetch data from the table: "stock.transfer_order_status" using primary key columns */
  stock_transfer_order_status_by_pk?: Maybe<Stock_Transfer_Order_Status>;
  /** fetch data from the table: "stock.warehouse" */
  stock_warehouse: Array<Stock_Warehouse>;
  /** fetch aggregated fields from the table: "stock.warehouse" */
  stock_warehouse_aggregate: Stock_Warehouse_Aggregate;
  /** fetch data from the table: "stock.warehouse" using primary key columns */
  stock_warehouse_by_pk?: Maybe<Stock_Warehouse>;
  /** fetch data from the table: "stock.warehouse_order_view" */
  stock_warehouse_order_view: Array<Stock_Warehouse_Order_View>;
  /** fetch aggregated fields from the table: "stock.warehouse_order_view" */
  stock_warehouse_order_view_aggregate: Stock_Warehouse_Order_View_Aggregate;
  /** fetch data from the table: "stock.warehouse_substance" */
  stock_warehouse_substance: Array<Stock_Warehouse_Substance>;
  /** fetch aggregated fields from the table: "stock.warehouse_substance" */
  stock_warehouse_substance_aggregate: Stock_Warehouse_Substance_Aggregate;
  /** fetch data from the table: "stock.warehouse_substance" using primary key columns */
  stock_warehouse_substance_by_pk?: Maybe<Stock_Warehouse_Substance>;
};


export type Subscription_RootCash_Register_Cash_BoxArgs = {
  distinct_on?: Maybe<Array<Cash_Register_Cash_Box_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Cash_Register_Cash_Box_Order_By>>;
  where?: Maybe<Cash_Register_Cash_Box_Bool_Exp>;
};


export type Subscription_RootCash_Register_Cash_Box_AggregateArgs = {
  distinct_on?: Maybe<Array<Cash_Register_Cash_Box_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Cash_Register_Cash_Box_Order_By>>;
  where?: Maybe<Cash_Register_Cash_Box_Bool_Exp>;
};


export type Subscription_RootCash_Register_Cash_Box_By_PkArgs = {
  id: Scalars['Int'];
};


export type Subscription_RootCash_Register_Expense_CategoryArgs = {
  distinct_on?: Maybe<Array<Cash_Register_Expense_Category_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Cash_Register_Expense_Category_Order_By>>;
  where?: Maybe<Cash_Register_Expense_Category_Bool_Exp>;
};


export type Subscription_RootCash_Register_Expense_Category_AggregateArgs = {
  distinct_on?: Maybe<Array<Cash_Register_Expense_Category_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Cash_Register_Expense_Category_Order_By>>;
  where?: Maybe<Cash_Register_Expense_Category_Bool_Exp>;
};


export type Subscription_RootCash_Register_Expense_Category_By_PkArgs = {
  key: Scalars['String'];
};


export type Subscription_RootCash_Register_ExpensesArgs = {
  distinct_on?: Maybe<Array<Cash_Register_Expenses_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Cash_Register_Expenses_Order_By>>;
  where?: Maybe<Cash_Register_Expenses_Bool_Exp>;
};


export type Subscription_RootCash_Register_Expenses_AggregateArgs = {
  distinct_on?: Maybe<Array<Cash_Register_Expenses_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Cash_Register_Expenses_Order_By>>;
  where?: Maybe<Cash_Register_Expenses_Bool_Exp>;
};


export type Subscription_RootCash_Register_Expenses_By_PkArgs = {
  id: Scalars['Int'];
};


export type Subscription_RootContact_AddressArgs = {
  distinct_on?: Maybe<Array<Contact_Address_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Address_Order_By>>;
  where?: Maybe<Contact_Address_Bool_Exp>;
};


export type Subscription_RootContact_Address_AggregateArgs = {
  distinct_on?: Maybe<Array<Contact_Address_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Address_Order_By>>;
  where?: Maybe<Contact_Address_Bool_Exp>;
};


export type Subscription_RootContact_Address_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Subscription_RootContact_ContactArgs = {
  distinct_on?: Maybe<Array<Contact_Contact_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Contact_Order_By>>;
  where?: Maybe<Contact_Contact_Bool_Exp>;
};


export type Subscription_RootContact_Contact_AddressArgs = {
  distinct_on?: Maybe<Array<Contact_Contact_Address_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Contact_Address_Order_By>>;
  where?: Maybe<Contact_Contact_Address_Bool_Exp>;
};


export type Subscription_RootContact_Contact_Address_AggregateArgs = {
  distinct_on?: Maybe<Array<Contact_Contact_Address_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Contact_Address_Order_By>>;
  where?: Maybe<Contact_Contact_Address_Bool_Exp>;
};


export type Subscription_RootContact_Contact_Address_By_PkArgs = {
  addressid: Scalars['uuid'];
  contactid: Scalars['uuid'];
};


export type Subscription_RootContact_Contact_Addresses_ViewArgs = {
  distinct_on?: Maybe<Array<Contact_Contact_Addresses_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Contact_Addresses_View_Order_By>>;
  where?: Maybe<Contact_Contact_Addresses_View_Bool_Exp>;
};


export type Subscription_RootContact_Contact_Addresses_View_AggregateArgs = {
  distinct_on?: Maybe<Array<Contact_Contact_Addresses_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Contact_Addresses_View_Order_By>>;
  where?: Maybe<Contact_Contact_Addresses_View_Bool_Exp>;
};


export type Subscription_RootContact_Contact_AggregateArgs = {
  distinct_on?: Maybe<Array<Contact_Contact_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Contact_Order_By>>;
  where?: Maybe<Contact_Contact_Bool_Exp>;
};


export type Subscription_RootContact_Contact_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Subscription_RootContact_Contact_Customers_ViewArgs = {
  distinct_on?: Maybe<Array<Contact_Contact_Customers_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Contact_Customers_View_Order_By>>;
  where?: Maybe<Contact_Contact_Customers_View_Bool_Exp>;
};


export type Subscription_RootContact_Contact_Customers_View_AggregateArgs = {
  distinct_on?: Maybe<Array<Contact_Contact_Customers_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Contact_Customers_View_Order_By>>;
  where?: Maybe<Contact_Contact_Customers_View_Bool_Exp>;
};


export type Subscription_RootContact_Contact_Providers_ViewArgs = {
  distinct_on?: Maybe<Array<Contact_Contact_Providers_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Contact_Providers_View_Order_By>>;
  where?: Maybe<Contact_Contact_Providers_View_Bool_Exp>;
};


export type Subscription_RootContact_Contact_Providers_View_AggregateArgs = {
  distinct_on?: Maybe<Array<Contact_Contact_Providers_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Contact_Providers_View_Order_By>>;
  where?: Maybe<Contact_Contact_Providers_View_Bool_Exp>;
};


export type Subscription_RootContact_CustomerArgs = {
  distinct_on?: Maybe<Array<Contact_Customer_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Customer_Order_By>>;
  where?: Maybe<Contact_Customer_Bool_Exp>;
};


export type Subscription_RootContact_Customer_AddressArgs = {
  distinct_on?: Maybe<Array<Contact_Customer_Address_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Customer_Address_Order_By>>;
  where?: Maybe<Contact_Customer_Address_Bool_Exp>;
};


export type Subscription_RootContact_Customer_Address_AggregateArgs = {
  distinct_on?: Maybe<Array<Contact_Customer_Address_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Customer_Address_Order_By>>;
  where?: Maybe<Contact_Customer_Address_Bool_Exp>;
};


export type Subscription_RootContact_Customer_Address_By_PkArgs = {
  addressid: Scalars['uuid'];
  customerid: Scalars['uuid'];
};


export type Subscription_RootContact_Customer_Addresses_ViewArgs = {
  distinct_on?: Maybe<Array<Contact_Customer_Addresses_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Customer_Addresses_View_Order_By>>;
  where?: Maybe<Contact_Customer_Addresses_View_Bool_Exp>;
};


export type Subscription_RootContact_Customer_Addresses_View_AggregateArgs = {
  distinct_on?: Maybe<Array<Contact_Customer_Addresses_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Customer_Addresses_View_Order_By>>;
  where?: Maybe<Contact_Customer_Addresses_View_Bool_Exp>;
};


export type Subscription_RootContact_Customer_AggregateArgs = {
  distinct_on?: Maybe<Array<Contact_Customer_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Customer_Order_By>>;
  where?: Maybe<Contact_Customer_Bool_Exp>;
};


export type Subscription_RootContact_Customer_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Subscription_RootContact_Customer_ContactArgs = {
  distinct_on?: Maybe<Array<Contact_Customer_Contact_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Customer_Contact_Order_By>>;
  where?: Maybe<Contact_Customer_Contact_Bool_Exp>;
};


export type Subscription_RootContact_Customer_Contact_AggregateArgs = {
  distinct_on?: Maybe<Array<Contact_Customer_Contact_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Customer_Contact_Order_By>>;
  where?: Maybe<Contact_Customer_Contact_Bool_Exp>;
};


export type Subscription_RootContact_Customer_Contact_By_PkArgs = {
  contactid: Scalars['uuid'];
  customerid: Scalars['uuid'];
};


export type Subscription_RootContact_Customer_Contacts_ViewArgs = {
  distinct_on?: Maybe<Array<Contact_Customer_Contacts_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Customer_Contacts_View_Order_By>>;
  where?: Maybe<Contact_Customer_Contacts_View_Bool_Exp>;
};


export type Subscription_RootContact_Customer_Contacts_View_AggregateArgs = {
  distinct_on?: Maybe<Array<Contact_Customer_Contacts_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Customer_Contacts_View_Order_By>>;
  where?: Maybe<Contact_Customer_Contacts_View_Bool_Exp>;
};


export type Subscription_RootContact_ProviderArgs = {
  distinct_on?: Maybe<Array<Contact_Provider_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Provider_Order_By>>;
  where?: Maybe<Contact_Provider_Bool_Exp>;
};


export type Subscription_RootContact_Provider_AddressArgs = {
  distinct_on?: Maybe<Array<Contact_Provider_Address_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Provider_Address_Order_By>>;
  where?: Maybe<Contact_Provider_Address_Bool_Exp>;
};


export type Subscription_RootContact_Provider_Address_AggregateArgs = {
  distinct_on?: Maybe<Array<Contact_Provider_Address_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Provider_Address_Order_By>>;
  where?: Maybe<Contact_Provider_Address_Bool_Exp>;
};


export type Subscription_RootContact_Provider_Address_By_PkArgs = {
  addressid: Scalars['uuid'];
  providerid: Scalars['uuid'];
};


export type Subscription_RootContact_Provider_Addresses_ViewArgs = {
  distinct_on?: Maybe<Array<Contact_Provider_Addresses_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Provider_Addresses_View_Order_By>>;
  where?: Maybe<Contact_Provider_Addresses_View_Bool_Exp>;
};


export type Subscription_RootContact_Provider_Addresses_View_AggregateArgs = {
  distinct_on?: Maybe<Array<Contact_Provider_Addresses_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Provider_Addresses_View_Order_By>>;
  where?: Maybe<Contact_Provider_Addresses_View_Bool_Exp>;
};


export type Subscription_RootContact_Provider_AggregateArgs = {
  distinct_on?: Maybe<Array<Contact_Provider_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Provider_Order_By>>;
  where?: Maybe<Contact_Provider_Bool_Exp>;
};


export type Subscription_RootContact_Provider_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Subscription_RootContact_Provider_ContactArgs = {
  distinct_on?: Maybe<Array<Contact_Provider_Contact_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Provider_Contact_Order_By>>;
  where?: Maybe<Contact_Provider_Contact_Bool_Exp>;
};


export type Subscription_RootContact_Provider_Contact_AggregateArgs = {
  distinct_on?: Maybe<Array<Contact_Provider_Contact_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Provider_Contact_Order_By>>;
  where?: Maybe<Contact_Provider_Contact_Bool_Exp>;
};


export type Subscription_RootContact_Provider_Contact_By_PkArgs = {
  contactid: Scalars['uuid'];
  providerid: Scalars['uuid'];
};


export type Subscription_RootContact_Provider_Contacts_ViewArgs = {
  distinct_on?: Maybe<Array<Contact_Provider_Contacts_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Provider_Contacts_View_Order_By>>;
  where?: Maybe<Contact_Provider_Contacts_View_Bool_Exp>;
};


export type Subscription_RootContact_Provider_Contacts_View_AggregateArgs = {
  distinct_on?: Maybe<Array<Contact_Provider_Contacts_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Provider_Contacts_View_Order_By>>;
  where?: Maybe<Contact_Provider_Contacts_View_Bool_Exp>;
};


export type Subscription_RootCustomer_SituationArgs = {
  distinct_on?: Maybe<Array<Customer_Situation_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Customer_Situation_Order_By>>;
  where?: Maybe<Customer_Situation_Bool_Exp>;
};


export type Subscription_RootCustomer_Situation_AggregateArgs = {
  distinct_on?: Maybe<Array<Customer_Situation_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Customer_Situation_Order_By>>;
  where?: Maybe<Customer_Situation_Bool_Exp>;
};


export type Subscription_RootManagement_CompanyArgs = {
  distinct_on?: Maybe<Array<Management_Company_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Management_Company_Order_By>>;
  where?: Maybe<Management_Company_Bool_Exp>;
};


export type Subscription_RootManagement_Company_AggregateArgs = {
  distinct_on?: Maybe<Array<Management_Company_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Management_Company_Order_By>>;
  where?: Maybe<Management_Company_Bool_Exp>;
};


export type Subscription_RootManagement_Company_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Subscription_RootManagement_SalesPointArgs = {
  distinct_on?: Maybe<Array<Management_SalesPoint_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Management_SalesPoint_Order_By>>;
  where?: Maybe<Management_SalesPoint_Bool_Exp>;
};


export type Subscription_RootManagement_SalesPoint_AggregateArgs = {
  distinct_on?: Maybe<Array<Management_SalesPoint_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Management_SalesPoint_Order_By>>;
  where?: Maybe<Management_SalesPoint_Bool_Exp>;
};


export type Subscription_RootManagement_SalesPoint_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Subscription_RootManagement_UserProfileArgs = {
  distinct_on?: Maybe<Array<Management_UserProfile_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Management_UserProfile_Order_By>>;
  where?: Maybe<Management_UserProfile_Bool_Exp>;
};


export type Subscription_RootManagement_UserProfile_AggregateArgs = {
  distinct_on?: Maybe<Array<Management_UserProfile_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Management_UserProfile_Order_By>>;
  where?: Maybe<Management_UserProfile_Bool_Exp>;
};


export type Subscription_RootManagement_UserProfile_By_PkArgs = {
  id: Scalars['String'];
};


export type Subscription_RootManagement_User_RoleArgs = {
  distinct_on?: Maybe<Array<Management_User_Role_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Management_User_Role_Order_By>>;
  where?: Maybe<Management_User_Role_Bool_Exp>;
};


export type Subscription_RootManagement_User_Role_AggregateArgs = {
  distinct_on?: Maybe<Array<Management_User_Role_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Management_User_Role_Order_By>>;
  where?: Maybe<Management_User_Role_Bool_Exp>;
};


export type Subscription_RootManagement_User_Role_By_PkArgs = {
  name: Scalars['String'];
};


export type Subscription_RootManufacturing_Job_OrderArgs = {
  distinct_on?: Maybe<Array<Manufacturing_Job_Order_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Manufacturing_Job_Order_Order_By>>;
  where?: Maybe<Manufacturing_Job_Order_Bool_Exp>;
};


export type Subscription_RootManufacturing_Job_Order_AggregateArgs = {
  distinct_on?: Maybe<Array<Manufacturing_Job_Order_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Manufacturing_Job_Order_Order_By>>;
  where?: Maybe<Manufacturing_Job_Order_Bool_Exp>;
};


export type Subscription_RootManufacturing_Job_Order_By_PkArgs = {
  id: Scalars['Int'];
};


export type Subscription_RootManufacturing_Job_StatusArgs = {
  distinct_on?: Maybe<Array<Manufacturing_Job_Status_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Manufacturing_Job_Status_Order_By>>;
  where?: Maybe<Manufacturing_Job_Status_Bool_Exp>;
};


export type Subscription_RootManufacturing_Job_Status_AggregateArgs = {
  distinct_on?: Maybe<Array<Manufacturing_Job_Status_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Manufacturing_Job_Status_Order_By>>;
  where?: Maybe<Manufacturing_Job_Status_Bool_Exp>;
};


export type Subscription_RootManufacturing_Job_Status_By_PkArgs = {
  key: Scalars['String'];
};


export type Subscription_RootManufacturing_Manufacturing_ConsumableArgs = {
  distinct_on?: Maybe<Array<Manufacturing_Manufacturing_Consumable_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Manufacturing_Manufacturing_Consumable_Order_By>>;
  where?: Maybe<Manufacturing_Manufacturing_Consumable_Bool_Exp>;
};


export type Subscription_RootManufacturing_Manufacturing_Consumable_AggregateArgs = {
  distinct_on?: Maybe<Array<Manufacturing_Manufacturing_Consumable_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Manufacturing_Manufacturing_Consumable_Order_By>>;
  where?: Maybe<Manufacturing_Manufacturing_Consumable_Bool_Exp>;
};


export type Subscription_RootManufacturing_Manufacturing_Consumable_By_PkArgs = {
  consumable_draft_id: Scalars['uuid'];
  manufacturing_line_id: Scalars['Int'];
};


export type Subscription_RootManufacturing_Manufacturing_LineArgs = {
  distinct_on?: Maybe<Array<Manufacturing_Manufacturing_Line_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Manufacturing_Manufacturing_Line_Order_By>>;
  where?: Maybe<Manufacturing_Manufacturing_Line_Bool_Exp>;
};


export type Subscription_RootManufacturing_Manufacturing_Line_AggregateArgs = {
  distinct_on?: Maybe<Array<Manufacturing_Manufacturing_Line_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Manufacturing_Manufacturing_Line_Order_By>>;
  where?: Maybe<Manufacturing_Manufacturing_Line_Bool_Exp>;
};


export type Subscription_RootManufacturing_Manufacturing_Line_By_PkArgs = {
  id: Scalars['Int'];
};


export type Subscription_RootManufacturing_Manufacturing_Line_StatusArgs = {
  distinct_on?: Maybe<Array<Manufacturing_Manufacturing_Line_Status_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Manufacturing_Manufacturing_Line_Status_Order_By>>;
  where?: Maybe<Manufacturing_Manufacturing_Line_Status_Bool_Exp>;
};


export type Subscription_RootManufacturing_Manufacturing_Line_Status_AggregateArgs = {
  distinct_on?: Maybe<Array<Manufacturing_Manufacturing_Line_Status_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Manufacturing_Manufacturing_Line_Status_Order_By>>;
  where?: Maybe<Manufacturing_Manufacturing_Line_Status_Bool_Exp>;
};


export type Subscription_RootManufacturing_Manufacturing_Line_Status_By_PkArgs = {
  status: Scalars['String'];
};


export type Subscription_RootManufacturing_Manufacturing_ServiceArgs = {
  distinct_on?: Maybe<Array<Manufacturing_Manufacturing_Service_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Manufacturing_Manufacturing_Service_Order_By>>;
  where?: Maybe<Manufacturing_Manufacturing_Service_Bool_Exp>;
};


export type Subscription_RootManufacturing_Manufacturing_Service_AggregateArgs = {
  distinct_on?: Maybe<Array<Manufacturing_Manufacturing_Service_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Manufacturing_Manufacturing_Service_Order_By>>;
  where?: Maybe<Manufacturing_Manufacturing_Service_Bool_Exp>;
};


export type Subscription_RootManufacturing_Manufacturing_Service_By_PkArgs = {
  manufacturing_line_id: Scalars['Int'];
  service_draft_id: Scalars['uuid'];
};


export type Subscription_RootNotification_NotificationArgs = {
  distinct_on?: Maybe<Array<Notification_Notification_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Notification_Notification_Order_By>>;
  where?: Maybe<Notification_Notification_Bool_Exp>;
};


export type Subscription_RootNotification_Notification_AggregateArgs = {
  distinct_on?: Maybe<Array<Notification_Notification_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Notification_Notification_Order_By>>;
  where?: Maybe<Notification_Notification_Bool_Exp>;
};


export type Subscription_RootNotification_Notification_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Subscription_RootNotification_Notification_PriorityArgs = {
  distinct_on?: Maybe<Array<Notification_Notification_Priority_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Notification_Notification_Priority_Order_By>>;
  where?: Maybe<Notification_Notification_Priority_Bool_Exp>;
};


export type Subscription_RootNotification_Notification_Priority_AggregateArgs = {
  distinct_on?: Maybe<Array<Notification_Notification_Priority_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Notification_Notification_Priority_Order_By>>;
  where?: Maybe<Notification_Notification_Priority_Bool_Exp>;
};


export type Subscription_RootNotification_Notification_Priority_By_PkArgs = {
  key: Scalars['String'];
};


export type Subscription_RootNotification_Notification_StatusArgs = {
  distinct_on?: Maybe<Array<Notification_Notification_Status_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Notification_Notification_Status_Order_By>>;
  where?: Maybe<Notification_Notification_Status_Bool_Exp>;
};


export type Subscription_RootNotification_Notification_Status_AggregateArgs = {
  distinct_on?: Maybe<Array<Notification_Notification_Status_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Notification_Notification_Status_Order_By>>;
  where?: Maybe<Notification_Notification_Status_Bool_Exp>;
};


export type Subscription_RootNotification_Notification_Status_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Subscription_RootProduct_AccessoryArgs = {
  distinct_on?: Maybe<Array<Product_Accessory_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Accessory_Order_By>>;
  where?: Maybe<Product_Accessory_Bool_Exp>;
};


export type Subscription_RootProduct_AccessoryTypesArgs = {
  distinct_on?: Maybe<Array<Product_AccessoryTypes_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_AccessoryTypes_Order_By>>;
  where?: Maybe<Product_AccessoryTypes_Bool_Exp>;
};


export type Subscription_RootProduct_AccessoryTypes_AggregateArgs = {
  distinct_on?: Maybe<Array<Product_AccessoryTypes_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_AccessoryTypes_Order_By>>;
  where?: Maybe<Product_AccessoryTypes_Bool_Exp>;
};


export type Subscription_RootProduct_AccessoryTypes_By_PkArgs = {
  type: Scalars['String'];
};


export type Subscription_RootProduct_Accessory_AggregateArgs = {
  distinct_on?: Maybe<Array<Product_Accessory_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Accessory_Order_By>>;
  where?: Maybe<Product_Accessory_Bool_Exp>;
};


export type Subscription_RootProduct_Accessory_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Subscription_RootProduct_ConsumableArgs = {
  distinct_on?: Maybe<Array<Product_Consumable_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Consumable_Order_By>>;
  where?: Maybe<Product_Consumable_Bool_Exp>;
};


export type Subscription_RootProduct_ConsumableCategoryArgs = {
  distinct_on?: Maybe<Array<Product_ConsumableCategory_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_ConsumableCategory_Order_By>>;
  where?: Maybe<Product_ConsumableCategory_Bool_Exp>;
};


export type Subscription_RootProduct_ConsumableCategory_AggregateArgs = {
  distinct_on?: Maybe<Array<Product_ConsumableCategory_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_ConsumableCategory_Order_By>>;
  where?: Maybe<Product_ConsumableCategory_Bool_Exp>;
};


export type Subscription_RootProduct_ConsumableCategory_By_PkArgs = {
  category: Scalars['String'];
};


export type Subscription_RootProduct_Consumable_AggregateArgs = {
  distinct_on?: Maybe<Array<Product_Consumable_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Consumable_Order_By>>;
  where?: Maybe<Product_Consumable_Bool_Exp>;
};


export type Subscription_RootProduct_Consumable_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Subscription_RootProduct_Customer_ProductArgs = {
  distinct_on?: Maybe<Array<Product_Customer_Product_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Customer_Product_Order_By>>;
  where?: Maybe<Product_Customer_Product_Bool_Exp>;
};


export type Subscription_RootProduct_Customer_Product_AggregateArgs = {
  distinct_on?: Maybe<Array<Product_Customer_Product_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Customer_Product_Order_By>>;
  where?: Maybe<Product_Customer_Product_Bool_Exp>;
};


export type Subscription_RootProduct_Customer_Product_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Subscription_RootProduct_GlassArgs = {
  distinct_on?: Maybe<Array<Product_Glass_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Glass_Order_By>>;
  where?: Maybe<Product_Glass_Bool_Exp>;
};


export type Subscription_RootProduct_GlassColorArgs = {
  distinct_on?: Maybe<Array<Product_GlassColor_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_GlassColor_Order_By>>;
  where?: Maybe<Product_GlassColor_Bool_Exp>;
};


export type Subscription_RootProduct_GlassColor_AggregateArgs = {
  distinct_on?: Maybe<Array<Product_GlassColor_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_GlassColor_Order_By>>;
  where?: Maybe<Product_GlassColor_Bool_Exp>;
};


export type Subscription_RootProduct_GlassColor_By_PkArgs = {
  color: Scalars['String'];
};


export type Subscription_RootProduct_GlassThicknessArgs = {
  distinct_on?: Maybe<Array<Product_GlassThickness_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_GlassThickness_Order_By>>;
  where?: Maybe<Product_GlassThickness_Bool_Exp>;
};


export type Subscription_RootProduct_GlassThickness_AggregateArgs = {
  distinct_on?: Maybe<Array<Product_GlassThickness_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_GlassThickness_Order_By>>;
  where?: Maybe<Product_GlassThickness_Bool_Exp>;
};


export type Subscription_RootProduct_GlassThickness_By_PkArgs = {
  thickness: Scalars['String'];
};


export type Subscription_RootProduct_GlassTypeArgs = {
  distinct_on?: Maybe<Array<Product_GlassType_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_GlassType_Order_By>>;
  where?: Maybe<Product_GlassType_Bool_Exp>;
};


export type Subscription_RootProduct_GlassType_AggregateArgs = {
  distinct_on?: Maybe<Array<Product_GlassType_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_GlassType_Order_By>>;
  where?: Maybe<Product_GlassType_Bool_Exp>;
};


export type Subscription_RootProduct_GlassType_By_PkArgs = {
  type: Scalars['String'];
};


export type Subscription_RootProduct_Glass_AggregateArgs = {
  distinct_on?: Maybe<Array<Product_Glass_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Glass_Order_By>>;
  where?: Maybe<Product_Glass_Bool_Exp>;
};


export type Subscription_RootProduct_Glass_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Subscription_RootProduct_ProductArgs = {
  distinct_on?: Maybe<Array<Product_Product_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Product_Order_By>>;
  where?: Maybe<Product_Product_Bool_Exp>;
};


export type Subscription_RootProduct_Product_Accessory_ViewArgs = {
  distinct_on?: Maybe<Array<Product_Product_Accessory_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Product_Accessory_View_Order_By>>;
  where?: Maybe<Product_Product_Accessory_View_Bool_Exp>;
};


export type Subscription_RootProduct_Product_Accessory_View_AggregateArgs = {
  distinct_on?: Maybe<Array<Product_Product_Accessory_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Product_Accessory_View_Order_By>>;
  where?: Maybe<Product_Product_Accessory_View_Bool_Exp>;
};


export type Subscription_RootProduct_Product_AggregateArgs = {
  distinct_on?: Maybe<Array<Product_Product_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Product_Order_By>>;
  where?: Maybe<Product_Product_Bool_Exp>;
};


export type Subscription_RootProduct_Product_By_PkArgs = {
  code: Scalars['String'];
};


export type Subscription_RootProduct_Product_CompaniesArgs = {
  distinct_on?: Maybe<Array<Product_Product_Companies_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Product_Companies_Order_By>>;
  where?: Maybe<Product_Product_Companies_Bool_Exp>;
};


export type Subscription_RootProduct_Product_Companies_AggregateArgs = {
  distinct_on?: Maybe<Array<Product_Product_Companies_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Product_Companies_Order_By>>;
  where?: Maybe<Product_Product_Companies_Bool_Exp>;
};


export type Subscription_RootProduct_Product_Companies_By_PkArgs = {
  companyid: Scalars['uuid'];
  productcode: Scalars['String'];
};


export type Subscription_RootProduct_Product_Companies_ViewArgs = {
  distinct_on?: Maybe<Array<Product_Product_Companies_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Product_Companies_View_Order_By>>;
  where?: Maybe<Product_Product_Companies_View_Bool_Exp>;
};


export type Subscription_RootProduct_Product_Companies_View_AggregateArgs = {
  distinct_on?: Maybe<Array<Product_Product_Companies_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Product_Companies_View_Order_By>>;
  where?: Maybe<Product_Product_Companies_View_Bool_Exp>;
};


export type Subscription_RootProduct_Product_Consumable_ViewArgs = {
  distinct_on?: Maybe<Array<Product_Product_Consumable_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Product_Consumable_View_Order_By>>;
  where?: Maybe<Product_Product_Consumable_View_Bool_Exp>;
};


export type Subscription_RootProduct_Product_Consumable_View_AggregateArgs = {
  distinct_on?: Maybe<Array<Product_Product_Consumable_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Product_Consumable_View_Order_By>>;
  where?: Maybe<Product_Product_Consumable_View_Bool_Exp>;
};


export type Subscription_RootProduct_Product_Glass_ViewArgs = {
  distinct_on?: Maybe<Array<Product_Product_Glass_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Product_Glass_View_Order_By>>;
  where?: Maybe<Product_Product_Glass_View_Bool_Exp>;
};


export type Subscription_RootProduct_Product_Glass_View_AggregateArgs = {
  distinct_on?: Maybe<Array<Product_Product_Glass_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Product_Glass_View_Order_By>>;
  where?: Maybe<Product_Product_Glass_View_Bool_Exp>;
};


export type Subscription_RootProduct_Product_UnitArgs = {
  distinct_on?: Maybe<Array<Product_Product_Unit_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Product_Unit_Order_By>>;
  where?: Maybe<Product_Product_Unit_Bool_Exp>;
};


export type Subscription_RootProduct_Product_Unit_AggregateArgs = {
  distinct_on?: Maybe<Array<Product_Product_Unit_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Product_Unit_Order_By>>;
  where?: Maybe<Product_Product_Unit_Bool_Exp>;
};


export type Subscription_RootProduct_Product_Unit_By_PkArgs = {
  unit: Scalars['String'];
};


export type Subscription_RootProduct_ServiceArgs = {
  distinct_on?: Maybe<Array<Product_Service_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Service_Order_By>>;
  where?: Maybe<Product_Service_Bool_Exp>;
};


export type Subscription_RootProduct_ServiceConfigArgs = {
  distinct_on?: Maybe<Array<Product_ServiceConfig_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_ServiceConfig_Order_By>>;
  where?: Maybe<Product_ServiceConfig_Bool_Exp>;
};


export type Subscription_RootProduct_ServiceConfig_AggregateArgs = {
  distinct_on?: Maybe<Array<Product_ServiceConfig_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_ServiceConfig_Order_By>>;
  where?: Maybe<Product_ServiceConfig_Bool_Exp>;
};


export type Subscription_RootProduct_ServiceConfig_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Subscription_RootProduct_Service_AggregateArgs = {
  distinct_on?: Maybe<Array<Product_Service_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Service_Order_By>>;
  where?: Maybe<Product_Service_Bool_Exp>;
};


export type Subscription_RootProduct_Service_By_PkArgs = {
  productcode: Scalars['String'];
};


export type Subscription_RootProduct_Service_ConsumableArgs = {
  distinct_on?: Maybe<Array<Product_Service_Consumable_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Service_Consumable_Order_By>>;
  where?: Maybe<Product_Service_Consumable_Bool_Exp>;
};


export type Subscription_RootProduct_Service_Consumable_AggregateArgs = {
  distinct_on?: Maybe<Array<Product_Service_Consumable_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Service_Consumable_Order_By>>;
  where?: Maybe<Product_Service_Consumable_Bool_Exp>;
};


export type Subscription_RootProduct_Service_Consumable_By_PkArgs = {
  consumableid: Scalars['uuid'];
  serviceid: Scalars['uuid'];
};


export type Subscription_RootProduct_SubstanceArgs = {
  distinct_on?: Maybe<Array<Product_Substance_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Substance_Order_By>>;
  where?: Maybe<Product_Substance_Bool_Exp>;
};


export type Subscription_RootProduct_Substance_AggregateArgs = {
  distinct_on?: Maybe<Array<Product_Substance_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Substance_Order_By>>;
  where?: Maybe<Product_Substance_Bool_Exp>;
};


export type Subscription_RootProduct_Substance_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Subscription_RootProduct_Substance_ProviderArgs = {
  distinct_on?: Maybe<Array<Product_Substance_Provider_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Substance_Provider_Order_By>>;
  where?: Maybe<Product_Substance_Provider_Bool_Exp>;
};


export type Subscription_RootProduct_Substance_Provider_AggregateArgs = {
  distinct_on?: Maybe<Array<Product_Substance_Provider_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Substance_Provider_Order_By>>;
  where?: Maybe<Product_Substance_Provider_Bool_Exp>;
};


export type Subscription_RootProduct_Substance_Provider_By_PkArgs = {
  providerid: Scalars['uuid'];
  substanceid: Scalars['uuid'];
};


export type Subscription_RootProduct_Substance_Providers_ViewArgs = {
  distinct_on?: Maybe<Array<Product_Substance_Providers_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Substance_Providers_View_Order_By>>;
  where?: Maybe<Product_Substance_Providers_View_Bool_Exp>;
};


export type Subscription_RootProduct_Substance_Providers_View_AggregateArgs = {
  distinct_on?: Maybe<Array<Product_Substance_Providers_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Substance_Providers_View_Order_By>>;
  where?: Maybe<Product_Substance_Providers_View_Bool_Exp>;
};


export type Subscription_RootProduct_Substance_TypeArgs = {
  distinct_on?: Maybe<Array<Product_Substance_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Substance_Type_Order_By>>;
  where?: Maybe<Product_Substance_Type_Bool_Exp>;
};


export type Subscription_RootProduct_Substance_Type_AggregateArgs = {
  distinct_on?: Maybe<Array<Product_Substance_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Substance_Type_Order_By>>;
  where?: Maybe<Product_Substance_Type_Bool_Exp>;
};


export type Subscription_RootProduct_Substance_Type_By_PkArgs = {
  type: Scalars['String'];
};


export type Subscription_RootProduct_SupplyArgs = {
  distinct_on?: Maybe<Array<Product_Supply_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Supply_Order_By>>;
  where?: Maybe<Product_Supply_Bool_Exp>;
};


export type Subscription_RootProduct_Supply_AggregateArgs = {
  distinct_on?: Maybe<Array<Product_Supply_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Product_Supply_Order_By>>;
  where?: Maybe<Product_Supply_Bool_Exp>;
};


export type Subscription_RootProduct_Supply_By_PkArgs = {
  code: Scalars['String'];
};


export type Subscription_RootPurchase_DeliveryArgs = {
  distinct_on?: Maybe<Array<Purchase_Delivery_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Purchase_Delivery_Order_By>>;
  where?: Maybe<Purchase_Delivery_Bool_Exp>;
};


export type Subscription_RootPurchase_Delivery_AggregateArgs = {
  distinct_on?: Maybe<Array<Purchase_Delivery_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Purchase_Delivery_Order_By>>;
  where?: Maybe<Purchase_Delivery_Bool_Exp>;
};


export type Subscription_RootPurchase_Delivery_By_PkArgs = {
  id: Scalars['Int'];
};


export type Subscription_RootPurchase_Delivery_ItemArgs = {
  distinct_on?: Maybe<Array<Purchase_Delivery_Item_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Purchase_Delivery_Item_Order_By>>;
  where?: Maybe<Purchase_Delivery_Item_Bool_Exp>;
};


export type Subscription_RootPurchase_Delivery_Item_AggregateArgs = {
  distinct_on?: Maybe<Array<Purchase_Delivery_Item_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Purchase_Delivery_Item_Order_By>>;
  where?: Maybe<Purchase_Delivery_Item_Bool_Exp>;
};


export type Subscription_RootPurchase_Delivery_Item_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Subscription_RootSales_Accessory_DraftArgs = {
  distinct_on?: Maybe<Array<Sales_Accessory_Draft_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Accessory_Draft_Order_By>>;
  where?: Maybe<Sales_Accessory_Draft_Bool_Exp>;
};


export type Subscription_RootSales_Accessory_Draft_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Accessory_Draft_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Accessory_Draft_Order_By>>;
  where?: Maybe<Sales_Accessory_Draft_Bool_Exp>;
};


export type Subscription_RootSales_Accessory_Draft_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Subscription_RootSales_AmountArgs = {
  distinct_on?: Maybe<Array<Sales_Amount_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Amount_Order_By>>;
  where?: Maybe<Sales_Amount_Bool_Exp>;
};


export type Subscription_RootSales_Amount_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Amount_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Amount_Order_By>>;
  where?: Maybe<Sales_Amount_Bool_Exp>;
};


export type Subscription_RootSales_Amount_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Subscription_RootSales_Consumable_DraftArgs = {
  distinct_on?: Maybe<Array<Sales_Consumable_Draft_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Consumable_Draft_Order_By>>;
  where?: Maybe<Sales_Consumable_Draft_Bool_Exp>;
};


export type Subscription_RootSales_Consumable_Draft_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Consumable_Draft_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Consumable_Draft_Order_By>>;
  where?: Maybe<Sales_Consumable_Draft_Bool_Exp>;
};


export type Subscription_RootSales_Consumable_Draft_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Subscription_RootSales_DeliveryArgs = {
  distinct_on?: Maybe<Array<Sales_Delivery_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Delivery_Order_By>>;
  where?: Maybe<Sales_Delivery_Bool_Exp>;
};


export type Subscription_RootSales_Delivery_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Delivery_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Delivery_Order_By>>;
  where?: Maybe<Sales_Delivery_Bool_Exp>;
};


export type Subscription_RootSales_Delivery_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Subscription_RootSales_Delivery_LineArgs = {
  distinct_on?: Maybe<Array<Sales_Delivery_Line_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Delivery_Line_Order_By>>;
  where?: Maybe<Sales_Delivery_Line_Bool_Exp>;
};


export type Subscription_RootSales_Delivery_Line_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Delivery_Line_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Delivery_Line_Order_By>>;
  where?: Maybe<Sales_Delivery_Line_Bool_Exp>;
};


export type Subscription_RootSales_Delivery_Line_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Subscription_RootSales_DraftArgs = {
  distinct_on?: Maybe<Array<Sales_Draft_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Draft_Order_By>>;
  where?: Maybe<Sales_Draft_Bool_Exp>;
};


export type Subscription_RootSales_Draft_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Draft_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Draft_Order_By>>;
  where?: Maybe<Sales_Draft_Bool_Exp>;
};


export type Subscription_RootSales_Draft_By_PkArgs = {
  id: Scalars['Int'];
};


export type Subscription_RootSales_Draft_StatusArgs = {
  distinct_on?: Maybe<Array<Sales_Draft_Status_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Draft_Status_Order_By>>;
  where?: Maybe<Sales_Draft_Status_Bool_Exp>;
};


export type Subscription_RootSales_Draft_Status_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Draft_Status_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Draft_Status_Order_By>>;
  where?: Maybe<Sales_Draft_Status_Bool_Exp>;
};


export type Subscription_RootSales_Draft_Status_By_PkArgs = {
  status: Scalars['String'];
};


export type Subscription_RootSales_Glass_DraftArgs = {
  distinct_on?: Maybe<Array<Sales_Glass_Draft_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Glass_Draft_Order_By>>;
  where?: Maybe<Sales_Glass_Draft_Bool_Exp>;
};


export type Subscription_RootSales_Glass_Draft_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Glass_Draft_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Glass_Draft_Order_By>>;
  where?: Maybe<Sales_Glass_Draft_Bool_Exp>;
};


export type Subscription_RootSales_Glass_Draft_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Subscription_RootSales_InvoiceArgs = {
  distinct_on?: Maybe<Array<Sales_Invoice_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Invoice_Order_By>>;
  where?: Maybe<Sales_Invoice_Bool_Exp>;
};


export type Subscription_RootSales_Invoice_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Invoice_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Invoice_Order_By>>;
  where?: Maybe<Sales_Invoice_Bool_Exp>;
};


export type Subscription_RootSales_Invoice_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Subscription_RootSales_Invoice_DeliveryArgs = {
  distinct_on?: Maybe<Array<Sales_Invoice_Delivery_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Invoice_Delivery_Order_By>>;
  where?: Maybe<Sales_Invoice_Delivery_Bool_Exp>;
};


export type Subscription_RootSales_Invoice_Delivery_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Invoice_Delivery_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Invoice_Delivery_Order_By>>;
  where?: Maybe<Sales_Invoice_Delivery_Bool_Exp>;
};


export type Subscription_RootSales_Invoice_Delivery_By_PkArgs = {
  delivery_id: Scalars['uuid'];
  invoice_id: Scalars['uuid'];
};


export type Subscription_RootSales_Invoice_LineArgs = {
  distinct_on?: Maybe<Array<Sales_Invoice_Line_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Invoice_Line_Order_By>>;
  where?: Maybe<Sales_Invoice_Line_Bool_Exp>;
};


export type Subscription_RootSales_Invoice_Line_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Invoice_Line_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Invoice_Line_Order_By>>;
  where?: Maybe<Sales_Invoice_Line_Bool_Exp>;
};


export type Subscription_RootSales_Invoice_Line_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Subscription_RootSales_OrderArgs = {
  distinct_on?: Maybe<Array<Sales_Order_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Order_Order_By>>;
  where?: Maybe<Sales_Order_Bool_Exp>;
};


export type Subscription_RootSales_Order_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Order_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Order_Order_By>>;
  where?: Maybe<Sales_Order_Bool_Exp>;
};


export type Subscription_RootSales_Order_By_PkArgs = {
  id: Scalars['Int'];
};


export type Subscription_RootSales_Order_Delivery_StatusArgs = {
  distinct_on?: Maybe<Array<Sales_Order_Delivery_Status_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Order_Delivery_Status_Order_By>>;
  where?: Maybe<Sales_Order_Delivery_Status_Bool_Exp>;
};


export type Subscription_RootSales_Order_Delivery_Status_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Order_Delivery_Status_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Order_Delivery_Status_Order_By>>;
  where?: Maybe<Sales_Order_Delivery_Status_Bool_Exp>;
};


export type Subscription_RootSales_Order_Delivery_Status_By_PkArgs = {
  key: Scalars['String'];
};


export type Subscription_RootSales_PaymentArgs = {
  distinct_on?: Maybe<Array<Sales_Payment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Payment_Order_By>>;
  where?: Maybe<Sales_Payment_Bool_Exp>;
};


export type Subscription_RootSales_Payment_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Payment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Payment_Order_By>>;
  where?: Maybe<Sales_Payment_Bool_Exp>;
};


export type Subscription_RootSales_Payment_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Subscription_RootSales_Payment_MethodArgs = {
  distinct_on?: Maybe<Array<Sales_Payment_Method_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Payment_Method_Order_By>>;
  where?: Maybe<Sales_Payment_Method_Bool_Exp>;
};


export type Subscription_RootSales_Payment_Method_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Payment_Method_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Payment_Method_Order_By>>;
  where?: Maybe<Sales_Payment_Method_Bool_Exp>;
};


export type Subscription_RootSales_Payment_Method_By_PkArgs = {
  key: Scalars['String'];
};


export type Subscription_RootSales_Payment_StatusArgs = {
  distinct_on?: Maybe<Array<Sales_Payment_Status_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Payment_Status_Order_By>>;
  where?: Maybe<Sales_Payment_Status_Bool_Exp>;
};


export type Subscription_RootSales_Payment_Status_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Payment_Status_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Payment_Status_Order_By>>;
  where?: Maybe<Sales_Payment_Status_Bool_Exp>;
};


export type Subscription_RootSales_Payment_Status_By_PkArgs = {
  key: Scalars['String'];
};


export type Subscription_RootSales_Product_DraftArgs = {
  distinct_on?: Maybe<Array<Sales_Product_Draft_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Product_Draft_Order_By>>;
  where?: Maybe<Sales_Product_Draft_Bool_Exp>;
};


export type Subscription_RootSales_Product_Draft_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Product_Draft_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Product_Draft_Order_By>>;
  where?: Maybe<Sales_Product_Draft_Bool_Exp>;
};


export type Subscription_RootSales_Product_Draft_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Subscription_RootSales_Product_TypeArgs = {
  distinct_on?: Maybe<Array<Sales_Product_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Product_Type_Order_By>>;
  where?: Maybe<Sales_Product_Type_Bool_Exp>;
};


export type Subscription_RootSales_Product_Type_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Product_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Product_Type_Order_By>>;
  where?: Maybe<Sales_Product_Type_Bool_Exp>;
};


export type Subscription_RootSales_Product_Type_By_PkArgs = {
  type: Scalars['String'];
};


export type Subscription_RootSales_QuotationArgs = {
  distinct_on?: Maybe<Array<Sales_Quotation_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Quotation_Order_By>>;
  where?: Maybe<Sales_Quotation_Bool_Exp>;
};


export type Subscription_RootSales_Quotation_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Quotation_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Quotation_Order_By>>;
  where?: Maybe<Sales_Quotation_Bool_Exp>;
};


export type Subscription_RootSales_Quotation_By_PkArgs = {
  id: Scalars['Int'];
};


export type Subscription_RootSales_Quotation_StatusArgs = {
  distinct_on?: Maybe<Array<Sales_Quotation_Status_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Quotation_Status_Order_By>>;
  where?: Maybe<Sales_Quotation_Status_Bool_Exp>;
};


export type Subscription_RootSales_Quotation_Status_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Quotation_Status_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Quotation_Status_Order_By>>;
  where?: Maybe<Sales_Quotation_Status_Bool_Exp>;
};


export type Subscription_RootSales_Quotation_Status_By_PkArgs = {
  key: Scalars['String'];
};


export type Subscription_RootSales_Service_DraftArgs = {
  distinct_on?: Maybe<Array<Sales_Service_Draft_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Service_Draft_Order_By>>;
  where?: Maybe<Sales_Service_Draft_Bool_Exp>;
};


export type Subscription_RootSales_Service_Draft_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Service_Draft_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Service_Draft_Order_By>>;
  where?: Maybe<Sales_Service_Draft_Bool_Exp>;
};


export type Subscription_RootSales_Service_Draft_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Subscription_RootSales_TestArgs = {
  distinct_on?: Maybe<Array<Sales_Test_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Test_Order_By>>;
  where?: Maybe<Sales_Test_Bool_Exp>;
};


export type Subscription_RootSales_Test_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Test_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Test_Order_By>>;
  where?: Maybe<Sales_Test_Bool_Exp>;
};


export type Subscription_RootSales_Test_By_PkArgs = {
  id: Scalars['Int'];
};


export type Subscription_RootStock_Adjustment_ReasonsArgs = {
  distinct_on?: Maybe<Array<Stock_Adjustment_Reasons_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Adjustment_Reasons_Order_By>>;
  where?: Maybe<Stock_Adjustment_Reasons_Bool_Exp>;
};


export type Subscription_RootStock_Adjustment_Reasons_AggregateArgs = {
  distinct_on?: Maybe<Array<Stock_Adjustment_Reasons_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Adjustment_Reasons_Order_By>>;
  where?: Maybe<Stock_Adjustment_Reasons_Bool_Exp>;
};


export type Subscription_RootStock_Adjustment_Reasons_By_PkArgs = {
  value: Scalars['String'];
};


export type Subscription_RootStock_Item_TranferArgs = {
  distinct_on?: Maybe<Array<Stock_Item_Tranfer_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Item_Tranfer_Order_By>>;
  where?: Maybe<Stock_Item_Tranfer_Bool_Exp>;
};


export type Subscription_RootStock_Item_Tranfer_AggregateArgs = {
  distinct_on?: Maybe<Array<Stock_Item_Tranfer_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Item_Tranfer_Order_By>>;
  where?: Maybe<Stock_Item_Tranfer_Bool_Exp>;
};


export type Subscription_RootStock_Item_Tranfer_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Subscription_RootStock_Item_Transfer_StatusArgs = {
  distinct_on?: Maybe<Array<Stock_Item_Transfer_Status_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Item_Transfer_Status_Order_By>>;
  where?: Maybe<Stock_Item_Transfer_Status_Bool_Exp>;
};


export type Subscription_RootStock_Item_Transfer_Status_AggregateArgs = {
  distinct_on?: Maybe<Array<Stock_Item_Transfer_Status_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Item_Transfer_Status_Order_By>>;
  where?: Maybe<Stock_Item_Transfer_Status_Bool_Exp>;
};


export type Subscription_RootStock_Item_Transfer_Status_By_PkArgs = {
  key: Scalars['String'];
};


export type Subscription_RootStock_Order_ItemArgs = {
  distinct_on?: Maybe<Array<Stock_Order_Item_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Order_Item_Order_By>>;
  where?: Maybe<Stock_Order_Item_Bool_Exp>;
};


export type Subscription_RootStock_Order_Item_AggregateArgs = {
  distinct_on?: Maybe<Array<Stock_Order_Item_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Order_Item_Order_By>>;
  where?: Maybe<Stock_Order_Item_Bool_Exp>;
};


export type Subscription_RootStock_Order_Item_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Subscription_RootStock_Order_Item_StatusArgs = {
  distinct_on?: Maybe<Array<Stock_Order_Item_Status_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Order_Item_Status_Order_By>>;
  where?: Maybe<Stock_Order_Item_Status_Bool_Exp>;
};


export type Subscription_RootStock_Order_Item_Status_AggregateArgs = {
  distinct_on?: Maybe<Array<Stock_Order_Item_Status_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Order_Item_Status_Order_By>>;
  where?: Maybe<Stock_Order_Item_Status_Bool_Exp>;
};


export type Subscription_RootStock_Order_Item_Status_By_PkArgs = {
  key: Scalars['String'];
};


export type Subscription_RootStock_Stock_AdjustmentArgs = {
  distinct_on?: Maybe<Array<Stock_Stock_Adjustment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Stock_Adjustment_Order_By>>;
  where?: Maybe<Stock_Stock_Adjustment_Bool_Exp>;
};


export type Subscription_RootStock_Stock_Adjustment_AggregateArgs = {
  distinct_on?: Maybe<Array<Stock_Stock_Adjustment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Stock_Adjustment_Order_By>>;
  where?: Maybe<Stock_Stock_Adjustment_Bool_Exp>;
};


export type Subscription_RootStock_Stock_Adjustment_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Subscription_RootStock_Transfer_OrderArgs = {
  distinct_on?: Maybe<Array<Stock_Transfer_Order_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Transfer_Order_Order_By>>;
  where?: Maybe<Stock_Transfer_Order_Bool_Exp>;
};


export type Subscription_RootStock_Transfer_Order_AggregateArgs = {
  distinct_on?: Maybe<Array<Stock_Transfer_Order_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Transfer_Order_Order_By>>;
  where?: Maybe<Stock_Transfer_Order_Bool_Exp>;
};


export type Subscription_RootStock_Transfer_Order_By_PkArgs = {
  id: Scalars['Int'];
};


export type Subscription_RootStock_Transfer_Order_StatusArgs = {
  distinct_on?: Maybe<Array<Stock_Transfer_Order_Status_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Transfer_Order_Status_Order_By>>;
  where?: Maybe<Stock_Transfer_Order_Status_Bool_Exp>;
};


export type Subscription_RootStock_Transfer_Order_Status_AggregateArgs = {
  distinct_on?: Maybe<Array<Stock_Transfer_Order_Status_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Transfer_Order_Status_Order_By>>;
  where?: Maybe<Stock_Transfer_Order_Status_Bool_Exp>;
};


export type Subscription_RootStock_Transfer_Order_Status_By_PkArgs = {
  key: Scalars['String'];
};


export type Subscription_RootStock_WarehouseArgs = {
  distinct_on?: Maybe<Array<Stock_Warehouse_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Warehouse_Order_By>>;
  where?: Maybe<Stock_Warehouse_Bool_Exp>;
};


export type Subscription_RootStock_Warehouse_AggregateArgs = {
  distinct_on?: Maybe<Array<Stock_Warehouse_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Warehouse_Order_By>>;
  where?: Maybe<Stock_Warehouse_Bool_Exp>;
};


export type Subscription_RootStock_Warehouse_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Subscription_RootStock_Warehouse_Order_ViewArgs = {
  distinct_on?: Maybe<Array<Stock_Warehouse_Order_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Warehouse_Order_View_Order_By>>;
  where?: Maybe<Stock_Warehouse_Order_View_Bool_Exp>;
};


export type Subscription_RootStock_Warehouse_Order_View_AggregateArgs = {
  distinct_on?: Maybe<Array<Stock_Warehouse_Order_View_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Warehouse_Order_View_Order_By>>;
  where?: Maybe<Stock_Warehouse_Order_View_Bool_Exp>;
};


export type Subscription_RootStock_Warehouse_SubstanceArgs = {
  distinct_on?: Maybe<Array<Stock_Warehouse_Substance_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Warehouse_Substance_Order_By>>;
  where?: Maybe<Stock_Warehouse_Substance_Bool_Exp>;
};


export type Subscription_RootStock_Warehouse_Substance_AggregateArgs = {
  distinct_on?: Maybe<Array<Stock_Warehouse_Substance_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Stock_Warehouse_Substance_Order_By>>;
  where?: Maybe<Stock_Warehouse_Substance_Bool_Exp>;
};


export type Subscription_RootStock_Warehouse_Substance_By_PkArgs = {
  substanceid: Scalars['uuid'];
  warehouseid: Scalars['uuid'];
};


/** Boolean expression to compare columns of type "timestamp". All fields are combined with logical 'AND'. */
export type Timestamp_Comparison_Exp = {
  _eq?: Maybe<Scalars['timestamp']>;
  _gt?: Maybe<Scalars['timestamp']>;
  _gte?: Maybe<Scalars['timestamp']>;
  _in?: Maybe<Array<Scalars['timestamp']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['timestamp']>;
  _lte?: Maybe<Scalars['timestamp']>;
  _neq?: Maybe<Scalars['timestamp']>;
  _nin?: Maybe<Array<Scalars['timestamp']>>;
};


/** Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'. */
export type Timestamptz_Comparison_Exp = {
  _eq?: Maybe<Scalars['timestamptz']>;
  _gt?: Maybe<Scalars['timestamptz']>;
  _gte?: Maybe<Scalars['timestamptz']>;
  _in?: Maybe<Array<Scalars['timestamptz']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['timestamptz']>;
  _lte?: Maybe<Scalars['timestamptz']>;
  _neq?: Maybe<Scalars['timestamptz']>;
  _nin?: Maybe<Array<Scalars['timestamptz']>>;
};


/** Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'. */
export type Uuid_Comparison_Exp = {
  _eq?: Maybe<Scalars['uuid']>;
  _gt?: Maybe<Scalars['uuid']>;
  _gte?: Maybe<Scalars['uuid']>;
  _in?: Maybe<Array<Scalars['uuid']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['uuid']>;
  _lte?: Maybe<Scalars['uuid']>;
  _neq?: Maybe<Scalars['uuid']>;
  _nin?: Maybe<Array<Scalars['uuid']>>;
};

export type AddExpenseMutationVariables = Exact<{
  cash_box_id: Scalars['Int'];
  amountSpent: Scalars['numeric'];
  category?: Maybe<Scalars['String']>;
  employee_id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  note?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['timestamptz']>;
}>;


export type AddExpenseMutation = { __typename?: 'mutation_root', insert_cash_register_expenses_one?: Maybe<{ __typename?: 'cash_register_expenses', id: number }> };

export type DeleteExpensesByIdMutationVariables = Exact<{
  ids?: Array<Scalars['Int']> | Scalars['Int'];
}>;


export type DeleteExpensesByIdMutation = { __typename?: 'mutation_root', delete_cash_register_expenses?: Maybe<{ __typename?: 'cash_register_expenses_mutation_response', affected_rows: number }> };

export type GetClientOrdersQueryVariables = Exact<{
  client?: Maybe<Scalars['uuid']>;
}>;


export type GetClientOrdersQuery = { __typename?: 'query_root', sales_order: Array<{ __typename?: 'sales_order', delivery_status: string, payment_status: string, id: number, draft_id: number, ref?: Maybe<string>, total_ht: any, total_tax: any, total_ttc: any, date: any, deadline: any, company: { __typename?: 'management_company', name: string, id: any }, customer: { __typename?: 'contact_customer', code?: Maybe<string>, id: any, name: string, phone: string }, salepoint: { __typename?: 'management_salesPoint', name: string } }> };

export type InsertCashBoxMutationVariables = Exact<{
  name: Scalars['String'];
  salepoint_id: Scalars['uuid'];
}>;


export type InsertCashBoxMutation = { __typename?: 'mutation_root', insert_cash_register_cash_box_one?: Maybe<{ __typename?: 'cash_register_cash_box', id: number }> };

export type GetCashBoxByIdQueryVariables = Exact<{
  id: Scalars['Int'];
  salepoint_id: Scalars['uuid'];
}>;


export type GetCashBoxByIdQuery = { __typename?: 'query_root', cash_register_cash_box_by_pk?: Maybe<{ __typename?: 'cash_register_cash_box', balance: any, createdAt?: Maybe<any>, salepoint_id: any, updatedAt?: Maybe<any>, name: string, id: number, expenses: Array<{ __typename?: 'cash_register_expenses', amountSpent: any, category: string, createdAt?: Maybe<any>, date?: Maybe<any>, employee_id?: Maybe<string>, id: number, name: string, note?: Maybe<string>, employee?: Maybe<{ __typename?: 'management_userProfile', firstname?: Maybe<string>, lastname?: Maybe<string>, username: string }> }>, salepoint: { __typename?: 'management_salesPoint', name: string } }>, sales_payment: Array<{ __typename?: 'sales_payment', id: any, amount: any, comment?: Maybe<string>, order_id: number, deadline?: Maybe<any>, date: any, company: { __typename?: 'management_company', name: string }, customer: { __typename?: 'contact_customer', name: string } }> };

export type GetCustomerSituationQueryVariables = Exact<{
  customer_id?: Maybe<Scalars['uuid']>;
}>;


export type GetCustomerSituationQuery = { __typename?: 'query_root', customer_situation: Array<{ __typename?: 'customer_situation', order_ref?: Maybe<string>, customer_id?: Maybe<any>, total_ttc?: Maybe<any>, paid?: Maybe<any>, credit?: Maybe<any> }> };

export type GetExpensesCategoriesQueryVariables = Exact<{ [key: string]: never; }>;


export type GetExpensesCategoriesQuery = { __typename?: 'query_root', cash_register_expense_category: Array<{ __typename?: 'cash_register_expense_category', key: string, value: string }> };

export type DashboardQueryQueryVariables = Exact<{
  date1?: Maybe<Scalars['date']>;
  date2?: Maybe<Scalars['date']>;
}>;


export type DashboardQueryQuery = { __typename?: 'query_root', contact_customer_aggregate: { __typename?: 'contact_customer_aggregate', aggregate?: Maybe<{ __typename?: 'contact_customer_aggregate_fields', count: number }> }, management_userProfile_aggregate: { __typename?: 'management_userProfile_aggregate', aggregate?: Maybe<{ __typename?: 'management_userProfile_aggregate_fields', count: number }> }, stock_transfer_order_aggregate: { __typename?: 'stock_transfer_order_aggregate', aggregate?: Maybe<{ __typename?: 'stock_transfer_order_aggregate_fields', count: number }> }, sales_order_aggregate: { __typename?: 'sales_order_aggregate', aggregate?: Maybe<{ __typename?: 'sales_order_aggregate_fields', sum?: Maybe<{ __typename?: 'sales_order_sum_fields', total_ttc?: Maybe<any> }> }> } };

export type GetAccessoriesSubstancesQueryVariables = Exact<{
  id: Scalars['uuid'];
}>;


export type GetAccessoriesSubstancesQuery = { __typename?: 'query_root', stock_warehouse_substance: Array<{ __typename?: 'stock_warehouse_substance', quantity: number, substance: { __typename?: 'product_substance', productAccessory?: Maybe<{ __typename?: 'product_product_accessory_view', code?: Maybe<string>, label?: Maybe<string>, substanceid?: Maybe<any>, unit?: Maybe<string> }> } }> };

export type GetGlassesSubstancesQueryVariables = Exact<{
  id: Scalars['uuid'];
}>;


export type GetGlassesSubstancesQuery = { __typename?: 'query_root', stock_warehouse_substance: Array<{ __typename?: 'stock_warehouse_substance', quantity: number, substance: { __typename?: 'product_substance', productGlass?: Maybe<{ __typename?: 'product_product_glass_view', code?: Maybe<string>, label?: Maybe<string>, substanceid?: Maybe<any>, unit?: Maybe<string> }> } }> };

export type GetMyUserQueryVariables = Exact<{
  id: Scalars['String'];
}>;


export type GetMyUserQuery = { __typename?: 'query_root', management_userProfile_by_pk?: Maybe<{ __typename?: 'management_userProfile', active: boolean, createdAt: any, email?: Maybe<string>, firstname?: Maybe<string>, id: string, lastname?: Maybe<string>, phone?: Maybe<string>, role: Management_User_Role_Enum, username: string, SalesPointsid?: Maybe<any>, CIN?: Maybe<string>, SalesPoint?: Maybe<{ __typename?: 'management_salesPoint', name: string, id: any, isPrincipale: boolean, warehouses: Array<{ __typename?: 'stock_warehouse', name: string, id: any, companyid: any, company: { __typename?: 'management_company', name: string } }> }> }> };

export type GetOrdersBySalepointQueryVariables = Exact<{
  salepoint_id: Scalars['uuid'];
}>;


export type GetOrdersBySalepointQuery = { __typename?: 'query_root', sales_order: Array<{ __typename?: 'sales_order', id: number, ref?: Maybe<string> }> };

export type GetShortCompaniesQueryVariables = Exact<{ [key: string]: never; }>;


export type GetShortCompaniesQuery = { __typename?: 'query_root', management_company: Array<{ __typename?: 'management_company', id: any, name: string }> };

export type GetShortEmployeesQueryVariables = Exact<{ [key: string]: never; }>;


export type GetShortEmployeesQuery = { __typename?: 'query_root', management_userProfile: Array<{ __typename?: 'management_userProfile', id: string, username: string, firstname?: Maybe<string>, lastname?: Maybe<string> }> };

export type GetShortProvidersQueryVariables = Exact<{ [key: string]: never; }>;


export type GetShortProvidersQuery = { __typename?: 'query_root', contact_provider: Array<{ __typename?: 'contact_provider', code?: Maybe<string>, name: string }> };

export type GeShortSalePointsQueryVariables = Exact<{
  ids?: Maybe<Uuid_Comparison_Exp>;
}>;


export type GeShortSalePointsQuery = { __typename?: 'query_root', management_salesPoint: Array<{ __typename?: 'management_salesPoint', name: string, id: any, isPrincipale: boolean, cash_boxes: Array<{ __typename?: 'cash_register_cash_box', id: number, name: string }>, warehouses: Array<{ __typename?: 'stock_warehouse', name: string, id: any, companyid: any, company: { __typename?: 'management_company', name: string } }> }> };

export type GetShortSubstancesQueryVariables = Exact<{ [key: string]: never; }>;


export type GetShortSubstancesQuery = { __typename?: 'query_root', product_product: Array<{ __typename?: 'product_product', label: string, code: string, price: number, priceMax: number, priceMin: number, glass?: Maybe<{ __typename?: 'product_glass', substanceid: any }>, consumable?: Maybe<{ __typename?: 'product_consumable', substanceid: any }>, accessory?: Maybe<{ __typename?: 'product_accessory', substanceid: any }> }> };

export type GetShortWArehousesQueryVariables = Exact<{ [key: string]: never; }>;


export type GetShortWArehousesQuery = { __typename?: 'query_root', stock_warehouse: Array<{ __typename?: 'stock_warehouse', name: string, id: any, companyid: any, company: { __typename?: 'management_company', name: string } }> };

export type GetProductsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetProductsQuery = { __typename?: 'query_root', product_product: Array<{ __typename?: 'product_product', code: string, label: string, price: number, priceMax: number, priceMin: number, unit: Product_Product_Unit_Enum }> };

export type ChangeNotificationStateMutationVariables = Exact<{
  objects: Array<Notification_Notification_Status_Insert_Input> | Notification_Notification_Status_Insert_Input;
}>;


export type ChangeNotificationStateMutation = { __typename?: 'mutation_root', insert_notification_notification_status?: Maybe<{ __typename?: 'notification_notification_status_mutation_response', affected_rows: number }> };

export type NotificationQueryQueryVariables = Exact<{
  user_id?: Maybe<Scalars['String']>;
  role?: Maybe<Management_User_Role_Enum>;
}>;


export type NotificationQueryQuery = { __typename?: 'query_root', notification_notification: Array<{ __typename?: 'notification_notification', id: any, message: string, priority: string, route?: Maybe<string>, ref?: Maybe<string>, role?: Maybe<Management_User_Role_Enum>, subject?: Maybe<string>, createdAt?: Maybe<any>, title: string, user_id?: Maybe<string>, notification_status: Array<{ __typename?: 'notification_notification_status', id: any, read: boolean, hide: boolean }> }> };

export type NotificationSubscriptionSubscriptionVariables = Exact<{
  user_id?: Maybe<Scalars['String']>;
  role?: Maybe<Management_User_Role_Enum>;
}>;


export type NotificationSubscriptionSubscription = { __typename?: 'subscription_root', notification_notification: Array<{ __typename?: 'notification_notification', id: any, message: string, priority: string, route?: Maybe<string>, ref?: Maybe<string>, role?: Maybe<Management_User_Role_Enum>, subject?: Maybe<string>, createdAt?: Maybe<any>, title: string, user_id?: Maybe<string>, notification_status: Array<{ __typename?: 'notification_notification_status', id: any, read: boolean, hide: boolean }> }> };

export type WarehouseOnetimeQueryVariables = Exact<{ [key: string]: never; }>;


export type WarehouseOnetimeQuery = { __typename?: 'query_root', stock_warehouse: Array<{ __typename?: 'stock_warehouse', id: any, name: string }> };

export type WarehouseSubscriptionSubscriptionVariables = Exact<{ [key: string]: never; }>;


export type WarehouseSubscriptionSubscription = { __typename?: 'subscription_root', stock_warehouse: Array<{ __typename?: 'stock_warehouse', id: any, name: string }> };

export type AddContactAddressMutationVariables = Exact<{
  address: Contact_Address_Insert_Input;
  id?: Maybe<Scalars['uuid']>;
}>;


export type AddContactAddressMutation = { __typename?: 'mutation_root', insert_contact_contact_address_one?: Maybe<{ __typename?: 'contact_contact_address', address: { __typename?: 'contact_address', address?: Maybe<string>, city?: Maybe<string>, id: any, zip?: Maybe<string> } }> };

export type AddCustomerAddressMutationVariables = Exact<{
  address: Contact_Address_Insert_Input;
  id?: Maybe<Scalars['uuid']>;
}>;


export type AddCustomerAddressMutation = { __typename?: 'mutation_root', insert_contact_customer_address_one?: Maybe<{ __typename?: 'contact_customer_address', address: { __typename?: 'contact_address', address?: Maybe<string>, city?: Maybe<string>, id: any, zip?: Maybe<string> } }> };

export type AddCustomerContactMutationVariables = Exact<{
  id: Scalars['uuid'];
  contact: Contact_Contact_Insert_Input;
}>;


export type AddCustomerContactMutation = { __typename?: 'mutation_root', insert_contact_customer_contact_one?: Maybe<{ __typename?: 'contact_customer_contact', contact: { __typename?: 'contact_contact', code?: Maybe<string>, mail?: Maybe<string>, name: string, note?: Maybe<string>, phone: string, id: any } }> };

export type AddProviderAddressMutationVariables = Exact<{
  address: Contact_Address_Insert_Input;
  id?: Maybe<Scalars['uuid']>;
}>;


export type AddProviderAddressMutation = { __typename?: 'mutation_root', insert_contact_provider_address_one?: Maybe<{ __typename?: 'contact_provider_address', address: { __typename?: 'contact_address', address?: Maybe<string>, city?: Maybe<string>, id: any, zip?: Maybe<string> } }> };

export type AddProviderContactMutationVariables = Exact<{
  id: Scalars['uuid'];
  contact: Contact_Contact_Insert_Input;
}>;


export type AddProviderContactMutation = { __typename?: 'mutation_root', insert_contact_provider_contact_one?: Maybe<{ __typename?: 'contact_provider_contact', contact: { __typename?: 'contact_contact', code?: Maybe<string>, mail?: Maybe<string>, name: string, note?: Maybe<string>, phone: string, id: any } }> };

export type AffectCustomerContactMutationVariables = Exact<{
  affectedContacts: Array<Contact_Customer_Contact_Insert_Input> | Contact_Customer_Contact_Insert_Input;
}>;


export type AffectCustomerContactMutation = { __typename?: 'mutation_root', insert_contact_customer_contact?: Maybe<{ __typename?: 'contact_customer_contact_mutation_response', returning: Array<{ __typename?: 'contact_customer_contact', contact: { __typename?: 'contact_contact', code?: Maybe<string>, id: any, mail?: Maybe<string>, name: string, note?: Maybe<string>, phone: string } }> }> };

export type AffectProviderContactMutationVariables = Exact<{
  affectedContacts: Array<Contact_Provider_Contact_Insert_Input> | Contact_Provider_Contact_Insert_Input;
}>;


export type AffectProviderContactMutation = { __typename?: 'mutation_root', insert_contact_provider_contact?: Maybe<{ __typename?: 'contact_provider_contact_mutation_response', returning: Array<{ __typename?: 'contact_provider_contact', contact: { __typename?: 'contact_contact', code?: Maybe<string>, id: any, mail?: Maybe<string>, name: string, note?: Maybe<string>, phone: string } }> }> };

export type DeleteContactMutationVariables = Exact<{
  id: Scalars['uuid'];
}>;


export type DeleteContactMutation = { __typename?: 'mutation_root', delete_contact_contact_by_pk?: Maybe<{ __typename?: 'contact_contact', id: any, name: string }> };

export type DeleteContactAddressMutationVariables = Exact<{
  addressid: Scalars['uuid'];
  id: Scalars['uuid'];
}>;


export type DeleteContactAddressMutation = { __typename?: 'mutation_root', delete_contact_contact_address_by_pk?: Maybe<{ __typename?: 'contact_contact_address', addressid: any, contactid: any }> };

export type DeleteCustomerMutationVariables = Exact<{
  id: Scalars['uuid'];
}>;


export type DeleteCustomerMutation = { __typename?: 'mutation_root', delete_contact_customer_by_pk?: Maybe<{ __typename?: 'contact_customer', id: any, name: string }> };

export type DeleteCustomerAddressMutationVariables = Exact<{
  addressid: Scalars['uuid'];
  id: Scalars['uuid'];
}>;


export type DeleteCustomerAddressMutation = { __typename?: 'mutation_root', delete_contact_customer_address_by_pk?: Maybe<{ __typename?: 'contact_customer_address', addressid: any, customerid: any }> };

export type DeleteCustomerContactMutationVariables = Exact<{
  contactid: Scalars['uuid'];
  id: Scalars['uuid'];
}>;


export type DeleteCustomerContactMutation = { __typename?: 'mutation_root', delete_contact_customer_contact_by_pk?: Maybe<{ __typename?: 'contact_customer_contact', contactid: any, customerid: any }> };

export type DeleteManyContactsMutationVariables = Exact<{
  ids?: Maybe<Array<Scalars['uuid']> | Scalars['uuid']>;
}>;


export type DeleteManyContactsMutation = { __typename?: 'mutation_root', delete_contact_contact?: Maybe<{ __typename?: 'contact_contact_mutation_response', returning: Array<{ __typename?: 'contact_contact', id: any }> }> };

export type DeleteManyCustomersMutationVariables = Exact<{
  ids: Array<Scalars['uuid']> | Scalars['uuid'];
}>;


export type DeleteManyCustomersMutation = { __typename?: 'mutation_root', delete_contact_customer?: Maybe<{ __typename?: 'contact_customer_mutation_response', returning: Array<{ __typename?: 'contact_customer', id: any }> }> };

export type DeleteManyProvidersMutationVariables = Exact<{
  ids?: Maybe<Array<Scalars['uuid']> | Scalars['uuid']>;
}>;


export type DeleteManyProvidersMutation = { __typename?: 'mutation_root', delete_contact_provider?: Maybe<{ __typename?: 'contact_provider_mutation_response', returning: Array<{ __typename?: 'contact_provider', id: any }> }> };

export type DeleteProviderMutationVariables = Exact<{
  id: Scalars['uuid'];
}>;


export type DeleteProviderMutation = { __typename?: 'mutation_root', delete_contact_provider_by_pk?: Maybe<{ __typename?: 'contact_provider', id: any, name: string }> };

export type DeleteProviderAddressMutationVariables = Exact<{
  addressid: Scalars['uuid'];
  id: Scalars['uuid'];
}>;


export type DeleteProviderAddressMutation = { __typename?: 'mutation_root', delete_contact_provider_address_by_pk?: Maybe<{ __typename?: 'contact_provider_address', addressid: any, providerid: any }> };

export type DeleteProviderContactMutationVariables = Exact<{
  contactid: Scalars['uuid'];
  id: Scalars['uuid'];
}>;


export type DeleteProviderContactMutation = { __typename?: 'mutation_root', delete_contact_provider_contact_by_pk?: Maybe<{ __typename?: 'contact_provider_contact', contactid: any, providerid: any }> };

export type InsertContactMutationVariables = Exact<{
  code?: Maybe<Scalars['String']>;
  mail?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  note?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  addresses?: Array<Contact_Contact_Address_Insert_Input> | Contact_Contact_Address_Insert_Input;
  customers?: Array<Contact_Customer_Contact_Insert_Input> | Contact_Customer_Contact_Insert_Input;
  providers?: Array<Contact_Provider_Contact_Insert_Input> | Contact_Provider_Contact_Insert_Input;
}>;


export type InsertContactMutation = { __typename?: 'mutation_root', insert_contact_contact_one?: Maybe<{ __typename?: 'contact_contact', id: any, code?: Maybe<string>, mail?: Maybe<string>, name: string, note?: Maybe<string>, phone: string }> };

export type InsertCustomerMutationVariables = Exact<{
  FAX?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  mail?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  note?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  addresses?: Array<Contact_Customer_Address_Insert_Input> | Contact_Customer_Address_Insert_Input;
  ICE?: Maybe<Scalars['String']>;
  IF?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  contacts?: Array<Contact_Customer_Contact_Insert_Input> | Contact_Customer_Contact_Insert_Input;
}>;


export type InsertCustomerMutation = { __typename?: 'mutation_root', insert_contact_customer_one?: Maybe<{ __typename?: 'contact_customer', id: any, ICE?: Maybe<string>, IF?: Maybe<string>, code?: Maybe<string>, mail?: Maybe<string>, name: string, phone: string, type?: Maybe<string> }> };

export type InsertProviderMutationVariables = Exact<{
  FAX?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  mail?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  note?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  addresses?: Array<Contact_Provider_Address_Insert_Input> | Contact_Provider_Address_Insert_Input;
  contacts?: Array<Contact_Provider_Contact_Insert_Input> | Contact_Provider_Contact_Insert_Input;
}>;


export type InsertProviderMutation = { __typename?: 'mutation_root', insert_contact_provider_one?: Maybe<{ __typename?: 'contact_provider', id: any, code?: Maybe<string>, name: string, note?: Maybe<string>, phone: string, mail?: Maybe<string> }> };

export type UpdateContactMutationVariables = Exact<{
  id: Scalars['uuid'];
  code?: Maybe<Scalars['String']>;
  mail?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  note?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
}>;


export type UpdateContactMutation = { __typename?: 'mutation_root', update_contact_contact_by_pk?: Maybe<{ __typename?: 'contact_contact', id: any, code?: Maybe<string>, mail?: Maybe<string>, name: string, note?: Maybe<string>, phone: string }> };

export type UpdateContactAddressesMutationVariables = Exact<{
  contactAddresses: Array<Contact_Contact_Address_Insert_Input> | Contact_Contact_Address_Insert_Input;
}>;


export type UpdateContactAddressesMutation = { __typename?: 'mutation_root', insert_contact_contact_address?: Maybe<{ __typename?: 'contact_contact_address_mutation_response', affected_rows: number }> };

export type UpdateCustomerMutationVariables = Exact<{
  id: Scalars['uuid'];
  FAX?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  mail?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  note?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  ICE?: Maybe<Scalars['String']>;
  IF?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
}>;


export type UpdateCustomerMutation = { __typename?: 'mutation_root', update_contact_customer_by_pk?: Maybe<{ __typename?: 'contact_customer', id: any, ICE?: Maybe<string>, IF?: Maybe<string>, code?: Maybe<string>, mail?: Maybe<string>, name: string, phone: string, type?: Maybe<string> }> };

export type UpdateProviderMutationVariables = Exact<{
  id: Scalars['uuid'];
  FAX?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  mail?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  note?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
}>;


export type UpdateProviderMutation = { __typename?: 'mutation_root', update_contact_provider_by_pk?: Maybe<{ __typename?: 'contact_provider', id: any, code?: Maybe<string>, name: string, note?: Maybe<string>, phone: string, mail?: Maybe<string> }> };

export type GetAllContactsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetAllContactsQuery = { __typename?: 'query_root', contact_contact: Array<{ __typename?: 'contact_contact', id: any, code?: Maybe<string>, mail?: Maybe<string>, name: string, note?: Maybe<string>, phone: string }> };

export type GetAllCustomersQueryVariables = Exact<{ [key: string]: never; }>;


export type GetAllCustomersQuery = { __typename?: 'query_root', contact_customer: Array<{ __typename?: 'contact_customer', id: any, ICE?: Maybe<string>, IF?: Maybe<string>, code?: Maybe<string>, mail?: Maybe<string>, name: string, phone: string, type?: Maybe<string>, contacts: Array<{ __typename?: 'contact_customer_contacts_view', id?: Maybe<any>, code?: Maybe<string>, mail?: Maybe<string>, name?: Maybe<string>, note?: Maybe<string>, phone?: Maybe<string> }> }> };

export type GetAllProvidersQueryVariables = Exact<{ [key: string]: never; }>;


export type GetAllProvidersQuery = { __typename?: 'query_root', contact_provider: Array<{ __typename?: 'contact_provider', id: any, code?: Maybe<string>, name: string, note?: Maybe<string>, phone: string, mail?: Maybe<string> }> };

export type GetContactByIdQueryVariables = Exact<{
  id: Scalars['uuid'];
}>;


export type GetContactByIdQuery = { __typename?: 'query_root', contact_contact_by_pk?: Maybe<{ __typename?: 'contact_contact', id: any, code?: Maybe<string>, mail?: Maybe<string>, name: string, phone: string, note?: Maybe<string>, createdAt?: Maybe<any>, createdBy?: Maybe<any>, updatedBy?: Maybe<any>, updatedAt?: Maybe<any>, addresses: Array<{ __typename?: 'contact_contact_addresses_view', id?: Maybe<any>, address?: Maybe<string>, city?: Maybe<string>, zip?: Maybe<string> }>, cutomers: Array<{ __typename?: 'contact_contact_customers_view', id?: Maybe<any>, code?: Maybe<string>, name?: Maybe<string>, phone?: Maybe<string>, mail?: Maybe<string>, note?: Maybe<string> }>, providers: Array<{ __typename?: 'contact_contact_providers_view', id?: Maybe<any>, code?: Maybe<string>, name?: Maybe<string>, phone?: Maybe<string>, mail?: Maybe<string>, note?: Maybe<string> }> }> };

export type GetCustomerByIdQueryVariables = Exact<{
  id: Scalars['uuid'];
}>;


export type GetCustomerByIdQuery = { __typename?: 'query_root', contact_customer_by_pk?: Maybe<{ __typename?: 'contact_customer', id: any, ICE?: Maybe<string>, IF?: Maybe<string>, code?: Maybe<string>, mail?: Maybe<string>, name: string, phone: string, note?: Maybe<string>, website?: Maybe<string>, FAX?: Maybe<string>, type?: Maybe<string>, createdAt?: Maybe<any>, createdBy?: Maybe<any>, updatedBy?: Maybe<any>, updatedAt?: Maybe<any>, addresses: Array<{ __typename?: 'contact_customer_addresses_view', id?: Maybe<any>, address?: Maybe<string>, city?: Maybe<string>, zip?: Maybe<string> }>, contacts: Array<{ __typename?: 'contact_customer_contacts_view', id?: Maybe<any>, code?: Maybe<string>, name?: Maybe<string>, phone?: Maybe<string>, mail?: Maybe<string>, note?: Maybe<string> }>, orders_aggregate: { __typename?: 'sales_order_aggregate', aggregate?: Maybe<{ __typename?: 'sales_order_aggregate_fields', count: number, sum?: Maybe<{ __typename?: 'sales_order_sum_fields', total_ht?: Maybe<any>, total_tax?: Maybe<any>, total_ttc?: Maybe<any> }> }>, nodes: Array<{ __typename?: 'sales_order', delivery_status: string, payment_status: string, id: number, draft_id: number, ref?: Maybe<string>, total_ht: any, total_tax: any, total_ttc: any, date: any, deadline: any, company: { __typename?: 'management_company', name: string, id: any }, salepoint: { __typename?: 'management_salesPoint', name: string } }> } }> };

export type GetProviderByIdQueryVariables = Exact<{
  id: Scalars['uuid'];
}>;


export type GetProviderByIdQuery = { __typename?: 'query_root', contact_provider_by_pk?: Maybe<{ __typename?: 'contact_provider', id: any, code?: Maybe<string>, name: string, note?: Maybe<string>, phone: string, mail?: Maybe<string>, FAX?: Maybe<string>, website?: Maybe<string>, createdAt?: Maybe<any>, createdBy?: Maybe<any>, updatedAt?: Maybe<any>, updatedBy?: Maybe<any>, contacts: Array<{ __typename?: 'contact_provider_contacts_view', id?: Maybe<any>, code?: Maybe<string>, name?: Maybe<string>, phone?: Maybe<string>, mail?: Maybe<string>, note?: Maybe<string> }>, addresses: Array<{ __typename?: 'contact_provider_addresses_view', id?: Maybe<any>, address?: Maybe<string>, city?: Maybe<string>, zip?: Maybe<string> }> }> };

export type DeleteManyWarehousesMutationVariables = Exact<{
  ids?: Maybe<Array<Scalars['uuid']> | Scalars['uuid']>;
}>;


export type DeleteManyWarehousesMutation = { __typename?: 'mutation_root', delete_stock_warehouse?: Maybe<{ __typename?: 'stock_warehouse_mutation_response', returning: Array<{ __typename?: 'stock_warehouse', id: any }> }> };

export type DeleteTransferOrdersMutationVariables = Exact<{
  ids?: Maybe<Array<Scalars['Int']> | Scalars['Int']>;
}>;


export type DeleteTransferOrdersMutation = { __typename?: 'mutation_root', delete_stock_transfer_order?: Maybe<{ __typename?: 'stock_transfer_order_mutation_response', affected_rows: number }> };

export type InsertStockAdjustmentMutationVariables = Exact<{
  oldQuantity?: Maybe<Scalars['Float']>;
  newQuantity?: Maybe<Scalars['Float']>;
  substance_id: Scalars['uuid'];
  warehouse_id: Scalars['uuid'];
  reason?: Maybe<Stock_Adjustment_Reasons_Enum>;
  note?: Maybe<Scalars['String']>;
  update_columns?: Maybe<Array<Stock_Warehouse_Substance_Update_Column> | Stock_Warehouse_Substance_Update_Column>;
  createdBy?: Maybe<Scalars['String']>;
}>;


export type InsertStockAdjustmentMutation = { __typename?: 'mutation_root', insert_stock_warehouse_substance_one?: Maybe<{ __typename?: 'stock_warehouse_substance', quantity: number, quantity_min?: Maybe<number>, quantity_planned?: Maybe<number>, stock_adjustments: Array<{ __typename?: 'stock_stock_adjustment', id: any, ref: number, date: any, newQuantity: number, oldQuantity: number, reason: Stock_Adjustment_Reasons_Enum, userProfile?: Maybe<{ __typename?: 'management_userProfile', username: string, role: Management_User_Role_Enum }> }>, substance: { __typename?: 'product_substance', id: any, type: Product_Substance_Type_Enum, productAccessory?: Maybe<{ __typename?: 'product_product_accessory_view', code?: Maybe<string>, label?: Maybe<string>, unit?: Maybe<string> }>, productConsumable?: Maybe<{ __typename?: 'product_product_consumable_view', code?: Maybe<string>, label?: Maybe<string>, unit?: Maybe<string> }>, productGlass?: Maybe<{ __typename?: 'product_product_glass_view', code?: Maybe<string>, label?: Maybe<string>, unit?: Maybe<string> }> }, warehouse: { __typename?: 'stock_warehouse', id: any, name: string, company: { __typename?: 'management_company', name: string } } }> };

export type InsertTranfserMutationVariables = Exact<{
  date?: Maybe<Scalars['date']>;
  order_itemid?: Maybe<Scalars['uuid']>;
  quantity?: Maybe<Scalars['Float']>;
  status?: Maybe<Scalars['String']>;
  substanceid?: Maybe<Scalars['uuid']>;
  warehouseid?: Maybe<Scalars['uuid']>;
}>;


export type InsertTranfserMutation = { __typename?: 'mutation_root', createTransferItem?: Maybe<{ __typename?: 'InsertItemTranfserOutput', date?: Maybe<any>, id: any, quantity?: Maybe<number>, status?: Maybe<string> }> };

export type InsertTransferItemMutationVariables = Exact<{
  date?: Maybe<Scalars['date']>;
  status?: Maybe<Scalars['String']>;
  quantity?: Maybe<Scalars['Float']>;
  order_itemid?: Maybe<Scalars['uuid']>;
}>;


export type InsertTransferItemMutation = { __typename?: 'mutation_root', insert_stock_item_tranfer_one?: Maybe<{ __typename?: 'stock_item_tranfer', tranfer_order_item: { __typename?: 'stock_order_item', transfer_order: { __typename?: 'stock_transfer_order', id: number, date: any, deadline?: Maybe<any>, createdAt: any, createdBy?: Maybe<string>, updatedAt: any, updatedBy?: Maybe<string>, status: string, fromwarehouse: { __typename?: 'stock_warehouse', name: string }, towarehouse: { __typename?: 'stock_warehouse', name: string }, order_items_aggregate: { __typename?: 'stock_order_item_aggregate', aggregate?: Maybe<{ __typename?: 'stock_order_item_aggregate_fields', count: number, sum?: Maybe<{ __typename?: 'stock_order_item_sum_fields', quantity?: Maybe<number> }> }>, nodes: Array<{ __typename?: 'stock_order_item', quantity: number, status: string, id: any, substance: { __typename?: 'product_substance', productAccessory?: Maybe<{ __typename?: 'product_product_accessory_view', code?: Maybe<string>, label?: Maybe<string>, price?: Maybe<number>, unit?: Maybe<string> }>, productGlass?: Maybe<{ __typename?: 'product_product_glass_view', code?: Maybe<string>, label?: Maybe<string>, price?: Maybe<number>, unit?: Maybe<string> }> }, item_tranfers_aggregate: { __typename?: 'stock_item_tranfer_aggregate', aggregate?: Maybe<{ __typename?: 'stock_item_tranfer_aggregate_fields', sum?: Maybe<{ __typename?: 'stock_item_tranfer_sum_fields', quantity?: Maybe<number> }> }>, nodes: Array<{ __typename?: 'stock_item_tranfer', quantity: number, status: string, id: any, date: any, confirmed?: Maybe<boolean> }> } }> } } } }> };

export type Product_Product_Glass_ViewFragmentFragment = { __typename?: 'product_product_glass_view', code?: Maybe<string>, label?: Maybe<string>, price?: Maybe<number>, unit?: Maybe<string> };

export type Product_Product_Accessory_ViewFragmentFragment = { __typename?: 'product_product_accessory_view', code?: Maybe<string>, label?: Maybe<string>, price?: Maybe<number>, unit?: Maybe<string> };

export type InsertTransferOrderMutationVariables = Exact<{
  date: Scalars['date'];
  deadline?: Maybe<Scalars['date']>;
  fromWarehouseid: Scalars['uuid'];
  toWarehouseid: Scalars['uuid'];
  substances: Array<Stock_Order_Item_Insert_Input> | Stock_Order_Item_Insert_Input;
}>;


export type InsertTransferOrderMutation = { __typename?: 'mutation_root', insert_stock_transfer_order_one?: Maybe<{ __typename?: 'stock_transfer_order', date: any, deadline?: Maybe<any>, status: string, id: number, fromwarehouse: { __typename?: 'stock_warehouse', name: string, id: any }, towarehouse: { __typename?: 'stock_warehouse', name: string, id: any } }> };

export type InsertWarehouseMutationVariables = Exact<{
  companyid: Scalars['uuid'];
  name: Scalars['String'];
  salesPointid?: Maybe<Scalars['uuid']>;
}>;


export type InsertWarehouseMutation = { __typename?: 'mutation_root', insert_stock_warehouse_one?: Maybe<{ __typename?: 'stock_warehouse', name: string, id: any, company: { __typename?: 'management_company', name: string, id: any }, salesPoint?: Maybe<{ __typename?: 'management_salesPoint', name: string, id: any }> }> };

export type UpdateStockItemTranferMutationVariables = Exact<{
  id: Scalars['uuid'];
  date?: Maybe<Scalars['date']>;
  quantity?: Maybe<Scalars['Float']>;
  status?: Maybe<Scalars['String']>;
  confirmed?: Maybe<Scalars['Boolean']>;
}>;


export type UpdateStockItemTranferMutation = { __typename?: 'mutation_root', update_stock_item_tranfer_by_pk?: Maybe<{ __typename?: 'stock_item_tranfer', tranfer_order_item: { __typename?: 'stock_order_item', transfer_order: { __typename?: 'stock_transfer_order', id: number, date: any, deadline?: Maybe<any>, createdAt: any, createdBy?: Maybe<string>, updatedAt: any, updatedBy?: Maybe<string>, status: string, fromwarehouse: { __typename?: 'stock_warehouse', name: string }, towarehouse: { __typename?: 'stock_warehouse', name: string }, order_items_aggregate: { __typename?: 'stock_order_item_aggregate', aggregate?: Maybe<{ __typename?: 'stock_order_item_aggregate_fields', count: number, sum?: Maybe<{ __typename?: 'stock_order_item_sum_fields', quantity?: Maybe<number> }> }>, nodes: Array<{ __typename?: 'stock_order_item', quantity: number, status: string, id: any, substance: { __typename?: 'product_substance', productAccessory?: Maybe<{ __typename?: 'product_product_accessory_view', code?: Maybe<string>, label?: Maybe<string>, price?: Maybe<number>, unit?: Maybe<string> }>, productGlass?: Maybe<{ __typename?: 'product_product_glass_view', code?: Maybe<string>, label?: Maybe<string>, price?: Maybe<number>, unit?: Maybe<string> }> }, item_tranfers_aggregate: { __typename?: 'stock_item_tranfer_aggregate', aggregate?: Maybe<{ __typename?: 'stock_item_tranfer_aggregate_fields', sum?: Maybe<{ __typename?: 'stock_item_tranfer_sum_fields', quantity?: Maybe<number> }> }>, nodes: Array<{ __typename?: 'stock_item_tranfer', quantity: number, status: string, id: any, date: any, confirmed?: Maybe<boolean> }> } }> } } } }> };

export type UpdateTransferOrderMutationVariables = Exact<{
  id: Scalars['Int'];
  date?: Maybe<Scalars['date']>;
  deadline?: Maybe<Scalars['date']>;
  fromWarehouseid?: Maybe<Scalars['uuid']>;
  status?: Maybe<Scalars['String']>;
  toWarehouseid?: Maybe<Scalars['uuid']>;
}>;


export type UpdateTransferOrderMutation = { __typename?: 'mutation_root', update_stock_transfer_order_by_pk?: Maybe<{ __typename?: 'stock_transfer_order', date: any, deadline?: Maybe<any>, status: string, id: number, fromwarehouse: { __typename?: 'stock_warehouse', name: string, id: any }, towarehouse: { __typename?: 'stock_warehouse', name: string, id: any } }> };

export type UpdateStockOrderItemMutationVariables = Exact<{
  id: Scalars['uuid'];
  quantity?: Maybe<Scalars['Float']>;
  status?: Maybe<Scalars['String']>;
}>;


export type UpdateStockOrderItemMutation = { __typename?: 'mutation_root', update_stock_order_item_by_pk?: Maybe<{ __typename?: 'stock_order_item', transfer_order: { __typename?: 'stock_transfer_order', id: number, date: any, deadline?: Maybe<any>, createdAt: any, createdBy?: Maybe<string>, updatedAt: any, updatedBy?: Maybe<string>, status: string, fromwarehouse: { __typename?: 'stock_warehouse', name: string }, towarehouse: { __typename?: 'stock_warehouse', name: string }, order_items_aggregate: { __typename?: 'stock_order_item_aggregate', aggregate?: Maybe<{ __typename?: 'stock_order_item_aggregate_fields', count: number, sum?: Maybe<{ __typename?: 'stock_order_item_sum_fields', quantity?: Maybe<number> }> }>, nodes: Array<{ __typename?: 'stock_order_item', quantity: number, status: string, id: any, substance: { __typename?: 'product_substance', productAccessory?: Maybe<{ __typename?: 'product_product_accessory_view', code?: Maybe<string>, label?: Maybe<string>, price?: Maybe<number>, unit?: Maybe<string> }>, productGlass?: Maybe<{ __typename?: 'product_product_glass_view', code?: Maybe<string>, label?: Maybe<string>, price?: Maybe<number>, unit?: Maybe<string> }> }, item_tranfers_aggregate: { __typename?: 'stock_item_tranfer_aggregate', aggregate?: Maybe<{ __typename?: 'stock_item_tranfer_aggregate_fields', sum?: Maybe<{ __typename?: 'stock_item_tranfer_sum_fields', quantity?: Maybe<number> }> }>, nodes: Array<{ __typename?: 'stock_item_tranfer', quantity: number, status: string, id: any, date: any, confirmed?: Maybe<boolean> }> } }> } } }> };

export type UpdateWarehouseMutationVariables = Exact<{
  id: Scalars['uuid'];
  companyid: Scalars['uuid'];
  name: Scalars['String'];
  salesPointid?: Maybe<Scalars['uuid']>;
}>;


export type UpdateWarehouseMutation = { __typename?: 'mutation_root', update_stock_warehouse_by_pk?: Maybe<{ __typename?: 'stock_warehouse', name: string, id: any, company: { __typename?: 'management_company', name: string, id: any }, salesPoint?: Maybe<{ __typename?: 'management_salesPoint', name: string, id: any }> }> };

export type GetAccessoryWarehousesByIdQueryVariables = Exact<{
  id: Scalars['uuid'];
}>;


export type GetAccessoryWarehousesByIdQuery = { __typename?: 'query_root', stock_warehouse_substance_aggregate: { __typename?: 'stock_warehouse_substance_aggregate', aggregate?: Maybe<{ __typename?: 'stock_warehouse_substance_aggregate_fields', count: number, sum?: Maybe<{ __typename?: 'stock_warehouse_substance_sum_fields', quantity?: Maybe<number> }>, max?: Maybe<{ __typename?: 'stock_warehouse_substance_max_fields', quantity?: Maybe<number> }>, min?: Maybe<{ __typename?: 'stock_warehouse_substance_min_fields', quantity?: Maybe<number> }> }>, nodes: Array<{ __typename?: 'stock_warehouse_substance', quantity: number, quantity_min?: Maybe<number>, substance: { __typename?: 'product_substance', productAccessory?: Maybe<{ __typename?: 'product_product_accessory_view', code?: Maybe<string>, label?: Maybe<string>, price?: Maybe<number>, unit?: Maybe<string> }> }, warehouse: { __typename?: 'stock_warehouse', name: string } }> } };

export type GetAllAccessoriesStockQueryVariables = Exact<{ [key: string]: never; }>;


export type GetAllAccessoriesStockQuery = { __typename?: 'query_root', stock_warehouse_substance: Array<{ __typename?: 'stock_warehouse_substance', id: number, quantity: number, warehouse: { __typename?: 'stock_warehouse', name: string, id: any, company: { __typename?: 'management_company', name: string, id: any }, salesPoint?: Maybe<{ __typename?: 'management_salesPoint', name: string, id: any }> }, substance: { __typename?: 'product_substance', id: any, productAccessory?: Maybe<{ __typename?: 'product_product_accessory_view', code?: Maybe<string>, label?: Maybe<string>, price?: Maybe<number>, unit?: Maybe<string> }>, accessory?: Maybe<{ __typename?: 'product_accessory', category: Product_AccessoryTypes_Enum, id: any }> } }> };

export type GetAllConsumablesStockQueryVariables = Exact<{ [key: string]: never; }>;


export type GetAllConsumablesStockQuery = { __typename?: 'query_root', stock_warehouse_substance: Array<{ __typename?: 'stock_warehouse_substance', id: number, quantity: number, warehouse: { __typename?: 'stock_warehouse', name: string, id: any, company: { __typename?: 'management_company', name: string, id: any }, salesPoint?: Maybe<{ __typename?: 'management_salesPoint', name: string, id: any }> }, substance: { __typename?: 'product_substance', id: any, productConsumable?: Maybe<{ __typename?: 'product_product_consumable_view', code?: Maybe<string>, label?: Maybe<string>, price?: Maybe<number>, unit?: Maybe<string> }>, consomable?: Maybe<{ __typename?: 'product_consumable', category: Product_ConsumableCategory_Enum, id: any }> } }> };

export type Product_Product_Consumable_ViewFragmentFragment = { __typename?: 'product_product_consumable_view', code?: Maybe<string>, label?: Maybe<string>, price?: Maybe<number>, unit?: Maybe<string> };

export type GetAllGlassesStockQueryVariables = Exact<{
  type?: Maybe<Product_Substance_Type_Enum_Comparison_Exp>;
}>;


export type GetAllGlassesStockQuery = { __typename?: 'query_root', stock_warehouse_substance: Array<{ __typename?: 'stock_warehouse_substance', id: number, quantity: number, warehouse: { __typename?: 'stock_warehouse', name: string, id: any, company: { __typename?: 'management_company', name: string, id: any }, salesPoint?: Maybe<{ __typename?: 'management_salesPoint', name: string, id: any }> }, substance: { __typename?: 'product_substance', id: any, productGlass?: Maybe<{ __typename?: 'product_product_glass_view', code?: Maybe<string>, label?: Maybe<string>, price?: Maybe<number>, unit?: Maybe<string> }>, glass?: Maybe<{ __typename?: 'product_glass', thickness: number, type?: Maybe<Product_GlassType_Enum>, color?: Maybe<Product_GlassColor_Enum>, id: any }> } }> };

export type Stock_WarehouseFragmentFragment = { __typename?: 'stock_warehouse', name: string, id: any, company: { __typename?: 'management_company', name: string, id: any }, salesPoint?: Maybe<{ __typename?: 'management_salesPoint', name: string, id: any }> };

export type Product_ProductGlassFragmentFragment = { __typename?: 'product_product_accessory_view', code?: Maybe<string>, label?: Maybe<string>, price?: Maybe<number>, unit?: Maybe<string> };

export type GetAllOrdersDetailsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetAllOrdersDetailsQuery = { __typename?: 'query_root', stock_order_item: Array<{ __typename?: 'stock_order_item', quantity: number, status: string, id: any, substance: { __typename?: 'product_substance', productGlass?: Maybe<{ __typename?: 'product_product_glass_view', code?: Maybe<string>, label?: Maybe<string>, price?: Maybe<number>, unit?: Maybe<string> }>, productAccessory?: Maybe<{ __typename?: 'product_product_accessory_view', code?: Maybe<string>, label?: Maybe<string>, price?: Maybe<number>, unit?: Maybe<string> }> }, transfer_order: { __typename?: 'stock_transfer_order', id: number, date: any, deadline?: Maybe<any>, fromwarehouse: { __typename?: 'stock_warehouse', name: string }, towarehouse: { __typename?: 'stock_warehouse', name: string } } }> };

export type GetAllStockAdjustmentsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetAllStockAdjustmentsQuery = { __typename?: 'query_root', stock_stock_adjustment: Array<{ __typename?: 'stock_stock_adjustment', id: any, ref: number, date: any, newQuantity: number, oldQuantity: number, reason: Stock_Adjustment_Reasons_Enum, warehouse_substance?: Maybe<{ __typename?: 'stock_warehouse_substance', substance: { __typename?: 'product_substance', id: any, type: Product_Substance_Type_Enum, productAccessory?: Maybe<{ __typename?: 'product_product_accessory_view', code?: Maybe<string>, label?: Maybe<string>, unit?: Maybe<string> }>, productConsumable?: Maybe<{ __typename?: 'product_product_consumable_view', code?: Maybe<string>, label?: Maybe<string>, unit?: Maybe<string> }>, productGlass?: Maybe<{ __typename?: 'product_product_glass_view', code?: Maybe<string>, label?: Maybe<string>, unit?: Maybe<string> }> }, warehouse: { __typename?: 'stock_warehouse', id: any, name: string, company: { __typename?: 'management_company', name: string } } }>, userProfile?: Maybe<{ __typename?: 'management_userProfile', username: string, role: Management_User_Role_Enum }> }> };

export type GetAllTransfersOrdersQueryVariables = Exact<{ [key: string]: never; }>;


export type GetAllTransfersOrdersQuery = { __typename?: 'query_root', stock_transfer_order: Array<{ __typename?: 'stock_transfer_order', date: any, deadline?: Maybe<any>, status: string, id: number, fromwarehouse: { __typename?: 'stock_warehouse', name: string, id: any }, towarehouse: { __typename?: 'stock_warehouse', name: string, id: any } }> };

export type GetAllWarehousesQueryVariables = Exact<{ [key: string]: never; }>;


export type GetAllWarehousesQuery = { __typename?: 'query_root', stock_warehouse: Array<{ __typename?: 'stock_warehouse', id: any, name: string, company: { __typename?: 'management_company', name: string, id: any }, salesPoint?: Maybe<{ __typename?: 'management_salesPoint', name: string, id: any }> }> };

export type Management_SalesPointFragmentFragment = { __typename?: 'management_salesPoint', name: string, id: any };

export type Management_CompanyFragmentFragment = { __typename?: 'management_company', name: string, id: any };

export type GetConsumableWarehousesByIdQueryVariables = Exact<{
  id: Scalars['uuid'];
}>;


export type GetConsumableWarehousesByIdQuery = { __typename?: 'query_root', stock_warehouse_substance_aggregate: { __typename?: 'stock_warehouse_substance_aggregate', aggregate?: Maybe<{ __typename?: 'stock_warehouse_substance_aggregate_fields', count: number, sum?: Maybe<{ __typename?: 'stock_warehouse_substance_sum_fields', quantity?: Maybe<number> }>, max?: Maybe<{ __typename?: 'stock_warehouse_substance_max_fields', quantity?: Maybe<number> }>, min?: Maybe<{ __typename?: 'stock_warehouse_substance_min_fields', quantity?: Maybe<number> }> }>, nodes: Array<{ __typename?: 'stock_warehouse_substance', quantity: number, substance: { __typename?: 'product_substance', productConsumable?: Maybe<{ __typename?: 'product_product_consumable_view', code?: Maybe<string>, label?: Maybe<string>, price?: Maybe<number> }> }, warehouse: { __typename?: 'stock_warehouse', name: string, id: any } }> } };

export type GetGlassWarehousesByIdQueryVariables = Exact<{
  id: Scalars['uuid'];
}>;


export type GetGlassWarehousesByIdQuery = { __typename?: 'query_root', stock_warehouse_substance_aggregate: { __typename?: 'stock_warehouse_substance_aggregate', aggregate?: Maybe<{ __typename?: 'stock_warehouse_substance_aggregate_fields', count: number, sum?: Maybe<{ __typename?: 'stock_warehouse_substance_sum_fields', quantity?: Maybe<number> }>, max?: Maybe<{ __typename?: 'stock_warehouse_substance_max_fields', quantity?: Maybe<number> }>, min?: Maybe<{ __typename?: 'stock_warehouse_substance_min_fields', quantity?: Maybe<number> }> }>, nodes: Array<{ __typename?: 'stock_warehouse_substance', quantity: number, substance: { __typename?: 'product_substance', productGlass?: Maybe<{ __typename?: 'product_product_glass_view', code?: Maybe<string>, label?: Maybe<string>, price?: Maybe<number> }> }, warehouse: { __typename?: 'stock_warehouse', name: string, id: any } }> } };

export type GetTransferOrderByIdQueryVariables = Exact<{
  id: Scalars['Int'];
}>;


export type GetTransferOrderByIdQuery = { __typename?: 'query_root', stock_transfer_order_by_pk?: Maybe<{ __typename?: 'stock_transfer_order', id: number, date: any, deadline?: Maybe<any>, createdAt: any, createdBy?: Maybe<string>, updatedAt: any, updatedBy?: Maybe<string>, status: string, fromwarehouse: { __typename?: 'stock_warehouse', name: string }, towarehouse: { __typename?: 'stock_warehouse', name: string }, order_items_aggregate: { __typename?: 'stock_order_item_aggregate', aggregate?: Maybe<{ __typename?: 'stock_order_item_aggregate_fields', count: number, sum?: Maybe<{ __typename?: 'stock_order_item_sum_fields', quantity?: Maybe<number> }> }>, nodes: Array<{ __typename?: 'stock_order_item', quantity: number, status: string, id: any, substance: { __typename?: 'product_substance', productAccessory?: Maybe<{ __typename?: 'product_product_accessory_view', code?: Maybe<string>, label?: Maybe<string>, price?: Maybe<number>, unit?: Maybe<string> }>, productGlass?: Maybe<{ __typename?: 'product_product_glass_view', code?: Maybe<string>, label?: Maybe<string>, price?: Maybe<number>, unit?: Maybe<string> }> }, item_tranfers_aggregate: { __typename?: 'stock_item_tranfer_aggregate', aggregate?: Maybe<{ __typename?: 'stock_item_tranfer_aggregate_fields', sum?: Maybe<{ __typename?: 'stock_item_tranfer_sum_fields', quantity?: Maybe<number> }> }>, nodes: Array<{ __typename?: 'stock_item_tranfer', quantity: number, status: string, id: any, date: any, confirmed?: Maybe<boolean> }> } }> } }> };

export type GetWarehouseByIdQueryVariables = Exact<{
  id: Scalars['uuid'];
}>;


export type GetWarehouseByIdQuery = { __typename?: 'query_root', stock_warehouse_by_pk?: Maybe<{ __typename?: 'stock_warehouse', id: any, name: string, createdAt: any, createdBy?: Maybe<string>, updatedAt: any, updatedBy?: Maybe<string>, salesPoint?: Maybe<{ __typename?: 'management_salesPoint', name: string, id: any }>, company: { __typename?: 'management_company', name: string, id: any } }> };

export type GetWarehouseSubstanceQueryVariables = Exact<{ [key: string]: never; }>;


export type GetWarehouseSubstanceQuery = { __typename?: 'query_root', stock_warehouse_substance: Array<{ __typename?: 'stock_warehouse_substance', quantity: number, quantity_min?: Maybe<number>, quantity_planned?: Maybe<number>, substanceid: any, warehouseid: any }> };

export type Product_ProductFragmentFragment = { __typename?: 'product_product', code: string, label: string, unit: Product_Product_Unit_Enum, price: number };

export type DeleteCompanyMutationVariables = Exact<{
  id: Scalars['uuid'];
}>;


export type DeleteCompanyMutation = { __typename?: 'mutation_root', delete_management_company_by_pk?: Maybe<{ __typename?: 'management_company', name: string, id: any }> };

export type DeleteSalePointMutationVariables = Exact<{
  id: Scalars['uuid'];
}>;


export type DeleteSalePointMutation = { __typename?: 'mutation_root', delete_management_salesPoint_by_pk?: Maybe<{ __typename?: 'management_salesPoint', name: string, id: any }> };

export type DeleteUserMutationVariables = Exact<{
  id: Scalars['String'];
}>;


export type DeleteUserMutation = { __typename?: 'mutation_root', delete_management_userProfile_by_pk?: Maybe<{ __typename?: 'management_userProfile', username: string, id: string }> };

export type InsertCompanyMutationVariables = Exact<{
  CNSS: Scalars['String'];
  ICE: Scalars['String'];
  IF: Scalars['String'];
  RC: Scalars['String'];
  address: Scalars['String'];
  email?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  phone: Scalars['String'];
  website?: Maybe<Scalars['String']>;
}>;


export type InsertCompanyMutation = { __typename?: 'mutation_root', insert_management_company_one?: Maybe<{ __typename?: 'management_company', id: any, name: string, phone: string, CNSS: string, ICE: string, IF: string, RC: string, address: string, email?: Maybe<string> }> };

export type InsertSalePointMutationVariables = Exact<{
  address: Scalars['String'];
  email?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  phone: Scalars['String'];
  fax?: Maybe<Scalars['String']>;
  isPrincipale?: Maybe<Scalars['Boolean']>;
}>;


export type InsertSalePointMutation = { __typename?: 'mutation_root', insert_management_salesPoint_one?: Maybe<{ __typename?: 'management_salesPoint', id: any, address: string, email?: Maybe<string>, fax?: Maybe<string>, name: string, phone: string, isPrincipale: boolean }> };

export type InsertUserMutationVariables = Exact<{
  email: Scalars['String'];
  CIN?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  firstname?: Maybe<Scalars['String']>;
  lastname?: Maybe<Scalars['String']>;
  password: Scalars['String'];
  phone?: Maybe<Scalars['String']>;
  role: Scalars['String'];
  SalesPointsid?: Maybe<Scalars['uuid']>;
  username?: Maybe<Scalars['String']>;
}>;


export type InsertUserMutation = { __typename?: 'mutation_root', SignUp?: Maybe<{ __typename?: 'SignUpOutput', CIN?: Maybe<string>, active?: Maybe<boolean>, firstname?: Maybe<string>, id: string, lastname?: Maybe<string>, phone?: Maybe<string>, username?: Maybe<string>, email: string }> };

export type UpdateCompanyMutationVariables = Exact<{
  CNSS?: Maybe<Scalars['String']>;
  ICE?: Maybe<Scalars['String']>;
  IF?: Maybe<Scalars['String']>;
  RC?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  id: Scalars['uuid'];
}>;


export type UpdateCompanyMutation = { __typename?: 'mutation_root', update_management_company_by_pk?: Maybe<{ __typename?: 'management_company', id: any, CNSS: string, ICE: string, IF: string, RC: string, address: string, email?: Maybe<string>, name: string, phone: string }> };

export type UpdateSalePointMutationVariables = Exact<{
  id: Scalars['uuid'];
  address?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  fax?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  isPrincipale?: Maybe<Scalars['Boolean']>;
}>;


export type UpdateSalePointMutation = { __typename?: 'mutation_root', update_management_salesPoint_by_pk?: Maybe<{ __typename?: 'management_salesPoint', address: string, email?: Maybe<string>, fax?: Maybe<string>, id: any, name: string, phone: string, isPrincipale: boolean }> };

export type UpdateUserMutationVariables = Exact<{
  CIN?: Maybe<Scalars['String']>;
  SalesPointsid?: Maybe<Scalars['uuid']>;
  active?: Maybe<Scalars['Boolean']>;
  email?: Maybe<Scalars['String']>;
  firstname?: Maybe<Scalars['String']>;
  lastname?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  role?: Maybe<Management_User_Role_Enum>;
  id: Scalars['String'];
}>;


export type UpdateUserMutation = { __typename?: 'mutation_root', update_management_userProfile_by_pk?: Maybe<{ __typename?: 'management_userProfile', CIN?: Maybe<string>, active: boolean, firstname?: Maybe<string>, id: string, email?: Maybe<string>, lastname?: Maybe<string>, phone?: Maybe<string>, username: string, SalesPointsid?: Maybe<any>, role: Management_User_Role_Enum }> };

export type GetAllCompaniesQueryVariables = Exact<{ [key: string]: never; }>;


export type GetAllCompaniesQuery = { __typename?: 'query_root', management_company: Array<{ __typename?: 'management_company', id: any, CNSS: string, ICE: string, IF: string, RC: string, address: string, email?: Maybe<string>, name: string, phone: string }> };

export type GetAllSalesPointsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetAllSalesPointsQuery = { __typename?: 'query_root', management_salesPoint: Array<{ __typename?: 'management_salesPoint', address: string, email?: Maybe<string>, fax?: Maybe<string>, id: any, name: string, phone: string, isPrincipale: boolean }> };

export type GetAllUsersQueryVariables = Exact<{ [key: string]: never; }>;


export type GetAllUsersQuery = { __typename?: 'query_root', management_userProfile: Array<{ __typename?: 'management_userProfile', CIN?: Maybe<string>, active: boolean, firstname?: Maybe<string>, id: string, email?: Maybe<string>, lastname?: Maybe<string>, phone?: Maybe<string>, username: string, SalesPointsid?: Maybe<any>, role: Management_User_Role_Enum }> };

export type GetCompanyByIdQueryVariables = Exact<{
  id: Scalars['uuid'];
}>;


export type GetCompanyByIdQuery = { __typename?: 'query_root', management_company_by_pk?: Maybe<{ __typename?: 'management_company', CNSS: string, ICE: string, IF: string, RC: string, address: string, email?: Maybe<string>, name: string, phone: string, website?: Maybe<string>, createdAt: any, createdBy?: Maybe<string>, updatedAt: any, updatedBy?: Maybe<any>, id: any }> };

export type GetSalePointByIdQueryVariables = Exact<{
  id: Scalars['uuid'];
}>;


export type GetSalePointByIdQuery = { __typename?: 'query_root', management_salesPoint_by_pk?: Maybe<{ __typename?: 'management_salesPoint', id: any, address: string, email?: Maybe<string>, fax?: Maybe<string>, name: string, phone: string, createdBy?: Maybe<any>, updatedBy?: Maybe<any>, createdAt?: Maybe<any>, updatedAt?: Maybe<any>, isPrincipale: boolean, usersProfiles: Array<{ __typename?: 'management_userProfile', id: string, active: boolean, firstname?: Maybe<string>, lastname?: Maybe<string>, phone?: Maybe<string>, username: string, user_role: { __typename?: 'management_user_role', name: string, description: string } }> }> };

export type GetUserByIdQueryVariables = Exact<{
  id: Scalars['String'];
}>;


export type GetUserByIdQuery = { __typename?: 'query_root', management_userProfile_by_pk?: Maybe<{ __typename?: 'management_userProfile', CIN?: Maybe<string>, active: boolean, createdAt: any, createdBy?: Maybe<any>, email?: Maybe<string>, firstname?: Maybe<string>, id: string, joinUs?: Maybe<any>, lastname?: Maybe<string>, leftUs?: Maybe<any>, phone?: Maybe<string>, role: Management_User_Role_Enum, updatedAt: any, updatedBy?: Maybe<any>, username: string, SalesPointsid?: Maybe<any>, user_role: { __typename?: 'management_user_role', description: string, name: string }, SalesPoint?: Maybe<{ __typename?: 'management_salesPoint', name: string, phone: string, address: string, isPrincipale: boolean }> }> };

export type GenerateBarCodesMutationVariables = Exact<{
  objects: Array<Manufacturing_Manufacturing_Line_Insert_Input> | Manufacturing_Manufacturing_Line_Insert_Input;
}>;


export type GenerateBarCodesMutation = { __typename?: 'mutation_root', insert_manufacturing_manufacturing_line?: Maybe<{ __typename?: 'manufacturing_manufacturing_line_mutation_response', affected_rows: number, returning: Array<{ __typename?: 'manufacturing_manufacturing_line', id: number, status: string, glass_id: any, manufacturing_services: Array<{ __typename?: 'manufacturing_manufacturing_service', service_draft: { __typename?: 'sales_service_draft', labelFactory?: Maybe<string>, id: any } }>, manufacturing_consumables: Array<{ __typename?: 'manufacturing_manufacturing_consumable', consumable_draft: { __typename?: 'sales_consumable_draft', labelFactory?: Maybe<string>, id: any } }> }> }> };

export type InsertJobOrderMutationVariables = Exact<{
  order_ref?: Maybe<Scalars['String']>;
  isReparing?: Maybe<Scalars['Boolean']>;
  ids: Array<Sales_Glass_Draft_Insert_Input> | Sales_Glass_Draft_Insert_Input;
}>;


export type InsertJobOrderMutation = { __typename?: 'mutation_root', insert_manufacturing_job_order_one?: Maybe<{ __typename?: 'manufacturing_job_order', id: number, order_ref: string, status: string, isReparing: boolean, date: any, ref?: Maybe<string>, glass_drafts: Array<{ __typename?: 'sales_glass_draft', id: any, product_draft?: Maybe<{ __typename?: 'sales_product_draft', type?: Maybe<Sales_Product_Type_Enum>, count?: Maybe<any>, heigth?: Maybe<any>, width?: Maybe<any>, label: string, product_code: string }>, consumable_drafts: Array<{ __typename?: 'sales_consumable_draft', labelFactory?: Maybe<string>, id: any }>, service_drafts: Array<{ __typename?: 'sales_service_draft', id: any, labelFactory?: Maybe<string> }>, manufacturing_lines: Array<{ __typename?: 'manufacturing_manufacturing_line', glass_id: any, id: number, status: string, ref?: Maybe<string> }> }> }>, update_sales_product_draft?: Maybe<{ __typename?: 'sales_product_draft_mutation_response', affected_rows: number }>, update_sales_draft?: Maybe<{ __typename?: 'sales_draft_mutation_response', affected_rows: number }> };

export type UpdateManufacturingProgressMutationVariables = Exact<{
  services?: Array<Manufacturing_Manufacturing_Service_Insert_Input> | Manufacturing_Manufacturing_Service_Insert_Input;
  consumables?: Array<Manufacturing_Manufacturing_Consumable_Insert_Input> | Manufacturing_Manufacturing_Consumable_Insert_Input;
  glass_id?: Maybe<Scalars['uuid']>;
}>;


export type UpdateManufacturingProgressMutation = { __typename?: 'mutation_root', delete_manufacturing_manufacturing_service?: Maybe<{ __typename?: 'manufacturing_manufacturing_service_mutation_response', affected_rows: number }>, delete_manufacturing_manufacturing_consumable?: Maybe<{ __typename?: 'manufacturing_manufacturing_consumable_mutation_response', affected_rows: number }>, insert_manufacturing_manufacturing_service?: Maybe<{ __typename?: 'manufacturing_manufacturing_service_mutation_response', returning: Array<{ __typename?: 'manufacturing_manufacturing_service', manufacturing_line_id: number, service_draft_id: any, service_draft: { __typename?: 'sales_service_draft', labelFactory?: Maybe<string> }, manufacturing_line: { __typename?: 'manufacturing_manufacturing_line', status: string } }> }>, insert_manufacturing_manufacturing_consumable?: Maybe<{ __typename?: 'manufacturing_manufacturing_consumable_mutation_response', returning: Array<{ __typename?: 'manufacturing_manufacturing_consumable', consumable_draft_id: any, manufacturing_line_id: number, consumable_draft: { __typename?: 'sales_consumable_draft', labelFactory?: Maybe<string> }, manufacturing_line: { __typename?: 'manufacturing_manufacturing_line', status: string } }> }> };

export type GetAllJobsOrdersQueryVariables = Exact<{ [key: string]: never; }>;


export type GetAllJobsOrdersQuery = { __typename?: 'query_root', manufacturing_job_order: Array<{ __typename?: 'manufacturing_job_order', id: number, date: any, isReparing: boolean, status: string, order_ref: string, ref?: Maybe<string> }> };

export type GetJobOrderByIdQueryVariables = Exact<{
  id: Scalars['Int'];
}>;


export type GetJobOrderByIdQuery = { __typename?: 'query_root', manufacturing_job_order_by_pk?: Maybe<{ __typename?: 'manufacturing_job_order', date: any, id: number, order_ref: string, ref?: Maybe<string>, status: string, isReparing: boolean, glass_drafts: Array<{ __typename?: 'sales_glass_draft', id: any, consumable_drafts: Array<{ __typename?: 'sales_consumable_draft', dependent_id?: Maybe<any>, labelFactory?: Maybe<string>, id: any }>, service_drafts: Array<{ __typename?: 'sales_service_draft', dependent_id?: Maybe<any>, labelFactory?: Maybe<string>, id: any }>, product_draft?: Maybe<{ __typename?: 'sales_product_draft', type?: Maybe<Sales_Product_Type_Enum>, count?: Maybe<any>, heigth?: Maybe<any>, width?: Maybe<any>, label: string, product_code: string }>, manufacturing_lines: Array<{ __typename?: 'manufacturing_manufacturing_line', glass_id: any, id: number, status: string, ref?: Maybe<string>, manufacturing_services: Array<{ __typename?: 'manufacturing_manufacturing_service', service_draft: { __typename?: 'sales_service_draft', labelFactory?: Maybe<string>, id: any } }>, manufacturing_consumables: Array<{ __typename?: 'manufacturing_manufacturing_consumable', consumable_draft: { __typename?: 'sales_consumable_draft', labelFactory?: Maybe<string>, id: any } }> }> }> }> };

export type GetManufacturingGlassByIdQueryVariables = Exact<{
  id: Scalars['uuid'];
}>;


export type GetManufacturingGlassByIdQuery = { __typename?: 'query_root', sales_glass_draft_by_pk?: Maybe<{ __typename?: 'sales_glass_draft', id: any, consumable_drafts: Array<{ __typename?: 'sales_consumable_draft', dependent_id?: Maybe<any>, labelFactory?: Maybe<string>, id: any }>, service_drafts: Array<{ __typename?: 'sales_service_draft', dependent_id?: Maybe<any>, labelFactory?: Maybe<string>, id: any }>, product_draft?: Maybe<{ __typename?: 'sales_product_draft', type?: Maybe<Sales_Product_Type_Enum>, count?: Maybe<any>, heigth?: Maybe<any>, width?: Maybe<any>, label: string, product_code: string }>, manufacturing_lines: Array<{ __typename?: 'manufacturing_manufacturing_line', glass_id: any, id: number, status: string, manufacturing_services: Array<{ __typename?: 'manufacturing_manufacturing_service', service_draft: { __typename?: 'sales_service_draft', labelFactory?: Maybe<string>, id: any } }>, manufacturing_consumables: Array<{ __typename?: 'manufacturing_manufacturing_consumable', consumable_draft: { __typename?: 'sales_consumable_draft', labelFactory?: Maybe<string>, id: any } }> }> }> };

export type AddGlassColorMutationVariables = Exact<{
  color?: Maybe<Scalars['String']>;
}>;


export type AddGlassColorMutation = { __typename?: 'mutation_root', insert_product_glassColor_one?: Maybe<{ __typename?: 'product_glassColor', color: string }> };

export type AddGlassTypeMutationVariables = Exact<{
  type?: Maybe<Scalars['String']>;
}>;


export type AddGlassTypeMutation = { __typename?: 'mutation_root', insert_product_glassType_one?: Maybe<{ __typename?: 'product_glassType', type: string }> };

export type DeleteManyCustomerProductsMutationVariables = Exact<{
  ids?: Maybe<Array<Scalars['uuid']> | Scalars['uuid']>;
}>;


export type DeleteManyCustomerProductsMutation = { __typename?: 'mutation_root', delete_product_customer_product?: Maybe<{ __typename?: 'product_customer_product_mutation_response', affected_rows: number }> };

export type DeleteManyMutationVariables = Exact<{
  codes?: Maybe<Array<Scalars['String']> | Scalars['String']>;
}>;


export type DeleteManyMutation = { __typename?: 'mutation_root', delete_product_product?: Maybe<{ __typename?: 'product_product_mutation_response', affected_rows: number }> };

export type DeleteOneMutationVariables = Exact<{
  code: Scalars['String'];
}>;


export type DeleteOneMutation = { __typename?: 'mutation_root', delete_product_product_by_pk?: Maybe<{ __typename?: 'product_product', code: string }> };

export type DeleteServiceMutationVariables = Exact<{
  id: Scalars['uuid'];
}>;


export type DeleteServiceMutation = { __typename?: 'mutation_root', delete_product_serviceConfig_by_pk?: Maybe<{ __typename?: 'product_serviceConfig', id: any }> };

export type InsertAccessoryMutationVariables = Exact<{
  product: Product_Product_Insert_Input;
  quota?: Maybe<Scalars['numeric']>;
  category?: Maybe<Product_AccessoryTypes_Enum>;
  subctance?: Product_Substance_Insert_Input;
}>;


export type InsertAccessoryMutation = { __typename?: 'mutation_root', insert_product_accessory_one?: Maybe<{ __typename?: 'product_accessory', id: any, category: Product_AccessoryTypes_Enum, quota?: Maybe<any>, product: { __typename?: 'product_product', code: string, label: string, unit: Product_Product_Unit_Enum, price: number, priceMax: number, priceMin: number, companies: Array<{ __typename?: 'product_product_companies_view', name?: Maybe<string>, id?: Maybe<any> }> } }> };

export type InsertConsumableMutationVariables = Exact<{
  product: Product_Product_Insert_Input;
  category?: Maybe<Product_ConsumableCategory_Enum>;
  substance?: Product_Substance_Insert_Input;
  labelFactory?: Maybe<Scalars['String']>;
}>;


export type InsertConsumableMutation = { __typename?: 'mutation_root', insert_product_consumable_one?: Maybe<{ __typename?: 'product_consumable', id: any, category: Product_ConsumableCategory_Enum, product: { __typename?: 'product_product', code: string, label: string, price: number, unit: Product_Product_Unit_Enum, priceMax: number, priceMin: number, companies: Array<{ __typename?: 'product_product_companies_view', name?: Maybe<string>, id?: Maybe<any> }> } }> };

export type InsertCustomerProductMutationVariables = Exact<{
  code?: Maybe<Scalars['String']>;
  label?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['Float']>;
  priceMax?: Maybe<Scalars['Float']>;
  priceMin?: Maybe<Scalars['Float']>;
  thickness?: Maybe<Scalars['numeric']>;
}>;


export type InsertCustomerProductMutation = { __typename?: 'mutation_root', insert_product_customer_product_one?: Maybe<{ __typename?: 'product_customer_product', id: any, thickness: any, product: { __typename?: 'product_product', code: string, label: string, unit: Product_Product_Unit_Enum } }> };

export type InsertGlassMutationVariables = Exact<{
  thickness?: Maybe<Scalars['Int']>;
  subsctance?: Product_Substance_Insert_Input;
  product: Product_Product_Insert_Input;
}>;


export type InsertGlassMutation = { __typename?: 'mutation_root', insert_product_glass_one?: Maybe<{ __typename?: 'product_glass', color?: Maybe<Product_GlassColor_Enum>, id: any, thickness: number, type?: Maybe<Product_GlassType_Enum>, product: { __typename?: 'product_product', code: string, label: string, unit: Product_Product_Unit_Enum, price: number, priceMax: number, priceMin: number, companies: Array<{ __typename?: 'product_product_companies_view', name?: Maybe<string>, id?: Maybe<any> }> } }> };

export type InsertServiceMutationVariables = Exact<{
  serviceConfigid?: Maybe<Scalars['uuid']>;
  product: Product_Product_Insert_Input;
  paramValues?: Maybe<Scalars['jsonb']>;
}>;


export type InsertServiceMutation = { __typename?: 'mutation_root', insert_product_service_one?: Maybe<{ __typename?: 'product_service', product: { __typename?: 'product_product', code: string, label: string, price: number, priceMax: number, priceMin: number, unit: Product_Product_Unit_Enum, companies: Array<{ __typename?: 'product_product_companies_view', id?: Maybe<any>, name?: Maybe<string> }> } }> };

export type InsertServiceConfigMutationVariables = Exact<{
  labelFactory?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  params?: Maybe<Scalars['jsonb']>;
}>;


export type InsertServiceConfigMutation = { __typename?: 'mutation_root', insert_product_serviceConfig_one?: Maybe<{ __typename?: 'product_serviceConfig', labelFactory: string, name: string, id: any, params?: Maybe<any> }> };

export type UpdateAccessoryMutationVariables = Exact<{
  id: Scalars['uuid'];
  quota?: Maybe<Scalars['numeric']>;
  product?: Maybe<Product_Product_Set_Input>;
  category?: Maybe<Product_AccessoryTypes_Enum>;
  code: Scalars['String'];
  companies: Array<Product_Product_Companies_Insert_Input> | Product_Product_Companies_Insert_Input;
}>;


export type UpdateAccessoryMutation = { __typename?: 'mutation_root', update_product_accessory_by_pk?: Maybe<{ __typename?: 'product_accessory', id: any, category: Product_AccessoryTypes_Enum, quota?: Maybe<any> }>, update_product_product_by_pk?: Maybe<{ __typename?: 'product_product', code: string, label: string, unit: Product_Product_Unit_Enum, price: number, priceMax: number, priceMin: number }>, delete_product_product_companies?: Maybe<{ __typename?: 'product_product_companies_mutation_response', affected_rows: number }>, insert_product_product_companies?: Maybe<{ __typename?: 'product_product_companies_mutation_response', returning: Array<{ __typename?: 'product_product_companies', Company: { __typename?: 'management_company', name: string, id: any } }> }> };

export type UpdateConsumableMutationVariables = Exact<{
  id: Scalars['uuid'];
  code: Scalars['String'];
  product?: Maybe<Product_Product_Set_Input>;
  category?: Maybe<Product_ConsumableCategory_Enum>;
  labelFactory?: Maybe<Scalars['String']>;
  companies: Array<Product_Product_Companies_Insert_Input> | Product_Product_Companies_Insert_Input;
}>;


export type UpdateConsumableMutation = { __typename?: 'mutation_root', update_product_consumable_by_pk?: Maybe<{ __typename?: 'product_consumable', id: any, category: Product_ConsumableCategory_Enum, labelFactory?: Maybe<string> }>, update_product_product_by_pk?: Maybe<{ __typename?: 'product_product', code: string, label: string, unit: Product_Product_Unit_Enum, price: number, priceMax: number, priceMin: number }>, delete_product_product_companies?: Maybe<{ __typename?: 'product_product_companies_mutation_response', affected_rows: number }>, insert_product_product_companies?: Maybe<{ __typename?: 'product_product_companies_mutation_response', returning: Array<{ __typename?: 'product_product_companies', Company: { __typename?: 'management_company', name: string, id: any } }> }> };

export type UpdateGlassMutationVariables = Exact<{
  id: Scalars['uuid'];
  thickness?: Maybe<Scalars['Int']>;
  product?: Maybe<Product_Product_Set_Input>;
  code: Scalars['String'];
  companies: Array<Product_Product_Companies_Insert_Input> | Product_Product_Companies_Insert_Input;
}>;


export type UpdateGlassMutation = { __typename?: 'mutation_root', update_product_glass_by_pk?: Maybe<{ __typename?: 'product_glass', id: any, thickness: number, type?: Maybe<Product_GlassType_Enum>, color?: Maybe<Product_GlassColor_Enum> }>, update_product_product_by_pk?: Maybe<{ __typename?: 'product_product', code: string, label: string, unit: Product_Product_Unit_Enum, price: number, priceMax: number, priceMin: number }>, delete_product_product_companies?: Maybe<{ __typename?: 'product_product_companies_mutation_response', affected_rows: number }>, insert_product_product_companies?: Maybe<{ __typename?: 'product_product_companies_mutation_response', returning: Array<{ __typename?: 'product_product_companies', Company: { __typename?: 'management_company', name: string, id: any } }> }> };

export type UpdateServiceMutationVariables = Exact<{
  id: Scalars['uuid'];
  labelFactory: Scalars['String'];
  name: Scalars['String'];
}>;


export type UpdateServiceMutation = { __typename?: 'mutation_root', update_product_serviceConfig_by_pk?: Maybe<{ __typename?: 'product_serviceConfig', labelFactory: string, name: string, id: any, params?: Maybe<any> }> };

export type GetAccessoryByIdQueryVariables = Exact<{
  id: Scalars['uuid'];
}>;


export type GetAccessoryByIdQuery = { __typename?: 'query_root', product_accessory_by_pk?: Maybe<{ __typename?: 'product_accessory', createdAt?: Maybe<any>, createdBy?: Maybe<string>, id: any, category: Product_AccessoryTypes_Enum, quota?: Maybe<any>, updatedAt?: Maybe<any>, updatedBy?: Maybe<string>, product: { __typename?: 'product_product', code: string, unit: Product_Product_Unit_Enum, label: string, price: number, priceMax: number, priceMin: number, companies: Array<{ __typename?: 'product_product_companies_view', name?: Maybe<string>, id?: Maybe<any> }> } }> };

export type GetAllAccessoriesQueryVariables = Exact<{ [key: string]: never; }>;


export type GetAllAccessoriesQuery = { __typename?: 'query_root', product_accessory: Array<{ __typename?: 'product_accessory', id: any, category: Product_AccessoryTypes_Enum, quota?: Maybe<any>, substanceid: any, product: { __typename?: 'product_product', code: string, label: string, unit: Product_Product_Unit_Enum, price: number, priceMax: number, priceMin: number, companies: Array<{ __typename?: 'product_product_companies_view', name?: Maybe<string>, id?: Maybe<any> }> } }> };

export type GetAllConsumablesQueryVariables = Exact<{ [key: string]: never; }>;


export type GetAllConsumablesQuery = { __typename?: 'query_root', product_consumable: Array<{ __typename?: 'product_consumable', id: any, category: Product_ConsumableCategory_Enum, substanceid: any, labelFactory?: Maybe<string>, product: { __typename?: 'product_product', code: string, label: string, unit: Product_Product_Unit_Enum, price: number, priceMax: number, priceMin: number, companies: Array<{ __typename?: 'product_product_companies_view', name?: Maybe<string>, id?: Maybe<any> }> } }> };

export type GetAllCustomerProductsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetAllCustomerProductsQuery = { __typename?: 'query_root', product_customer_product: Array<{ __typename?: 'product_customer_product', id: any, thickness: any, product: { __typename?: 'product_product', code: string, label: string, unit: Product_Product_Unit_Enum } }> };

export type GetAllGlassesQueryVariables = Exact<{ [key: string]: never; }>;


export type GetAllGlassesQuery = { __typename?: 'query_root', product_glass: Array<{ __typename?: 'product_glass', id: any, thickness: number, substanceid: any, product: { __typename?: 'product_product', code: string, label: string, unit: Product_Product_Unit_Enum, price: number, priceMax: number, priceMin: number, companies: Array<{ __typename?: 'product_product_companies_view', name?: Maybe<string>, id?: Maybe<any> }> } }> };

export type GetAllServicesQueryVariables = Exact<{ [key: string]: never; }>;


export type GetAllServicesQuery = { __typename?: 'query_root', product_service: Array<{ __typename?: 'product_service', paramValues?: Maybe<any>, serviceConfig?: Maybe<{ __typename?: 'product_serviceConfig', labelFactory: string, id: any, name: string, params?: Maybe<any> }>, product: { __typename?: 'product_product', code: string, label: string, price: number, priceMax: number, priceMin: number, unit: Product_Product_Unit_Enum, companies: Array<{ __typename?: 'product_product_companies_view', name?: Maybe<string>, id?: Maybe<any> }> } }> };

export type GetAllServiceConfigQueryVariables = Exact<{ [key: string]: never; }>;


export type GetAllServiceConfigQuery = { __typename?: 'query_root', product_serviceConfig: Array<{ __typename?: 'product_serviceConfig', labelFactory: string, name: string, id: any, params?: Maybe<any> }> };

export type GetConsumableByIdQueryVariables = Exact<{
  id: Scalars['uuid'];
}>;


export type GetConsumableByIdQuery = { __typename?: 'query_root', product_consumable_by_pk?: Maybe<{ __typename?: 'product_consumable', category: Product_ConsumableCategory_Enum, createdAt: any, createdBy?: Maybe<string>, id: any, updatedAt: any, updatedBy?: Maybe<string>, product: { __typename?: 'product_product', code: string, label: string, unit: Product_Product_Unit_Enum, price: number, priceMax: number, priceMin: number, companies: Array<{ __typename?: 'product_product_companies_view', name?: Maybe<string>, id?: Maybe<any> }> } }> };

export type GetGlassByIdQueryVariables = Exact<{
  id: Scalars['uuid'];
}>;


export type GetGlassByIdQuery = { __typename?: 'query_root', product_glass_by_pk?: Maybe<{ __typename?: 'product_glass', createdBy?: Maybe<any>, createdAt?: Maybe<any>, id: any, thickness: number, updatedAt?: Maybe<any>, updatedBy?: Maybe<any>, product: { __typename?: 'product_product', code: string, label: string, unit: Product_Product_Unit_Enum, price: number, priceMax: number, priceMin: number, companies: Array<{ __typename?: 'product_product_companies_view', name?: Maybe<string>, id?: Maybe<any> }> } }> };

export type GetGlassColorsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetGlassColorsQuery = { __typename?: 'query_root', product_glassColor: Array<{ __typename?: 'product_glassColor', color: string }> };

export type GetGlassTypesQueryVariables = Exact<{ [key: string]: never; }>;


export type GetGlassTypesQuery = { __typename?: 'query_root', product_glassType: Array<{ __typename?: 'product_glassType', type: string }> };

export type GetServiceConfigByIdQueryVariables = Exact<{
  id: Scalars['uuid'];
}>;


export type GetServiceConfigByIdQuery = { __typename?: 'query_root', product_serviceConfig_by_pk?: Maybe<{ __typename?: 'product_serviceConfig', id: any, labelFactory: string, name: string, params?: Maybe<any>, services: Array<{ __typename?: 'product_service', paramValues?: Maybe<any>, product: { __typename?: 'product_product', code: string, label: string, unit: Product_Product_Unit_Enum, price: number, priceMax: number, priceMin: number, companies: Array<{ __typename?: 'product_product_companies_view', name?: Maybe<string>, id?: Maybe<any> }> } }> }> };

export type GetAllSubstancesQueryVariables = Exact<{ [key: string]: never; }>;


export type GetAllSubstancesQuery = { __typename?: 'query_root', product_substance: Array<{ __typename?: 'product_substance', id: any, productAccessory?: Maybe<{ __typename?: 'product_product_accessory_view', code?: Maybe<string>, label?: Maybe<string>, unit?: Maybe<string> }>, productConsumable?: Maybe<{ __typename?: 'product_product_consumable_view', code?: Maybe<string>, label?: Maybe<string>, unit?: Maybe<string> }>, productGlass?: Maybe<{ __typename?: 'product_product_glass_view', code?: Maybe<string>, label?: Maybe<string>, unit?: Maybe<string> }>, supply?: Maybe<{ __typename?: 'product_supply', code: string, label: string, unit?: Maybe<string> }> }> };

export type DeletePurchaseDeliveryMutationVariables = Exact<{
  ids: Array<Scalars['Int']> | Scalars['Int'];
}>;


export type DeletePurchaseDeliveryMutation = { __typename?: 'mutation_root', delete_purchase_delivery?: Maybe<{ __typename?: 'purchase_delivery_mutation_response', affected_rows: number }> };

export type InsertPurchaseDeliveryMutationVariables = Exact<{
  date?: Maybe<Scalars['date']>;
  provider_id?: Maybe<Scalars['uuid']>;
  items?: Array<Purchase_Delivery_Item_Insert_Input> | Purchase_Delivery_Item_Insert_Input;
}>;


export type InsertPurchaseDeliveryMutation = { __typename?: 'mutation_root', insert_purchase_delivery_one?: Maybe<{ __typename?: 'purchase_delivery', date: any, id: number, delivery_items: Array<{ __typename?: 'purchase_delivery_item', id: any, code: string, delivery_id: number, label: string, quantity: any, substance_id: any, cost?: Maybe<any>, unit: string, warehouse: { __typename?: 'stock_warehouse', id: any, name: string, company: { __typename?: 'management_company', name: string } } }>, provider: { __typename?: 'contact_provider', id: any, code?: Maybe<string>, name: string, phone: string } }> };

export type InsertDeliveryItemsMutationVariables = Exact<{
  items: Array<Purchase_Delivery_Item_Insert_Input> | Purchase_Delivery_Item_Insert_Input;
}>;


export type InsertDeliveryItemsMutation = { __typename?: 'mutation_root', insert_purchase_delivery_item?: Maybe<{ __typename?: 'purchase_delivery_item_mutation_response', returning: Array<{ __typename?: 'purchase_delivery_item', code: string, cost?: Maybe<any>, id: any, delivery_id: number, label: string, quantity: any, substance_id: any, unit: string, warehouse: { __typename?: 'stock_warehouse', name: string, id: any, company: { __typename?: 'management_company', name: string } } }> }> };

export type GetAllPurchasesDeliveriesQueryVariables = Exact<{ [key: string]: never; }>;


export type GetAllPurchasesDeliveriesQuery = { __typename?: 'query_root', purchase_delivery: Array<{ __typename?: 'purchase_delivery', date: any, id: number, ref?: Maybe<string>, provider: { __typename?: 'contact_provider', id: any, code?: Maybe<string>, name: string, phone: string } }> };

export type GetPurchaseDeliveryByIdQueryVariables = Exact<{
  id: Scalars['Int'];
}>;


export type GetPurchaseDeliveryByIdQuery = { __typename?: 'query_root', purchase_delivery_by_pk?: Maybe<{ __typename?: 'purchase_delivery', date: any, id: number, ref?: Maybe<string>, delivery_items: Array<{ __typename?: 'purchase_delivery_item', code: string, delivery_id: number, id: any, label: string, quantity: any, substance_id: any, cost?: Maybe<any>, unit: string, warehouse: { __typename?: 'stock_warehouse', id: any, name: string, company: { __typename?: 'management_company', name: string } } }>, provider: { __typename?: 'contact_provider', id: any, code?: Maybe<string>, name: string, phone: string } }> };

export type DeleteDeliveryMutationVariables = Exact<{
  ids?: Array<Scalars['uuid']> | Scalars['uuid'];
}>;


export type DeleteDeliveryMutation = { __typename?: 'mutation_root', delete_sales_delivery?: Maybe<{ __typename?: 'sales_delivery_mutation_response', affected_rows: number }> };

export type InsertDeliveryMutationVariables = Exact<{
  order_id: Scalars['Int'];
  predicted_date?: Maybe<Scalars['date']>;
  client_id: Scalars['uuid'];
  company_id: Scalars['uuid'];
  contact_id?: Maybe<Scalars['uuid']>;
  isReturned?: Maybe<Scalars['Boolean']>;
  delivery_lines?: Array<Sales_Delivery_Line_Insert_Input> | Sales_Delivery_Line_Insert_Input;
  payment_method: Scalars['String'];
  amount_ttc?: Maybe<Scalars['numeric']>;
  amount_tva?: Maybe<Scalars['numeric']>;
  amount_ht?: Maybe<Scalars['numeric']>;
}>;


export type InsertDeliveryMutation = { __typename?: 'mutation_root', insert_sales_delivery_one?: Maybe<{ __typename?: 'sales_delivery', id: any, status: string, contact_id?: Maybe<any>, payment_method: string, predicted_date: any, isReturned: boolean, order_id: number, amount_ttc: any, amount_tva: any, amount_ht: any, company: { __typename?: 'management_company', name: string }, client: { __typename?: 'contact_customer', name: string, mail?: Maybe<string> }, contact?: Maybe<{ __typename?: 'contact_contact', mail?: Maybe<string>, name: string, phone: string }> }> };

export type UpdateDeliveryMutationVariables = Exact<{
  id: Scalars['uuid'];
  payment_method: Scalars['String'];
  contact_id?: Maybe<Scalars['uuid']>;
  company_id?: Maybe<Scalars['uuid']>;
  client_id?: Maybe<Scalars['uuid']>;
  isReturned?: Maybe<Scalars['Boolean']>;
  predicted_date?: Maybe<Scalars['date']>;
  amount_ttc?: Maybe<Scalars['numeric']>;
  amount_tva?: Maybe<Scalars['numeric']>;
  amount_ht?: Maybe<Scalars['numeric']>;
}>;


export type UpdateDeliveryMutation = { __typename?: 'mutation_root', update_sales_delivery_by_pk?: Maybe<{ __typename?: 'sales_delivery', id: any, order_id: number, status: string, company_id: any, payment_method: string, isReturned: boolean, predicted_date: any, client_id: any, contact_id?: Maybe<any>, amount_ttc: any, amount_tva: any, amount_ht: any }> };

export type UpdateDeliveryLineMutationVariables = Exact<{
  amount?: Maybe<Scalars['numeric']>;
  delivered?: Maybe<Scalars['numeric']>;
  id: Scalars['uuid'];
  product_draft_id: Scalars['uuid'];
}>;


export type UpdateDeliveryLineMutation = { __typename?: 'mutation_root', update_sales_delivery_line_by_pk?: Maybe<{ __typename?: 'sales_delivery_line', id: any, amount: any, delivered: any, product_draft_id: any }> };

export type DeleteDraftsMutationVariables = Exact<{
  ids?: Array<Scalars['Int']> | Scalars['Int'];
}>;


export type DeleteDraftsMutation = { __typename?: 'mutation_root', delete_sales_draft?: Maybe<{ __typename?: 'sales_draft_mutation_response', affected_rows: number }> };

export type InsertDraftMutationVariables = Exact<{
  status?: Maybe<Sales_Draft_Status_Enum>;
}>;


export type InsertDraftMutation = { __typename?: 'mutation_root', insert_sales_draft_one?: Maybe<{ __typename?: 'sales_draft', id: number }> };

export type UpdateDraftMutationVariables = Exact<{
  id: Scalars['Int'];
  status?: Maybe<Sales_Draft_Status_Enum>;
  glasses?: Array<Sales_Glass_Draft_Insert_Input> | Sales_Glass_Draft_Insert_Input;
  accessories?: Array<Sales_Accessory_Draft_Insert_Input> | Sales_Accessory_Draft_Insert_Input;
  consumables?: Array<Sales_Consumable_Draft_Insert_Input> | Sales_Consumable_Draft_Insert_Input;
}>;


export type UpdateDraftMutation = { __typename?: 'mutation_root', update_sales_draft_by_pk?: Maybe<{ __typename?: 'sales_draft', id: number }>, insert_sales_glass_draft?: Maybe<{ __typename?: 'sales_glass_draft_mutation_response', affected_rows: number }>, insert_sales_accessory_draft?: Maybe<{ __typename?: 'sales_accessory_draft_mutation_response', affected_rows: number }>, insert_sales_consumable_draft?: Maybe<{ __typename?: 'sales_consumable_draft_mutation_response', affected_rows: number }> };

export type DeleteInvoicesMutationVariables = Exact<{
  ids?: Array<Scalars['uuid']> | Scalars['uuid'];
}>;


export type DeleteInvoicesMutation = { __typename?: 'mutation_root', delete_sales_invoice?: Maybe<{ __typename?: 'sales_invoice_mutation_response', affected_rows: number }> };

export type InsertInvoiceMutationVariables = Exact<{
  client_id: Scalars['uuid'];
  contact_id?: Maybe<Scalars['uuid']>;
  company_id: Scalars['uuid'];
  payment_method: Scalars['String'];
  date: Scalars['date'];
  invoice_lines?: Array<Sales_Invoice_Line_Insert_Input> | Sales_Invoice_Line_Insert_Input;
  deliveries?: Array<Sales_Invoice_Delivery_Insert_Input> | Sales_Invoice_Delivery_Insert_Input;
  deliveries_ids?: Array<Scalars['uuid']> | Scalars['uuid'];
  amount_ttc?: Maybe<Scalars['numeric']>;
  amount_ht?: Maybe<Scalars['numeric']>;
  amount_tva?: Maybe<Scalars['numeric']>;
}>;


export type InsertInvoiceMutation = { __typename?: 'mutation_root', insert_sales_invoice_one?: Maybe<{ __typename?: 'sales_invoice', id: any, ref?: Maybe<string>, client_id: any, company_id: any, contact_id?: Maybe<any>, date: any, payment_method: string, amount_ttc: any, amount_ht: any, amount_tva: any, deliveries: Array<{ __typename?: 'sales_invoice_delivery', delivery_id: any }>, invoice_lines: Array<{ __typename?: 'sales_invoice_line', id: any, unit_price: any, product_code: string, product_label: string, quantity: any, total: any, product_type: string }> }>, update_sales_delivery?: Maybe<{ __typename?: 'sales_delivery_mutation_response', affected_rows: number }> };

export type UpdateInvoiceMutationVariables = Exact<{
  id: Scalars['uuid'];
  client_id?: Maybe<Scalars['uuid']>;
  company_id?: Maybe<Scalars['uuid']>;
  contact_id?: Maybe<Scalars['uuid']>;
  date?: Maybe<Scalars['date']>;
  payment_method?: Maybe<Scalars['String']>;
}>;


export type UpdateInvoiceMutation = { __typename?: 'mutation_root', update_sales_invoice_by_pk?: Maybe<{ __typename?: 'sales_invoice', id: any, date: any, payment_method: string, amount_ttc: any, amount_ht: any, amount_tva: any, ref?: Maybe<string>, createdAt?: Maybe<any>, updated_at?: Maybe<any>, client: { __typename?: 'contact_customer', name: string, phone: string, mail?: Maybe<string> }, company: { __typename?: 'management_company', id: any, name: string }, contact?: Maybe<{ __typename?: 'contact_contact', mail?: Maybe<string>, name: string, phone: string }>, deliveries: Array<{ __typename?: 'sales_invoice_delivery', delivery_id: any }> }> };

export type DeleteOrdersMutationVariables = Exact<{
  ids?: Array<Scalars['Int']> | Scalars['Int'];
}>;


export type DeleteOrdersMutation = { __typename?: 'mutation_root', delete_sales_order?: Maybe<{ __typename?: 'sales_order_mutation_response', affected_rows: number }> };

export type InsertOrderMutationVariables = Exact<{
  draft_id: Scalars['Int'];
  company_id?: Maybe<Scalars['uuid']>;
  contact_id?: Maybe<Scalars['uuid']>;
  customer_id?: Maybe<Scalars['uuid']>;
  date?: Maybe<Scalars['date']>;
  deadline?: Maybe<Scalars['date']>;
  total_ht?: Maybe<Scalars['numeric']>;
  total_tax?: Maybe<Scalars['numeric']>;
  total_ttc?: Maybe<Scalars['numeric']>;
  payment_status?: Maybe<Scalars['String']>;
  delivery_status?: Maybe<Scalars['String']>;
  salepoint_id?: Maybe<Scalars['uuid']>;
  status?: Maybe<Sales_Draft_Status_Enum>;
  amounts: Array<Sales_Amount_Insert_Input> | Sales_Amount_Insert_Input;
}>;


export type InsertOrderMutation = { __typename?: 'mutation_root', insert_sales_order_one?: Maybe<{ __typename?: 'sales_order', date: any, deadline: any, draft_id: number, id: number, delivery_status: string, payment_status: string, total_ht: any, total_tax: any, total_ttc: any, company: { __typename?: 'management_company', name: string, id: any }, contact?: Maybe<{ __typename?: 'contact_contact', code?: Maybe<string>, name: string }>, customer: { __typename?: 'contact_customer', code?: Maybe<string>, name: string, phone: string }, salepoint: { __typename?: 'management_salesPoint', name: string } }>, insert_sales_amount?: Maybe<{ __typename?: 'sales_amount_mutation_response', affected_rows: number }>, update_sales_draft_by_pk?: Maybe<{ __typename?: 'sales_draft', id: number }> };

export type UpdateOrderMutationVariables = Exact<{
  order_id: Scalars['Int'];
  total_ht?: Maybe<Scalars['numeric']>;
  total_tax?: Maybe<Scalars['numeric']>;
  total_ttc?: Maybe<Scalars['numeric']>;
  amounts: Array<Sales_Amount_Insert_Input> | Sales_Amount_Insert_Input;
}>;


export type UpdateOrderMutation = { __typename?: 'mutation_root', update_sales_order_by_pk?: Maybe<{ __typename?: 'sales_order', date: any, deadline: any, draft_id: number, id: number, delivery_status: string, payment_status: string, total_ht: any, total_tax: any, total_ttc: any, company: { __typename?: 'management_company', name: string, id: any }, contact?: Maybe<{ __typename?: 'contact_contact', code?: Maybe<string>, name: string }>, customer: { __typename?: 'contact_customer', code?: Maybe<string>, name: string, phone: string }, salepoint: { __typename?: 'management_salesPoint', name: string } }>, delete_sales_amount?: Maybe<{ __typename?: 'sales_amount_mutation_response', affected_rows: number }>, insert_sales_amount?: Maybe<{ __typename?: 'sales_amount_mutation_response', affected_rows: number }> };

export type DeletePaymentMutationVariables = Exact<{
  id: Scalars['uuid'];
}>;


export type DeletePaymentMutation = { __typename?: 'mutation_root', delete_sales_payment_by_pk?: Maybe<{ __typename?: 'sales_payment', id: any }> };

export type InsertPaymentMutationVariables = Exact<{
  amount?: Maybe<Scalars['numeric']>;
  company_id?: Maybe<Scalars['uuid']>;
  customer_id?: Maybe<Scalars['uuid']>;
  date?: Maybe<Scalars['date']>;
  deadline?: Maybe<Scalars['date']>;
  order_id?: Maybe<Scalars['Int']>;
  payment_method?: Maybe<Scalars['String']>;
  comment?: Maybe<Scalars['String']>;
  paper_ref?: Maybe<Scalars['String']>;
}>;


export type InsertPaymentMutation = { __typename?: 'mutation_root', insert_sales_payment_one?: Maybe<{ __typename?: 'sales_payment', amount: any, date: any, deadline?: Maybe<any>, id: any, order_id: number, customer_id: any, payment_method: string, company: { __typename?: 'management_company', name: string, id: any } }> };

export type DeleteProductsMutationVariables = Exact<{
  ids?: Array<Scalars['uuid']> | Scalars['uuid'];
}>;


export type DeleteProductsMutation = { __typename?: 'mutation_root', delete_sales_product_draft?: Maybe<{ __typename?: 'sales_product_draft_mutation_response', affected_rows: number }> };

export type DeleteProductDraftMutationVariables = Exact<{
  id: Scalars['uuid'];
}>;


export type DeleteProductDraftMutation = { __typename?: 'mutation_root', delete_sales_product_draft_by_pk?: Maybe<{ __typename?: 'sales_product_draft', id: any }> };

export type InsertAccessoryDraftMutationVariables = Exact<{
  warehouse_id?: Maybe<Scalars['uuid']>;
  company_id?: Maybe<Scalars['uuid']>;
  company_name?: Maybe<Scalars['String']>;
  label?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['numeric']>;
  product_code?: Maybe<Scalars['String']>;
  quantity?: Maybe<Scalars['numeric']>;
  total_price?: Maybe<Scalars['numeric']>;
  type?: Maybe<Sales_Product_Type_Enum>;
  unit?: Maybe<Scalars['String']>;
  draft_id?: Maybe<Scalars['Int']>;
  substance_id?: Maybe<Scalars['uuid']>;
}>;


export type InsertAccessoryDraftMutation = { __typename?: 'mutation_root', insert_sales_accessory_draft_one?: Maybe<{ __typename?: 'sales_accessory_draft', id: any, product_draft: { __typename?: 'sales_product_draft', company_name?: Maybe<string>, heigth?: Maybe<any>, id: any, label: string, m2?: Maybe<any>, ml?: Maybe<any>, price?: Maybe<any>, product_code: string, quantity?: Maybe<any>, total_price?: Maybe<any>, type?: Maybe<Sales_Product_Type_Enum>, unit?: Maybe<string>, width?: Maybe<any>, substance_id?: Maybe<any>, warehouse_id?: Maybe<any> } }> };

export type InsertBisItemMutationVariables = Exact<{
  glasses: Array<Sales_Glass_Draft_Insert_Input> | Sales_Glass_Draft_Insert_Input;
}>;


export type InsertBisItemMutation = { __typename?: 'mutation_root', insert_sales_glass_draft?: Maybe<{ __typename?: 'sales_glass_draft_mutation_response', returning: Array<{ __typename?: 'sales_glass_draft', id: any, product_draft?: Maybe<{ __typename?: 'sales_product_draft', company_name?: Maybe<string>, heigth?: Maybe<any>, id: any, label: string, m2?: Maybe<any>, ml?: Maybe<any>, price?: Maybe<any>, product_code: string, quantity?: Maybe<any>, total_price?: Maybe<any>, type?: Maybe<Sales_Product_Type_Enum>, unit?: Maybe<string>, width?: Maybe<any>, company_id?: Maybe<any>, count?: Maybe<any>, isRepeated?: Maybe<boolean>, isLaunched?: Maybe<boolean>, substance_id?: Maybe<any>, warehouse_id?: Maybe<any>, draft_id: number, glass_draft?: Maybe<{ __typename?: 'sales_glass_draft', id: any }>, service_draft?: Maybe<{ __typename?: 'sales_service_draft', labelFactory?: Maybe<string>, id: any, product_draft: { __typename?: 'sales_product_draft', company_id?: Maybe<any>, company_name?: Maybe<string>, count?: Maybe<any>, delivered: any, draft_id: number, heigth?: Maybe<any>, id: any, isLaunched?: Maybe<boolean>, isRepeated?: Maybe<boolean>, label: string, m2?: Maybe<any>, ml?: Maybe<any>, price?: Maybe<any>, product_code: string, quantity?: Maybe<any>, status: string, substance_id?: Maybe<any>, total_price?: Maybe<any>, type?: Maybe<Sales_Product_Type_Enum>, unit?: Maybe<string>, warehouse_id?: Maybe<any>, width?: Maybe<any> } }>, consumable_draft?: Maybe<{ __typename?: 'sales_consumable_draft', id: any, labelFactory?: Maybe<string>, product_draft: { __typename?: 'sales_product_draft', company_id?: Maybe<any>, company_name?: Maybe<string>, count?: Maybe<any>, delivered: any, draft_id: number, heigth?: Maybe<any>, id: any, isLaunched?: Maybe<boolean>, isRepeated?: Maybe<boolean>, label: string, m2?: Maybe<any>, ml?: Maybe<any>, price?: Maybe<any>, product_code: string, quantity?: Maybe<any>, status: string, substance_id?: Maybe<any>, type?: Maybe<Sales_Product_Type_Enum>, total_price?: Maybe<any>, unit?: Maybe<string>, warehouse_id?: Maybe<any>, width?: Maybe<any> } }> }> }> }> };

export type InsertConsumableDraftMutationVariables = Exact<{
  company_id?: Maybe<Scalars['uuid']>;
  company_name?: Maybe<Scalars['String']>;
  label?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['numeric']>;
  product_code?: Maybe<Scalars['String']>;
  quantity?: Maybe<Scalars['numeric']>;
  total_price?: Maybe<Scalars['numeric']>;
  type?: Maybe<Sales_Product_Type_Enum>;
  unit?: Maybe<Scalars['String']>;
  draft_id?: Maybe<Scalars['Int']>;
  dependent_id?: Maybe<Scalars['uuid']>;
  m2?: Maybe<Scalars['numeric']>;
  ml?: Maybe<Scalars['numeric']>;
  substance_id?: Maybe<Scalars['uuid']>;
  warehouse_id?: Maybe<Scalars['uuid']>;
  isRepeated?: Maybe<Scalars['Boolean']>;
  labelFactory?: Maybe<Scalars['String']>;
}>;


export type InsertConsumableDraftMutation = { __typename?: 'mutation_root', insert_sales_consumable_draft_one?: Maybe<{ __typename?: 'sales_consumable_draft', id: any, dependent_id?: Maybe<any>, product_draft: { __typename?: 'sales_product_draft', company_name?: Maybe<string>, heigth?: Maybe<any>, id: any, label: string, m2?: Maybe<any>, ml?: Maybe<any>, price?: Maybe<any>, product_code: string, quantity?: Maybe<any>, isRepeated?: Maybe<boolean>, isLaunched?: Maybe<boolean>, total_price?: Maybe<any>, type?: Maybe<Sales_Product_Type_Enum>, unit?: Maybe<string>, width?: Maybe<any>, substance_id?: Maybe<any>, warehouse_id?: Maybe<any>, draft_id: number } }> };

export type InsertGlassDraftMutationVariables = Exact<{
  heigth?: Maybe<Scalars['numeric']>;
  label?: Maybe<Scalars['String']>;
  m2?: Maybe<Scalars['numeric']>;
  ml?: Maybe<Scalars['numeric']>;
  price?: Maybe<Scalars['numeric']>;
  product_code?: Maybe<Scalars['String']>;
  quantity?: Maybe<Scalars['numeric']>;
  total_price?: Maybe<Scalars['numeric']>;
  type?: Maybe<Sales_Product_Type_Enum>;
  unit?: Maybe<Scalars['String']>;
  width?: Maybe<Scalars['numeric']>;
  draft_id?: Maybe<Scalars['Int']>;
  count?: Maybe<Scalars['numeric']>;
  warehouse_id?: Maybe<Scalars['uuid']>;
  company_id?: Maybe<Scalars['uuid']>;
  company_name?: Maybe<Scalars['String']>;
  substance_id?: Maybe<Scalars['uuid']>;
  isRepeated?: Maybe<Scalars['Boolean']>;
}>;


export type InsertGlassDraftMutation = { __typename?: 'mutation_root', insert_sales_glass_draft_one?: Maybe<{ __typename?: 'sales_glass_draft', product_draft?: Maybe<{ __typename?: 'sales_product_draft', company_name?: Maybe<string>, heigth?: Maybe<any>, id: any, label: string, m2?: Maybe<any>, ml?: Maybe<any>, price?: Maybe<any>, product_code: string, quantity?: Maybe<any>, total_price?: Maybe<any>, type?: Maybe<Sales_Product_Type_Enum>, unit?: Maybe<string>, width?: Maybe<any>, company_id?: Maybe<any>, count?: Maybe<any>, isRepeated?: Maybe<boolean>, isLaunched?: Maybe<boolean>, substance_id?: Maybe<any>, warehouse_id?: Maybe<any>, draft_id: number, glass_draft?: Maybe<{ __typename?: 'sales_glass_draft', id: any }> }> }> };

export type InsertManyConsumablesMutationVariables = Exact<{
  consumables: Array<Sales_Consumable_Draft_Insert_Input> | Sales_Consumable_Draft_Insert_Input;
}>;


export type InsertManyConsumablesMutation = { __typename?: 'mutation_root', insert_sales_consumable_draft?: Maybe<{ __typename?: 'sales_consumable_draft_mutation_response', returning: Array<{ __typename?: 'sales_consumable_draft', id: any, dependent_id?: Maybe<any>, product_draft: { __typename?: 'sales_product_draft', company_name?: Maybe<string>, heigth?: Maybe<any>, id: any, label: string, m2?: Maybe<any>, ml?: Maybe<any>, price?: Maybe<any>, product_code: string, quantity?: Maybe<any>, total_price?: Maybe<any>, type?: Maybe<Sales_Product_Type_Enum>, unit?: Maybe<string>, isRepeated?: Maybe<boolean>, isLaunched?: Maybe<boolean>, width?: Maybe<any>, company_id?: Maybe<any>, count?: Maybe<any>, draft_id: number } }> }> };

export type InsertManyGlassesMutationVariables = Exact<{
  glasses: Array<Sales_Glass_Draft_Insert_Input> | Sales_Glass_Draft_Insert_Input;
}>;


export type InsertManyGlassesMutation = { __typename?: 'mutation_root', insert_sales_glass_draft?: Maybe<{ __typename?: 'sales_glass_draft_mutation_response', returning: Array<{ __typename?: 'sales_glass_draft', id: any, product_draft?: Maybe<{ __typename?: 'sales_product_draft', company_name?: Maybe<string>, heigth?: Maybe<any>, id: any, label: string, m2?: Maybe<any>, ml?: Maybe<any>, price?: Maybe<any>, product_code: string, quantity?: Maybe<any>, total_price?: Maybe<any>, type?: Maybe<Sales_Product_Type_Enum>, unit?: Maybe<string>, width?: Maybe<any>, company_id?: Maybe<any>, count?: Maybe<any>, isRepeated?: Maybe<boolean>, isLaunched?: Maybe<boolean>, substance_id?: Maybe<any>, warehouse_id?: Maybe<any>, draft_id: number, glass_draft?: Maybe<{ __typename?: 'sales_glass_draft', id: any }> }> }> }> };

export type InsertManyProductsMutationVariables = Exact<{
  objects: Array<Sales_Product_Draft_Insert_Input> | Sales_Product_Draft_Insert_Input;
  update_columns?: Maybe<Array<Sales_Product_Draft_Update_Column> | Sales_Product_Draft_Update_Column>;
}>;


export type InsertManyProductsMutation = { __typename?: 'mutation_root', insert_sales_product_draft?: Maybe<{ __typename?: 'sales_product_draft_mutation_response', affected_rows: number, returning: Array<{ __typename?: 'sales_product_draft', company_name?: Maybe<string>, heigth?: Maybe<any>, id: any, label: string, m2?: Maybe<any>, ml?: Maybe<any>, price?: Maybe<any>, product_code: string, quantity?: Maybe<any>, total_price?: Maybe<any>, type?: Maybe<Sales_Product_Type_Enum>, unit?: Maybe<string>, width?: Maybe<any>, company_id?: Maybe<any>, count?: Maybe<any>, isRepeated?: Maybe<boolean>, isLaunched?: Maybe<boolean>, substance_id?: Maybe<any>, warehouse_id?: Maybe<any>, draft_id: number, glass_draft?: Maybe<{ __typename?: 'sales_glass_draft', id: any }> }> }> };

export type InsertManyServicesMutationVariables = Exact<{
  services: Array<Sales_Service_Draft_Insert_Input> | Sales_Service_Draft_Insert_Input;
}>;


export type InsertManyServicesMutation = { __typename?: 'mutation_root', insert_sales_service_draft?: Maybe<{ __typename?: 'sales_service_draft_mutation_response', returning: Array<{ __typename?: 'sales_service_draft', id: any, dependent_id?: Maybe<any>, product_draft: { __typename?: 'sales_product_draft', company_name?: Maybe<string>, heigth?: Maybe<any>, id: any, label: string, m2?: Maybe<any>, ml?: Maybe<any>, price?: Maybe<any>, product_code: string, quantity?: Maybe<any>, total_price?: Maybe<any>, type?: Maybe<Sales_Product_Type_Enum>, unit?: Maybe<string>, isRepeated?: Maybe<boolean>, isLaunched?: Maybe<boolean>, width?: Maybe<any>, company_id?: Maybe<any>, count?: Maybe<any>, draft_id: number } }> }> };

export type InsertServiceDraftMutationVariables = Exact<{
  company_id?: Maybe<Scalars['uuid']>;
  company_name?: Maybe<Scalars['String']>;
  label?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['numeric']>;
  product_code?: Maybe<Scalars['String']>;
  total_price?: Maybe<Scalars['numeric']>;
  type?: Maybe<Sales_Product_Type_Enum>;
  unit?: Maybe<Scalars['String']>;
  dependent_id?: Maybe<Scalars['uuid']>;
  m2?: Maybe<Scalars['numeric']>;
  quantity?: Maybe<Scalars['numeric']>;
  ml?: Maybe<Scalars['numeric']>;
  draft_id?: Maybe<Scalars['Int']>;
  labelFactory?: Maybe<Scalars['String']>;
  warehouse_id?: Maybe<Scalars['uuid']>;
}>;


export type InsertServiceDraftMutation = { __typename?: 'mutation_root', insert_sales_service_draft_one?: Maybe<{ __typename?: 'sales_service_draft', id: any, dependent_id?: Maybe<any>, product_draft: { __typename?: 'sales_product_draft', company_name?: Maybe<string>, heigth?: Maybe<any>, id: any, label: string, m2?: Maybe<any>, ml?: Maybe<any>, price?: Maybe<any>, product_code: string, quantity?: Maybe<any>, total_price?: Maybe<any>, type?: Maybe<Sales_Product_Type_Enum>, unit?: Maybe<string>, isRepeated?: Maybe<boolean>, isLaunched?: Maybe<boolean>, width?: Maybe<any>, company_id?: Maybe<any>, count?: Maybe<any> } }> };

export type UpdateGlassesJobOrderIdMutationVariables = Exact<{
  draft_id?: Maybe<Scalars['Int']>;
  isRepeated?: Maybe<Scalars['Boolean']>;
}>;


export type UpdateGlassesJobOrderIdMutation = { __typename?: 'mutation_root', update_sales_glass_draft?: Maybe<{ __typename?: 'sales_glass_draft_mutation_response', affected_rows: number }> };

export type DeleteQuotationsMutationVariables = Exact<{
  ids?: Array<Scalars['Int']> | Scalars['Int'];
}>;


export type DeleteQuotationsMutation = { __typename?: 'mutation_root', delete_sales_quotation?: Maybe<{ __typename?: 'sales_quotation_mutation_response', affected_rows: number }> };

export type InsertQuotationMutationVariables = Exact<{
  draft_id: Scalars['Int'];
  company_id?: Maybe<Scalars['uuid']>;
  contact_id?: Maybe<Scalars['uuid']>;
  customer_id?: Maybe<Scalars['uuid']>;
  date?: Maybe<Scalars['date']>;
  deadline?: Maybe<Scalars['date']>;
  total_ht?: Maybe<Scalars['numeric']>;
  total_tax?: Maybe<Scalars['numeric']>;
  total_ttc?: Maybe<Scalars['numeric']>;
  salepoint_id?: Maybe<Scalars['uuid']>;
  status?: Maybe<Sales_Draft_Status_Enum>;
  amounts: Array<Sales_Amount_Insert_Input> | Sales_Amount_Insert_Input;
}>;


export type InsertQuotationMutation = { __typename?: 'mutation_root', insert_sales_quotation_one?: Maybe<{ __typename?: 'sales_quotation', status: string, ref?: Maybe<string>, date: any, deadline: any, draft_id: number, id: number, total_ht: any, total_tax: any, total_ttc: any, contact_id?: Maybe<any>, company: { __typename?: 'management_company', name: string, id: any }, customer: { __typename?: 'contact_customer', code?: Maybe<string>, id: any, name: string, phone: string }, salepoint: { __typename?: 'management_salesPoint', name: string } }>, insert_sales_amount?: Maybe<{ __typename?: 'sales_amount_mutation_response', affected_rows: number }>, update_sales_draft_by_pk?: Maybe<{ __typename?: 'sales_draft', id: number }> };

export type TransformQuotationToOrderMutationVariables = Exact<{
  draft_id: Scalars['Int'];
  copierDraft_id: Scalars['Int'];
  status?: Maybe<Sales_Draft_Status_Enum>;
  company_id?: Maybe<Scalars['uuid']>;
  customer_id?: Maybe<Scalars['uuid']>;
  contact_id?: Maybe<Scalars['uuid']>;
  date?: Maybe<Scalars['date']>;
  deadline?: Maybe<Scalars['date']>;
  salepoint_id?: Maybe<Scalars['uuid']>;
  total_ht?: Maybe<Scalars['numeric']>;
  total_tax?: Maybe<Scalars['numeric']>;
  total_ttc?: Maybe<Scalars['numeric']>;
  payment_status?: Maybe<Scalars['String']>;
  delivery_status?: Maybe<Scalars['String']>;
  quotationStatus?: Maybe<Scalars['String']>;
  glasses?: Array<Sales_Glass_Draft_Insert_Input> | Sales_Glass_Draft_Insert_Input;
  accessories?: Array<Sales_Accessory_Draft_Insert_Input> | Sales_Accessory_Draft_Insert_Input;
  consumables?: Array<Sales_Consumable_Draft_Insert_Input> | Sales_Consumable_Draft_Insert_Input;
}>;


export type TransformQuotationToOrderMutation = { __typename?: 'mutation_root', update_sales_draft_by_pk?: Maybe<{ __typename?: 'sales_draft', status: Sales_Draft_Status_Enum, product_drafts: Array<{ __typename?: 'sales_product_draft', id: any, label: string, heigth?: Maybe<any>, company_name?: Maybe<string>, count?: Maybe<any>, delivered: any, warehouse_id?: Maybe<any>, substance_id?: Maybe<any>, m2?: Maybe<any>, ml?: Maybe<any>, price?: Maybe<any>, product_code: string, quantity?: Maybe<any>, status: string, total_price?: Maybe<any>, type?: Maybe<Sales_Product_Type_Enum>, unit?: Maybe<string>, width?: Maybe<any>, isRepeated?: Maybe<boolean>, isLaunched?: Maybe<boolean>, draft_id: number, glass_draft?: Maybe<{ __typename?: 'sales_glass_draft', id: any }>, consumable_draft?: Maybe<{ __typename?: 'sales_consumable_draft', dependent_id?: Maybe<any> }>, service_draft?: Maybe<{ __typename?: 'sales_service_draft', dependent_id?: Maybe<any> }> }> }>, insert_sales_order_one?: Maybe<{ __typename?: 'sales_order', date: any, deadline: any, draft_id: number, id: number, delivery_status: string, payment_status: string, total_ht: any, total_tax: any, total_ttc: any, company: { __typename?: 'management_company', name: string, id: any }, contact?: Maybe<{ __typename?: 'contact_contact', code?: Maybe<string>, name: string }>, customer: { __typename?: 'contact_customer', code?: Maybe<string>, name: string, phone: string }, salepoint: { __typename?: 'management_salesPoint', name: string } }>, update_sales_quotation?: Maybe<{ __typename?: 'sales_quotation_mutation_response', affected_rows: number }>, insert_sales_glass_draft?: Maybe<{ __typename?: 'sales_glass_draft_mutation_response', affected_rows: number }>, insert_sales_accessory_draft?: Maybe<{ __typename?: 'sales_accessory_draft_mutation_response', affected_rows: number }>, insert_sales_consumable_draft?: Maybe<{ __typename?: 'sales_consumable_draft_mutation_response', affected_rows: number }> };

export type UpdateQuotationMutationVariables = Exact<{
  id: Scalars['Int'];
  params?: Maybe<Sales_Quotation_Set_Input>;
}>;


export type UpdateQuotationMutation = { __typename?: 'mutation_root', update_sales_quotation_by_pk?: Maybe<{ __typename?: 'sales_quotation', id: number }> };

export type GetDeliveriesByQueryVariables = Exact<{
  date?: Maybe<Date_Comparison_Exp>;
  status?: Maybe<String_Comparison_Exp>;
}>;


export type GetDeliveriesByQuery = { __typename?: 'query_root', sales_delivery: Array<{ __typename?: 'sales_delivery', id: any, order_id: number, status: string, payment_method: string, predicted_date: any, isReturned: boolean, amount_ttc: any, amount_tva: any, amount_ht: any, ref?: Maybe<string>, createdAt: any, updated_at?: Maybe<any>, company: { __typename?: 'management_company', name: string }, client: { __typename?: 'contact_customer', name: string, mail?: Maybe<string> }, contact?: Maybe<{ __typename?: 'contact_contact', mail?: Maybe<string>, name: string, phone: string }> }> };

export type GetDeliveryByIdQueryVariables = Exact<{
  id: Scalars['uuid'];
}>;


export type GetDeliveryByIdQuery = { __typename?: 'query_root', sales_delivery_by_pk?: Maybe<{ __typename?: 'sales_delivery', id: any, status: string, ref?: Maybe<string>, ref_num?: Maybe<number>, client_id: any, company_id: any, contact_id?: Maybe<any>, payment_method: string, predicted_date: any, isReturned: boolean, order_id: number, createdAt: any, amount_ttc: any, amount_tva: any, amount_ht: any, delivery_lines: Array<{ __typename?: 'sales_delivery_line', id: any, amount: any, delivered: any, product_draft_id: any, product: { __typename?: 'sales_product_draft', type?: Maybe<Sales_Product_Type_Enum>, label: string, product_code: string, price?: Maybe<any>, quantity?: Maybe<any>, count?: Maybe<any>, delivered: any, unit?: Maybe<string> } }>, company: { __typename?: 'management_company', name: string }, client: { __typename?: 'contact_customer', name: string, mail?: Maybe<string>, phone: string, code?: Maybe<string> }, contact?: Maybe<{ __typename?: 'contact_contact', mail?: Maybe<string>, name: string, phone: string }>, order: { __typename?: 'sales_order', ref?: Maybe<string>, ref_num?: Maybe<number> } }> };

export type GetOrderDeliveriesQueryVariables = Exact<{
  draft_id?: Maybe<Int_Comparison_Exp>;
}>;


export type GetOrderDeliveriesQuery = { __typename?: 'query_root', sales_delivery_line: Array<{ __typename?: 'sales_delivery_line', amount: any, delivered: any, id: any, product_draft_id: any, product_draft: { __typename?: 'sales_product_draft', company_name?: Maybe<string>, count?: Maybe<any>, delivered: any, draft_id: number, heigth?: Maybe<any>, id: any, isLaunched?: Maybe<boolean>, isRepeated?: Maybe<boolean>, label: string, m2?: Maybe<any>, ml?: Maybe<any>, price?: Maybe<any>, product_code: string, quantity?: Maybe<any>, status: string, substance_id?: Maybe<any>, total_price?: Maybe<any>, type?: Maybe<Sales_Product_Type_Enum>, unit?: Maybe<string>, warehouse_id?: Maybe<any>, width?: Maybe<any> } }> };

export type GetAllDraftsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetAllDraftsQuery = { __typename?: 'query_root', sales_draft: Array<{ __typename?: 'sales_draft', id: number, date: any, status: Sales_Draft_Status_Enum, order?: Maybe<{ __typename?: 'sales_order', id: number }> }> };

export type GetDraftByIdQueryVariables = Exact<{
  id: Scalars['Int'];
}>;


export type GetDraftByIdQuery = { __typename?: 'query_root', sales_draft_by_pk?: Maybe<{ __typename?: 'sales_draft', date: any, id: number, status: Sales_Draft_Status_Enum, product_drafts: Array<{ __typename?: 'sales_product_draft', id: any, product_code: string, label: string, quantity?: Maybe<any>, m2?: Maybe<any>, ml?: Maybe<any>, unit?: Maybe<string>, width?: Maybe<any>, heigth?: Maybe<any>, price?: Maybe<any>, total_price?: Maybe<any>, company_name?: Maybe<string>, delivered: any }> }> };

export type GetAllInvoicesQueryVariables = Exact<{
  dateStart?: Maybe<Scalars['date']>;
  dateEnd?: Maybe<Scalars['date']>;
}>;


export type GetAllInvoicesQuery = { __typename?: 'query_root', sales_invoice: Array<{ __typename?: 'sales_invoice', id: any, date: any, payment_method: string, amount_tva: any, amount_ttc: any, amount_ht: any, ref?: Maybe<string>, createdAt?: Maybe<any>, updated_at?: Maybe<any>, client: { __typename?: 'contact_customer', name: string, phone: string, mail?: Maybe<string> }, company: { __typename?: 'management_company', id: any, name: string }, contact?: Maybe<{ __typename?: 'contact_contact', mail?: Maybe<string>, name: string, phone: string }>, deliveries: Array<{ __typename?: 'sales_invoice_delivery', delivery_id: any }> }> };

export type GetDeliveriesAmountsQueryVariables = Exact<{
  ids?: Maybe<Array<Scalars['uuid']> | Scalars['uuid']>;
}>;


export type GetDeliveriesAmountsQuery = { __typename?: 'query_root', sales_delivery: Array<{ __typename?: 'sales_delivery', amount_ht: any, amount_ttc: any, amount_tva: any }> };

export type GetDeliveryLinesQueryVariables = Exact<{
  deliveries?: Array<Scalars['uuid']> | Scalars['uuid'];
}>;


export type GetDeliveryLinesQuery = { __typename?: 'query_root', sales_delivery_line: Array<{ __typename?: 'sales_delivery_line', delivered: any, amount: any, product_draft: { __typename?: 'sales_product_draft', type?: Maybe<Sales_Product_Type_Enum>, product_code: string, price?: Maybe<any>, label: string } }> };

export type GetInvoiceByIdQueryVariables = Exact<{
  id: Scalars['uuid'];
}>;


export type GetInvoiceByIdQuery = { __typename?: 'query_root', sales_invoice_by_pk?: Maybe<{ __typename?: 'sales_invoice', id: any, ref?: Maybe<string>, ref_num?: Maybe<number>, client_id: any, company_id: any, contact_id?: Maybe<any>, date: any, payment_method: string, amount_tva: any, amount_ttc: any, amount_ht: any, deliveries: Array<{ __typename?: 'sales_invoice_delivery', delivery_id: any, delivery: { __typename?: 'sales_delivery', ref?: Maybe<string>, ref_num?: Maybe<number> } }>, invoice_lines: Array<{ __typename?: 'sales_invoice_line', id: any, unit_price: any, product_code: string, product_label: string, product_type: string, quantity: any, total: any }>, client: { __typename?: 'contact_customer', name: string, phone: string, mail?: Maybe<string>, code?: Maybe<string> }, company: { __typename?: 'management_company', id: any, name: string }, contact?: Maybe<{ __typename?: 'contact_contact', mail?: Maybe<string>, name: string, phone: string }> }> };

export type GetAllOrdersQueryVariables = Exact<{
  date?: Maybe<Date_Comparison_Exp>;
}>;


export type GetAllOrdersQuery = { __typename?: 'query_root', sales_order: Array<{ __typename?: 'sales_order', delivery_status: string, payment_status: string, id: number, draft_id: number, ref?: Maybe<string>, total_ht: any, total_tax: any, total_ttc: any, date: any, deadline: any, company: { __typename?: 'management_company', name: string, id: any }, customer: { __typename?: 'contact_customer', code?: Maybe<string>, id: any, name: string, phone: string }, salepoint: { __typename?: 'management_salesPoint', name: string } }> };

export type GetOrderByIdQueryVariables = Exact<{
  id: Scalars['Int'];
}>;


export type GetOrderByIdQuery = { __typename?: 'query_root', sales_order_by_pk?: Maybe<{ __typename?: 'sales_order', date: any, deadline: any, draft_id: number, id: number, ref?: Maybe<string>, ref_num?: Maybe<number>, delivery_status: string, payment_status: string, total_ht: any, total_tax: any, total_ttc: any, salepoint: { __typename?: 'management_salesPoint', name: string }, company: { __typename?: 'management_company', name: string, id: any }, contact?: Maybe<{ __typename?: 'contact_contact', code?: Maybe<string>, name: string, phone: string, id: any }>, customer: { __typename?: 'contact_customer', id: any, name: string, phone: string, code?: Maybe<string>, ICE?: Maybe<string> }, draft: { __typename?: 'sales_draft', status: Sales_Draft_Status_Enum, product_drafts: Array<{ __typename?: 'sales_product_draft', id: any, label: string, heigth?: Maybe<any>, company_name?: Maybe<string>, count?: Maybe<any>, delivered: any, warehouse_id?: Maybe<any>, substance_id?: Maybe<any>, m2?: Maybe<any>, ml?: Maybe<any>, price?: Maybe<any>, product_code: string, quantity?: Maybe<any>, status: string, total_price?: Maybe<any>, type?: Maybe<Sales_Product_Type_Enum>, unit?: Maybe<string>, width?: Maybe<any>, isRepeated?: Maybe<boolean>, isLaunched?: Maybe<boolean>, draft_id: number, glass_draft?: Maybe<{ __typename?: 'sales_glass_draft', id: any }>, consumable_draft?: Maybe<{ __typename?: 'sales_consumable_draft', dependent_id?: Maybe<any>, labelFactory?: Maybe<string> }>, service_draft?: Maybe<{ __typename?: 'sales_service_draft', dependent_id?: Maybe<any>, labelFactory?: Maybe<string> }> }> }, payments: Array<{ __typename?: 'sales_payment', amount: any, date: any, deadline?: Maybe<any>, paper_ref?: Maybe<string>, payment_method: string, order_id: number, id: any, comment?: Maybe<string>, company: { __typename?: 'management_company', name: string, id: any }, customer: { __typename?: 'contact_customer', name: string, id: any } }>, deliveries: Array<{ __typename?: 'sales_delivery', id: any, ref?: Maybe<string>, ref_num?: Maybe<number>, amount_ht: any, amount_ttc: any, amount_tva: any, createdAt: any, payment_method: string, isReturned: boolean, client: { __typename?: 'contact_customer', code?: Maybe<string>, name: string }, company: { __typename?: 'management_company', name: string }, delivery_lines: Array<{ __typename?: 'sales_delivery_line', delivered: any, amount: any, product_draft: { __typename?: 'sales_product_draft', id: any, product_code: string, label: string, quantity?: Maybe<any>, total_price?: Maybe<any>, type?: Maybe<Sales_Product_Type_Enum>, width?: Maybe<any>, unit?: Maybe<string>, heigth?: Maybe<any>, company_name?: Maybe<string>, count?: Maybe<any> } }> }> }> };

export type GetPaymentQueryVariables = Exact<{
  order_id: Scalars['Int'];
}>;


export type GetPaymentQuery = { __typename?: 'query_root', sales_payment: Array<{ __typename?: 'sales_payment', amount: any, customer_id: any, date: any, deadline?: Maybe<any>, id: any, payment_method: string, order_id: number, company: { __typename?: 'management_company', name: string, id: any } }> };

export type GetProductsByTypeQueryVariables = Exact<{
  draft_id: Scalars['Int'];
  type?: Maybe<Sales_Product_Type_Enum>;
}>;


export type GetProductsByTypeQuery = { __typename?: 'query_root', sales_product_draft: Array<{ __typename?: 'sales_product_draft', company_id?: Maybe<any>, company_name?: Maybe<string>, draft_id: number, heigth?: Maybe<any>, id: any, label: string, m2?: Maybe<any>, ml?: Maybe<any>, price?: Maybe<any>, product_code: string, quantity?: Maybe<any>, total_price?: Maybe<any>, type?: Maybe<Sales_Product_Type_Enum>, unit?: Maybe<string>, width?: Maybe<any>, glass_draft?: Maybe<{ __typename?: 'sales_glass_draft', id: any }> }> };

export type GetProductsGroupQueryVariables = Exact<{
  draft_id: Scalars['Int'];
  _nin?: Maybe<Array<Sales_Product_Type_Enum> | Sales_Product_Type_Enum>;
}>;


export type GetProductsGroupQuery = { __typename?: 'query_root', sales_product_draft: Array<{ __typename?: 'sales_product_draft', company_id?: Maybe<any>, company_name?: Maybe<string>, draft_id: number, heigth?: Maybe<any>, id: any, label: string, m2?: Maybe<any>, ml?: Maybe<any>, price?: Maybe<any>, product_code: string, quantity?: Maybe<any>, total_price?: Maybe<any>, type?: Maybe<Sales_Product_Type_Enum>, unit?: Maybe<string>, width?: Maybe<any> }> };

export type GetAllQuotationsQueryVariables = Exact<{
  dateStart?: Maybe<Scalars['date']>;
  dateEnd?: Maybe<Scalars['date']>;
}>;


export type GetAllQuotationsQuery = { __typename?: 'query_root', sales_quotation: Array<{ __typename?: 'sales_quotation', status: string, id: number, ref?: Maybe<string>, total_ht: any, total_tax: any, total_ttc: any, date: any, deadline: any, draft_id: number, contact_id?: Maybe<any>, company: { __typename?: 'management_company', name: string, id: any }, customer: { __typename?: 'contact_customer', code?: Maybe<string>, id: any, name: string, phone: string }, salepoint: { __typename?: 'management_salesPoint', name: string } }> };

export type GetQuotationByIdQueryVariables = Exact<{
  id: Scalars['Int'];
}>;


export type GetQuotationByIdQuery = { __typename?: 'query_root', sales_quotation_by_pk?: Maybe<{ __typename?: 'sales_quotation', contact_id?: Maybe<any>, date: any, deadline: any, draft_id: number, id: number, status: string, total_ht: any, total_tax: any, total_ttc: any, company: { __typename?: 'management_company', name: string, id: any }, customer: { __typename?: 'contact_customer', id: any, name: string, phone: string, code?: Maybe<string> }, draft: { __typename?: 'sales_draft', product_drafts: Array<{ __typename?: 'sales_product_draft', id: any, label: string, heigth?: Maybe<any>, company_name?: Maybe<string>, count?: Maybe<any>, delivered: any, m2?: Maybe<any>, ml?: Maybe<any>, price?: Maybe<any>, product_code: string, quantity?: Maybe<any>, status: string, total_price?: Maybe<any>, type?: Maybe<Sales_Product_Type_Enum>, unit?: Maybe<string>, width?: Maybe<any>, glass_draft?: Maybe<{ __typename?: 'sales_glass_draft', id: any }>, consumable_draft?: Maybe<{ __typename?: 'sales_consumable_draft', dependent_id?: Maybe<any>, labelFactory?: Maybe<string> }>, service_draft?: Maybe<{ __typename?: 'sales_service_draft', dependent_id?: Maybe<any>, labelFactory?: Maybe<string> }> }> }, salepoint: { __typename?: 'management_salesPoint', id: any, name: string } }> };

export const Product_Product_Glass_ViewFragmentFragmentDoc = gql`
    fragment product_product_glass_viewFragment on product_product_glass_view {
  code
  label
  price
  unit
}
    `;
export const Product_Product_Accessory_ViewFragmentFragmentDoc = gql`
    fragment product_product_accessory_viewFragment on product_product_accessory_view {
  code
  label
  price
  unit
}
    `;
export const Product_Product_Consumable_ViewFragmentFragmentDoc = gql`
    fragment product_product_consumable_viewFragment on product_product_consumable_view {
  code
  label
  price
  unit
}
    `;
export const Stock_WarehouseFragmentFragmentDoc = gql`
    fragment stock_warehouseFragment on stock_warehouse {
  name
  id
  company {
    name
    id
  }
  salesPoint {
    name
    id
  }
}
    `;
export const Product_ProductGlassFragmentFragmentDoc = gql`
    fragment product_productGlassFragment on product_product_accessory_view {
  code
  label
  price
  unit
}
    `;
export const Management_SalesPointFragmentFragmentDoc = gql`
    fragment management_salesPointFragment on management_salesPoint {
  name
  id
}
    `;
export const Management_CompanyFragmentFragmentDoc = gql`
    fragment management_companyFragment on management_company {
  name
  id
}
    `;
export const Product_ProductFragmentFragmentDoc = gql`
    fragment product_productFragment on product_product {
  code
  label
  unit
  price
}
    `;
export const AddExpenseDocument = gql`
    mutation addExpense($cash_box_id: Int!, $amountSpent: numeric!, $category: String, $employee_id: String, $name: String, $note: String, $date: timestamptz) {
  insert_cash_register_expenses_one(
    object: {amountSpent: $amountSpent, cash_box_id: $cash_box_id, category: $category, employee_id: $employee_id, name: $name, note: $note, date: $date}
  ) {
    id
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class AddExpenseGQL extends Apollo.Mutation<AddExpenseMutation, AddExpenseMutationVariables> {
    document = AddExpenseDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const DeleteExpensesByIdDocument = gql`
    mutation deleteExpensesById($ids: [Int!]! = []) {
  delete_cash_register_expenses(where: {id: {_in: $ids}}) {
    affected_rows
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class DeleteExpensesByIdGQL extends Apollo.Mutation<DeleteExpensesByIdMutation, DeleteExpensesByIdMutationVariables> {
    document = DeleteExpensesByIdDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetClientOrdersDocument = gql`
    query GetClientOrders($client: uuid) {
  sales_order(where: {customer_id: {_eq: $client}}) {
    company {
      name
      id
    }
    customer {
      code
      id
      name
      phone
    }
    delivery_status
    payment_status
    id
    draft_id
    ref
    total_ht
    total_tax
    total_ttc
    date
    deadline
    salepoint {
      name
    }
    ref
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetClientOrdersGQL extends Apollo.Query<GetClientOrdersQuery, GetClientOrdersQueryVariables> {
    document = GetClientOrdersDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const InsertCashBoxDocument = gql`
    mutation insertCashBox($name: String!, $salepoint_id: uuid!) {
  insert_cash_register_cash_box_one(
    object: {name: $name, salepoint_id: $salepoint_id}
  ) {
    id
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class InsertCashBoxGQL extends Apollo.Mutation<InsertCashBoxMutation, InsertCashBoxMutationVariables> {
    document = InsertCashBoxDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetCashBoxByIdDocument = gql`
    query getCashBoxById($id: Int!, $salepoint_id: uuid!) {
  cash_register_cash_box_by_pk(id: $id) {
    balance
    createdAt
    salepoint_id
    expenses {
      amountSpent
      category
      createdAt
      date
      employee {
        firstname
        lastname
        username
      }
      employee_id
      id
      name
      note
    }
    createdAt
    updatedAt
    name
    id
    salepoint {
      name
    }
  }
  sales_payment(where: {order: {salepoint_id: {_eq: $salepoint_id}}}) {
    id
    amount
    comment
    company {
      name
    }
    customer {
      name
    }
    order_id
    deadline
    date
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetCashBoxByIdGQL extends Apollo.Query<GetCashBoxByIdQuery, GetCashBoxByIdQueryVariables> {
    document = GetCashBoxByIdDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetCustomerSituationDocument = gql`
    query getCustomerSituation($customer_id: uuid) {
  customer_situation(where: {customer_id: {_eq: $customer_id}}) {
    order_ref
    customer_id
    total_ttc
    paid
    credit
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetCustomerSituationGQL extends Apollo.Query<GetCustomerSituationQuery, GetCustomerSituationQueryVariables> {
    document = GetCustomerSituationDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetExpensesCategoriesDocument = gql`
    query getExpensesCategories {
  cash_register_expense_category {
    key
    value
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetExpensesCategoriesGQL extends Apollo.Query<GetExpensesCategoriesQuery, GetExpensesCategoriesQueryVariables> {
    document = GetExpensesCategoriesDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const DashboardQueryDocument = gql`
    query DashboardQuery($date1: date, $date2: date) {
  contact_customer_aggregate {
    aggregate {
      count
    }
  }
  management_userProfile_aggregate {
    aggregate {
      count
    }
  }
  stock_transfer_order_aggregate(where: {status: {_eq: "En attente"}}) {
    aggregate {
      count
    }
  }
  sales_order_aggregate(where: {date: {_gte: $date1, _lte: $date2}}) {
    aggregate {
      sum {
        total_ttc
      }
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class DashboardQueryGQL extends Apollo.Query<DashboardQueryQuery, DashboardQueryQueryVariables> {
    document = DashboardQueryDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetAccessoriesSubstancesDocument = gql`
    query GetAccessoriesSubstances($id: uuid!) {
  stock_warehouse_substance(
    where: {warehouseid: {_eq: $id}, substance: {type: {_eq: accessory}}}
  ) {
    quantity
    substance {
      productAccessory {
        code
        label
        substanceid
        unit
      }
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetAccessoriesSubstancesGQL extends Apollo.Query<GetAccessoriesSubstancesQuery, GetAccessoriesSubstancesQueryVariables> {
    document = GetAccessoriesSubstancesDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetGlassesSubstancesDocument = gql`
    query GetGlassesSubstances($id: uuid!) {
  stock_warehouse_substance(
    where: {warehouseid: {_eq: $id}, substance: {type: {_eq: glass}}}
  ) {
    quantity
    substance {
      productGlass {
        code
        label
        substanceid
        unit
      }
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetGlassesSubstancesGQL extends Apollo.Query<GetGlassesSubstancesQuery, GetGlassesSubstancesQueryVariables> {
    document = GetGlassesSubstancesDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetMyUserDocument = gql`
    query getMyUser($id: String!) {
  management_userProfile_by_pk(id: $id) {
    active
    createdAt
    email
    firstname
    id
    lastname
    phone
    role
    username
    SalesPointsid
    CIN
    SalesPoint {
      name
      id
      isPrincipale
      warehouses {
        name
        id
        companyid
        company {
          name
        }
      }
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetMyUserGQL extends Apollo.Query<GetMyUserQuery, GetMyUserQueryVariables> {
    document = GetMyUserDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetOrdersBySalepointDocument = gql`
    query getOrdersBySalepoint($salepoint_id: uuid!) {
  sales_order(
    where: {salepoint_id: {_eq: $salepoint_id}, payment_status: {_neq: "payé"}}
  ) {
    id
    ref
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetOrdersBySalepointGQL extends Apollo.Query<GetOrdersBySalepointQuery, GetOrdersBySalepointQueryVariables> {
    document = GetOrdersBySalepointDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetShortCompaniesDocument = gql`
    query GetShortCompanies {
  management_company {
    id
    name
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetShortCompaniesGQL extends Apollo.Query<GetShortCompaniesQuery, GetShortCompaniesQueryVariables> {
    document = GetShortCompaniesDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetShortEmployeesDocument = gql`
    query getShortEmployees {
  management_userProfile {
    id
    username
    firstname
    lastname
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetShortEmployeesGQL extends Apollo.Query<GetShortEmployeesQuery, GetShortEmployeesQueryVariables> {
    document = GetShortEmployeesDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetShortProvidersDocument = gql`
    query GetShortProviders {
  contact_provider {
    code
    name
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetShortProvidersGQL extends Apollo.Query<GetShortProvidersQuery, GetShortProvidersQueryVariables> {
    document = GetShortProvidersDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GeShortSalePointsDocument = gql`
    query GeShortSalePoints($ids: uuid_comparison_exp) {
  management_salesPoint(where: {id: $ids}) {
    name
    id
    isPrincipale
    cash_boxes {
      id
      name
    }
    warehouses {
      name
      id
      companyid
      company {
        name
      }
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GeShortSalePointsGQL extends Apollo.Query<GeShortSalePointsQuery, GeShortSalePointsQueryVariables> {
    document = GeShortSalePointsDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetShortSubstancesDocument = gql`
    query GetShortSubstances {
  product_product {
    label
    code
    glass {
      substanceid
    }
    consumable {
      substanceid
    }
    accessory {
      substanceid
    }
    price
    priceMax
    priceMin
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetShortSubstancesGQL extends Apollo.Query<GetShortSubstancesQuery, GetShortSubstancesQueryVariables> {
    document = GetShortSubstancesDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetShortWArehousesDocument = gql`
    query GetShortWArehouses {
  stock_warehouse {
    name
    id
    companyid
    company {
      name
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetShortWArehousesGQL extends Apollo.Query<GetShortWArehousesQuery, GetShortWArehousesQueryVariables> {
    document = GetShortWArehousesDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetProductsDocument = gql`
    query GetProducts {
  product_product(where: {_not: {consumable: {category: {_eq: MP}}}}) {
    code
    label
    price
    priceMax
    priceMin
    unit
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetProductsGQL extends Apollo.Query<GetProductsQuery, GetProductsQueryVariables> {
    document = GetProductsDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const ChangeNotificationStateDocument = gql`
    mutation changeNotificationState($objects: [notification_notification_status_insert_input!]!) {
  insert_notification_notification_status(
    objects: $objects
    on_conflict: {constraint: notification_status_notification_id_user_id_key, update_columns: [hide, read]}
  ) {
    affected_rows
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class ChangeNotificationStateGQL extends Apollo.Mutation<ChangeNotificationStateMutation, ChangeNotificationStateMutationVariables> {
    document = ChangeNotificationStateDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const NotificationQueryDocument = gql`
    query NotificationQuery($user_id: String, $role: management_user_role_enum) {
  notification_notification(
    where: {_or: [{role: {_eq: $role}}, {user_id: {_eq: $user_id}}, {role: {_is_null: true}, user_id: {_is_null: true}}]}
  ) {
    id
    message
    priority
    route
    ref
    role
    subject
    createdAt
    title
    user_id
    notification_status(where: {user_id: {_eq: $user_id}}) {
      id
      read
      hide
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class NotificationQueryGQL extends Apollo.Query<NotificationQueryQuery, NotificationQueryQueryVariables> {
    document = NotificationQueryDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const NotificationSubscriptionDocument = gql`
    subscription NotificationSubscription($user_id: String, $role: management_user_role_enum) {
  notification_notification(
    where: {_or: [{role: {_eq: $role}}, {user_id: {_eq: $user_id}}, {role: {_is_null: true}, user_id: {_is_null: true}}]}
  ) {
    id
    message
    priority
    route
    ref
    role
    subject
    createdAt
    title
    user_id
    notification_status(where: {user_id: {_eq: $user_id}}) {
      id
      read
      hide
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class NotificationSubscriptionGQL extends Apollo.Subscription<NotificationSubscriptionSubscription, NotificationSubscriptionSubscriptionVariables> {
    document = NotificationSubscriptionDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const WarehouseOnetimeDocument = gql`
    query WarehouseOnetime {
  stock_warehouse {
    id
    name
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class WarehouseOnetimeGQL extends Apollo.Query<WarehouseOnetimeQuery, WarehouseOnetimeQueryVariables> {
    document = WarehouseOnetimeDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const WarehouseSubscriptionDocument = gql`
    subscription WarehouseSubscription {
  stock_warehouse {
    id
    name
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class WarehouseSubscriptionGQL extends Apollo.Subscription<WarehouseSubscriptionSubscription, WarehouseSubscriptionSubscriptionVariables> {
    document = WarehouseSubscriptionDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const AddContactAddressDocument = gql`
    mutation AddContactAddress($address: contact_address_insert_input!, $id: uuid) {
  insert_contact_contact_address_one(
    object: {address: {data: $address}, contactid: $id}
  ) {
    address {
      address
      city
      id
      zip
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class AddContactAddressGQL extends Apollo.Mutation<AddContactAddressMutation, AddContactAddressMutationVariables> {
    document = AddContactAddressDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const AddCustomerAddressDocument = gql`
    mutation AddCustomerAddress($address: contact_address_insert_input!, $id: uuid) {
  insert_contact_customer_address_one(
    object: {address: {data: $address}, customerid: $id}
  ) {
    address {
      address
      city
      id
      zip
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class AddCustomerAddressGQL extends Apollo.Mutation<AddCustomerAddressMutation, AddCustomerAddressMutationVariables> {
    document = AddCustomerAddressDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const AddCustomerContactDocument = gql`
    mutation AddCustomerContact($id: uuid!, $contact: contact_contact_insert_input!) {
  insert_contact_customer_contact_one(
    object: {customerid: $id, contact: {data: $contact}}
  ) {
    contact {
      code
      mail
      name
      note
      phone
      id
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class AddCustomerContactGQL extends Apollo.Mutation<AddCustomerContactMutation, AddCustomerContactMutationVariables> {
    document = AddCustomerContactDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const AddProviderAddressDocument = gql`
    mutation AddProviderAddress($address: contact_address_insert_input!, $id: uuid) {
  insert_contact_provider_address_one(
    object: {address: {data: $address}, providerid: $id}
  ) {
    address {
      address
      city
      id
      zip
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class AddProviderAddressGQL extends Apollo.Mutation<AddProviderAddressMutation, AddProviderAddressMutationVariables> {
    document = AddProviderAddressDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const AddProviderContactDocument = gql`
    mutation AddProviderContact($id: uuid!, $contact: contact_contact_insert_input!) {
  insert_contact_provider_contact_one(
    object: {providerid: $id, contact: {data: $contact}}
  ) {
    contact {
      code
      mail
      name
      note
      phone
      id
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class AddProviderContactGQL extends Apollo.Mutation<AddProviderContactMutation, AddProviderContactMutationVariables> {
    document = AddProviderContactDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const AffectCustomerContactDocument = gql`
    mutation AffectCustomerContact($affectedContacts: [contact_customer_contact_insert_input!]!) {
  insert_contact_customer_contact(objects: $affectedContacts) {
    returning {
      contact {
        code
        id
        mail
        name
        note
        phone
      }
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class AffectCustomerContactGQL extends Apollo.Mutation<AffectCustomerContactMutation, AffectCustomerContactMutationVariables> {
    document = AffectCustomerContactDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const AffectProviderContactDocument = gql`
    mutation AffectProviderContact($affectedContacts: [contact_provider_contact_insert_input!]!) {
  insert_contact_provider_contact(objects: $affectedContacts) {
    returning {
      contact {
        code
        id
        mail
        name
        note
        phone
      }
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class AffectProviderContactGQL extends Apollo.Mutation<AffectProviderContactMutation, AffectProviderContactMutationVariables> {
    document = AffectProviderContactDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const DeleteContactDocument = gql`
    mutation DeleteContact($id: uuid!) {
  delete_contact_contact_by_pk(id: $id) {
    id
    name
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class DeleteContactGQL extends Apollo.Mutation<DeleteContactMutation, DeleteContactMutationVariables> {
    document = DeleteContactDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const DeleteContactAddressDocument = gql`
    mutation DeleteContactAddress($addressid: uuid!, $id: uuid!) {
  delete_contact_contact_address_by_pk(addressid: $addressid, contactid: $id) {
    addressid
    contactid
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class DeleteContactAddressGQL extends Apollo.Mutation<DeleteContactAddressMutation, DeleteContactAddressMutationVariables> {
    document = DeleteContactAddressDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const DeleteCustomerDocument = gql`
    mutation DeleteCustomer($id: uuid!) {
  delete_contact_customer_by_pk(id: $id) {
    id
    name
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class DeleteCustomerGQL extends Apollo.Mutation<DeleteCustomerMutation, DeleteCustomerMutationVariables> {
    document = DeleteCustomerDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const DeleteCustomerAddressDocument = gql`
    mutation DeleteCustomerAddress($addressid: uuid!, $id: uuid!) {
  delete_contact_customer_address_by_pk(addressid: $addressid, customerid: $id) {
    addressid
    customerid
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class DeleteCustomerAddressGQL extends Apollo.Mutation<DeleteCustomerAddressMutation, DeleteCustomerAddressMutationVariables> {
    document = DeleteCustomerAddressDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const DeleteCustomerContactDocument = gql`
    mutation DeleteCustomerContact($contactid: uuid!, $id: uuid!) {
  delete_contact_customer_contact_by_pk(contactid: $contactid, customerid: $id) {
    contactid
    customerid
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class DeleteCustomerContactGQL extends Apollo.Mutation<DeleteCustomerContactMutation, DeleteCustomerContactMutationVariables> {
    document = DeleteCustomerContactDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const DeleteManyContactsDocument = gql`
    mutation DeleteManyContacts($ids: [uuid!]) {
  delete_contact_contact(where: {id: {_in: $ids}}) {
    returning {
      id
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class DeleteManyContactsGQL extends Apollo.Mutation<DeleteManyContactsMutation, DeleteManyContactsMutationVariables> {
    document = DeleteManyContactsDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const DeleteManyCustomersDocument = gql`
    mutation DeleteManyCustomers($ids: [uuid!]!) {
  delete_contact_customer(where: {id: {_in: $ids}}) {
    returning {
      id
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class DeleteManyCustomersGQL extends Apollo.Mutation<DeleteManyCustomersMutation, DeleteManyCustomersMutationVariables> {
    document = DeleteManyCustomersDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const DeleteManyProvidersDocument = gql`
    mutation DeleteManyProviders($ids: [uuid!]) {
  delete_contact_provider(where: {id: {_in: $ids}}) {
    returning {
      id
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class DeleteManyProvidersGQL extends Apollo.Mutation<DeleteManyProvidersMutation, DeleteManyProvidersMutationVariables> {
    document = DeleteManyProvidersDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const DeleteProviderDocument = gql`
    mutation DeleteProvider($id: uuid!) {
  delete_contact_provider_by_pk(id: $id) {
    id
    name
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class DeleteProviderGQL extends Apollo.Mutation<DeleteProviderMutation, DeleteProviderMutationVariables> {
    document = DeleteProviderDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const DeleteProviderAddressDocument = gql`
    mutation DeleteProviderAddress($addressid: uuid!, $id: uuid!) {
  delete_contact_provider_address_by_pk(addressid: $addressid, providerid: $id) {
    addressid
    providerid
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class DeleteProviderAddressGQL extends Apollo.Mutation<DeleteProviderAddressMutation, DeleteProviderAddressMutationVariables> {
    document = DeleteProviderAddressDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const DeleteProviderContactDocument = gql`
    mutation DeleteProviderContact($contactid: uuid!, $id: uuid!) {
  delete_contact_provider_contact_by_pk(contactid: $contactid, providerid: $id) {
    contactid
    providerid
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class DeleteProviderContactGQL extends Apollo.Mutation<DeleteProviderContactMutation, DeleteProviderContactMutationVariables> {
    document = DeleteProviderContactDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const InsertContactDocument = gql`
    mutation InsertContact($code: String, $mail: String, $name: String, $note: String, $phone: String, $addresses: [contact_contact_address_insert_input!]! = [], $customers: [contact_customer_contact_insert_input!]! = [], $providers: [contact_provider_contact_insert_input!]! = []) {
  insert_contact_contact_one(
    object: {code: $code, mail: $mail, name: $name, note: $note, phone: $phone, contact_addresses: {data: $addresses}, contact_customers: {data: $customers}, contact_providers: {data: $providers}}
  ) {
    id
    code
    mail
    name
    note
    phone
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class InsertContactGQL extends Apollo.Mutation<InsertContactMutation, InsertContactMutationVariables> {
    document = InsertContactDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const InsertCustomerDocument = gql`
    mutation InsertCustomer($FAX: String, $code: String, $mail: String, $name: String, $note: String, $phone: String, $website: String, $addresses: [contact_customer_address_insert_input!]! = [], $ICE: String, $IF: String, $type: String, $contacts: [contact_customer_contact_insert_input!]! = []) {
  insert_contact_customer_one(
    object: {FAX: $FAX, code: $code, mail: $mail, name: $name, note: $note, phone: $phone, website: $website, customer_addresses: {data: $addresses}, ICE: $ICE, IF: $IF, type: $type, customer_contacts: {data: $contacts}}
  ) {
    id
    ICE
    IF
    code
    mail
    name
    phone
    type
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class InsertCustomerGQL extends Apollo.Mutation<InsertCustomerMutation, InsertCustomerMutationVariables> {
    document = InsertCustomerDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const InsertProviderDocument = gql`
    mutation InsertProvider($FAX: String, $code: String, $mail: String, $name: String, $note: String, $phone: String, $website: String, $addresses: [contact_provider_address_insert_input!]! = [], $contacts: [contact_provider_contact_insert_input!]! = []) {
  insert_contact_provider_one(
    object: {FAX: $FAX, code: $code, mail: $mail, name: $name, note: $note, phone: $phone, website: $website, provider_addresses: {data: $addresses}, provider_contacts: {data: $contacts}}
  ) {
    id
    code
    name
    note
    phone
    mail
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class InsertProviderGQL extends Apollo.Mutation<InsertProviderMutation, InsertProviderMutationVariables> {
    document = InsertProviderDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const UpdateContactDocument = gql`
    mutation updateContact($id: uuid!, $code: String, $mail: String, $name: String, $note: String, $phone: String) {
  update_contact_contact_by_pk(
    pk_columns: {id: $id}
    _set: {code: $code, mail: $mail, name: $name, note: $note, phone: $phone}
  ) {
    id
    code
    mail
    name
    note
    phone
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class UpdateContactGQL extends Apollo.Mutation<UpdateContactMutation, UpdateContactMutationVariables> {
    document = UpdateContactDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const UpdateContactAddressesDocument = gql`
    mutation updateContactAddresses($contactAddresses: [contact_contact_address_insert_input!]!) {
  insert_contact_contact_address(objects: $contactAddresses) {
    affected_rows
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class UpdateContactAddressesGQL extends Apollo.Mutation<UpdateContactAddressesMutation, UpdateContactAddressesMutationVariables> {
    document = UpdateContactAddressesDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const UpdateCustomerDocument = gql`
    mutation updateCustomer($id: uuid!, $FAX: String, $code: String, $mail: String, $name: String, $note: String, $phone: String, $website: String, $ICE: String, $IF: String, $type: String) {
  update_contact_customer_by_pk(
    pk_columns: {id: $id}
    _set: {FAX: $FAX, code: $code, mail: $mail, name: $name, note: $note, phone: $phone, website: $website, ICE: $ICE, IF: $IF, type: $type}
  ) {
    id
    ICE
    IF
    code
    mail
    name
    phone
    type
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class UpdateCustomerGQL extends Apollo.Mutation<UpdateCustomerMutation, UpdateCustomerMutationVariables> {
    document = UpdateCustomerDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const UpdateProviderDocument = gql`
    mutation updateProvider($id: uuid!, $FAX: String, $code: String, $mail: String, $name: String, $note: String, $phone: String, $website: String) {
  update_contact_provider_by_pk(
    pk_columns: {id: $id}
    _set: {FAX: $FAX, code: $code, mail: $mail, name: $name, note: $note, phone: $phone, website: $website}
  ) {
    id
    code
    name
    note
    phone
    mail
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class UpdateProviderGQL extends Apollo.Mutation<UpdateProviderMutation, UpdateProviderMutationVariables> {
    document = UpdateProviderDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetAllContactsDocument = gql`
    query GetAllContacts {
  contact_contact {
    id
    code
    mail
    name
    note
    phone
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetAllContactsGQL extends Apollo.Query<GetAllContactsQuery, GetAllContactsQueryVariables> {
    document = GetAllContactsDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetAllCustomersDocument = gql`
    query GetAllCustomers {
  contact_customer {
    id
    ICE
    IF
    code
    mail
    name
    phone
    type
    contacts {
      id
      code
      mail
      name
      note
      phone
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetAllCustomersGQL extends Apollo.Query<GetAllCustomersQuery, GetAllCustomersQueryVariables> {
    document = GetAllCustomersDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetAllProvidersDocument = gql`
    query GetAllProviders {
  contact_provider {
    id
    code
    name
    note
    phone
    mail
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetAllProvidersGQL extends Apollo.Query<GetAllProvidersQuery, GetAllProvidersQueryVariables> {
    document = GetAllProvidersDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetContactByIdDocument = gql`
    query GetContactById($id: uuid!) {
  contact_contact_by_pk(id: $id) {
    id
    code
    mail
    name
    phone
    note
    addresses {
      id
      address
      city
      zip
    }
    cutomers {
      id
      code
      name
      phone
      mail
      note
    }
    providers {
      id
      code
      name
      phone
      mail
      note
    }
    createdAt
    createdBy
    updatedBy
    updatedAt
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetContactByIdGQL extends Apollo.Query<GetContactByIdQuery, GetContactByIdQueryVariables> {
    document = GetContactByIdDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetCustomerByIdDocument = gql`
    query GetCustomerById($id: uuid!) {
  contact_customer_by_pk(id: $id) {
    id
    ICE
    IF
    code
    mail
    name
    phone
    note
    website
    FAX
    type
    addresses {
      id
      address
      city
      zip
    }
    contacts {
      id
      code
      name
      phone
      mail
      note
    }
    createdAt
    createdBy
    updatedBy
    updatedAt
    orders_aggregate {
      aggregate {
        count(columns: id)
        sum {
          total_ht
          total_tax
          total_ttc
        }
      }
      nodes {
        company {
          name
          id
        }
        delivery_status
        payment_status
        id
        draft_id
        ref
        total_ht
        total_tax
        total_ttc
        date
        deadline
        salepoint {
          name
        }
        ref
      }
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetCustomerByIdGQL extends Apollo.Query<GetCustomerByIdQuery, GetCustomerByIdQueryVariables> {
    document = GetCustomerByIdDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetProviderByIdDocument = gql`
    query GetProviderById($id: uuid!) {
  contact_provider_by_pk(id: $id) {
    id
    code
    name
    note
    phone
    mail
    FAX
    website
    contacts {
      id
      code
      name
      phone
      mail
      note
    }
    addresses {
      id
      address
      city
      zip
    }
    createdAt
    createdBy
    updatedAt
    updatedBy
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetProviderByIdGQL extends Apollo.Query<GetProviderByIdQuery, GetProviderByIdQueryVariables> {
    document = GetProviderByIdDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const DeleteManyWarehousesDocument = gql`
    mutation DeleteManyWarehouses($ids: [uuid!]) {
  delete_stock_warehouse(where: {id: {_in: $ids}}) {
    returning {
      id
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class DeleteManyWarehousesGQL extends Apollo.Mutation<DeleteManyWarehousesMutation, DeleteManyWarehousesMutationVariables> {
    document = DeleteManyWarehousesDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const DeleteTransferOrdersDocument = gql`
    mutation DeleteTransferOrders($ids: [Int!]) {
  delete_stock_transfer_order(where: {id: {_in: $ids}}) {
    affected_rows
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class DeleteTransferOrdersGQL extends Apollo.Mutation<DeleteTransferOrdersMutation, DeleteTransferOrdersMutationVariables> {
    document = DeleteTransferOrdersDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const InsertStockAdjustmentDocument = gql`
    mutation InsertStockAdjustment($oldQuantity: Float, $newQuantity: Float, $substance_id: uuid!, $warehouse_id: uuid!, $reason: stock_adjustment_reasons_enum = inventaire, $note: String, $update_columns: [stock_warehouse_substance_update_column!] = quantity, $createdBy: String) {
  insert_stock_warehouse_substance_one(
    object: {warehouseid: $warehouse_id, substanceid: $substance_id, quantity: $newQuantity, stock_adjustments: {data: {newQuantity: $newQuantity, note: $note, oldQuantity: $oldQuantity, reason: $reason, createdBy: $createdBy}, on_conflict: {constraint: stock_adjustment_pkey, update_columns: id}}}
    on_conflict: {constraint: warehouse_subsctance_pkey, update_columns: $update_columns}
  ) {
    quantity
    quantity_min
    quantity_planned
    stock_adjustments {
      id
      ref
      date
      newQuantity
      oldQuantity
      reason
      userProfile {
        username
        role
      }
    }
    substance {
      id
      type
      productAccessory {
        code
        label
        unit
      }
      productConsumable {
        code
        label
        unit
      }
      productGlass {
        code
        label
        unit
      }
    }
    warehouse {
      id
      name
      company {
        name
      }
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class InsertStockAdjustmentGQL extends Apollo.Mutation<InsertStockAdjustmentMutation, InsertStockAdjustmentMutationVariables> {
    document = InsertStockAdjustmentDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const InsertTranfserDocument = gql`
    mutation InsertTranfser($date: date, $order_itemid: uuid, $quantity: Float, $status: String, $substanceid: uuid, $warehouseid: uuid) {
  createTransferItem(
    date: $date
    order_itemid: $order_itemid
    quantity: $quantity
    status: $status
    substanceid: $substanceid
    warehouseid: $warehouseid
  ) {
    date
    id
    quantity
    status
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class InsertTranfserGQL extends Apollo.Mutation<InsertTranfserMutation, InsertTranfserMutationVariables> {
    document = InsertTranfserDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const InsertTransferItemDocument = gql`
    mutation InsertTransferItem($date: date, $status: String, $quantity: Float, $order_itemid: uuid) {
  insert_stock_item_tranfer_one(
    object: {date: $date, status: $status, quantity: $quantity, order_itemid: $order_itemid}
  ) {
    tranfer_order_item {
      transfer_order {
        id
        date
        deadline
        createdAt
        createdBy
        updatedAt
        updatedBy
        status
        fromwarehouse {
          name
        }
        towarehouse {
          name
        }
        order_items_aggregate {
          aggregate {
            count(columns: id)
            sum {
              quantity
            }
          }
          nodes {
            quantity
            status
            id
            substance {
              productAccessory {
                ...product_product_accessory_viewFragment
              }
              productGlass {
                ...product_product_glass_viewFragment
              }
            }
            item_tranfers_aggregate {
              aggregate {
                sum {
                  quantity
                }
              }
              nodes {
                quantity
                status
                id
                date
                confirmed
              }
            }
          }
        }
      }
    }
  }
}
    ${Product_Product_Accessory_ViewFragmentFragmentDoc}
${Product_Product_Glass_ViewFragmentFragmentDoc}`;

  @Injectable({
    providedIn: 'root'
  })
  export class InsertTransferItemGQL extends Apollo.Mutation<InsertTransferItemMutation, InsertTransferItemMutationVariables> {
    document = InsertTransferItemDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const InsertTransferOrderDocument = gql`
    mutation InsertTransferOrder($date: date!, $deadline: date, $fromWarehouseid: uuid!, $toWarehouseid: uuid!, $substances: [stock_order_item_insert_input!]!) {
  insert_stock_transfer_order_one(
    object: {date: $date, deadline: $deadline, fromWarehouseid: $fromWarehouseid, toWarehouseid: $toWarehouseid, order_items: {data: $substances, on_conflict: {constraint: accessoryTranferOrder_pkey, update_columns: substanceid}}}
  ) {
    date
    deadline
    fromwarehouse {
      name
      id
    }
    towarehouse {
      name
      id
    }
    status
    id
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class InsertTransferOrderGQL extends Apollo.Mutation<InsertTransferOrderMutation, InsertTransferOrderMutationVariables> {
    document = InsertTransferOrderDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const InsertWarehouseDocument = gql`
    mutation InsertWarehouse($companyid: uuid!, $name: String!, $salesPointid: uuid) {
  insert_stock_warehouse_one(
    object: {companyid: $companyid, name: $name, salesPointid: $salesPointid}
  ) {
    name
    id
    company {
      name
      id
    }
    salesPoint {
      name
      id
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class InsertWarehouseGQL extends Apollo.Mutation<InsertWarehouseMutation, InsertWarehouseMutationVariables> {
    document = InsertWarehouseDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const UpdateStockItemTranferDocument = gql`
    mutation UpdateStockItemTranfer($id: uuid!, $date: date, $quantity: Float, $status: String, $confirmed: Boolean) {
  update_stock_item_tranfer_by_pk(
    pk_columns: {id: $id}
    _set: {date: $date, quantity: $quantity, status: $status, confirmed: $confirmed}
  ) {
    tranfer_order_item {
      transfer_order {
        id
        date
        deadline
        createdAt
        createdBy
        updatedAt
        updatedBy
        status
        fromwarehouse {
          name
        }
        towarehouse {
          name
        }
        order_items_aggregate {
          aggregate {
            count(columns: id)
            sum {
              quantity
            }
          }
          nodes {
            quantity
            status
            id
            substance {
              productAccessory {
                ...product_product_accessory_viewFragment
              }
              productGlass {
                ...product_product_glass_viewFragment
              }
            }
            item_tranfers_aggregate {
              aggregate {
                sum {
                  quantity
                }
              }
              nodes {
                quantity
                status
                id
                date
                confirmed
              }
            }
          }
        }
      }
    }
  }
}
    ${Product_Product_Accessory_ViewFragmentFragmentDoc}
${Product_Product_Glass_ViewFragmentFragmentDoc}`;

  @Injectable({
    providedIn: 'root'
  })
  export class UpdateStockItemTranferGQL extends Apollo.Mutation<UpdateStockItemTranferMutation, UpdateStockItemTranferMutationVariables> {
    document = UpdateStockItemTranferDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const UpdateTransferOrderDocument = gql`
    mutation UpdateTransferOrder($id: Int!, $date: date, $deadline: date, $fromWarehouseid: uuid, $status: String, $toWarehouseid: uuid) {
  update_stock_transfer_order_by_pk(
    pk_columns: {id: $id}
    _set: {date: $date, deadline: $deadline, fromWarehouseid: $fromWarehouseid, status: $status, toWarehouseid: $toWarehouseid}
  ) {
    date
    deadline
    fromwarehouse {
      name
      id
    }
    towarehouse {
      name
      id
    }
    status
    id
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class UpdateTransferOrderGQL extends Apollo.Mutation<UpdateTransferOrderMutation, UpdateTransferOrderMutationVariables> {
    document = UpdateTransferOrderDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const UpdateStockOrderItemDocument = gql`
    mutation updateStockOrderItem($id: uuid!, $quantity: Float, $status: String) {
  update_stock_order_item_by_pk(
    pk_columns: {id: $id}
    _set: {quantity: $quantity, status: $status}
  ) {
    transfer_order {
      id
      date
      deadline
      createdAt
      createdBy
      updatedAt
      updatedBy
      status
      fromwarehouse {
        name
      }
      towarehouse {
        name
      }
      order_items_aggregate {
        aggregate {
          count(columns: id)
          sum {
            quantity
          }
        }
        nodes {
          quantity
          status
          id
          substance {
            productAccessory {
              ...product_product_accessory_viewFragment
            }
            productGlass {
              ...product_product_glass_viewFragment
            }
          }
          item_tranfers_aggregate {
            aggregate {
              sum {
                quantity
              }
            }
            nodes {
              quantity
              status
              id
              date
              confirmed
            }
          }
        }
      }
    }
  }
}
    ${Product_Product_Accessory_ViewFragmentFragmentDoc}
${Product_Product_Glass_ViewFragmentFragmentDoc}`;

  @Injectable({
    providedIn: 'root'
  })
  export class UpdateStockOrderItemGQL extends Apollo.Mutation<UpdateStockOrderItemMutation, UpdateStockOrderItemMutationVariables> {
    document = UpdateStockOrderItemDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const UpdateWarehouseDocument = gql`
    mutation UpdateWarehouse($id: uuid!, $companyid: uuid!, $name: String!, $salesPointid: uuid) {
  update_stock_warehouse_by_pk(
    pk_columns: {id: $id}
    _set: {companyid: $companyid, name: $name, salesPointid: $salesPointid}
  ) {
    name
    id
    company {
      name
      id
    }
    salesPoint {
      name
      id
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class UpdateWarehouseGQL extends Apollo.Mutation<UpdateWarehouseMutation, UpdateWarehouseMutationVariables> {
    document = UpdateWarehouseDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetAccessoryWarehousesByIdDocument = gql`
    query GetAccessoryWarehousesById($id: uuid!) {
  stock_warehouse_substance_aggregate(where: {substance: {id: {_eq: $id}}}) {
    aggregate {
      sum {
        quantity
      }
      max {
        quantity
      }
      min {
        quantity
      }
      count
    }
    nodes {
      quantity
      quantity_min
      substance {
        productAccessory {
          code
          label
          price
          unit
        }
      }
      warehouse {
        name
      }
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetAccessoryWarehousesByIdGQL extends Apollo.Query<GetAccessoryWarehousesByIdQuery, GetAccessoryWarehousesByIdQueryVariables> {
    document = GetAccessoryWarehousesByIdDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetAllAccessoriesStockDocument = gql`
    query GetAllAccessoriesStock {
  stock_warehouse_substance(where: {substance: {type: {_eq: accessory}}}) {
    id
    quantity
    warehouse {
      ...stock_warehouseFragment
    }
    substance {
      productAccessory {
        ...product_product_accessory_viewFragment
      }
      accessory {
        category
        id
      }
      id
    }
  }
}
    ${Stock_WarehouseFragmentFragmentDoc}
${Product_Product_Accessory_ViewFragmentFragmentDoc}`;

  @Injectable({
    providedIn: 'root'
  })
  export class GetAllAccessoriesStockGQL extends Apollo.Query<GetAllAccessoriesStockQuery, GetAllAccessoriesStockQueryVariables> {
    document = GetAllAccessoriesStockDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetAllConsumablesStockDocument = gql`
    query GetAllConsumablesStock {
  stock_warehouse_substance(where: {substance: {type: {_eq: consumable}}}) {
    id
    quantity
    warehouse {
      ...stock_warehouseFragment
    }
    substance {
      productConsumable {
        ...product_product_consumable_viewFragment
      }
      consomable {
        category
        id
      }
      id
    }
  }
}
    ${Stock_WarehouseFragmentFragmentDoc}
${Product_Product_Consumable_ViewFragmentFragmentDoc}`;

  @Injectable({
    providedIn: 'root'
  })
  export class GetAllConsumablesStockGQL extends Apollo.Query<GetAllConsumablesStockQuery, GetAllConsumablesStockQueryVariables> {
    document = GetAllConsumablesStockDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetAllGlassesStockDocument = gql`
    query GetAllGlassesStock($type: product_substance_type_enum_comparison_exp = {_eq: glass}) {
  stock_warehouse_substance(where: {substance: {type: $type}}) {
    id
    quantity
    warehouse {
      ...stock_warehouseFragment
    }
    substance {
      productGlass {
        code
        label
        price
        unit
      }
      glass {
        thickness
        type
        color
        id
      }
      id
    }
  }
}
    ${Stock_WarehouseFragmentFragmentDoc}`;

  @Injectable({
    providedIn: 'root'
  })
  export class GetAllGlassesStockGQL extends Apollo.Query<GetAllGlassesStockQuery, GetAllGlassesStockQueryVariables> {
    document = GetAllGlassesStockDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetAllOrdersDetailsDocument = gql`
    query GetAllOrdersDetails {
  stock_order_item {
    quantity
    status
    substance {
      productGlass {
        code
        label
        price
        unit
      }
      productAccessory {
        code
        label
        price
        unit
      }
    }
    id
    transfer_order {
      id
      date
      deadline
      fromwarehouse {
        name
      }
      towarehouse {
        name
      }
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetAllOrdersDetailsGQL extends Apollo.Query<GetAllOrdersDetailsQuery, GetAllOrdersDetailsQueryVariables> {
    document = GetAllOrdersDetailsDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetAllStockAdjustmentsDocument = gql`
    query GetAllStockAdjustments {
  stock_stock_adjustment {
    id
    ref
    date
    newQuantity
    oldQuantity
    reason
    warehouse_substance {
      substance {
        id
        type
        productAccessory {
          code
          label
          unit
        }
        productConsumable {
          code
          label
          unit
        }
        productGlass {
          code
          label
          unit
        }
      }
      warehouse {
        id
        name
        company {
          name
        }
      }
    }
    userProfile {
      username
      role
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetAllStockAdjustmentsGQL extends Apollo.Query<GetAllStockAdjustmentsQuery, GetAllStockAdjustmentsQueryVariables> {
    document = GetAllStockAdjustmentsDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetAllTransfersOrdersDocument = gql`
    query GetAllTransfersOrders {
  stock_transfer_order {
    date
    deadline
    fromwarehouse {
      name
      id
    }
    towarehouse {
      name
      id
    }
    status
    id
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetAllTransfersOrdersGQL extends Apollo.Query<GetAllTransfersOrdersQuery, GetAllTransfersOrdersQueryVariables> {
    document = GetAllTransfersOrdersDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetAllWarehousesDocument = gql`
    query GetAllWarehouses {
  stock_warehouse {
    id
    name
    company {
      ...management_companyFragment
    }
    salesPoint {
      ...management_salesPointFragment
    }
  }
}
    ${Management_CompanyFragmentFragmentDoc}
${Management_SalesPointFragmentFragmentDoc}`;

  @Injectable({
    providedIn: 'root'
  })
  export class GetAllWarehousesGQL extends Apollo.Query<GetAllWarehousesQuery, GetAllWarehousesQueryVariables> {
    document = GetAllWarehousesDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetConsumableWarehousesByIdDocument = gql`
    query GetConsumableWarehousesById($id: uuid!) {
  stock_warehouse_substance_aggregate(where: {substance: {id: {_eq: $id}}}) {
    aggregate {
      sum {
        quantity
      }
      max {
        quantity
      }
      min {
        quantity
      }
      count
    }
    nodes {
      quantity
      substance {
        productConsumable {
          code
          label
          price
        }
      }
      warehouse {
        name
        id
      }
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetConsumableWarehousesByIdGQL extends Apollo.Query<GetConsumableWarehousesByIdQuery, GetConsumableWarehousesByIdQueryVariables> {
    document = GetConsumableWarehousesByIdDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetGlassWarehousesByIdDocument = gql`
    query GetGlassWarehousesById($id: uuid!) {
  stock_warehouse_substance_aggregate(where: {substance: {id: {_eq: $id}}}) {
    aggregate {
      sum {
        quantity
      }
      max {
        quantity
      }
      min {
        quantity
      }
      count
    }
    nodes {
      quantity
      substance {
        productGlass {
          code
          label
          price
        }
      }
      warehouse {
        name
        id
      }
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetGlassWarehousesByIdGQL extends Apollo.Query<GetGlassWarehousesByIdQuery, GetGlassWarehousesByIdQueryVariables> {
    document = GetGlassWarehousesByIdDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetTransferOrderByIdDocument = gql`
    query GetTransferOrderById($id: Int!) {
  stock_transfer_order_by_pk(id: $id) {
    id
    date
    deadline
    createdAt
    createdBy
    updatedAt
    updatedBy
    status
    fromwarehouse {
      name
    }
    towarehouse {
      name
    }
    order_items_aggregate {
      aggregate {
        count(columns: id)
        sum {
          quantity
        }
      }
      nodes {
        quantity
        status
        id
        substance {
          productAccessory {
            ...product_product_accessory_viewFragment
          }
          productGlass {
            ...product_product_glass_viewFragment
          }
        }
        item_tranfers_aggregate {
          aggregate {
            sum {
              quantity
            }
          }
          nodes {
            quantity
            status
            id
            date
            confirmed
          }
        }
      }
    }
  }
}
    ${Product_Product_Accessory_ViewFragmentFragmentDoc}
${Product_Product_Glass_ViewFragmentFragmentDoc}`;

  @Injectable({
    providedIn: 'root'
  })
  export class GetTransferOrderByIdGQL extends Apollo.Query<GetTransferOrderByIdQuery, GetTransferOrderByIdQueryVariables> {
    document = GetTransferOrderByIdDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetWarehouseByIdDocument = gql`
    query GetWarehouseById($id: uuid!) {
  stock_warehouse_by_pk(id: $id) {
    id
    name
    salesPoint {
      name
      id
    }
    company {
      name
      id
    }
    createdAt
    createdBy
    updatedAt
    updatedBy
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetWarehouseByIdGQL extends Apollo.Query<GetWarehouseByIdQuery, GetWarehouseByIdQueryVariables> {
    document = GetWarehouseByIdDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetWarehouseSubstanceDocument = gql`
    query GetWarehouseSubstance {
  stock_warehouse_substance {
    quantity
    quantity_min
    quantity_planned
    substanceid
    warehouseid
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetWarehouseSubstanceGQL extends Apollo.Query<GetWarehouseSubstanceQuery, GetWarehouseSubstanceQueryVariables> {
    document = GetWarehouseSubstanceDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const DeleteCompanyDocument = gql`
    mutation DeleteCompany($id: uuid!) {
  delete_management_company_by_pk(id: $id) {
    name
    id
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class DeleteCompanyGQL extends Apollo.Mutation<DeleteCompanyMutation, DeleteCompanyMutationVariables> {
    document = DeleteCompanyDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const DeleteSalePointDocument = gql`
    mutation DeleteSalePoint($id: uuid!) {
  delete_management_salesPoint_by_pk(id: $id) {
    name
    id
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class DeleteSalePointGQL extends Apollo.Mutation<DeleteSalePointMutation, DeleteSalePointMutationVariables> {
    document = DeleteSalePointDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const DeleteUserDocument = gql`
    mutation DeleteUser($id: String!) {
  delete_management_userProfile_by_pk(id: $id) {
    username
    id
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class DeleteUserGQL extends Apollo.Mutation<DeleteUserMutation, DeleteUserMutationVariables> {
    document = DeleteUserDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const InsertCompanyDocument = gql`
    mutation InsertCompany($CNSS: String!, $ICE: String!, $IF: String!, $RC: String!, $address: String!, $email: String, $name: String!, $phone: String!, $website: String) {
  insert_management_company_one(
    object: {CNSS: $CNSS, ICE: $ICE, IF: $IF, RC: $RC, address: $address, email: $email, name: $name, phone: $phone, website: $website}
  ) {
    id
    name
    phone
    CNSS
    ICE
    IF
    RC
    address
    email
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class InsertCompanyGQL extends Apollo.Mutation<InsertCompanyMutation, InsertCompanyMutationVariables> {
    document = InsertCompanyDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const InsertSalePointDocument = gql`
    mutation InsertSalePoint($address: String!, $email: String, $name: String!, $phone: String!, $fax: String, $isPrincipale: Boolean = false) {
  insert_management_salesPoint_one(
    object: {address: $address, email: $email, name: $name, phone: $phone, fax: $fax, isPrincipale: $isPrincipale}
  ) {
    id
    address
    email
    fax
    name
    phone
    isPrincipale
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class InsertSalePointGQL extends Apollo.Mutation<InsertSalePointMutation, InsertSalePointMutationVariables> {
    document = InsertSalePointDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const InsertUserDocument = gql`
    mutation InsertUser($email: String!, $CIN: String, $active: Boolean = true, $firstname: String, $lastname: String, $password: String!, $phone: String, $role: String!, $SalesPointsid: uuid, $username: String) {
  SignUp(
    email: $email
    role: $role
    firstname: $firstname
    CIN: $CIN
    active: $active
    lastname: $lastname
    password: $password
    phone: $phone
    SalesPointsid: $SalesPointsid
    username: $username
  ) {
    CIN
    active
    firstname
    id
    lastname
    phone
    username
    email
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class InsertUserGQL extends Apollo.Mutation<InsertUserMutation, InsertUserMutationVariables> {
    document = InsertUserDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const UpdateCompanyDocument = gql`
    mutation UpdateCompany($CNSS: String, $ICE: String, $IF: String, $RC: String, $address: String, $email: String, $name: String, $phone: String, $website: String, $id: uuid!) {
  update_management_company_by_pk(
    pk_columns: {id: $id}
    _set: {CNSS: $CNSS, ICE: $ICE, IF: $IF, RC: $RC, address: $address, email: $email, name: $name, phone: $phone, website: $website}
  ) {
    id
    CNSS
    ICE
    IF
    RC
    address
    email
    name
    phone
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class UpdateCompanyGQL extends Apollo.Mutation<UpdateCompanyMutation, UpdateCompanyMutationVariables> {
    document = UpdateCompanyDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const UpdateSalePointDocument = gql`
    mutation UpdateSalePoint($id: uuid!, $address: String, $email: String, $fax: String, $name: String, $phone: String, $isPrincipale: Boolean = false) {
  update_management_salesPoint_by_pk(
    pk_columns: {id: $id}
    _set: {address: $address, email: $email, fax: $fax, id: $id, name: $name, phone: $phone, isPrincipale: $isPrincipale}
  ) {
    address
    email
    fax
    id
    name
    phone
    isPrincipale
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class UpdateSalePointGQL extends Apollo.Mutation<UpdateSalePointMutation, UpdateSalePointMutationVariables> {
    document = UpdateSalePointDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const UpdateUserDocument = gql`
    mutation UpdateUser($CIN: String, $SalesPointsid: uuid, $active: Boolean = true, $email: String, $firstname: String, $lastname: String, $phone: String, $username: String, $role: management_user_role_enum = admin, $id: String!) {
  update_management_userProfile_by_pk(
    pk_columns: {id: $id}
    _set: {CIN: $CIN, SalesPointsid: $SalesPointsid, active: $active, email: $email, firstname: $firstname, lastname: $lastname, phone: $phone, username: $username, role: $role}
  ) {
    CIN
    active
    firstname
    id
    email
    lastname
    phone
    username
    SalesPointsid
    role
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class UpdateUserGQL extends Apollo.Mutation<UpdateUserMutation, UpdateUserMutationVariables> {
    document = UpdateUserDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetAllCompaniesDocument = gql`
    query GetAllCompanies {
  management_company {
    id
    CNSS
    ICE
    IF
    RC
    address
    email
    name
    phone
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetAllCompaniesGQL extends Apollo.Query<GetAllCompaniesQuery, GetAllCompaniesQueryVariables> {
    document = GetAllCompaniesDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetAllSalesPointsDocument = gql`
    query GetAllSalesPoints {
  management_salesPoint {
    address
    email
    fax
    id
    name
    phone
    isPrincipale
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetAllSalesPointsGQL extends Apollo.Query<GetAllSalesPointsQuery, GetAllSalesPointsQueryVariables> {
    document = GetAllSalesPointsDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetAllUsersDocument = gql`
    query GetAllUsers {
  management_userProfile {
    CIN
    active
    firstname
    id
    email
    lastname
    phone
    username
    SalesPointsid
    role
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetAllUsersGQL extends Apollo.Query<GetAllUsersQuery, GetAllUsersQueryVariables> {
    document = GetAllUsersDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetCompanyByIdDocument = gql`
    query GetCompanyById($id: uuid!) {
  management_company_by_pk(id: $id) {
    CNSS
    ICE
    IF
    RC
    address
    email
    name
    phone
    website
    createdAt
    createdBy
    updatedAt
    updatedBy
    id
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetCompanyByIdGQL extends Apollo.Query<GetCompanyByIdQuery, GetCompanyByIdQueryVariables> {
    document = GetCompanyByIdDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetSalePointByIdDocument = gql`
    query GetSalePointById($id: uuid!) {
  management_salesPoint_by_pk(id: $id) {
    id
    address
    email
    fax
    name
    phone
    usersProfiles {
      id
      active
      firstname
      lastname
      phone
      username
      user_role {
        name
        description
      }
    }
    createdBy
    updatedBy
    createdAt
    updatedAt
    isPrincipale
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetSalePointByIdGQL extends Apollo.Query<GetSalePointByIdQuery, GetSalePointByIdQueryVariables> {
    document = GetSalePointByIdDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetUserByIdDocument = gql`
    query getUserById($id: String!) {
  management_userProfile_by_pk(id: $id) {
    CIN
    active
    createdAt
    createdBy
    email
    firstname
    id
    joinUs
    lastname
    leftUs
    phone
    role
    updatedAt
    updatedBy
    username
    user_role {
      description
      name
    }
    SalesPoint {
      name
      phone
      address
      isPrincipale
    }
    SalesPointsid
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetUserByIdGQL extends Apollo.Query<GetUserByIdQuery, GetUserByIdQueryVariables> {
    document = GetUserByIdDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GenerateBarCodesDocument = gql`
    mutation GenerateBarCodes($objects: [manufacturing_manufacturing_line_insert_input!]!) {
  insert_manufacturing_manufacturing_line(objects: $objects) {
    affected_rows
    returning {
      id
      status
      glass_id
      manufacturing_services {
        service_draft {
          labelFactory
          id
        }
      }
      manufacturing_consumables {
        consumable_draft {
          labelFactory
          id
        }
      }
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GenerateBarCodesGQL extends Apollo.Mutation<GenerateBarCodesMutation, GenerateBarCodesMutationVariables> {
    document = GenerateBarCodesDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const InsertJobOrderDocument = gql`
    mutation InsertJobOrder($order_ref: String, $isReparing: Boolean = false, $ids: [sales_glass_draft_insert_input!]!) {
  insert_manufacturing_job_order_one(
    object: {order_ref: $order_ref, isReparing: $isReparing, glass_drafts: {data: $ids, on_conflict: {constraint: glass_draft_pkey, update_columns: job_order_id}}}
  ) {
    id
    order_ref
    status
    isReparing
    date
    ref
    glass_drafts {
      id
      product_draft {
        type
        count
        heigth
        width
        label
        product_code
      }
      consumable_drafts {
        labelFactory
        id
      }
      service_drafts {
        id
        labelFactory
      }
      manufacturing_lines {
        glass_id
        id
        status
        ref
      }
    }
  }
  update_sales_product_draft(
    _set: {isLaunched: true}
    where: {_and: {draft: {order: {ref: {_eq: $order_ref}}}, type: {_nin: [Accessoire]}}}
  ) {
    affected_rows
  }
  update_sales_draft(
    where: {order: {ref: {_eq: $order_ref}}}
    _set: {status: lance}
  ) {
    affected_rows
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class InsertJobOrderGQL extends Apollo.Mutation<InsertJobOrderMutation, InsertJobOrderMutationVariables> {
    document = InsertJobOrderDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const UpdateManufacturingProgressDocument = gql`
    mutation UpdateManufacturingProgress($services: [manufacturing_manufacturing_service_insert_input!]! = [], $consumables: [manufacturing_manufacturing_consumable_insert_input!]! = [], $glass_id: uuid) {
  delete_manufacturing_manufacturing_service(
    where: {manufacturing_line: {glass_draft: {id: {_eq: $glass_id}}}}
  ) {
    affected_rows
  }
  delete_manufacturing_manufacturing_consumable(
    where: {manufacturing_line: {glass_draft: {id: {_eq: $glass_id}}}}
  ) {
    affected_rows
  }
  insert_manufacturing_manufacturing_service(
    objects: $services
    on_conflict: {constraint: manufacturing_service_pkey, update_columns: service_draft_id}
  ) {
    returning {
      manufacturing_line_id
      service_draft_id
      service_draft {
        labelFactory
      }
      manufacturing_line {
        status
      }
    }
  }
  insert_manufacturing_manufacturing_consumable(
    objects: $consumables
    on_conflict: {constraint: manufacturing_consumable_pkey, update_columns: consumable_draft_id}
  ) {
    returning {
      consumable_draft_id
      manufacturing_line_id
      consumable_draft {
        labelFactory
      }
      manufacturing_line {
        status
      }
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class UpdateManufacturingProgressGQL extends Apollo.Mutation<UpdateManufacturingProgressMutation, UpdateManufacturingProgressMutationVariables> {
    document = UpdateManufacturingProgressDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetAllJobsOrdersDocument = gql`
    query GetAllJobsOrders {
  manufacturing_job_order {
    id
    date
    isReparing
    status
    order_ref
    ref
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetAllJobsOrdersGQL extends Apollo.Query<GetAllJobsOrdersQuery, GetAllJobsOrdersQueryVariables> {
    document = GetAllJobsOrdersDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetJobOrderByIdDocument = gql`
    query GetJobOrderById($id: Int!) {
  manufacturing_job_order_by_pk(id: $id) {
    date
    id
    order_ref
    ref
    status
    isReparing
    glass_drafts {
      id
      consumable_drafts {
        dependent_id
        labelFactory
        id
      }
      service_drafts {
        dependent_id
        labelFactory
        id
      }
      product_draft {
        type
        count
        heigth
        width
        label
        product_code
      }
      manufacturing_lines {
        glass_id
        id
        status
        ref
        manufacturing_services {
          service_draft {
            labelFactory
            id
          }
        }
        manufacturing_consumables {
          consumable_draft {
            labelFactory
            id
          }
        }
      }
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetJobOrderByIdGQL extends Apollo.Query<GetJobOrderByIdQuery, GetJobOrderByIdQueryVariables> {
    document = GetJobOrderByIdDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetManufacturingGlassByIdDocument = gql`
    query GetManufacturingGlassById($id: uuid!) {
  sales_glass_draft_by_pk(id: $id) {
    id
    consumable_drafts {
      dependent_id
      labelFactory
      id
    }
    service_drafts {
      dependent_id
      labelFactory
      id
    }
    product_draft {
      type
      count
      heigth
      width
      label
      product_code
    }
    manufacturing_lines {
      glass_id
      id
      status
      manufacturing_services {
        service_draft {
          labelFactory
          id
        }
      }
      manufacturing_consumables {
        consumable_draft {
          labelFactory
          id
        }
      }
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetManufacturingGlassByIdGQL extends Apollo.Query<GetManufacturingGlassByIdQuery, GetManufacturingGlassByIdQueryVariables> {
    document = GetManufacturingGlassByIdDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const AddGlassColorDocument = gql`
    mutation AddGlassColor($color: String) {
  insert_product_glassColor_one(object: {color: $color}) {
    color
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class AddGlassColorGQL extends Apollo.Mutation<AddGlassColorMutation, AddGlassColorMutationVariables> {
    document = AddGlassColorDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const AddGlassTypeDocument = gql`
    mutation AddGlassType($type: String) {
  insert_product_glassType_one(object: {type: $type}) {
    type
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class AddGlassTypeGQL extends Apollo.Mutation<AddGlassTypeMutation, AddGlassTypeMutationVariables> {
    document = AddGlassTypeDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const DeleteManyCustomerProductsDocument = gql`
    mutation DeleteManyCustomerProducts($ids: [uuid!]) {
  delete_product_customer_product(where: {id: {_in: $ids}}) {
    affected_rows
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class DeleteManyCustomerProductsGQL extends Apollo.Mutation<DeleteManyCustomerProductsMutation, DeleteManyCustomerProductsMutationVariables> {
    document = DeleteManyCustomerProductsDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const DeleteManyDocument = gql`
    mutation DeleteMany($codes: [String!]) {
  delete_product_product(where: {code: {_in: $codes}}) {
    affected_rows
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class DeleteManyGQL extends Apollo.Mutation<DeleteManyMutation, DeleteManyMutationVariables> {
    document = DeleteManyDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const DeleteOneDocument = gql`
    mutation DeleteOne($code: String!) {
  delete_product_product_by_pk(code: $code) {
    code
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class DeleteOneGQL extends Apollo.Mutation<DeleteOneMutation, DeleteOneMutationVariables> {
    document = DeleteOneDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const DeleteServiceDocument = gql`
    mutation deleteService($id: uuid!) {
  delete_product_serviceConfig_by_pk(id: $id) {
    id
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class DeleteServiceGQL extends Apollo.Mutation<DeleteServiceMutation, DeleteServiceMutationVariables> {
    document = DeleteServiceDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const InsertAccessoryDocument = gql`
    mutation InsertAccessory($product: product_product_insert_input!, $quota: numeric, $category: product_accessoryTypes_enum = ACCESSOIRE, $subctance: product_substance_insert_input! = {type: accessory}) {
  insert_product_accessory_one(
    object: {product: {data: $product}, quota: $quota, category: $category, substance: {data: $subctance}}
  ) {
    id
    category
    quota
    product {
      code
      label
      unit
      price
      priceMax
      priceMin
      companies {
        name
        id
      }
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class InsertAccessoryGQL extends Apollo.Mutation<InsertAccessoryMutation, InsertAccessoryMutationVariables> {
    document = InsertAccessoryDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const InsertConsumableDocument = gql`
    mutation InsertConsumable($product: product_product_insert_input!, $category: product_consumableCategory_enum, $substance: product_substance_insert_input! = {type: consumable}, $labelFactory: String) {
  insert_product_consumable_one(
    object: {product: {data: $product}, category: $category, substance: {data: $substance}, labelFactory: $labelFactory}
  ) {
    id
    product {
      code
      label
      price
      unit
      priceMax
      priceMin
      companies {
        name
        id
      }
    }
    category
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class InsertConsumableGQL extends Apollo.Mutation<InsertConsumableMutation, InsertConsumableMutationVariables> {
    document = InsertConsumableDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const InsertCustomerProductDocument = gql`
    mutation InsertCustomerProduct($code: String, $label: String, $price: Float = 0, $priceMax: Float = 0, $priceMin: Float = 0, $thickness: numeric) {
  insert_product_customer_product_one(
    object: {product: {data: {code: $code, label: $label, unit: m2, price: $price, priceMax: $priceMax, priceMin: $priceMin}}, thickness: $thickness}
  ) {
    id
    thickness
    product {
      code
      label
      unit
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class InsertCustomerProductGQL extends Apollo.Mutation<InsertCustomerProductMutation, InsertCustomerProductMutationVariables> {
    document = InsertCustomerProductDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const InsertGlassDocument = gql`
    mutation InsertGlass($thickness: Int, $subsctance: product_substance_insert_input! = {type: glass}, $product: product_product_insert_input!) {
  insert_product_glass_one(
    object: {thickness: $thickness, product: {data: $product}, substance: {data: $subsctance}}
  ) {
    color
    id
    thickness
    type
    product {
      code
      label
      unit
      price
      priceMax
      priceMin
      companies {
        name
        id
      }
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class InsertGlassGQL extends Apollo.Mutation<InsertGlassMutation, InsertGlassMutationVariables> {
    document = InsertGlassDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const InsertServiceDocument = gql`
    mutation InsertService($serviceConfigid: uuid, $product: product_product_insert_input!, $paramValues: jsonb) {
  insert_product_service_one(
    object: {serviceConfigid: $serviceConfigid, product: {data: $product}, paramValues: $paramValues}
  ) {
    product {
      code
      label
      price
      priceMax
      priceMin
      unit
      companies {
        id
        name
      }
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class InsertServiceGQL extends Apollo.Mutation<InsertServiceMutation, InsertServiceMutationVariables> {
    document = InsertServiceDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const InsertServiceConfigDocument = gql`
    mutation InsertServiceConfig($labelFactory: String, $name: String, $params: jsonb) {
  insert_product_serviceConfig_one(
    object: {labelFactory: $labelFactory, name: $name, params: $params}
  ) {
    labelFactory
    name
    id
    params
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class InsertServiceConfigGQL extends Apollo.Mutation<InsertServiceConfigMutation, InsertServiceConfigMutationVariables> {
    document = InsertServiceConfigDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const UpdateAccessoryDocument = gql`
    mutation UpdateAccessory($id: uuid!, $quota: numeric, $product: product_product_set_input, $category: product_accessoryTypes_enum = ACCESSOIRE, $code: String!, $companies: [product_product_companies_insert_input!]!) {
  update_product_accessory_by_pk(
    pk_columns: {id: $id}
    _set: {category: $category, quota: $quota}
  ) {
    id
    category
    quota
  }
  update_product_product_by_pk(pk_columns: {code: $code}, _set: $product) {
    code
    label
    unit
    price
    priceMax
    priceMin
  }
  delete_product_product_companies(where: {productcode: {_eq: $code}}) {
    affected_rows
  }
  insert_product_product_companies(
    objects: $companies
    on_conflict: {constraint: product_companies_pkey, update_columns: []}
  ) {
    returning {
      Company {
        name
        id
      }
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class UpdateAccessoryGQL extends Apollo.Mutation<UpdateAccessoryMutation, UpdateAccessoryMutationVariables> {
    document = UpdateAccessoryDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const UpdateConsumableDocument = gql`
    mutation UpdateConsumable($id: uuid!, $code: String!, $product: product_product_set_input, $category: product_consumableCategory_enum, $labelFactory: String, $companies: [product_product_companies_insert_input!]!) {
  update_product_consumable_by_pk(
    pk_columns: {id: $id}
    _set: {category: $category, labelFactory: $labelFactory}
  ) {
    id
    category
    labelFactory
  }
  update_product_product_by_pk(pk_columns: {code: $code}, _set: $product) {
    code
    label
    unit
    price
    priceMax
    priceMin
  }
  delete_product_product_companies(where: {productcode: {_eq: $code}}) {
    affected_rows
  }
  insert_product_product_companies(
    objects: $companies
    on_conflict: {constraint: product_companies_pkey, update_columns: []}
  ) {
    returning {
      Company {
        name
        id
      }
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class UpdateConsumableGQL extends Apollo.Mutation<UpdateConsumableMutation, UpdateConsumableMutationVariables> {
    document = UpdateConsumableDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const UpdateGlassDocument = gql`
    mutation UpdateGlass($id: uuid!, $thickness: Int, $product: product_product_set_input, $code: String!, $companies: [product_product_companies_insert_input!]!) {
  update_product_glass_by_pk(pk_columns: {id: $id}, _set: {thickness: $thickness}) {
    id
    thickness
    type
    color
  }
  update_product_product_by_pk(pk_columns: {code: $code}, _set: $product) {
    code
    label
    unit
    price
    priceMax
    priceMin
  }
  delete_product_product_companies(where: {productcode: {_eq: $code}}) {
    affected_rows
  }
  insert_product_product_companies(
    objects: $companies
    on_conflict: {constraint: product_companies_pkey, update_columns: []}
  ) {
    returning {
      Company {
        name
        id
      }
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class UpdateGlassGQL extends Apollo.Mutation<UpdateGlassMutation, UpdateGlassMutationVariables> {
    document = UpdateGlassDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const UpdateServiceDocument = gql`
    mutation updateService($id: uuid!, $labelFactory: String!, $name: String!) {
  update_product_serviceConfig_by_pk(
    pk_columns: {id: $id}
    _set: {labelFactory: $labelFactory, name: $name}
  ) {
    labelFactory
    name
    id
    params
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class UpdateServiceGQL extends Apollo.Mutation<UpdateServiceMutation, UpdateServiceMutationVariables> {
    document = UpdateServiceDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetAccessoryByIdDocument = gql`
    query GetAccessoryById($id: uuid!) {
  product_accessory_by_pk(id: $id) {
    createdAt
    createdBy
    id
    category
    product {
      code
      unit
      label
      price
      priceMax
      priceMin
      companies {
        name
        id
      }
    }
    quota
    updatedAt
    updatedBy
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetAccessoryByIdGQL extends Apollo.Query<GetAccessoryByIdQuery, GetAccessoryByIdQueryVariables> {
    document = GetAccessoryByIdDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetAllAccessoriesDocument = gql`
    query GetAllAccessories {
  product_accessory {
    id
    category
    quota
    product {
      code
      label
      unit
      price
      priceMax
      priceMin
      companies {
        name
        id
      }
    }
    substanceid
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetAllAccessoriesGQL extends Apollo.Query<GetAllAccessoriesQuery, GetAllAccessoriesQueryVariables> {
    document = GetAllAccessoriesDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetAllConsumablesDocument = gql`
    query GetAllConsumables {
  product_consumable {
    id
    category
    product {
      code
      label
      unit
      price
      priceMax
      priceMin
      companies {
        name
        id
      }
    }
    substanceid
    labelFactory
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetAllConsumablesGQL extends Apollo.Query<GetAllConsumablesQuery, GetAllConsumablesQueryVariables> {
    document = GetAllConsumablesDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetAllCustomerProductsDocument = gql`
    query GetAllCustomerProducts {
  product_customer_product {
    id
    thickness
    product {
      code
      label
      unit
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetAllCustomerProductsGQL extends Apollo.Query<GetAllCustomerProductsQuery, GetAllCustomerProductsQueryVariables> {
    document = GetAllCustomerProductsDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetAllGlassesDocument = gql`
    query GetAllGlasses {
  product_glass {
    id
    thickness
    product {
      code
      label
      unit
      price
      priceMax
      priceMin
      companies {
        name
        id
      }
    }
    substanceid
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetAllGlassesGQL extends Apollo.Query<GetAllGlassesQuery, GetAllGlassesQueryVariables> {
    document = GetAllGlassesDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetAllServicesDocument = gql`
    query GetAllServices {
  product_service {
    paramValues
    serviceConfig {
      labelFactory
      id
      name
      params
    }
    product {
      code
      label
      price
      priceMax
      priceMin
      unit
      companies {
        name
        id
      }
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetAllServicesGQL extends Apollo.Query<GetAllServicesQuery, GetAllServicesQueryVariables> {
    document = GetAllServicesDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetAllServiceConfigDocument = gql`
    query GetAllServiceConfig {
  product_serviceConfig {
    labelFactory
    name
    id
    params
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetAllServiceConfigGQL extends Apollo.Query<GetAllServiceConfigQuery, GetAllServiceConfigQueryVariables> {
    document = GetAllServiceConfigDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetConsumableByIdDocument = gql`
    query GetConsumableById($id: uuid!) {
  product_consumable_by_pk(id: $id) {
    category
    createdAt
    createdBy
    id
    product {
      code
      label
      unit
      price
      priceMax
      priceMin
      companies {
        name
        id
      }
    }
    updatedAt
    updatedBy
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetConsumableByIdGQL extends Apollo.Query<GetConsumableByIdQuery, GetConsumableByIdQueryVariables> {
    document = GetConsumableByIdDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetGlassByIdDocument = gql`
    query getGlassById($id: uuid!) {
  product_glass_by_pk(id: $id) {
    createdBy
    createdAt
    id
    product {
      code
      label
      unit
      price
      priceMax
      priceMin
      companies {
        name
        id
      }
    }
    thickness
    updatedAt
    updatedBy
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetGlassByIdGQL extends Apollo.Query<GetGlassByIdQuery, GetGlassByIdQueryVariables> {
    document = GetGlassByIdDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetGlassColorsDocument = gql`
    query GetGlassColors {
  product_glassColor {
    color
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetGlassColorsGQL extends Apollo.Query<GetGlassColorsQuery, GetGlassColorsQueryVariables> {
    document = GetGlassColorsDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetGlassTypesDocument = gql`
    query GetGlassTypes {
  product_glassType {
    type
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetGlassTypesGQL extends Apollo.Query<GetGlassTypesQuery, GetGlassTypesQueryVariables> {
    document = GetGlassTypesDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetServiceConfigByIdDocument = gql`
    query GetServiceConfigById($id: uuid!) {
  product_serviceConfig_by_pk(id: $id) {
    id
    labelFactory
    name
    params
    services(where: {serviceConfigid: {_eq: $id}}) {
      product {
        code
        label
        unit
        price
        priceMax
        priceMin
        companies {
          name
          id
        }
      }
      paramValues
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetServiceConfigByIdGQL extends Apollo.Query<GetServiceConfigByIdQuery, GetServiceConfigByIdQueryVariables> {
    document = GetServiceConfigByIdDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetAllSubstancesDocument = gql`
    query GetAllSubstances {
  product_substance {
    id
    productAccessory {
      code
      label
      unit
    }
    productConsumable {
      code
      label
      unit
    }
    productGlass {
      code
      label
      unit
    }
    supply {
      code
      label
      unit
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetAllSubstancesGQL extends Apollo.Query<GetAllSubstancesQuery, GetAllSubstancesQueryVariables> {
    document = GetAllSubstancesDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const DeletePurchaseDeliveryDocument = gql`
    mutation DeletePurchaseDelivery($ids: [Int!]!) {
  delete_purchase_delivery(where: {id: {_in: $ids}}) {
    affected_rows
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class DeletePurchaseDeliveryGQL extends Apollo.Mutation<DeletePurchaseDeliveryMutation, DeletePurchaseDeliveryMutationVariables> {
    document = DeletePurchaseDeliveryDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const InsertPurchaseDeliveryDocument = gql`
    mutation InsertPurchaseDelivery($date: date, $provider_id: uuid, $items: [purchase_delivery_item_insert_input!]! = []) {
  insert_purchase_delivery_one(
    object: {date: $date, provider_id: $provider_id, delivery_items: {data: $items, on_conflict: {constraint: delivery_item_pkey, update_columns: delivery_id}}}
  ) {
    date
    id
    delivery_items {
      id
      code
      delivery_id
      id
      label
      quantity
      substance_id
      cost
      unit
      warehouse {
        id
        name
        company {
          name
        }
      }
    }
    provider {
      id
      code
      name
      phone
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class InsertPurchaseDeliveryGQL extends Apollo.Mutation<InsertPurchaseDeliveryMutation, InsertPurchaseDeliveryMutationVariables> {
    document = InsertPurchaseDeliveryDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const InsertDeliveryItemsDocument = gql`
    mutation InsertDeliveryItems($items: [purchase_delivery_item_insert_input!]!) {
  insert_purchase_delivery_item(objects: $items) {
    returning {
      code
      cost
      id
      delivery_id
      label
      quantity
      substance_id
      unit
      warehouse {
        name
        id
        company {
          name
        }
      }
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class InsertDeliveryItemsGQL extends Apollo.Mutation<InsertDeliveryItemsMutation, InsertDeliveryItemsMutationVariables> {
    document = InsertDeliveryItemsDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetAllPurchasesDeliveriesDocument = gql`
    query GetAllPurchasesDeliveries {
  purchase_delivery {
    date
    id
    ref
    provider {
      id
      code
      name
      phone
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetAllPurchasesDeliveriesGQL extends Apollo.Query<GetAllPurchasesDeliveriesQuery, GetAllPurchasesDeliveriesQueryVariables> {
    document = GetAllPurchasesDeliveriesDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetPurchaseDeliveryByIdDocument = gql`
    query GetPurchaseDeliveryById($id: Int!) {
  purchase_delivery_by_pk(id: $id) {
    date
    id
    ref
    delivery_items {
      code
      delivery_id
      id
      label
      quantity
      substance_id
      cost
      unit
      warehouse {
        id
        name
        company {
          name
        }
      }
    }
    provider {
      id
      code
      name
      phone
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetPurchaseDeliveryByIdGQL extends Apollo.Query<GetPurchaseDeliveryByIdQuery, GetPurchaseDeliveryByIdQueryVariables> {
    document = GetPurchaseDeliveryByIdDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const DeleteDeliveryDocument = gql`
    mutation DeleteDelivery($ids: [uuid!]! = []) {
  delete_sales_delivery(where: {id: {_in: $ids}}) {
    affected_rows
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class DeleteDeliveryGQL extends Apollo.Mutation<DeleteDeliveryMutation, DeleteDeliveryMutationVariables> {
    document = DeleteDeliveryDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const InsertDeliveryDocument = gql`
    mutation InsertDelivery($order_id: Int!, $predicted_date: date, $client_id: uuid!, $company_id: uuid!, $contact_id: uuid, $isReturned: Boolean, $delivery_lines: [sales_delivery_line_insert_input!]! = [], $payment_method: String!, $amount_ttc: numeric, $amount_tva: numeric, $amount_ht: numeric) {
  insert_sales_delivery_one(
    object: {order_id: $order_id, company_id: $company_id, payment_method: $payment_method, predicted_date: $predicted_date, isReturned: $isReturned, client_id: $client_id, delivery_lines: {data: $delivery_lines}, contact_id: $contact_id, amount_ttc: $amount_ttc, amount_tva: $amount_tva, amount_ht: $amount_ht}
  ) {
    id
    status
    company {
      name
    }
    contact_id
    payment_method
    predicted_date
    isReturned
    order_id
    client {
      name
      mail
    }
    contact {
      mail
      name
      phone
    }
    amount_ttc
    amount_tva
    amount_ht
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class InsertDeliveryGQL extends Apollo.Mutation<InsertDeliveryMutation, InsertDeliveryMutationVariables> {
    document = InsertDeliveryDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const UpdateDeliveryDocument = gql`
    mutation UpdateDelivery($id: uuid!, $payment_method: String!, $contact_id: uuid, $company_id: uuid, $client_id: uuid, $isReturned: Boolean, $predicted_date: date, $amount_ttc: numeric, $amount_tva: numeric, $amount_ht: numeric) {
  update_sales_delivery_by_pk(
    pk_columns: {id: $id}
    _set: {payment_method: $payment_method, contact_id: $contact_id, company_id: $company_id, client_id: $client_id, predicted_date: $predicted_date, isReturned: $isReturned, amount_ttc: $amount_ttc, amount_tva: $amount_tva, amount_ht: $amount_ht}
  ) {
    id
    order_id
    status
    company_id
    payment_method
    isReturned
    predicted_date
    client_id
    contact_id
    amount_ttc
    amount_tva
    amount_ht
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class UpdateDeliveryGQL extends Apollo.Mutation<UpdateDeliveryMutation, UpdateDeliveryMutationVariables> {
    document = UpdateDeliveryDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const UpdateDeliveryLineDocument = gql`
    mutation UpdateDeliveryLine($amount: numeric, $delivered: numeric, $id: uuid!, $product_draft_id: uuid!) {
  update_sales_delivery_line_by_pk(
    pk_columns: {id: $id}
    _set: {amount: $amount, delivered: $delivered, id: $id, product_draft_id: $product_draft_id}
  ) {
    id
    amount
    delivered
    product_draft_id
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class UpdateDeliveryLineGQL extends Apollo.Mutation<UpdateDeliveryLineMutation, UpdateDeliveryLineMutationVariables> {
    document = UpdateDeliveryLineDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const DeleteDraftsDocument = gql`
    mutation deleteDrafts($ids: [Int!]! = []) {
  delete_sales_draft(where: {id: {_in: $ids}}) {
    affected_rows
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class DeleteDraftsGQL extends Apollo.Mutation<DeleteDraftsMutation, DeleteDraftsMutationVariables> {
    document = DeleteDraftsDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const InsertDraftDocument = gql`
    mutation InsertDraft($status: sales_draft_status_enum = draft) {
  insert_sales_draft_one(object: {status: $status}) {
    id
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class InsertDraftGQL extends Apollo.Mutation<InsertDraftMutation, InsertDraftMutationVariables> {
    document = InsertDraftDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const UpdateDraftDocument = gql`
    mutation UpdateDraft($id: Int!, $status: sales_draft_status_enum = commande, $glasses: [sales_glass_draft_insert_input!]! = [], $accessories: [sales_accessory_draft_insert_input!]! = [], $consumables: [sales_consumable_draft_insert_input!]! = []) {
  update_sales_draft_by_pk(pk_columns: {id: $id}, _set: {status: $status}) {
    id
  }
  insert_sales_glass_draft(objects: $glasses) {
    affected_rows
  }
  insert_sales_accessory_draft(objects: $accessories) {
    affected_rows
  }
  insert_sales_consumable_draft(objects: $consumables) {
    affected_rows
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class UpdateDraftGQL extends Apollo.Mutation<UpdateDraftMutation, UpdateDraftMutationVariables> {
    document = UpdateDraftDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const DeleteInvoicesDocument = gql`
    mutation deleteInvoices($ids: [uuid!]! = []) {
  delete_sales_invoice(where: {id: {_in: $ids}}) {
    affected_rows
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class DeleteInvoicesGQL extends Apollo.Mutation<DeleteInvoicesMutation, DeleteInvoicesMutationVariables> {
    document = DeleteInvoicesDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const InsertInvoiceDocument = gql`
    mutation InsertInvoice($client_id: uuid!, $contact_id: uuid, $company_id: uuid!, $payment_method: String!, $date: date!, $invoice_lines: [sales_invoice_line_insert_input!]! = [], $deliveries: [sales_invoice_delivery_insert_input!]! = [], $deliveries_ids: [uuid!]! = [], $amount_ttc: numeric, $amount_ht: numeric, $amount_tva: numeric) {
  insert_sales_invoice_one(
    object: {client_id: $client_id, amount_ttc: $amount_ttc, amount_ht: $amount_ht, amount_tva: $amount_tva, contact_id: $contact_id, company_id: $company_id, payment_method: $payment_method, date: $date, deliveries: {data: $deliveries}, invoice_lines: {data: $invoice_lines}}
  ) {
    id
    ref
    client_id
    company_id
    contact_id
    date
    deliveries {
      delivery_id
    }
    payment_method
    invoice_lines {
      id
      unit_price
      product_code
      product_label
      quantity
      total
      product_type
    }
    amount_ttc
    amount_ht
    amount_tva
  }
  update_sales_delivery(
    where: {id: {_in: $deliveries_ids}}
    _set: {status: "Facturé"}
  ) {
    affected_rows
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class InsertInvoiceGQL extends Apollo.Mutation<InsertInvoiceMutation, InsertInvoiceMutationVariables> {
    document = InsertInvoiceDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const UpdateInvoiceDocument = gql`
    mutation UpdateInvoice($id: uuid!, $client_id: uuid, $company_id: uuid, $contact_id: uuid, $date: date, $payment_method: String) {
  update_sales_invoice_by_pk(
    _set: {client_id: $client_id, company_id: $company_id, contact_id: $contact_id, date: $date, payment_method: $payment_method}
    pk_columns: {id: $id}
  ) {
    id
    client {
      name
      phone
      mail
    }
    company {
      id
      name
    }
    contact {
      mail
      name
      phone
    }
    date
    payment_method
    amount_ttc
    amount_ht
    amount_tva
    deliveries {
      delivery_id
    }
    ref
    createdAt
    updated_at
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class UpdateInvoiceGQL extends Apollo.Mutation<UpdateInvoiceMutation, UpdateInvoiceMutationVariables> {
    document = UpdateInvoiceDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const DeleteOrdersDocument = gql`
    mutation deleteOrders($ids: [Int!]! = []) {
  delete_sales_order(where: {id: {_in: $ids}}) {
    affected_rows
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class DeleteOrdersGQL extends Apollo.Mutation<DeleteOrdersMutation, DeleteOrdersMutationVariables> {
    document = DeleteOrdersDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const InsertOrderDocument = gql`
    mutation InsertOrder($draft_id: Int!, $company_id: uuid, $contact_id: uuid, $customer_id: uuid, $date: date, $deadline: date, $total_ht: numeric, $total_tax: numeric, $total_ttc: numeric, $payment_status: String = "non payé", $delivery_status: String = "non livré", $salepoint_id: uuid, $status: sales_draft_status_enum = commande, $amounts: [sales_amount_insert_input!]!) {
  insert_sales_order_one(
    object: {contact_id: $contact_id, customer_id: $customer_id, date: $date, deadline: $deadline, total_ht: $total_ht, total_tax: $total_tax, total_ttc: $total_ttc, delivery_status: $delivery_status, payment_status: $payment_status, salepoint_id: $salepoint_id, company_id: $company_id, draft_id: $draft_id}
  ) {
    company {
      name
      id
    }
    contact {
      code
      name
    }
    customer {
      code
      name
      phone
    }
    salepoint {
      name
    }
    date
    deadline
    draft_id
    id
    delivery_status
    payment_status
    total_ht
    total_tax
    total_ttc
  }
  insert_sales_amount(objects: $amounts) {
    affected_rows
  }
  update_sales_draft_by_pk(pk_columns: {id: $draft_id}, _set: {status: $status}) {
    id
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class InsertOrderGQL extends Apollo.Mutation<InsertOrderMutation, InsertOrderMutationVariables> {
    document = InsertOrderDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const UpdateOrderDocument = gql`
    mutation UpdateOrder($order_id: Int!, $total_ht: numeric, $total_tax: numeric, $total_ttc: numeric, $amounts: [sales_amount_insert_input!]!) {
  update_sales_order_by_pk(
    pk_columns: {id: $order_id}
    _set: {total_ht: $total_ht, total_tax: $total_tax, total_ttc: $total_ttc}
  ) {
    company {
      name
      id
    }
    contact {
      code
      name
    }
    customer {
      code
      name
      phone
    }
    salepoint {
      name
    }
    date
    deadline
    draft_id
    id
    delivery_status
    payment_status
    total_ht
    total_tax
    total_ttc
  }
  delete_sales_amount(where: {draft: {order: {id: {_eq: $order_id}}}}) {
    affected_rows
  }
  insert_sales_amount(objects: $amounts) {
    affected_rows
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class UpdateOrderGQL extends Apollo.Mutation<UpdateOrderMutation, UpdateOrderMutationVariables> {
    document = UpdateOrderDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const DeletePaymentDocument = gql`
    mutation DeletePayment($id: uuid!) {
  delete_sales_payment_by_pk(id: $id) {
    id
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class DeletePaymentGQL extends Apollo.Mutation<DeletePaymentMutation, DeletePaymentMutationVariables> {
    document = DeletePaymentDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const InsertPaymentDocument = gql`
    mutation InsertPayment($amount: numeric, $company_id: uuid, $customer_id: uuid, $date: date, $deadline: date, $order_id: Int, $payment_method: String, $comment: String, $paper_ref: String) {
  insert_sales_payment_one(
    object: {amount: $amount, company_id: $company_id, customer_id: $customer_id, date: $date, deadline: $deadline, order_id: $order_id, payment_method: $payment_method, comment: $comment, paper_ref: $paper_ref}
  ) {
    amount
    date
    deadline
    id
    order_id
    company {
      name
      id
    }
    customer_id
    payment_method
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class InsertPaymentGQL extends Apollo.Mutation<InsertPaymentMutation, InsertPaymentMutationVariables> {
    document = InsertPaymentDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const DeleteProductsDocument = gql`
    mutation DeleteProducts($ids: [uuid!]! = []) {
  delete_sales_product_draft(where: {id: {_in: $ids}}) {
    affected_rows
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class DeleteProductsGQL extends Apollo.Mutation<DeleteProductsMutation, DeleteProductsMutationVariables> {
    document = DeleteProductsDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const DeleteProductDraftDocument = gql`
    mutation DeleteProductDraft($id: uuid!) {
  delete_sales_product_draft_by_pk(id: $id) {
    id
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class DeleteProductDraftGQL extends Apollo.Mutation<DeleteProductDraftMutation, DeleteProductDraftMutationVariables> {
    document = DeleteProductDraftDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const InsertAccessoryDraftDocument = gql`
    mutation InsertAccessoryDraft($warehouse_id: uuid, $company_id: uuid, $company_name: String, $label: String, $price: numeric, $product_code: String, $quantity: numeric, $total_price: numeric, $type: sales_product_type_enum, $unit: String, $draft_id: Int, $substance_id: uuid) {
  insert_sales_accessory_draft_one(
    object: {product_draft: {data: {company_id: $company_id, warehouse_id: $warehouse_id, company_name: $company_name, label: $label, price: $price, product_code: $product_code, quantity: $quantity, total_price: $total_price, type: $type, unit: $unit, draft_id: $draft_id, substance_id: $substance_id}}}
  ) {
    id
    product_draft {
      company_name
      heigth
      id
      label
      m2
      ml
      price
      product_code
      quantity
      total_price
      type
      unit
      width
      substance_id
      warehouse_id
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class InsertAccessoryDraftGQL extends Apollo.Mutation<InsertAccessoryDraftMutation, InsertAccessoryDraftMutationVariables> {
    document = InsertAccessoryDraftDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const InsertBisItemDocument = gql`
    mutation InsertBisItem($glasses: [sales_glass_draft_insert_input!]!) {
  insert_sales_glass_draft(objects: $glasses) {
    returning {
      id
      product_draft {
        company_name
        heigth
        id
        label
        m2
        ml
        price
        product_code
        quantity
        total_price
        type
        unit
        width
        company_id
        count
        isRepeated
        isLaunched
        substance_id
        warehouse_id
        draft_id
        glass_draft {
          id
        }
        service_draft {
          labelFactory
          id
          product_draft {
            company_id
            company_name
            count
            delivered
            draft_id
            heigth
            id
            isLaunched
            isRepeated
            label
            m2
            ml
            price
            product_code
            quantity
            status
            substance_id
            total_price
            type
            unit
            warehouse_id
            width
          }
        }
        consumable_draft {
          id
          labelFactory
          product_draft {
            company_id
            company_name
            count
            delivered
            draft_id
            heigth
            id
            isLaunched
            isRepeated
            label
            m2
            ml
            price
            product_code
            quantity
            status
            substance_id
            type
            total_price
            unit
            warehouse_id
            width
          }
        }
      }
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class InsertBisItemGQL extends Apollo.Mutation<InsertBisItemMutation, InsertBisItemMutationVariables> {
    document = InsertBisItemDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const InsertConsumableDraftDocument = gql`
    mutation InsertConsumableDraft($company_id: uuid, $company_name: String, $label: String, $price: numeric, $product_code: String, $quantity: numeric, $total_price: numeric, $type: sales_product_type_enum, $unit: String, $draft_id: Int, $dependent_id: uuid, $m2: numeric, $ml: numeric, $substance_id: uuid, $warehouse_id: uuid, $isRepeated: Boolean = false, $labelFactory: String) {
  insert_sales_consumable_draft_one(
    object: {product_draft: {data: {company_id: $company_id, label: $label, price: $price, product_code: $product_code, company_name: $company_name, quantity: $quantity, total_price: $total_price, type: $type, unit: $unit, draft_id: $draft_id, m2: $m2, ml: $ml, substance_id: $substance_id, warehouse_id: $warehouse_id, isRepeated: $isRepeated}}, dependent_id: $dependent_id, labelFactory: $labelFactory}
  ) {
    id
    dependent_id
    product_draft {
      company_name
      heigth
      id
      label
      m2
      ml
      price
      product_code
      quantity
      isRepeated
      isLaunched
      total_price
      type
      unit
      width
      substance_id
      warehouse_id
      draft_id
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class InsertConsumableDraftGQL extends Apollo.Mutation<InsertConsumableDraftMutation, InsertConsumableDraftMutationVariables> {
    document = InsertConsumableDraftDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const InsertGlassDraftDocument = gql`
    mutation insertGlassDraft($heigth: numeric, $label: String, $m2: numeric, $ml: numeric, $price: numeric, $product_code: String, $quantity: numeric, $total_price: numeric, $type: sales_product_type_enum, $unit: String, $width: numeric, $draft_id: Int, $count: numeric, $warehouse_id: uuid, $company_id: uuid, $company_name: String, $substance_id: uuid, $isRepeated: Boolean = false) {
  insert_sales_glass_draft_one(
    object: {product_draft: {data: {heigth: $heigth, label: $label, m2: $m2, ml: $ml, price: $price, product_code: $product_code, quantity: $quantity, total_price: $total_price, type: $type, unit: $unit, width: $width, draft_id: $draft_id, count: $count, warehouse_id: $warehouse_id, company_id: $company_id, company_name: $company_name, substance_id: $substance_id, isRepeated: $isRepeated}}}
  ) {
    product_draft {
      company_name
      heigth
      id
      label
      m2
      ml
      price
      product_code
      quantity
      total_price
      type
      unit
      width
      company_id
      count
      isRepeated
      isLaunched
      substance_id
      warehouse_id
      draft_id
      glass_draft {
        id
      }
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class InsertGlassDraftGQL extends Apollo.Mutation<InsertGlassDraftMutation, InsertGlassDraftMutationVariables> {
    document = InsertGlassDraftDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const InsertManyConsumablesDocument = gql`
    mutation InsertManyConsumables($consumables: [sales_consumable_draft_insert_input!]!) {
  insert_sales_consumable_draft(objects: $consumables) {
    returning {
      id
      dependent_id
      product_draft {
        company_name
        heigth
        id
        label
        m2
        ml
        price
        product_code
        quantity
        total_price
        type
        unit
        isRepeated
        isLaunched
        width
        company_id
        count
        draft_id
      }
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class InsertManyConsumablesGQL extends Apollo.Mutation<InsertManyConsumablesMutation, InsertManyConsumablesMutationVariables> {
    document = InsertManyConsumablesDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const InsertManyGlassesDocument = gql`
    mutation InsertManyGlasses($glasses: [sales_glass_draft_insert_input!]!) {
  insert_sales_glass_draft(objects: $glasses) {
    returning {
      id
      product_draft {
        company_name
        heigth
        id
        label
        m2
        ml
        price
        product_code
        quantity
        total_price
        type
        unit
        width
        company_id
        count
        isRepeated
        isLaunched
        substance_id
        warehouse_id
        draft_id
        glass_draft {
          id
        }
      }
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class InsertManyGlassesGQL extends Apollo.Mutation<InsertManyGlassesMutation, InsertManyGlassesMutationVariables> {
    document = InsertManyGlassesDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const InsertManyProductsDocument = gql`
    mutation InsertManyProducts($objects: [sales_product_draft_insert_input!]!, $update_columns: [sales_product_draft_update_column!] = [quantity, count, m2, ml, width, heigth, price]) {
  insert_sales_product_draft(
    objects: $objects
    on_conflict: {constraint: product_draft_pkey, update_columns: $update_columns}
  ) {
    returning {
      company_name
      heigth
      id
      label
      m2
      ml
      price
      product_code
      quantity
      total_price
      type
      unit
      width
      company_id
      count
      isRepeated
      isLaunched
      substance_id
      warehouse_id
      draft_id
      glass_draft {
        id
      }
    }
    affected_rows
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class InsertManyProductsGQL extends Apollo.Mutation<InsertManyProductsMutation, InsertManyProductsMutationVariables> {
    document = InsertManyProductsDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const InsertManyServicesDocument = gql`
    mutation InsertManyServices($services: [sales_service_draft_insert_input!]!) {
  insert_sales_service_draft(objects: $services) {
    returning {
      id
      dependent_id
      product_draft {
        company_name
        heigth
        id
        label
        m2
        ml
        price
        product_code
        quantity
        total_price
        type
        unit
        isRepeated
        isLaunched
        width
        company_id
        count
        draft_id
      }
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class InsertManyServicesGQL extends Apollo.Mutation<InsertManyServicesMutation, InsertManyServicesMutationVariables> {
    document = InsertManyServicesDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const InsertServiceDraftDocument = gql`
    mutation insertServiceDraft($company_id: uuid, $company_name: String, $label: String, $price: numeric, $product_code: String, $total_price: numeric, $type: sales_product_type_enum, $unit: String, $dependent_id: uuid, $m2: numeric, $quantity: numeric, $ml: numeric, $draft_id: Int, $labelFactory: String, $warehouse_id: uuid = null) {
  insert_sales_service_draft_one(
    object: {product_draft: {data: {company_id: $company_id, company_name: $company_name, label: $label, price: $price, product_code: $product_code, total_price: $total_price, type: $type, unit: $unit, m2: $m2, quantity: $quantity, ml: $ml, draft_id: $draft_id, warehouse_id: $warehouse_id}}, dependent_id: $dependent_id, labelFactory: $labelFactory}
  ) {
    id
    dependent_id
    product_draft {
      company_name
      heigth
      id
      label
      m2
      ml
      price
      product_code
      quantity
      total_price
      type
      unit
      isRepeated
      isLaunched
      width
      company_id
      count
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class InsertServiceDraftGQL extends Apollo.Mutation<InsertServiceDraftMutation, InsertServiceDraftMutationVariables> {
    document = InsertServiceDraftDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const UpdateGlassesJobOrderIdDocument = gql`
    mutation UpdateGlassesJobOrderID($draft_id: Int, $isRepeated: Boolean = false) {
  update_sales_glass_draft(
    where: {_and: {product_draft: {draft_id: {_eq: $draft_id}, isRepeated: {_eq: $isRepeated}}}}
  ) {
    affected_rows
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class UpdateGlassesJobOrderIdGQL extends Apollo.Mutation<UpdateGlassesJobOrderIdMutation, UpdateGlassesJobOrderIdMutationVariables> {
    document = UpdateGlassesJobOrderIdDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const DeleteQuotationsDocument = gql`
    mutation deleteQuotations($ids: [Int!]! = []) {
  delete_sales_quotation(where: {id: {_in: $ids}}) {
    affected_rows
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class DeleteQuotationsGQL extends Apollo.Mutation<DeleteQuotationsMutation, DeleteQuotationsMutationVariables> {
    document = DeleteQuotationsDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const InsertQuotationDocument = gql`
    mutation InsertQuotation($draft_id: Int!, $company_id: uuid, $contact_id: uuid, $customer_id: uuid, $date: date, $deadline: date, $total_ht: numeric, $total_tax: numeric, $total_ttc: numeric, $salepoint_id: uuid, $status: sales_draft_status_enum = devis, $amounts: [sales_amount_insert_input!]!) {
  insert_sales_quotation_one(
    object: {contact_id: $contact_id, customer_id: $customer_id, date: $date, deadline: $deadline, total_ht: $total_ht, total_tax: $total_tax, total_ttc: $total_ttc, salepoint_id: $salepoint_id, company_id: $company_id, draft_id: $draft_id}
  ) {
    company {
      name
      id
    }
    customer {
      code
      id
      name
      phone
    }
    status
    ref
    date
    deadline
    draft_id
    id
    total_ht
    total_tax
    total_ttc
    date
    deadline
    draft_id
    contact_id
    salepoint {
      name
    }
  }
  insert_sales_amount(objects: $amounts) {
    affected_rows
  }
  update_sales_draft_by_pk(pk_columns: {id: $draft_id}, _set: {status: $status}) {
    id
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class InsertQuotationGQL extends Apollo.Mutation<InsertQuotationMutation, InsertQuotationMutationVariables> {
    document = InsertQuotationDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const TransformQuotationToOrderDocument = gql`
    mutation TransformQuotationToOrder($draft_id: Int!, $copierDraft_id: Int!, $status: sales_draft_status_enum = commande, $company_id: uuid, $customer_id: uuid, $contact_id: uuid, $date: date, $deadline: date, $salepoint_id: uuid, $total_ht: numeric, $total_tax: numeric, $total_ttc: numeric, $payment_status: String = "non payé", $delivery_status: String = "non livré", $quotationStatus: String = "confirmé", $glasses: [sales_glass_draft_insert_input!]! = [], $accessories: [sales_accessory_draft_insert_input!]! = [], $consumables: [sales_consumable_draft_insert_input!]! = []) {
  update_sales_draft_by_pk(
    pk_columns: {id: $copierDraft_id}
    _set: {status: $status}
  ) {
    status
    product_drafts {
      id
      label
      heigth
      company_name
      count
      delivered
      warehouse_id
      substance_id
      m2
      ml
      price
      product_code
      quantity
      status
      total_price
      type
      unit
      width
      isRepeated
      isLaunched
      draft_id
      glass_draft {
        id
      }
      consumable_draft {
        dependent_id
      }
      service_draft {
        dependent_id
      }
    }
  }
  insert_sales_order_one(
    object: {company_id: $company_id, draft_id: $copierDraft_id, customer_id: $customer_id, contact_id: $contact_id, date: $date, deadline: $deadline, total_ht: $total_ht, salepoint_id: $salepoint_id, total_tax: $total_tax, total_ttc: $total_ttc, payment_status: $payment_status, delivery_status: $delivery_status}
  ) {
    company {
      name
      id
    }
    contact {
      code
      name
    }
    customer {
      code
      name
      phone
    }
    salepoint {
      name
    }
    date
    deadline
    draft_id
    id
    delivery_status
    payment_status
    total_ht
    total_tax
    total_ttc
  }
  update_sales_quotation(
    where: {draft_id: {_eq: $draft_id}}
    _set: {status: $quotationStatus}
  ) {
    affected_rows
  }
  insert_sales_glass_draft(objects: $glasses) {
    affected_rows
  }
  insert_sales_accessory_draft(objects: $accessories) {
    affected_rows
  }
  insert_sales_consumable_draft(objects: $consumables) {
    affected_rows
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class TransformQuotationToOrderGQL extends Apollo.Mutation<TransformQuotationToOrderMutation, TransformQuotationToOrderMutationVariables> {
    document = TransformQuotationToOrderDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const UpdateQuotationDocument = gql`
    mutation updateQuotation($id: Int!, $params: sales_quotation_set_input) {
  update_sales_quotation_by_pk(pk_columns: {id: $id}, _set: $params) {
    id
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class UpdateQuotationGQL extends Apollo.Mutation<UpdateQuotationMutation, UpdateQuotationMutationVariables> {
    document = UpdateQuotationDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetDeliveriesByDocument = gql`
    query getDeliveriesBy($date: date_comparison_exp, $status: String_comparison_exp) {
  sales_delivery(where: {createdAt: $date, status: $status}) {
    id
    order_id
    status
    company {
      name
    }
    payment_method
    predicted_date
    isReturned
    client {
      name
      mail
    }
    contact {
      mail
      name
      phone
    }
    amount_ttc
    amount_tva
    amount_ht
    ref
    createdAt
    updated_at
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetDeliveriesByGQL extends Apollo.Query<GetDeliveriesByQuery, GetDeliveriesByQueryVariables> {
    document = GetDeliveriesByDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetDeliveryByIdDocument = gql`
    query GetDeliveryById($id: uuid!) {
  sales_delivery_by_pk(id: $id) {
    id
    status
    ref
    ref_num
    client_id
    company_id
    contact_id
    payment_method
    predicted_date
    isReturned
    order_id
    createdAt
    delivery_lines {
      id
      amount
      delivered
      product_draft_id
      product: product_draft {
        type
        label
        product_code
        price
        quantity
        count
        delivered
        unit
      }
    }
    amount_ttc
    amount_tva
    amount_ht
    company {
      name
    }
    client {
      name
      mail
      phone
      code
    }
    contact {
      mail
      name
      phone
    }
    order {
      ref
      ref_num
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetDeliveryByIdGQL extends Apollo.Query<GetDeliveryByIdQuery, GetDeliveryByIdQueryVariables> {
    document = GetDeliveryByIdDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetOrderDeliveriesDocument = gql`
    query GetOrderDeliveries($draft_id: Int_comparison_exp) {
  sales_delivery_line(where: {product_draft: {draft_id: $draft_id}}) {
    amount
    delivered
    id
    product_draft_id
    product_draft {
      company_name
      count
      delivered
      draft_id
      heigth
      id
      isLaunched
      isRepeated
      label
      m2
      ml
      price
      product_code
      quantity
      status
      substance_id
      total_price
      type
      unit
      warehouse_id
      width
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetOrderDeliveriesGQL extends Apollo.Query<GetOrderDeliveriesQuery, GetOrderDeliveriesQueryVariables> {
    document = GetOrderDeliveriesDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetAllDraftsDocument = gql`
    query GetAllDrafts {
  sales_draft(where: {_not: {order: {id: {_is_null: false}}}}) {
    id
    date
    status
    order {
      id
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetAllDraftsGQL extends Apollo.Query<GetAllDraftsQuery, GetAllDraftsQueryVariables> {
    document = GetAllDraftsDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetDraftByIdDocument = gql`
    query GetDraftById($id: Int!) {
  sales_draft_by_pk(id: $id) {
    date
    id
    status
    product_drafts {
      id
      product_code
      label
      quantity
      m2
      ml
      unit
      width
      heigth
      price
      total_price
      company_name
      delivered
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetDraftByIdGQL extends Apollo.Query<GetDraftByIdQuery, GetDraftByIdQueryVariables> {
    document = GetDraftByIdDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetAllInvoicesDocument = gql`
    query GetAllInvoices($dateStart: date, $dateEnd: date) {
  sales_invoice(where: {date: {_gte: $dateStart, _lte: $dateEnd}}) {
    id
    client {
      name
      phone
      mail
    }
    company {
      id
      name
    }
    contact {
      mail
      name
      phone
    }
    date
    payment_method
    deliveries {
      delivery_id
    }
    amount_tva
    amount_ttc
    amount_ht
    ref
    createdAt
    updated_at
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetAllInvoicesGQL extends Apollo.Query<GetAllInvoicesQuery, GetAllInvoicesQueryVariables> {
    document = GetAllInvoicesDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetDeliveriesAmountsDocument = gql`
    query getDeliveriesAmounts($ids: [uuid!]) {
  sales_delivery(where: {id: {_in: $ids}}) {
    amount_ht
    amount_ttc
    amount_tva
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetDeliveriesAmountsGQL extends Apollo.Query<GetDeliveriesAmountsQuery, GetDeliveriesAmountsQueryVariables> {
    document = GetDeliveriesAmountsDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetDeliveryLinesDocument = gql`
    query getDeliveryLines($deliveries: [uuid!]! = []) {
  sales_delivery_line(where: {delivery: {_in: $deliveries}, delivered: {_neq: 0}}) {
    delivered
    product_draft {
      type
      product_code
      price
      label
    }
    amount
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetDeliveryLinesGQL extends Apollo.Query<GetDeliveryLinesQuery, GetDeliveryLinesQueryVariables> {
    document = GetDeliveryLinesDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetInvoiceByIdDocument = gql`
    query GetInvoiceById($id: uuid!) {
  sales_invoice_by_pk(id: $id) {
    id
    ref
    ref_num
    client_id
    company_id
    contact_id
    date
    deliveries {
      delivery {
        ref
        ref_num
      }
      delivery_id
    }
    payment_method
    invoice_lines {
      id
      unit_price
      product_code
      product_label
      product_type
      quantity
      total
    }
    client {
      name
      phone
      mail
      code
    }
    company {
      id
      name
    }
    contact {
      mail
      name
      phone
    }
    amount_tva
    amount_ttc
    amount_ht
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetInvoiceByIdGQL extends Apollo.Query<GetInvoiceByIdQuery, GetInvoiceByIdQueryVariables> {
    document = GetInvoiceByIdDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetAllOrdersDocument = gql`
    query GetAllOrders($date: date_comparison_exp) {
  sales_order(where: {date: $date}) {
    company {
      name
      id
    }
    customer {
      code
      id
      name
      phone
    }
    delivery_status
    payment_status
    id
    draft_id
    ref
    total_ht
    total_tax
    total_ttc
    date
    deadline
    salepoint {
      name
    }
    ref
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetAllOrdersGQL extends Apollo.Query<GetAllOrdersQuery, GetAllOrdersQueryVariables> {
    document = GetAllOrdersDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetOrderByIdDocument = gql`
    query GetOrderById($id: Int!) {
  sales_order_by_pk(id: $id) {
    salepoint {
      name
    }
    company {
      name
      id
    }
    contact {
      code
      name
      phone
      id
    }
    customer {
      id
      name
      phone
      code
      ICE
    }
    date
    deadline
    draft_id
    id
    ref
    ref_num
    delivery_status
    payment_status
    total_ht
    total_tax
    total_ttc
    draft {
      status
      product_drafts {
        id
        label
        heigth
        company_name
        count
        delivered
        warehouse_id
        substance_id
        m2
        ml
        price
        product_code
        quantity
        status
        total_price
        type
        unit
        width
        isRepeated
        isLaunched
        draft_id
        glass_draft {
          id
        }
        consumable_draft {
          dependent_id
          labelFactory
        }
        service_draft {
          dependent_id
          labelFactory
        }
      }
    }
    payments {
      amount
      company {
        name
        id
      }
      date
      deadline
      paper_ref
      payment_method
      order_id
      id
      comment
      customer {
        name
        id
      }
    }
    deliveries {
      id
      ref
      ref_num
      amount_ht
      amount_ttc
      amount_tva
      client {
        code
        name
      }
      company {
        name
      }
      delivery_lines {
        delivered
        amount
        product_draft {
          id
          product_code
          label
          quantity
          total_price
          type
          width
          unit
          heigth
          company_name
          count
        }
      }
      createdAt
      payment_method
      isReturned
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetOrderByIdGQL extends Apollo.Query<GetOrderByIdQuery, GetOrderByIdQueryVariables> {
    document = GetOrderByIdDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetPaymentDocument = gql`
    query GetPayment($order_id: Int!) {
  sales_payment(where: {order_id: {_eq: $order_id}}) {
    amount
    company {
      name
      id
    }
    customer_id
    date
    deadline
    id
    payment_method
    order_id
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetPaymentGQL extends Apollo.Query<GetPaymentQuery, GetPaymentQueryVariables> {
    document = GetPaymentDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetProductsByTypeDocument = gql`
    query GetProductsByType($draft_id: Int!, $type: sales_product_type_enum) {
  sales_product_draft(where: {draft_id: {_eq: $draft_id}, type: {_eq: $type}}) {
    company_id
    company_name
    draft_id
    heigth
    id
    label
    m2
    ml
    price
    product_code
    quantity
    total_price
    type
    unit
    width
    glass_draft {
      id
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetProductsByTypeGQL extends Apollo.Query<GetProductsByTypeQuery, GetProductsByTypeQueryVariables> {
    document = GetProductsByTypeDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetProductsGroupDocument = gql`
    query GetProductsGroup($draft_id: Int!, $_nin: [sales_product_type_enum!]) {
  sales_product_draft(where: {draft_id: {_eq: $draft_id}, type: {_nin: $_nin}}) {
    company_id
    company_name
    draft_id
    heigth
    id
    label
    m2
    ml
    price
    product_code
    quantity
    total_price
    type
    unit
    width
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetProductsGroupGQL extends Apollo.Query<GetProductsGroupQuery, GetProductsGroupQueryVariables> {
    document = GetProductsGroupDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetAllQuotationsDocument = gql`
    query GetAllQuotations($dateStart: date, $dateEnd: date) {
  sales_quotation(where: {date: {_gte: $dateStart, _lte: $dateEnd}}) {
    company {
      name
      id
    }
    customer {
      code
      id
      name
      phone
    }
    status
    id
    ref
    total_ht
    total_tax
    total_ttc
    date
    deadline
    draft_id
    contact_id
    salepoint {
      name
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetAllQuotationsGQL extends Apollo.Query<GetAllQuotationsQuery, GetAllQuotationsQueryVariables> {
    document = GetAllQuotationsDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetQuotationByIdDocument = gql`
    query GetQuotationById($id: Int!) {
  sales_quotation_by_pk(id: $id) {
    company {
      name
      id
    }
    customer {
      id
      name
      phone
      code
    }
    contact_id
    draft {
      product_drafts {
        id
        label
        heigth
        company_name
        count
        delivered
        m2
        ml
        price
        product_code
        quantity
        status
        total_price
        type
        unit
        width
        glass_draft {
          id
        }
        consumable_draft {
          dependent_id
          labelFactory
        }
        service_draft {
          dependent_id
          labelFactory
        }
      }
    }
    date
    deadline
    draft_id
    id
    status
    total_ht
    total_tax
    total_ttc
    salepoint {
      id
      name
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetQuotationByIdGQL extends Apollo.Query<GetQuotationByIdQuery, GetQuotationByIdQueryVariables> {
    document = GetQuotationByIdDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }